
PS2403L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a5c  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000158c  08005c2c  08005c2c  00015c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071b8  080071b8  00020298  2**0
                  CONTENTS
  4 .ARM          00000000  080071b8  080071b8  00020298  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071b8  080071b8  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071b8  080071b8  000171b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071bc  080071bc  000171bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  080071c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000079c  20000298  08007458  00020298  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a34  08007458  00020a34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126ff  00000000  00000000  000202c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b81  00000000  00000000  000329c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004542  00000000  00000000  00035541  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000928  00000000  00000000  00039a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000d78  00000000  00000000  0003a3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000127a2  00000000  00000000  0003b128  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00009675  00000000  00000000  0004d8ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006afc0  00000000  00000000  00056f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000c1eff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000197c  00000000  00000000  000c1f7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000298 	.word	0x20000298
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c14 	.word	0x08005c14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000029c 	.word	0x2000029c
 800020c:	08005c14 	.word	0x08005c14

08000210 <flash_erase_page>:
 8000210:	4a0e      	ldr	r2, [pc, #56]	; (800024c <flash_erase_page+0x3c>)
 8000212:	4613      	mov	r3, r2
 8000214:	68d1      	ldr	r1, [r2, #12]
 8000216:	07c9      	lsls	r1, r1, #31
 8000218:	d4fc      	bmi.n	8000214 <flash_erase_page+0x4>
 800021a:	68d1      	ldr	r1, [r2, #12]
 800021c:	0689      	lsls	r1, r1, #26
 800021e:	bf44      	itt	mi
 8000220:	2120      	movmi	r1, #32
 8000222:	60d1      	strmi	r1, [r2, #12]
 8000224:	691a      	ldr	r2, [r3, #16]
 8000226:	f042 0202 	orr.w	r2, r2, #2
 800022a:	611a      	str	r2, [r3, #16]
 800022c:	6158      	str	r0, [r3, #20]
 800022e:	691a      	ldr	r2, [r3, #16]
 8000230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000234:	611a      	str	r2, [r3, #16]
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <flash_erase_page+0x3c>)
 8000238:	68da      	ldr	r2, [r3, #12]
 800023a:	0692      	lsls	r2, r2, #26
 800023c:	d5fc      	bpl.n	8000238 <flash_erase_page+0x28>
 800023e:	2220      	movs	r2, #32
 8000240:	60da      	str	r2, [r3, #12]
 8000242:	691a      	ldr	r2, [r3, #16]
 8000244:	f022 0202 	bic.w	r2, r2, #2
 8000248:	611a      	str	r2, [r3, #16]
 800024a:	4770      	bx	lr
 800024c:	40022000 	.word	0x40022000

08000250 <flash_unlock>:
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <flash_unlock+0x10>)
 8000252:	4a04      	ldr	r2, [pc, #16]	; (8000264 <flash_unlock+0x14>)
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40022000 	.word	0x40022000
 8000264:	45670123 	.word	0x45670123

08000268 <flash_lock>:
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <flash_lock+0xc>)
 800026a:	6913      	ldr	r3, [r2, #16]
 800026c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000270:	6113      	str	r3, [r2, #16]
 8000272:	4770      	bx	lr
 8000274:	40022000 	.word	0x40022000

08000278 <flash_write>:
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <flash_write+0x48>)
 800027a:	b510      	push	{r4, lr}
 800027c:	461a      	mov	r2, r3
 800027e:	68dc      	ldr	r4, [r3, #12]
 8000280:	07e4      	lsls	r4, r4, #31
 8000282:	d4fc      	bmi.n	800027e <flash_write+0x6>
 8000284:	68dc      	ldr	r4, [r3, #12]
 8000286:	06a4      	lsls	r4, r4, #26
 8000288:	bf44      	itt	mi
 800028a:	2420      	movmi	r4, #32
 800028c:	60dc      	strmi	r4, [r3, #12]
 800028e:	6913      	ldr	r3, [r2, #16]
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6113      	str	r3, [r2, #16]
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <flash_write+0x48>)
 8000298:	b28b      	uxth	r3, r1
 800029a:	8003      	strh	r3, [r0, #0]
 800029c:	4613      	mov	r3, r2
 800029e:	68d4      	ldr	r4, [r2, #12]
 80002a0:	06a4      	lsls	r4, r4, #26
 80002a2:	d5fc      	bpl.n	800029e <flash_write+0x26>
 80002a4:	2420      	movs	r4, #32
 80002a6:	0c09      	lsrs	r1, r1, #16
 80002a8:	60d4      	str	r4, [r2, #12]
 80002aa:	8041      	strh	r1, [r0, #2]
 80002ac:	68da      	ldr	r2, [r3, #12]
 80002ae:	0692      	lsls	r2, r2, #26
 80002b0:	d5fc      	bpl.n	80002ac <flash_write+0x34>
 80002b2:	2220      	movs	r2, #32
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	691a      	ldr	r2, [r3, #16]
 80002b8:	f022 0201 	bic.w	r2, r2, #1
 80002bc:	611a      	str	r2, [r3, #16]
 80002be:	bd10      	pop	{r4, pc}
 80002c0:	40022000 	.word	0x40022000

080002c4 <flash_write_block>:
 80002c4:	b570      	push	{r4, r5, r6, lr}
 80002c6:	b672      	cpsid	i
 80002c8:	f7ff ffc2 	bl	8000250 <flash_unlock>
 80002cc:	4812      	ldr	r0, [pc, #72]	; (8000318 <flash_write_block+0x54>)
 80002ce:	f005 f937 	bl	8005540 <printToBufferWithoutEndUART1>
 80002d2:	4d12      	ldr	r5, [pc, #72]	; (800031c <flash_write_block+0x58>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80002da:	4811      	ldr	r0, [pc, #68]	; (8000320 <flash_write_block+0x5c>)
 80002dc:	f005 f974 	bl	80055c8 <printToBufferUART1D>
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <flash_write_block+0x54>)
 80002e2:	f005 f92d 	bl	8005540 <printToBufferWithoutEndUART1>
 80002e6:	2200      	movs	r2, #0
 80002e8:	6829      	ldr	r1, [r5, #0]
 80002ea:	480e      	ldr	r0, [pc, #56]	; (8000324 <flash_write_block+0x60>)
 80002ec:	f005 f96c 	bl	80055c8 <printToBufferUART1D>
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <flash_write_block+0x64>)
 80002f2:	f7ff ff8d 	bl	8000210 <flash_erase_page>
 80002f6:	4c0c      	ldr	r4, [pc, #48]	; (8000328 <flash_write_block+0x64>)
 80002f8:	4e0c      	ldr	r6, [pc, #48]	; (800032c <flash_write_block+0x68>)
 80002fa:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 80002fe:	f5a3 33f2 	sub.w	r3, r3, #123904	; 0x1e400
 8000302:	4620      	mov	r0, r4
 8000304:	58e9      	ldr	r1, [r5, r3]
 8000306:	3404      	adds	r4, #4
 8000308:	f7ff ffb6 	bl	8000278 <flash_write>
 800030c:	42b4      	cmp	r4, r6
 800030e:	d1f4      	bne.n	80002fa <flash_write_block+0x36>
 8000310:	f7ff ffaa 	bl	8000268 <flash_lock>
 8000314:	b662      	cpsie	i
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	08006059 	.word	0x08006059
 800031c:	20000888 	.word	0x20000888
 8000320:	08006061 	.word	0x08006061
 8000324:	08006068 	.word	0x08006068
 8000328:	0801e400 	.word	0x0801e400
 800032c:	0801e59c 	.word	0x0801e59c

08000330 <flash_read_block>:
 8000330:	b510      	push	{r4, lr}
 8000332:	4b07      	ldr	r3, [pc, #28]	; (8000350 <flash_read_block+0x20>)
 8000334:	4807      	ldr	r0, [pc, #28]	; (8000354 <flash_read_block+0x24>)
 8000336:	4908      	ldr	r1, [pc, #32]	; (8000358 <flash_read_block+0x28>)
 8000338:	681c      	ldr	r4, [r3, #0]
 800033a:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800033e:	3304      	adds	r3, #4
 8000340:	f5a2 32f2 	sub.w	r2, r2, #123904	; 0x1e400
 8000344:	428b      	cmp	r3, r1
 8000346:	5014      	str	r4, [r2, r0]
 8000348:	d1f6      	bne.n	8000338 <flash_read_block+0x8>
 800034a:	2001      	movs	r0, #1
 800034c:	bd10      	pop	{r4, pc}
 800034e:	bf00      	nop
 8000350:	0801e400 	.word	0x0801e400
 8000354:	20000888 	.word	0x20000888
 8000358:	0801e59c 	.word	0x0801e59c

0800035c <flash_read>:
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035e:	6804      	ldr	r4, [r0, #0]
 8000360:	4607      	mov	r7, r0
 8000362:	428c      	cmp	r4, r1
 8000364:	460e      	mov	r6, r1
 8000366:	d301      	bcc.n	800036c <flash_read+0x10>
 8000368:	4294      	cmp	r4, r2
 800036a:	d91b      	bls.n	80003a4 <flash_read+0x48>
 800036c:	2500      	movs	r5, #0
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <flash_read+0x4c>)
 8000370:	480e      	ldr	r0, [pc, #56]	; (80003ac <flash_read+0x50>)
 8000372:	701d      	strb	r5, [r3, #0]
 8000374:	f005 f8e4 	bl	8005540 <printToBufferWithoutEndUART1>
 8000378:	462a      	mov	r2, r5
 800037a:	4639      	mov	r1, r7
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <flash_read+0x54>)
 800037e:	f005 f923 	bl	80055c8 <printToBufferUART1D>
 8000382:	480a      	ldr	r0, [pc, #40]	; (80003ac <flash_read+0x50>)
 8000384:	f005 f8dc 	bl	8005540 <printToBufferWithoutEndUART1>
 8000388:	4621      	mov	r1, r4
 800038a:	462a      	mov	r2, r5
 800038c:	4809      	ldr	r0, [pc, #36]	; (80003b4 <flash_read+0x58>)
 800038e:	f005 f91b 	bl	80055c8 <printToBufferUART1D>
 8000392:	4806      	ldr	r0, [pc, #24]	; (80003ac <flash_read+0x50>)
 8000394:	f005 f8d4 	bl	8005540 <printToBufferWithoutEndUART1>
 8000398:	462a      	mov	r2, r5
 800039a:	4907      	ldr	r1, [pc, #28]	; (80003b8 <flash_read+0x5c>)
 800039c:	4807      	ldr	r0, [pc, #28]	; (80003bc <flash_read+0x60>)
 800039e:	f005 f913 	bl	80055c8 <printToBufferUART1D>
 80003a2:	4634      	mov	r4, r6
 80003a4:	4620      	mov	r0, r4
 80003a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003a8:	20000000 	.word	0x20000000
 80003ac:	08006059 	.word	0x08006059
 80003b0:	08006019 	.word	0x08006019
 80003b4:	08006030 	.word	0x08006030
 80003b8:	0801ec00 	.word	0x0801ec00
 80003bc:	08006042 	.word	0x08006042

080003c0 <CalibrationWriteToFlash>:
 80003c0:	b510      	push	{r4, lr}
 80003c2:	4c19      	ldr	r4, [pc, #100]	; (8000428 <CalibrationWriteToFlash+0x68>)
 80003c4:	6860      	ldr	r0, [r4, #4]
 80003c6:	f7ff ff23 	bl	8000210 <flash_erase_page>
 80003ca:	e9d4 1000 	ldrd	r1, r0, [r4]
 80003ce:	f7ff ff53 	bl	8000278 <flash_write>
 80003d2:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80003d6:	f7ff ff4f 	bl	8000278 <flash_write>
 80003da:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 80003de:	f7ff ff4b 	bl	8000278 <flash_write>
 80003e2:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 80003e6:	f7ff ff47 	bl	8000278 <flash_write>
 80003ea:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 80003ee:	f7ff ff43 	bl	8000278 <flash_write>
 80003f2:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 80003f6:	f7ff ff3f 	bl	8000278 <flash_write>
 80003fa:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 80003fe:	f7ff ff3b 	bl	8000278 <flash_write>
 8000402:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 8000406:	f7ff ff37 	bl	8000278 <flash_write>
 800040a:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 800040e:	f7ff ff33 	bl	8000278 <flash_write>
 8000412:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
 8000416:	f7ff ff2f 	bl	8000278 <flash_write>
 800041a:	4804      	ldr	r0, [pc, #16]	; (800042c <CalibrationWriteToFlash+0x6c>)
 800041c:	f005 f890 	bl	8005540 <printToBufferWithoutEndUART1>
 8000420:	4803      	ldr	r0, [pc, #12]	; (8000430 <CalibrationWriteToFlash+0x70>)
 8000422:	f005 f823 	bl	800546c <printToBufferUART1>
 8000426:	bd10      	pop	{r4, pc}
 8000428:	20000004 	.word	0x20000004
 800042c:	08006059 	.word	0x08006059
 8000430:	08005d89 	.word	0x08005d89

08000434 <CalibrationFactoryWriteToFlash>:
 8000434:	b510      	push	{r4, lr}
 8000436:	4c19      	ldr	r4, [pc, #100]	; (800049c <CalibrationFactoryWriteToFlash+0x68>)
 8000438:	6860      	ldr	r0, [r4, #4]
 800043a:	f7ff fee9 	bl	8000210 <flash_erase_page>
 800043e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000442:	f7ff ff19 	bl	8000278 <flash_write>
 8000446:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800044a:	f7ff ff15 	bl	8000278 <flash_write>
 800044e:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000452:	f7ff ff11 	bl	8000278 <flash_write>
 8000456:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 800045a:	f7ff ff0d 	bl	8000278 <flash_write>
 800045e:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 8000462:	f7ff ff09 	bl	8000278 <flash_write>
 8000466:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 800046a:	f7ff ff05 	bl	8000278 <flash_write>
 800046e:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 8000472:	f7ff ff01 	bl	8000278 <flash_write>
 8000476:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 800047a:	f7ff fefd 	bl	8000278 <flash_write>
 800047e:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 8000482:	f7ff fef9 	bl	8000278 <flash_write>
 8000486:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
 800048a:	f7ff fef5 	bl	8000278 <flash_write>
 800048e:	4804      	ldr	r0, [pc, #16]	; (80004a0 <CalibrationFactoryWriteToFlash+0x6c>)
 8000490:	f005 f856 	bl	8005540 <printToBufferWithoutEndUART1>
 8000494:	4803      	ldr	r0, [pc, #12]	; (80004a4 <CalibrationFactoryWriteToFlash+0x70>)
 8000496:	f004 ffe9 	bl	800546c <printToBufferUART1>
 800049a:	bd10      	pop	{r4, pc}
 800049c:	20000054 	.word	0x20000054
 80004a0:	08006059 	.word	0x08006059
 80004a4:	08005d2c 	.word	0x08005d2c

080004a8 <CalibrationReadFromFlash>:
 80004a8:	b538      	push	{r3, r4, r5, lr}
 80004aa:	4c24      	ldr	r4, [pc, #144]	; (800053c <CalibrationReadFromFlash+0x94>)
 80004ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004b0:	2100      	movs	r1, #0
 80004b2:	6860      	ldr	r0, [r4, #4]
 80004b4:	f7ff ff52 	bl	800035c <flash_read>
 80004b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004bc:	6020      	str	r0, [r4, #0]
 80004be:	2100      	movs	r1, #0
 80004c0:	68e0      	ldr	r0, [r4, #12]
 80004c2:	f7ff ff4b 	bl	800035c <flash_read>
 80004c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004ca:	60a0      	str	r0, [r4, #8]
 80004cc:	2100      	movs	r1, #0
 80004ce:	6960      	ldr	r0, [r4, #20]
 80004d0:	f7ff ff44 	bl	800035c <flash_read>
 80004d4:	4d1a      	ldr	r5, [pc, #104]	; (8000540 <CalibrationReadFromFlash+0x98>)
 80004d6:	6120      	str	r0, [r4, #16]
 80004d8:	462a      	mov	r2, r5
 80004da:	210a      	movs	r1, #10
 80004dc:	69e0      	ldr	r0, [r4, #28]
 80004de:	f7ff ff3d 	bl	800035c <flash_read>
 80004e2:	462a      	mov	r2, r5
 80004e4:	61a0      	str	r0, [r4, #24]
 80004e6:	210a      	movs	r1, #10
 80004e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80004ea:	f7ff ff37 	bl	800035c <flash_read>
 80004ee:	462a      	mov	r2, r5
 80004f0:	6220      	str	r0, [r4, #32]
 80004f2:	210a      	movs	r1, #10
 80004f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80004f6:	f7ff ff31 	bl	800035c <flash_read>
 80004fa:	462a      	mov	r2, r5
 80004fc:	62a0      	str	r0, [r4, #40]	; 0x28
 80004fe:	210a      	movs	r1, #10
 8000500:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000502:	f7ff ff2b 	bl	800035c <flash_read>
 8000506:	462a      	mov	r2, r5
 8000508:	6320      	str	r0, [r4, #48]	; 0x30
 800050a:	210a      	movs	r1, #10
 800050c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800050e:	f7ff ff25 	bl	800035c <flash_read>
 8000512:	22c8      	movs	r2, #200	; 0xc8
 8000514:	63a0      	str	r0, [r4, #56]	; 0x38
 8000516:	2146      	movs	r1, #70	; 0x46
 8000518:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800051a:	f7ff ff1f 	bl	800035c <flash_read>
 800051e:	22c8      	movs	r2, #200	; 0xc8
 8000520:	6420      	str	r0, [r4, #64]	; 0x40
 8000522:	210a      	movs	r1, #10
 8000524:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000526:	f7ff ff19 	bl	800035c <flash_read>
 800052a:	64a0      	str	r0, [r4, #72]	; 0x48
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <CalibrationReadFromFlash+0x9c>)
 800052e:	f005 f807 	bl	8005540 <printToBufferWithoutEndUART1>
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <CalibrationReadFromFlash+0xa0>)
 8000534:	f004 ff9a 	bl	800546c <printToBufferUART1>
 8000538:	bd38      	pop	{r3, r4, r5, pc}
 800053a:	bf00      	nop
 800053c:	20000004 	.word	0x20000004
 8000540:	000186a0 	.word	0x000186a0
 8000544:	08006059 	.word	0x08006059
 8000548:	08005d4c 	.word	0x08005d4c

0800054c <CalibrationReadFromFlashForVerify>:
 800054c:	b538      	push	{r3, r4, r5, lr}
 800054e:	4c24      	ldr	r4, [pc, #144]	; (80005e0 <CalibrationReadFromFlashForVerify+0x94>)
 8000550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000554:	2100      	movs	r1, #0
 8000556:	6860      	ldr	r0, [r4, #4]
 8000558:	f7ff ff00 	bl	800035c <flash_read>
 800055c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000560:	6020      	str	r0, [r4, #0]
 8000562:	2100      	movs	r1, #0
 8000564:	68e0      	ldr	r0, [r4, #12]
 8000566:	f7ff fef9 	bl	800035c <flash_read>
 800056a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800056e:	60a0      	str	r0, [r4, #8]
 8000570:	2100      	movs	r1, #0
 8000572:	6960      	ldr	r0, [r4, #20]
 8000574:	f7ff fef2 	bl	800035c <flash_read>
 8000578:	4d1a      	ldr	r5, [pc, #104]	; (80005e4 <CalibrationReadFromFlashForVerify+0x98>)
 800057a:	6120      	str	r0, [r4, #16]
 800057c:	462a      	mov	r2, r5
 800057e:	210a      	movs	r1, #10
 8000580:	69e0      	ldr	r0, [r4, #28]
 8000582:	f7ff feeb 	bl	800035c <flash_read>
 8000586:	462a      	mov	r2, r5
 8000588:	61a0      	str	r0, [r4, #24]
 800058a:	210a      	movs	r1, #10
 800058c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800058e:	f7ff fee5 	bl	800035c <flash_read>
 8000592:	462a      	mov	r2, r5
 8000594:	6220      	str	r0, [r4, #32]
 8000596:	210a      	movs	r1, #10
 8000598:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800059a:	f7ff fedf 	bl	800035c <flash_read>
 800059e:	462a      	mov	r2, r5
 80005a0:	62a0      	str	r0, [r4, #40]	; 0x28
 80005a2:	210a      	movs	r1, #10
 80005a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80005a6:	f7ff fed9 	bl	800035c <flash_read>
 80005aa:	462a      	mov	r2, r5
 80005ac:	6320      	str	r0, [r4, #48]	; 0x30
 80005ae:	210a      	movs	r1, #10
 80005b0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80005b2:	f7ff fed3 	bl	800035c <flash_read>
 80005b6:	22c8      	movs	r2, #200	; 0xc8
 80005b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80005ba:	2146      	movs	r1, #70	; 0x46
 80005bc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80005be:	f7ff fecd 	bl	800035c <flash_read>
 80005c2:	22c8      	movs	r2, #200	; 0xc8
 80005c4:	6420      	str	r0, [r4, #64]	; 0x40
 80005c6:	210a      	movs	r1, #10
 80005c8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80005ca:	f7ff fec7 	bl	800035c <flash_read>
 80005ce:	64a0      	str	r0, [r4, #72]	; 0x48
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <CalibrationReadFromFlashForVerify+0x9c>)
 80005d2:	f004 ffb5 	bl	8005540 <printToBufferWithoutEndUART1>
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <CalibrationReadFromFlashForVerify+0xa0>)
 80005d8:	f004 ff48 	bl	800546c <printToBufferUART1>
 80005dc:	bd38      	pop	{r3, r4, r5, pc}
 80005de:	bf00      	nop
 80005e0:	200000a4 	.word	0x200000a4
 80005e4:	000186a0 	.word	0x000186a0
 80005e8:	08006059 	.word	0x08006059
 80005ec:	08005d66 	.word	0x08005d66

080005f0 <SettingsWriteToFlash>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	4c17      	ldr	r4, [pc, #92]	; (8000650 <SettingsWriteToFlash+0x60>)
 80005f4:	6860      	ldr	r0, [r4, #4]
 80005f6:	f7ff fe0b 	bl	8000210 <flash_erase_page>
 80005fa:	e9d4 1000 	ldrd	r1, r0, [r4]
 80005fe:	f7ff fe3b 	bl	8000278 <flash_write>
 8000602:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000606:	f7ff fe37 	bl	8000278 <flash_write>
 800060a:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 800060e:	f7ff fe33 	bl	8000278 <flash_write>
 8000612:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000616:	f7ff fe2f 	bl	8000278 <flash_write>
 800061a:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800061e:	f7ff fe2b 	bl	8000278 <flash_write>
 8000622:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 8000626:	f7ff fe27 	bl	8000278 <flash_write>
 800062a:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 800062e:	f7ff fe23 	bl	8000278 <flash_write>
 8000632:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 8000636:	f7ff fe1f 	bl	8000278 <flash_write>
 800063a:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 800063e:	f7ff fe1b 	bl	8000278 <flash_write>
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <SettingsWriteToFlash+0x64>)
 8000644:	f004 ff7c 	bl	8005540 <printToBufferWithoutEndUART1>
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <SettingsWriteToFlash+0x68>)
 800064a:	f004 ff0f 	bl	800546c <printToBufferUART1>
 800064e:	bd10      	pop	{r4, pc}
 8000650:	20000154 	.word	0x20000154
 8000654:	08006059 	.word	0x08006059
 8000658:	08006003 	.word	0x08006003

0800065c <SettingsFactoryWriteToFlash>:
 800065c:	b510      	push	{r4, lr}
 800065e:	4c17      	ldr	r4, [pc, #92]	; (80006bc <SettingsFactoryWriteToFlash+0x60>)
 8000660:	6860      	ldr	r0, [r4, #4]
 8000662:	f7ff fdd5 	bl	8000210 <flash_erase_page>
 8000666:	e9d4 1000 	ldrd	r1, r0, [r4]
 800066a:	f7ff fe05 	bl	8000278 <flash_write>
 800066e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000672:	f7ff fe01 	bl	8000278 <flash_write>
 8000676:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 800067a:	f7ff fdfd 	bl	8000278 <flash_write>
 800067e:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000682:	f7ff fdf9 	bl	8000278 <flash_write>
 8000686:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800068a:	f7ff fdf5 	bl	8000278 <flash_write>
 800068e:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 8000692:	f7ff fdf1 	bl	8000278 <flash_write>
 8000696:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 800069a:	f7ff fded 	bl	8000278 <flash_write>
 800069e:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 80006a2:	f7ff fde9 	bl	8000278 <flash_write>
 80006a6:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 80006aa:	f7ff fde5 	bl	8000278 <flash_write>
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <SettingsFactoryWriteToFlash+0x64>)
 80006b0:	f004 ff46 	bl	8005540 <printToBufferWithoutEndUART1>
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <SettingsFactoryWriteToFlash+0x68>)
 80006b6:	f004 fed9 	bl	800546c <printToBufferUART1>
 80006ba:	bd10      	pop	{r4, pc}
 80006bc:	2000019c 	.word	0x2000019c
 80006c0:	08006059 	.word	0x08006059
 80006c4:	08005faf 	.word	0x08005faf

080006c8 <SettingsReadFromFlash>:
 80006c8:	b510      	push	{r4, lr}
 80006ca:	4c22      	ldr	r4, [pc, #136]	; (8000754 <SettingsReadFromFlash+0x8c>)
 80006cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d0:	2100      	movs	r1, #0
 80006d2:	6860      	ldr	r0, [r4, #4]
 80006d4:	f7ff fe42 	bl	800035c <flash_read>
 80006d8:	220a      	movs	r2, #10
 80006da:	6020      	str	r0, [r4, #0]
 80006dc:	2101      	movs	r1, #1
 80006de:	68e0      	ldr	r0, [r4, #12]
 80006e0:	f7ff fe3c 	bl	800035c <flash_read>
 80006e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006e8:	60a0      	str	r0, [r4, #8]
 80006ea:	2101      	movs	r1, #1
 80006ec:	6960      	ldr	r0, [r4, #20]
 80006ee:	f7ff fe35 	bl	800035c <flash_read>
 80006f2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80006f6:	6120      	str	r0, [r4, #16]
 80006f8:	2101      	movs	r1, #1
 80006fa:	69e0      	ldr	r0, [r4, #28]
 80006fc:	f7ff fe2e 	bl	800035c <flash_read>
 8000700:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000704:	61a0      	str	r0, [r4, #24]
 8000706:	2101      	movs	r1, #1
 8000708:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800070a:	f7ff fe27 	bl	800035c <flash_read>
 800070e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000712:	6220      	str	r0, [r4, #32]
 8000714:	2100      	movs	r1, #0
 8000716:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000718:	f7ff fe20 	bl	800035c <flash_read>
 800071c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000720:	62a0      	str	r0, [r4, #40]	; 0x28
 8000722:	2100      	movs	r1, #0
 8000724:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000726:	f7ff fe19 	bl	800035c <flash_read>
 800072a:	2264      	movs	r2, #100	; 0x64
 800072c:	6320      	str	r0, [r4, #48]	; 0x30
 800072e:	2100      	movs	r1, #0
 8000730:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000732:	f7ff fe13 	bl	800035c <flash_read>
 8000736:	2203      	movs	r2, #3
 8000738:	63a0      	str	r0, [r4, #56]	; 0x38
 800073a:	2101      	movs	r1, #1
 800073c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800073e:	f7ff fe0d 	bl	800035c <flash_read>
 8000742:	6420      	str	r0, [r4, #64]	; 0x40
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <SettingsReadFromFlash+0x90>)
 8000746:	f004 fefb 	bl	8005540 <printToBufferWithoutEndUART1>
 800074a:	4804      	ldr	r0, [pc, #16]	; (800075c <SettingsReadFromFlash+0x94>)
 800074c:	f004 fe8e 	bl	800546c <printToBufferUART1>
 8000750:	bd10      	pop	{r4, pc}
 8000752:	bf00      	nop
 8000754:	20000154 	.word	0x20000154
 8000758:	08006059 	.word	0x08006059
 800075c:	08005fcc 	.word	0x08005fcc

08000760 <SettingsReadFromFlashForVerify>:
 8000760:	b510      	push	{r4, lr}
 8000762:	4c22      	ldr	r4, [pc, #136]	; (80007ec <SettingsReadFromFlashForVerify+0x8c>)
 8000764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000768:	2100      	movs	r1, #0
 800076a:	6860      	ldr	r0, [r4, #4]
 800076c:	f7ff fdf6 	bl	800035c <flash_read>
 8000770:	220a      	movs	r2, #10
 8000772:	6020      	str	r0, [r4, #0]
 8000774:	2101      	movs	r1, #1
 8000776:	68e0      	ldr	r0, [r4, #12]
 8000778:	f7ff fdf0 	bl	800035c <flash_read>
 800077c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000780:	60a0      	str	r0, [r4, #8]
 8000782:	2101      	movs	r1, #1
 8000784:	6960      	ldr	r0, [r4, #20]
 8000786:	f7ff fde9 	bl	800035c <flash_read>
 800078a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800078e:	6120      	str	r0, [r4, #16]
 8000790:	2101      	movs	r1, #1
 8000792:	69e0      	ldr	r0, [r4, #28]
 8000794:	f7ff fde2 	bl	800035c <flash_read>
 8000798:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800079c:	61a0      	str	r0, [r4, #24]
 800079e:	2101      	movs	r1, #1
 80007a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80007a2:	f7ff fddb 	bl	800035c <flash_read>
 80007a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80007aa:	6220      	str	r0, [r4, #32]
 80007ac:	2100      	movs	r1, #0
 80007ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80007b0:	f7ff fdd4 	bl	800035c <flash_read>
 80007b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80007b8:	62a0      	str	r0, [r4, #40]	; 0x28
 80007ba:	2100      	movs	r1, #0
 80007bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80007be:	f7ff fdcd 	bl	800035c <flash_read>
 80007c2:	2264      	movs	r2, #100	; 0x64
 80007c4:	6320      	str	r0, [r4, #48]	; 0x30
 80007c6:	2100      	movs	r1, #0
 80007c8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80007ca:	f7ff fdc7 	bl	800035c <flash_read>
 80007ce:	2203      	movs	r2, #3
 80007d0:	63a0      	str	r0, [r4, #56]	; 0x38
 80007d2:	2101      	movs	r1, #1
 80007d4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80007d6:	f7ff fdc1 	bl	800035c <flash_read>
 80007da:	6420      	str	r0, [r4, #64]	; 0x40
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <SettingsReadFromFlashForVerify+0x90>)
 80007de:	f004 feaf 	bl	8005540 <printToBufferWithoutEndUART1>
 80007e2:	4804      	ldr	r0, [pc, #16]	; (80007f4 <SettingsReadFromFlashForVerify+0x94>)
 80007e4:	f004 fe42 	bl	800546c <printToBufferUART1>
 80007e8:	bd10      	pop	{r4, pc}
 80007ea:	bf00      	nop
 80007ec:	200001e4 	.word	0x200001e4
 80007f0:	08006059 	.word	0x08006059
 80007f4:	08005fe3 	.word	0x08005fe3

080007f8 <DataWhenPowerOffWriteToFlash>:
 80007f8:	b538      	push	{r3, r4, r5, lr}
 80007fa:	4d12      	ldr	r5, [pc, #72]	; (8000844 <DataWhenPowerOffWriteToFlash+0x4c>)
 80007fc:	4c12      	ldr	r4, [pc, #72]	; (8000848 <DataWhenPowerOffWriteToFlash+0x50>)
 80007fe:	4628      	mov	r0, r5
 8000800:	f004 fe9e 	bl	8005540 <printToBufferWithoutEndUART1>
 8000804:	2200      	movs	r2, #0
 8000806:	68a1      	ldr	r1, [r4, #8]
 8000808:	4810      	ldr	r0, [pc, #64]	; (800084c <DataWhenPowerOffWriteToFlash+0x54>)
 800080a:	f004 fedd 	bl	80055c8 <printToBufferUART1D>
 800080e:	6860      	ldr	r0, [r4, #4]
 8000810:	f7ff fcfe 	bl	8000210 <flash_erase_page>
 8000814:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000818:	f7ff fd2e 	bl	8000278 <flash_write>
 800081c:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000820:	f7ff fd2a 	bl	8000278 <flash_write>
 8000824:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000828:	f7ff fd26 	bl	8000278 <flash_write>
 800082c:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000830:	f7ff fd22 	bl	8000278 <flash_write>
 8000834:	4628      	mov	r0, r5
 8000836:	f004 fe83 	bl	8005540 <printToBufferWithoutEndUART1>
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <DataWhenPowerOffWriteToFlash+0x58>)
 800083c:	f004 fe16 	bl	800546c <printToBufferUART1>
 8000840:	bd38      	pop	{r3, r4, r5, pc}
 8000842:	bf00      	nop
 8000844:	08006059 	.word	0x08006059
 8000848:	200000f4 	.word	0x200000f4
 800084c:	08005de9 	.word	0x08005de9
 8000850:	08005df8 	.word	0x08005df8

08000854 <DataWhenPowerOff_Factory_WriteToFlash>:
 8000854:	b510      	push	{r4, lr}
 8000856:	4c0d      	ldr	r4, [pc, #52]	; (800088c <DataWhenPowerOff_Factory_WriteToFlash+0x38>)
 8000858:	6860      	ldr	r0, [r4, #4]
 800085a:	f7ff fcd9 	bl	8000210 <flash_erase_page>
 800085e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000862:	f7ff fd09 	bl	8000278 <flash_write>
 8000866:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800086a:	f7ff fd05 	bl	8000278 <flash_write>
 800086e:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000872:	f7ff fd01 	bl	8000278 <flash_write>
 8000876:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 800087a:	f7ff fcfd 	bl	8000278 <flash_write>
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <DataWhenPowerOff_Factory_WriteToFlash+0x3c>)
 8000880:	f004 fe5e 	bl	8005540 <printToBufferWithoutEndUART1>
 8000884:	4803      	ldr	r0, [pc, #12]	; (8000894 <DataWhenPowerOff_Factory_WriteToFlash+0x40>)
 8000886:	f004 fdf1 	bl	800546c <printToBufferUART1>
 800088a:	bd10      	pop	{r4, pc}
 800088c:	20000114 	.word	0x20000114
 8000890:	08006059 	.word	0x08006059
 8000894:	08005e22 	.word	0x08005e22

08000898 <DataWhenPowerOffReadFromFlash>:
 8000898:	b538      	push	{r3, r4, r5, lr}
 800089a:	4c11      	ldr	r4, [pc, #68]	; (80008e0 <DataWhenPowerOffReadFromFlash+0x48>)
 800089c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a0:	2100      	movs	r1, #0
 80008a2:	6860      	ldr	r0, [r4, #4]
 80008a4:	f7ff fd5a 	bl	800035c <flash_read>
 80008a8:	4d0e      	ldr	r5, [pc, #56]	; (80008e4 <DataWhenPowerOffReadFromFlash+0x4c>)
 80008aa:	6020      	str	r0, [r4, #0]
 80008ac:	462a      	mov	r2, r5
 80008ae:	2100      	movs	r1, #0
 80008b0:	68e0      	ldr	r0, [r4, #12]
 80008b2:	f7ff fd53 	bl	800035c <flash_read>
 80008b6:	462a      	mov	r2, r5
 80008b8:	60a0      	str	r0, [r4, #8]
 80008ba:	2100      	movs	r1, #0
 80008bc:	6960      	ldr	r0, [r4, #20]
 80008be:	f7ff fd4d 	bl	800035c <flash_read>
 80008c2:	2201      	movs	r2, #1
 80008c4:	6120      	str	r0, [r4, #16]
 80008c6:	2100      	movs	r1, #0
 80008c8:	69e0      	ldr	r0, [r4, #28]
 80008ca:	f7ff fd47 	bl	800035c <flash_read>
 80008ce:	61a0      	str	r0, [r4, #24]
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <DataWhenPowerOffReadFromFlash+0x50>)
 80008d2:	f004 fe35 	bl	8005540 <printToBufferWithoutEndUART1>
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <DataWhenPowerOffReadFromFlash+0x54>)
 80008d8:	f004 fdc8 	bl	800546c <printToBufferUART1>
 80008dc:	bd38      	pop	{r3, r4, r5, pc}
 80008de:	bf00      	nop
 80008e0:	200000f4 	.word	0x200000f4
 80008e4:	ee6b2800 	.word	0xee6b2800
 80008e8:	08006059 	.word	0x08006059
 80008ec:	08005da2 	.word	0x08005da2

080008f0 <DataWhenPowerOffReadFromFlashForVerify>:
 80008f0:	b538      	push	{r3, r4, r5, lr}
 80008f2:	4c11      	ldr	r4, [pc, #68]	; (8000938 <DataWhenPowerOffReadFromFlashForVerify+0x48>)
 80008f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008f8:	2100      	movs	r1, #0
 80008fa:	6860      	ldr	r0, [r4, #4]
 80008fc:	f7ff fd2e 	bl	800035c <flash_read>
 8000900:	4d0e      	ldr	r5, [pc, #56]	; (800093c <DataWhenPowerOffReadFromFlashForVerify+0x4c>)
 8000902:	6020      	str	r0, [r4, #0]
 8000904:	462a      	mov	r2, r5
 8000906:	2100      	movs	r1, #0
 8000908:	68e0      	ldr	r0, [r4, #12]
 800090a:	f7ff fd27 	bl	800035c <flash_read>
 800090e:	462a      	mov	r2, r5
 8000910:	60a0      	str	r0, [r4, #8]
 8000912:	2100      	movs	r1, #0
 8000914:	6960      	ldr	r0, [r4, #20]
 8000916:	f7ff fd21 	bl	800035c <flash_read>
 800091a:	2201      	movs	r2, #1
 800091c:	6120      	str	r0, [r4, #16]
 800091e:	2100      	movs	r1, #0
 8000920:	69e0      	ldr	r0, [r4, #28]
 8000922:	f7ff fd1b 	bl	800035c <flash_read>
 8000926:	61a0      	str	r0, [r4, #24]
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <DataWhenPowerOffReadFromFlashForVerify+0x50>)
 800092a:	f004 fe09 	bl	8005540 <printToBufferWithoutEndUART1>
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <DataWhenPowerOffReadFromFlashForVerify+0x54>)
 8000930:	f004 fd9c 	bl	800546c <printToBufferUART1>
 8000934:	bd38      	pop	{r3, r4, r5, pc}
 8000936:	bf00      	nop
 8000938:	20000134 	.word	0x20000134
 800093c:	ee6b2800 	.word	0xee6b2800
 8000940:	08006059 	.word	0x08006059
 8000944:	08005dc1 	.word	0x08005dc1

08000948 <ReadFromFlash>:
 8000948:	b570      	push	{r4, r5, r6, lr}
 800094a:	2401      	movs	r4, #1
 800094c:	4d0e      	ldr	r5, [pc, #56]	; (8000988 <ReadFromFlash+0x40>)
 800094e:	702c      	strb	r4, [r5, #0]
 8000950:	b672      	cpsid	i
 8000952:	f7ff ffa1 	bl	8000898 <DataWhenPowerOffReadFromFlash>
 8000956:	f7ff feb7 	bl	80006c8 <SettingsReadFromFlash>
 800095a:	f7ff fda5 	bl	80004a8 <CalibrationReadFromFlash>
 800095e:	b662      	cpsie	i
 8000960:	782e      	ldrb	r6, [r5, #0]
 8000962:	480a      	ldr	r0, [pc, #40]	; (800098c <ReadFromFlash+0x44>)
 8000964:	b93e      	cbnz	r6, 8000976 <ReadFromFlash+0x2e>
 8000966:	f004 fdeb 	bl	8005540 <printToBufferWithoutEndUART1>
 800096a:	4809      	ldr	r0, [pc, #36]	; (8000990 <ReadFromFlash+0x48>)
 800096c:	f004 fd7e 	bl	800546c <printToBufferUART1>
 8000970:	702c      	strb	r4, [r5, #0]
 8000972:	4630      	mov	r0, r6
 8000974:	bd70      	pop	{r4, r5, r6, pc}
 8000976:	f004 fde3 	bl	8005540 <printToBufferWithoutEndUART1>
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <ReadFromFlash+0x4c>)
 800097c:	f004 fd76 	bl	800546c <printToBufferUART1>
 8000980:	4626      	mov	r6, r4
 8000982:	702c      	strb	r4, [r5, #0]
 8000984:	e7f5      	b.n	8000972 <ReadFromFlash+0x2a>
 8000986:	bf00      	nop
 8000988:	20000000 	.word	0x20000000
 800098c:	08006059 	.word	0x08006059
 8000990:	08005f7b 	.word	0x08005f7b
 8000994:	08005f94 	.word	0x08005f94

08000998 <CalcCRC8>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	4615      	mov	r5, r2
 800099c:	460c      	mov	r4, r1
 800099e:	b0c0      	sub	sp, #256	; 0x100
 80009a0:	4606      	mov	r6, r0
 80009a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a6:	4909      	ldr	r1, [pc, #36]	; (80009cc <CalcCRC8+0x34>)
 80009a8:	4668      	mov	r0, sp
 80009aa:	f005 f91f 	bl	8005bec <memcpy>
 80009ae:	4628      	mov	r0, r5
 80009b0:	3c01      	subs	r4, #1
 80009b2:	b2e4      	uxtb	r4, r4
 80009b4:	3401      	adds	r4, #1
 80009b6:	4434      	add	r4, r6
 80009b8:	f816 3b01 	ldrb.w	r3, [r6], #1
 80009bc:	4058      	eors	r0, r3
 80009be:	42a6      	cmp	r6, r4
 80009c0:	f81d 0000 	ldrb.w	r0, [sp, r0]
 80009c4:	d1f8      	bne.n	80009b8 <CalcCRC8+0x20>
 80009c6:	b040      	add	sp, #256	; 0x100
 80009c8:	bd70      	pop	{r4, r5, r6, pc}
 80009ca:	bf00      	nop
 80009cc:	08005c2c 	.word	0x08005c2c

080009d0 <CalibrationWriteToFlash_CRC>:
 80009d0:	b538      	push	{r3, r4, r5, lr}
 80009d2:	b672      	cpsid	i
 80009d4:	4d14      	ldr	r5, [pc, #80]	; (8000a28 <CalibrationWriteToFlash_CRC+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	214c      	movs	r1, #76	; 0x4c
 80009da:	4628      	mov	r0, r5
 80009dc:	f7ff ffdc 	bl	8000998 <CalcCRC8>
 80009e0:	4604      	mov	r4, r0
 80009e2:	f845 0c04 	str.w	r0, [r5, #-4]
 80009e6:	f7ff fc33 	bl	8000250 <flash_unlock>
 80009ea:	f7ff fce9 	bl	80003c0 <CalibrationWriteToFlash>
 80009ee:	f7ff fdad 	bl	800054c <CalibrationReadFromFlashForVerify>
 80009f2:	2200      	movs	r2, #0
 80009f4:	214c      	movs	r1, #76	; 0x4c
 80009f6:	480d      	ldr	r0, [pc, #52]	; (8000a2c <CalibrationWriteToFlash_CRC+0x5c>)
 80009f8:	f7ff ffce 	bl	8000998 <CalcCRC8>
 80009fc:	4284      	cmp	r4, r0
 80009fe:	480c      	ldr	r0, [pc, #48]	; (8000a30 <CalibrationWriteToFlash_CRC+0x60>)
 8000a00:	d109      	bne.n	8000a16 <CalibrationWriteToFlash_CRC+0x46>
 8000a02:	f004 fd9d 	bl	8005540 <printToBufferWithoutEndUART1>
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <CalibrationWriteToFlash_CRC+0x64>)
 8000a08:	f004 fd30 	bl	800546c <printToBufferUART1>
 8000a0c:	f7ff fc2c 	bl	8000268 <flash_lock>
 8000a10:	b662      	cpsie	i
 8000a12:	2001      	movs	r0, #1
 8000a14:	bd38      	pop	{r3, r4, r5, pc}
 8000a16:	f004 fd93 	bl	8005540 <printToBufferWithoutEndUART1>
 8000a1a:	4807      	ldr	r0, [pc, #28]	; (8000a38 <CalibrationWriteToFlash_CRC+0x68>)
 8000a1c:	f004 fd26 	bl	800546c <printToBufferUART1>
 8000a20:	f7ff fcce 	bl	80003c0 <CalibrationWriteToFlash>
 8000a24:	e7f2      	b.n	8000a0c <CalibrationWriteToFlash_CRC+0x3c>
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	200000a8 	.word	0x200000a8
 8000a30:	08006059 	.word	0x08006059
 8000a34:	08005e62 	.word	0x08005e62
 8000a38:	08005e87 	.word	0x08005e87

08000a3c <SettingsWriteToFlash_CRC>:
 8000a3c:	b538      	push	{r3, r4, r5, lr}
 8000a3e:	b672      	cpsid	i
 8000a40:	4d24      	ldr	r5, [pc, #144]	; (8000ad4 <SettingsWriteToFlash_CRC+0x98>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	2144      	movs	r1, #68	; 0x44
 8000a46:	4628      	mov	r0, r5
 8000a48:	f7ff ffa6 	bl	8000998 <CalcCRC8>
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	4822      	ldr	r0, [pc, #136]	; (8000ad8 <SettingsWriteToFlash_CRC+0x9c>)
 8000a50:	f004 fd76 	bl	8005540 <printToBufferWithoutEndUART1>
 8000a54:	2200      	movs	r2, #0
 8000a56:	4621      	mov	r1, r4
 8000a58:	4820      	ldr	r0, [pc, #128]	; (8000adc <SettingsWriteToFlash_CRC+0xa0>)
 8000a5a:	f004 fdb5 	bl	80055c8 <printToBufferUART1D>
 8000a5e:	481e      	ldr	r0, [pc, #120]	; (8000ad8 <SettingsWriteToFlash_CRC+0x9c>)
 8000a60:	f004 fd6e 	bl	8005540 <printToBufferWithoutEndUART1>
 8000a64:	2200      	movs	r2, #0
 8000a66:	2144      	movs	r1, #68	; 0x44
 8000a68:	481d      	ldr	r0, [pc, #116]	; (8000ae0 <SettingsWriteToFlash_CRC+0xa4>)
 8000a6a:	f004 fdad 	bl	80055c8 <printToBufferUART1D>
 8000a6e:	f845 4c04 	str.w	r4, [r5, #-4]
 8000a72:	f7ff fbed 	bl	8000250 <flash_unlock>
 8000a76:	f7ff fdbb 	bl	80005f0 <SettingsWriteToFlash>
 8000a7a:	f7ff fe71 	bl	8000760 <SettingsReadFromFlashForVerify>
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2144      	movs	r1, #68	; 0x44
 8000a82:	4818      	ldr	r0, [pc, #96]	; (8000ae4 <SettingsWriteToFlash_CRC+0xa8>)
 8000a84:	f7ff ff88 	bl	8000998 <CalcCRC8>
 8000a88:	4605      	mov	r5, r0
 8000a8a:	4813      	ldr	r0, [pc, #76]	; (8000ad8 <SettingsWriteToFlash_CRC+0x9c>)
 8000a8c:	f004 fd58 	bl	8005540 <printToBufferWithoutEndUART1>
 8000a90:	2200      	movs	r2, #0
 8000a92:	4629      	mov	r1, r5
 8000a94:	4811      	ldr	r0, [pc, #68]	; (8000adc <SettingsWriteToFlash_CRC+0xa0>)
 8000a96:	f004 fd97 	bl	80055c8 <printToBufferUART1D>
 8000a9a:	480f      	ldr	r0, [pc, #60]	; (8000ad8 <SettingsWriteToFlash_CRC+0x9c>)
 8000a9c:	f004 fd50 	bl	8005540 <printToBufferWithoutEndUART1>
 8000aa0:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <SettingsWriteToFlash_CRC+0xa4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2144      	movs	r1, #68	; 0x44
 8000aa6:	f004 fd8f 	bl	80055c8 <printToBufferUART1D>
 8000aaa:	42ac      	cmp	r4, r5
 8000aac:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <SettingsWriteToFlash_CRC+0x9c>)
 8000aae:	d109      	bne.n	8000ac4 <SettingsWriteToFlash_CRC+0x88>
 8000ab0:	f004 fd46 	bl	8005540 <printToBufferWithoutEndUART1>
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <SettingsWriteToFlash_CRC+0xac>)
 8000ab6:	f004 fcd9 	bl	800546c <printToBufferUART1>
 8000aba:	f7ff fbd5 	bl	8000268 <flash_lock>
 8000abe:	b662      	cpsie	i
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	bd38      	pop	{r3, r4, r5, pc}
 8000ac4:	f004 fd3c 	bl	8005540 <printToBufferWithoutEndUART1>
 8000ac8:	4808      	ldr	r0, [pc, #32]	; (8000aec <SettingsWriteToFlash_CRC+0xb0>)
 8000aca:	f004 fccf 	bl	800546c <printToBufferUART1>
 8000ace:	f7ff fd8f 	bl	80005f0 <SettingsWriteToFlash>
 8000ad2:	e7f2      	b.n	8000aba <SettingsWriteToFlash_CRC+0x7e>
 8000ad4:	20000158 	.word	0x20000158
 8000ad8:	08006059 	.word	0x08006059
 8000adc:	08005eb7 	.word	0x08005eb7
 8000ae0:	08005ec2 	.word	0x08005ec2
 8000ae4:	200001e8 	.word	0x200001e8
 8000ae8:	08005ece 	.word	0x08005ece
 8000aec:	08005ef0 	.word	0x08005ef0

08000af0 <DataWhenPowerOffWriteToFlash_CRC>:
 8000af0:	b570      	push	{r4, r5, r6, lr}
 8000af2:	b672      	cpsid	i
 8000af4:	4c1c      	ldr	r4, [pc, #112]	; (8000b68 <DataWhenPowerOffWriteToFlash_CRC+0x78>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	211c      	movs	r1, #28
 8000afa:	4620      	mov	r0, r4
 8000afc:	f7ff ff4c 	bl	8000998 <CalcCRC8>
 8000b00:	4605      	mov	r5, r0
 8000b02:	f844 0c04 	str.w	r0, [r4, #-4]
 8000b06:	f7ff fba3 	bl	8000250 <flash_unlock>
 8000b0a:	f7ff fe75 	bl	80007f8 <DataWhenPowerOffWriteToFlash>
 8000b0e:	f7ff feef 	bl	80008f0 <DataWhenPowerOffReadFromFlashForVerify>
 8000b12:	4816      	ldr	r0, [pc, #88]	; (8000b6c <DataWhenPowerOffWriteToFlash_CRC+0x7c>)
 8000b14:	f004 fd14 	bl	8005540 <printToBufferWithoutEndUART1>
 8000b18:	6961      	ldr	r1, [r4, #20]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	4814      	ldr	r0, [pc, #80]	; (8000b70 <DataWhenPowerOffWriteToFlash_CRC+0x80>)
 8000b1e:	4c15      	ldr	r4, [pc, #84]	; (8000b74 <DataWhenPowerOffWriteToFlash_CRC+0x84>)
 8000b20:	f004 fd52 	bl	80055c8 <printToBufferUART1D>
 8000b24:	4811      	ldr	r0, [pc, #68]	; (8000b6c <DataWhenPowerOffWriteToFlash_CRC+0x7c>)
 8000b26:	f004 fd0b 	bl	8005540 <printToBufferWithoutEndUART1>
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	69a1      	ldr	r1, [r4, #24]
 8000b2e:	4810      	ldr	r0, [pc, #64]	; (8000b70 <DataWhenPowerOffWriteToFlash_CRC+0x80>)
 8000b30:	f004 fd4a 	bl	80055c8 <printToBufferUART1D>
 8000b34:	2200      	movs	r2, #0
 8000b36:	211c      	movs	r1, #28
 8000b38:	1d20      	adds	r0, r4, #4
 8000b3a:	f7ff ff2d 	bl	8000998 <CalcCRC8>
 8000b3e:	4285      	cmp	r5, r0
 8000b40:	480a      	ldr	r0, [pc, #40]	; (8000b6c <DataWhenPowerOffWriteToFlash_CRC+0x7c>)
 8000b42:	d109      	bne.n	8000b58 <DataWhenPowerOffWriteToFlash_CRC+0x68>
 8000b44:	f004 fcfc 	bl	8005540 <printToBufferWithoutEndUART1>
 8000b48:	480b      	ldr	r0, [pc, #44]	; (8000b78 <DataWhenPowerOffWriteToFlash_CRC+0x88>)
 8000b4a:	f004 fc8f 	bl	800546c <printToBufferUART1>
 8000b4e:	f7ff fb8b 	bl	8000268 <flash_lock>
 8000b52:	b662      	cpsie	i
 8000b54:	2001      	movs	r0, #1
 8000b56:	bd70      	pop	{r4, r5, r6, pc}
 8000b58:	f004 fcf2 	bl	8005540 <printToBufferWithoutEndUART1>
 8000b5c:	4807      	ldr	r0, [pc, #28]	; (8000b7c <DataWhenPowerOffWriteToFlash_CRC+0x8c>)
 8000b5e:	f004 fc85 	bl	800546c <printToBufferUART1>
 8000b62:	f7ff fe49 	bl	80007f8 <DataWhenPowerOffWriteToFlash>
 8000b66:	e7f2      	b.n	8000b4e <DataWhenPowerOffWriteToFlash_CRC+0x5e>
 8000b68:	200000f8 	.word	0x200000f8
 8000b6c:	08006059 	.word	0x08006059
 8000b70:	08005e16 	.word	0x08005e16
 8000b74:	20000134 	.word	0x20000134
 8000b78:	08005f1d 	.word	0x08005f1d
 8000b7c:	08005f47 	.word	0x08005f47

08000b80 <FactoryWriteToFlash_CRC>:
 8000b80:	b538      	push	{r3, r4, r5, lr}
 8000b82:	484a      	ldr	r0, [pc, #296]	; (8000cac <FactoryWriteToFlash_CRC+0x12c>)
 8000b84:	f004 fcdc 	bl	8005540 <printToBufferWithoutEndUART1>
 8000b88:	4849      	ldr	r0, [pc, #292]	; (8000cb0 <FactoryWriteToFlash_CRC+0x130>)
 8000b8a:	f004 fc6f 	bl	800546c <printToBufferUART1>
 8000b8e:	b672      	cpsid	i
 8000b90:	4d48      	ldr	r5, [pc, #288]	; (8000cb4 <FactoryWriteToFlash_CRC+0x134>)
 8000b92:	f7ff fb5d 	bl	8000250 <flash_unlock>
 8000b96:	2200      	movs	r2, #0
 8000b98:	214c      	movs	r1, #76	; 0x4c
 8000b9a:	4628      	mov	r0, r5
 8000b9c:	f7ff fefc 	bl	8000998 <CalcCRC8>
 8000ba0:	4604      	mov	r4, r0
 8000ba2:	f845 0c04 	str.w	r0, [r5, #-4]
 8000ba6:	f7ff fc45 	bl	8000434 <CalibrationFactoryWriteToFlash>
 8000baa:	f7ff fccf 	bl	800054c <CalibrationReadFromFlashForVerify>
 8000bae:	2200      	movs	r2, #0
 8000bb0:	214c      	movs	r1, #76	; 0x4c
 8000bb2:	4841      	ldr	r0, [pc, #260]	; (8000cb8 <FactoryWriteToFlash_CRC+0x138>)
 8000bb4:	f7ff fef0 	bl	8000998 <CalcCRC8>
 8000bb8:	4284      	cmp	r4, r0
 8000bba:	483c      	ldr	r0, [pc, #240]	; (8000cac <FactoryWriteToFlash_CRC+0x12c>)
 8000bbc:	d15d      	bne.n	8000c7a <FactoryWriteToFlash_CRC+0xfa>
 8000bbe:	f004 fcbf 	bl	8005540 <printToBufferWithoutEndUART1>
 8000bc2:	483e      	ldr	r0, [pc, #248]	; (8000cbc <FactoryWriteToFlash_CRC+0x13c>)
 8000bc4:	f004 fc52 	bl	800546c <printToBufferUART1>
 8000bc8:	4d3d      	ldr	r5, [pc, #244]	; (8000cc0 <FactoryWriteToFlash_CRC+0x140>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2144      	movs	r1, #68	; 0x44
 8000bce:	4628      	mov	r0, r5
 8000bd0:	f7ff fee2 	bl	8000998 <CalcCRC8>
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	4835      	ldr	r0, [pc, #212]	; (8000cac <FactoryWriteToFlash_CRC+0x12c>)
 8000bd8:	f004 fcb2 	bl	8005540 <printToBufferWithoutEndUART1>
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4621      	mov	r1, r4
 8000be0:	4838      	ldr	r0, [pc, #224]	; (8000cc4 <FactoryWriteToFlash_CRC+0x144>)
 8000be2:	f004 fcf1 	bl	80055c8 <printToBufferUART1D>
 8000be6:	4831      	ldr	r0, [pc, #196]	; (8000cac <FactoryWriteToFlash_CRC+0x12c>)
 8000be8:	f004 fcaa 	bl	8005540 <printToBufferWithoutEndUART1>
 8000bec:	2200      	movs	r2, #0
 8000bee:	2144      	movs	r1, #68	; 0x44
 8000bf0:	4835      	ldr	r0, [pc, #212]	; (8000cc8 <FactoryWriteToFlash_CRC+0x148>)
 8000bf2:	f004 fce9 	bl	80055c8 <printToBufferUART1D>
 8000bf6:	f845 4c04 	str.w	r4, [r5, #-4]
 8000bfa:	f7ff fd2f 	bl	800065c <SettingsFactoryWriteToFlash>
 8000bfe:	f7ff fdaf 	bl	8000760 <SettingsReadFromFlashForVerify>
 8000c02:	2200      	movs	r2, #0
 8000c04:	2144      	movs	r1, #68	; 0x44
 8000c06:	4831      	ldr	r0, [pc, #196]	; (8000ccc <FactoryWriteToFlash_CRC+0x14c>)
 8000c08:	f7ff fec6 	bl	8000998 <CalcCRC8>
 8000c0c:	4605      	mov	r5, r0
 8000c0e:	4827      	ldr	r0, [pc, #156]	; (8000cac <FactoryWriteToFlash_CRC+0x12c>)
 8000c10:	f004 fc96 	bl	8005540 <printToBufferWithoutEndUART1>
 8000c14:	2200      	movs	r2, #0
 8000c16:	4629      	mov	r1, r5
 8000c18:	482a      	ldr	r0, [pc, #168]	; (8000cc4 <FactoryWriteToFlash_CRC+0x144>)
 8000c1a:	f004 fcd5 	bl	80055c8 <printToBufferUART1D>
 8000c1e:	4823      	ldr	r0, [pc, #140]	; (8000cac <FactoryWriteToFlash_CRC+0x12c>)
 8000c20:	f004 fc8e 	bl	8005540 <printToBufferWithoutEndUART1>
 8000c24:	4828      	ldr	r0, [pc, #160]	; (8000cc8 <FactoryWriteToFlash_CRC+0x148>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	2144      	movs	r1, #68	; 0x44
 8000c2a:	f004 fccd 	bl	80055c8 <printToBufferUART1D>
 8000c2e:	42ac      	cmp	r4, r5
 8000c30:	481e      	ldr	r0, [pc, #120]	; (8000cac <FactoryWriteToFlash_CRC+0x12c>)
 8000c32:	d12a      	bne.n	8000c8a <FactoryWriteToFlash_CRC+0x10a>
 8000c34:	f004 fc84 	bl	8005540 <printToBufferWithoutEndUART1>
 8000c38:	4825      	ldr	r0, [pc, #148]	; (8000cd0 <FactoryWriteToFlash_CRC+0x150>)
 8000c3a:	f004 fc17 	bl	800546c <printToBufferUART1>
 8000c3e:	4d25      	ldr	r5, [pc, #148]	; (8000cd4 <FactoryWriteToFlash_CRC+0x154>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	211c      	movs	r1, #28
 8000c44:	4628      	mov	r0, r5
 8000c46:	f7ff fea7 	bl	8000998 <CalcCRC8>
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	f845 0c04 	str.w	r0, [r5, #-4]
 8000c50:	f7ff fe00 	bl	8000854 <DataWhenPowerOff_Factory_WriteToFlash>
 8000c54:	f7ff fe4c 	bl	80008f0 <DataWhenPowerOffReadFromFlashForVerify>
 8000c58:	2200      	movs	r2, #0
 8000c5a:	211c      	movs	r1, #28
 8000c5c:	481e      	ldr	r0, [pc, #120]	; (8000cd8 <FactoryWriteToFlash_CRC+0x158>)
 8000c5e:	f7ff fe9b 	bl	8000998 <CalcCRC8>
 8000c62:	4284      	cmp	r4, r0
 8000c64:	4811      	ldr	r0, [pc, #68]	; (8000cac <FactoryWriteToFlash_CRC+0x12c>)
 8000c66:	d118      	bne.n	8000c9a <FactoryWriteToFlash_CRC+0x11a>
 8000c68:	f004 fc6a 	bl	8005540 <printToBufferWithoutEndUART1>
 8000c6c:	481b      	ldr	r0, [pc, #108]	; (8000cdc <FactoryWriteToFlash_CRC+0x15c>)
 8000c6e:	f004 fbfd 	bl	800546c <printToBufferUART1>
 8000c72:	f7ff faf9 	bl	8000268 <flash_lock>
 8000c76:	b662      	cpsie	i
 8000c78:	bd38      	pop	{r3, r4, r5, pc}
 8000c7a:	f004 fc61 	bl	8005540 <printToBufferWithoutEndUART1>
 8000c7e:	4818      	ldr	r0, [pc, #96]	; (8000ce0 <FactoryWriteToFlash_CRC+0x160>)
 8000c80:	f004 fbf4 	bl	800546c <printToBufferUART1>
 8000c84:	f7ff fbd6 	bl	8000434 <CalibrationFactoryWriteToFlash>
 8000c88:	e79e      	b.n	8000bc8 <FactoryWriteToFlash_CRC+0x48>
 8000c8a:	f004 fc59 	bl	8005540 <printToBufferWithoutEndUART1>
 8000c8e:	4815      	ldr	r0, [pc, #84]	; (8000ce4 <FactoryWriteToFlash_CRC+0x164>)
 8000c90:	f004 fbec 	bl	800546c <printToBufferUART1>
 8000c94:	f7ff fce2 	bl	800065c <SettingsFactoryWriteToFlash>
 8000c98:	e7d1      	b.n	8000c3e <FactoryWriteToFlash_CRC+0xbe>
 8000c9a:	f004 fc51 	bl	8005540 <printToBufferWithoutEndUART1>
 8000c9e:	4812      	ldr	r0, [pc, #72]	; (8000ce8 <FactoryWriteToFlash_CRC+0x168>)
 8000ca0:	f004 fbe4 	bl	800546c <printToBufferUART1>
 8000ca4:	f7ff fdd6 	bl	8000854 <DataWhenPowerOff_Factory_WriteToFlash>
 8000ca8:	e7e3      	b.n	8000c72 <FactoryWriteToFlash_CRC+0xf2>
 8000caa:	bf00      	nop
 8000cac:	08006059 	.word	0x08006059
 8000cb0:	08005e49 	.word	0x08005e49
 8000cb4:	20000058 	.word	0x20000058
 8000cb8:	200000a8 	.word	0x200000a8
 8000cbc:	08005e61 	.word	0x08005e61
 8000cc0:	200001a0 	.word	0x200001a0
 8000cc4:	08005eb6 	.word	0x08005eb6
 8000cc8:	08005ec1 	.word	0x08005ec1
 8000ccc:	200001e8 	.word	0x200001e8
 8000cd0:	08005ecd 	.word	0x08005ecd
 8000cd4:	20000118 	.word	0x20000118
 8000cd8:	20000138 	.word	0x20000138
 8000cdc:	08005f1c 	.word	0x08005f1c
 8000ce0:	08005e86 	.word	0x08005e86
 8000ce4:	08005eef 	.word	0x08005eef
 8000ce8:	08005f46 	.word	0x08005f46

08000cec <Generation_Coefficients_R_A_B>:
 8000cec:	4916      	ldr	r1, [pc, #88]	; (8000d48 <Generation_Coefficients_R_A_B+0x5c>)
 8000cee:	4817      	ldr	r0, [pc, #92]	; (8000d4c <Generation_Coefficients_R_A_B+0x60>)
 8000cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cf4:	f242 7c10 	movw	ip, #10000	; 0x2710
 8000cf8:	460d      	mov	r5, r1
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	4f14      	ldr	r7, [pc, #80]	; (8000d50 <Generation_Coefficients_R_A_B+0x64>)
 8000cfe:	f101 061c 	add.w	r6, r1, #28
 8000d02:	f9b1 e000 	ldrsh.w	lr, [r1]
 8000d06:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8000d0a:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 8000d0e:	eba2 020e 	sub.w	r2, r2, lr
 8000d12:	fb0c f202 	mul.w	r2, ip, r2
 8000d16:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8000d1a:	3104      	adds	r1, #4
 8000d1c:	eba3 0308 	sub.w	r3, r3, r8
 8000d20:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d24:	6043      	str	r3, [r0, #4]
 8000d26:	fb03 f308 	mul.w	r3, r3, r8
 8000d2a:	fb93 f3f7 	sdiv	r3, r3, r7
 8000d2e:	428e      	cmp	r6, r1
 8000d30:	4473      	add	r3, lr
 8000d32:	f8c0 8000 	str.w	r8, [r0]
 8000d36:	6083      	str	r3, [r0, #8]
 8000d38:	f100 000c 	add.w	r0, r0, #12
 8000d3c:	d1e1      	bne.n	8000d02 <Generation_Coefficients_R_A_B+0x16>
 8000d3e:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
 8000d42:	6563      	str	r3, [r4, #84]	; 0x54
 8000d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d48:	2000022c 	.word	0x2000022c
 8000d4c:	20000808 	.word	0x20000808
 8000d50:	ffffd8f0 	.word	0xffffd8f0

08000d54 <GetTemperature>:
 8000d54:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <GetTemperature+0x44>)
 8000d56:	b530      	push	{r4, r5, lr}
 8000d58:	6813      	ldr	r3, [r2, #0]
 8000d5a:	4283      	cmp	r3, r0
 8000d5c:	db18      	blt.n	8000d90 <GetTemperature+0x3c>
 8000d5e:	2100      	movs	r1, #0
 8000d60:	250c      	movs	r5, #12
 8000d62:	fb05 f301 	mul.w	r3, r5, r1
 8000d66:	18d4      	adds	r4, r2, r3
 8000d68:	58d3      	ldr	r3, [r2, r3]
 8000d6a:	4283      	cmp	r3, r0
 8000d6c:	db0b      	blt.n	8000d86 <GetTemperature+0x32>
 8000d6e:	68e3      	ldr	r3, [r4, #12]
 8000d70:	4283      	cmp	r3, r0
 8000d72:	da08      	bge.n	8000d86 <GetTemperature+0x32>
 8000d74:	6863      	ldr	r3, [r4, #4]
 8000d76:	4358      	muls	r0, r3
 8000d78:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d7c:	fb90 f0f3 	sdiv	r0, r0, r3
 8000d80:	68a3      	ldr	r3, [r4, #8]
 8000d82:	4418      	add	r0, r3
 8000d84:	bd30      	pop	{r4, r5, pc}
 8000d86:	3101      	adds	r1, #1
 8000d88:	2907      	cmp	r1, #7
 8000d8a:	d1ea      	bne.n	8000d62 <GetTemperature+0xe>
 8000d8c:	20c8      	movs	r0, #200	; 0xc8
 8000d8e:	e7f9      	b.n	8000d84 <GetTemperature+0x30>
 8000d90:	f06f 0009 	mvn.w	r0, #9
 8000d94:	e7f6      	b.n	8000d84 <GetTemperature+0x30>
 8000d96:	bf00      	nop
 8000d98:	20000808 	.word	0x20000808

08000d9c <WriteInLOG>:
 8000d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000da0:	4c53      	ldr	r4, [pc, #332]	; (8000ef0 <WriteInLOG+0x154>)
 8000da2:	4607      	mov	r7, r0
 8000da4:	6820      	ldr	r0, [r4, #0]
 8000da6:	f000 faaf 	bl	8001308 <itoa>
 8000daa:	2300      	movs	r3, #0
 8000dac:	6826      	ldr	r6, [r4, #0]
 8000dae:	0131      	lsls	r1, r6, #4
 8000db0:	198a      	adds	r2, r1, r6
 8000db2:	4422      	add	r2, r4
 8000db4:	f810 c003 	ldrb.w	ip, [r0, r3]
 8000db8:	461d      	mov	r5, r3
 8000dba:	3301      	adds	r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	f1bc 0f00 	cmp.w	ip, #0
 8000dc2:	d116      	bne.n	8000df2 <WriteInLOG+0x56>
 8000dc4:	198a      	adds	r2, r1, r6
 8000dc6:	18a0      	adds	r0, r4, r2
 8000dc8:	4405      	add	r5, r0
 8000dca:	203a      	movs	r0, #58	; 0x3a
 8000dcc:	1aff      	subs	r7, r7, r3
 8000dce:	7128      	strb	r0, [r5, #4]
 8000dd0:	f817 c003 	ldrb.w	ip, [r7, r3]
 8000dd4:	b2dd      	uxtb	r5, r3
 8000dd6:	f1bc 0f00 	cmp.w	ip, #0
 8000dda:	d10e      	bne.n	8000dfa <WriteInLOG+0x5e>
 8000ddc:	2320      	movs	r3, #32
 8000dde:	442a      	add	r2, r5
 8000de0:	3203      	adds	r2, #3
 8000de2:	4422      	add	r2, r4
 8000de4:	2d0f      	cmp	r5, #15
 8000de6:	d815      	bhi.n	8000e14 <WriteInLOG+0x78>
 8000de8:	3501      	adds	r5, #1
 8000dea:	f802 3f01 	strb.w	r3, [r2, #1]!
 8000dee:	b2ed      	uxtb	r5, r5
 8000df0:	e7f8      	b.n	8000de4 <WriteInLOG+0x48>
 8000df2:	4415      	add	r5, r2
 8000df4:	f885 c004 	strb.w	ip, [r5, #4]
 8000df8:	e7dc      	b.n	8000db4 <WriteInLOG+0x18>
 8000dfa:	2d0f      	cmp	r5, #15
 8000dfc:	d805      	bhi.n	8000e0a <WriteInLOG+0x6e>
 8000dfe:	1898      	adds	r0, r3, r2
 8000e00:	4420      	add	r0, r4
 8000e02:	f880 c004 	strb.w	ip, [r0, #4]
 8000e06:	3301      	adds	r3, #1
 8000e08:	e7e2      	b.n	8000dd0 <WriteInLOG+0x34>
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4431      	add	r1, r6
 8000e0e:	4421      	add	r1, r4
 8000e10:	440b      	add	r3, r1
 8000e12:	711a      	strb	r2, [r3, #4]
 8000e14:	4837      	ldr	r0, [pc, #220]	; (8000ef4 <WriteInLOG+0x158>)
 8000e16:	f004 fb93 	bl	8005540 <printToBufferWithoutEndUART1>
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4836      	ldr	r0, [pc, #216]	; (8000ef8 <WriteInLOG+0x15c>)
 8000e20:	f004 fbd2 	bl	80055c8 <printToBufferUART1D>
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8000e2a:	4422      	add	r2, r4
 8000e2c:	442a      	add	r2, r5
 8000e2e:	2500      	movs	r5, #0
 8000e30:	3301      	adds	r3, #1
 8000e32:	2b17      	cmp	r3, #23
 8000e34:	7115      	strb	r5, [r2, #4]
 8000e36:	6023      	str	r3, [r4, #0]
 8000e38:	d937      	bls.n	8000eaa <WriteInLOG+0x10e>
 8000e3a:	260a      	movs	r6, #10
 8000e3c:	46a8      	mov	r8, r5
 8000e3e:	f04f 0920 	mov.w	r9, #32
 8000e42:	4f2b      	ldr	r7, [pc, #172]	; (8000ef0 <WriteInLOG+0x154>)
 8000e44:	4628      	mov	r0, r5
 8000e46:	f000 fa5f 	bl	8001308 <itoa>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	012a      	lsls	r2, r5, #4
 8000e4e:	eb02 0c05 	add.w	ip, r2, r5
 8000e52:	44a4      	add	ip, r4
 8000e54:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f1be 0f00 	cmp.w	lr, #0
 8000e62:	d12e      	bne.n	8000ec2 <WriteInLOG+0x126>
 8000e64:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
 8000e68:	1950      	adds	r0, r2, r5
 8000e6a:	4420      	add	r0, r4
 8000e6c:	4401      	add	r1, r0
 8000e6e:	f881 c004 	strb.w	ip, [r1, #4]
 8000e72:	eb06 1106 	add.w	r1, r6, r6, lsl #4
 8000e76:	4421      	add	r1, r4
 8000e78:	eb00 0c03 	add.w	ip, r0, r3
 8000e7c:	f89c e004 	ldrb.w	lr, [ip, #4]
 8000e80:	f1be 0f00 	cmp.w	lr, #0
 8000e84:	d121      	bne.n	8000eca <WriteInLOG+0x12e>
 8000e86:	3b01      	subs	r3, #1
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	b2d9      	uxtb	r1, r3
 8000e8c:	290f      	cmp	r1, #15
 8000e8e:	d929      	bls.n	8000ee4 <WriteInLOG+0x148>
 8000e90:	442a      	add	r2, r5
 8000e92:	4422      	add	r2, r4
 8000e94:	3501      	adds	r5, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	2d0e      	cmp	r5, #14
 8000e9a:	f883 8004 	strb.w	r8, [r3, #4]
 8000e9e:	f107 0711 	add.w	r7, r7, #17
 8000ea2:	f106 0601 	add.w	r6, r6, #1
 8000ea6:	d1cd      	bne.n	8000e44 <WriteInLOG+0xa8>
 8000ea8:	6025      	str	r5, [r4, #0]
 8000eaa:	f7ff fa0b 	bl	80002c4 <flash_write_block>
 8000eae:	4811      	ldr	r0, [pc, #68]	; (8000ef4 <WriteInLOG+0x158>)
 8000eb0:	f004 fb46 	bl	8005540 <printToBufferWithoutEndUART1>
 8000eb4:	6821      	ldr	r1, [r4, #0]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ebc:	480f      	ldr	r0, [pc, #60]	; (8000efc <WriteInLOG+0x160>)
 8000ebe:	f004 bb83 	b.w	80055c8 <printToBufferUART1D>
 8000ec2:	4461      	add	r1, ip
 8000ec4:	f881 e004 	strb.w	lr, [r1, #4]
 8000ec8:	e7c4      	b.n	8000e54 <WriteInLOG+0xb8>
 8000eca:	eb01 0e03 	add.w	lr, r1, r3
 8000ece:	2d09      	cmp	r5, #9
 8000ed0:	bf8c      	ite	hi
 8000ed2:	f89e e004 	ldrbhi.w	lr, [lr, #4]
 8000ed6:	f89e e005 	ldrbls.w	lr, [lr, #5]
 8000eda:	3301      	adds	r3, #1
 8000edc:	f88c e004 	strb.w	lr, [ip, #4]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	e7c9      	b.n	8000e78 <WriteInLOG+0xdc>
 8000ee4:	18f9      	adds	r1, r7, r3
 8000ee6:	f881 9004 	strb.w	r9, [r1, #4]
 8000eea:	3301      	adds	r3, #1
 8000eec:	e7cd      	b.n	8000e8a <WriteInLOG+0xee>
 8000eee:	bf00      	nop
 8000ef0:	20000888 	.word	0x20000888
 8000ef4:	08006059 	.word	0x08006059
 8000ef8:	080062b7 	.word	0x080062b7
 8000efc:	080062bc 	.word	0x080062bc

08000f00 <WriteInLOGc>:
 8000f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f04:	4c53      	ldr	r4, [pc, #332]	; (8001054 <WriteInLOGc+0x154>)
 8000f06:	4680      	mov	r8, r0
 8000f08:	6820      	ldr	r0, [r4, #0]
 8000f0a:	460e      	mov	r6, r1
 8000f0c:	f000 f9fc 	bl	8001308 <itoa>
 8000f10:	2300      	movs	r3, #0
 8000f12:	6827      	ldr	r7, [r4, #0]
 8000f14:	0139      	lsls	r1, r7, #4
 8000f16:	19ca      	adds	r2, r1, r7
 8000f18:	4422      	add	r2, r4
 8000f1a:	f810 c003 	ldrb.w	ip, [r0, r3]
 8000f1e:	461d      	mov	r5, r3
 8000f20:	3301      	adds	r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f1bc 0f00 	cmp.w	ip, #0
 8000f28:	d116      	bne.n	8000f58 <WriteInLOGc+0x58>
 8000f2a:	19ca      	adds	r2, r1, r7
 8000f2c:	18a0      	adds	r0, r4, r2
 8000f2e:	4405      	add	r5, r0
 8000f30:	712e      	strb	r6, [r5, #4]
 8000f32:	eba8 0803 	sub.w	r8, r8, r3
 8000f36:	f818 c003 	ldrb.w	ip, [r8, r3]
 8000f3a:	b2dd      	uxtb	r5, r3
 8000f3c:	f1bc 0f00 	cmp.w	ip, #0
 8000f40:	d10e      	bne.n	8000f60 <WriteInLOGc+0x60>
 8000f42:	2320      	movs	r3, #32
 8000f44:	442a      	add	r2, r5
 8000f46:	3203      	adds	r2, #3
 8000f48:	4422      	add	r2, r4
 8000f4a:	2d0f      	cmp	r5, #15
 8000f4c:	d815      	bhi.n	8000f7a <WriteInLOGc+0x7a>
 8000f4e:	3501      	adds	r5, #1
 8000f50:	f802 3f01 	strb.w	r3, [r2, #1]!
 8000f54:	b2ed      	uxtb	r5, r5
 8000f56:	e7f8      	b.n	8000f4a <WriteInLOGc+0x4a>
 8000f58:	4415      	add	r5, r2
 8000f5a:	f885 c004 	strb.w	ip, [r5, #4]
 8000f5e:	e7dc      	b.n	8000f1a <WriteInLOGc+0x1a>
 8000f60:	2d0f      	cmp	r5, #15
 8000f62:	d805      	bhi.n	8000f70 <WriteInLOGc+0x70>
 8000f64:	1898      	adds	r0, r3, r2
 8000f66:	4420      	add	r0, r4
 8000f68:	f880 c004 	strb.w	ip, [r0, #4]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	e7e2      	b.n	8000f36 <WriteInLOGc+0x36>
 8000f70:	2200      	movs	r2, #0
 8000f72:	4439      	add	r1, r7
 8000f74:	4421      	add	r1, r4
 8000f76:	440b      	add	r3, r1
 8000f78:	711a      	strb	r2, [r3, #4]
 8000f7a:	4837      	ldr	r0, [pc, #220]	; (8001058 <WriteInLOGc+0x158>)
 8000f7c:	f004 fae0 	bl	8005540 <printToBufferWithoutEndUART1>
 8000f80:	2200      	movs	r2, #0
 8000f82:	4629      	mov	r1, r5
 8000f84:	4835      	ldr	r0, [pc, #212]	; (800105c <WriteInLOGc+0x15c>)
 8000f86:	f004 fb1f 	bl	80055c8 <printToBufferUART1D>
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8000f90:	4422      	add	r2, r4
 8000f92:	442a      	add	r2, r5
 8000f94:	2500      	movs	r5, #0
 8000f96:	3301      	adds	r3, #1
 8000f98:	2b17      	cmp	r3, #23
 8000f9a:	7115      	strb	r5, [r2, #4]
 8000f9c:	6023      	str	r3, [r4, #0]
 8000f9e:	d935      	bls.n	800100c <WriteInLOGc+0x10c>
 8000fa0:	270a      	movs	r7, #10
 8000fa2:	46a9      	mov	r9, r5
 8000fa4:	f04f 0a20 	mov.w	sl, #32
 8000fa8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001054 <WriteInLOGc+0x154>
 8000fac:	4628      	mov	r0, r5
 8000fae:	f000 f9ab 	bl	8001308 <itoa>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	012a      	lsls	r2, r5, #4
 8000fb6:	eb02 0c05 	add.w	ip, r2, r5
 8000fba:	44a4      	add	ip, r4
 8000fbc:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	f1be 0f00 	cmp.w	lr, #0
 8000fca:	d12b      	bne.n	8001024 <WriteInLOGc+0x124>
 8000fcc:	1950      	adds	r0, r2, r5
 8000fce:	4420      	add	r0, r4
 8000fd0:	4401      	add	r1, r0
 8000fd2:	710e      	strb	r6, [r1, #4]
 8000fd4:	eb07 1107 	add.w	r1, r7, r7, lsl #4
 8000fd8:	4421      	add	r1, r4
 8000fda:	eb00 0c03 	add.w	ip, r0, r3
 8000fde:	f89c e004 	ldrb.w	lr, [ip, #4]
 8000fe2:	f1be 0f00 	cmp.w	lr, #0
 8000fe6:	d121      	bne.n	800102c <WriteInLOGc+0x12c>
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	b2d9      	uxtb	r1, r3
 8000fee:	290f      	cmp	r1, #15
 8000ff0:	d929      	bls.n	8001046 <WriteInLOGc+0x146>
 8000ff2:	442a      	add	r2, r5
 8000ff4:	4422      	add	r2, r4
 8000ff6:	3501      	adds	r5, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	2d0e      	cmp	r5, #14
 8000ffc:	f883 9004 	strb.w	r9, [r3, #4]
 8001000:	f108 0811 	add.w	r8, r8, #17
 8001004:	f107 0701 	add.w	r7, r7, #1
 8001008:	d1d0      	bne.n	8000fac <WriteInLOGc+0xac>
 800100a:	6025      	str	r5, [r4, #0]
 800100c:	f7ff f95a 	bl	80002c4 <flash_write_block>
 8001010:	4811      	ldr	r0, [pc, #68]	; (8001058 <WriteInLOGc+0x158>)
 8001012:	f004 fa95 	bl	8005540 <printToBufferWithoutEndUART1>
 8001016:	6821      	ldr	r1, [r4, #0]
 8001018:	2200      	movs	r2, #0
 800101a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800101e:	4810      	ldr	r0, [pc, #64]	; (8001060 <WriteInLOGc+0x160>)
 8001020:	f004 bad2 	b.w	80055c8 <printToBufferUART1D>
 8001024:	4461      	add	r1, ip
 8001026:	f881 e004 	strb.w	lr, [r1, #4]
 800102a:	e7c7      	b.n	8000fbc <WriteInLOGc+0xbc>
 800102c:	eb01 0e03 	add.w	lr, r1, r3
 8001030:	2d09      	cmp	r5, #9
 8001032:	bf8c      	ite	hi
 8001034:	f89e e004 	ldrbhi.w	lr, [lr, #4]
 8001038:	f89e e005 	ldrbls.w	lr, [lr, #5]
 800103c:	3301      	adds	r3, #1
 800103e:	f88c e004 	strb.w	lr, [ip, #4]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	e7c9      	b.n	8000fda <WriteInLOGc+0xda>
 8001046:	eb08 0103 	add.w	r1, r8, r3
 800104a:	f881 a004 	strb.w	sl, [r1, #4]
 800104e:	3301      	adds	r3, #1
 8001050:	e7cc      	b.n	8000fec <WriteInLOGc+0xec>
 8001052:	bf00      	nop
 8001054:	20000888 	.word	0x20000888
 8001058:	08006059 	.word	0x08006059
 800105c:	080062b7 	.word	0x080062b7
 8001060:	080062bc 	.word	0x080062bc

08001064 <delay_us>:
 8001064:	2300      	movs	r3, #0
 8001066:	b084      	sub	sp, #16
 8001068:	2801      	cmp	r0, #1
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	d101      	bne.n	8001072 <delay_us+0xe>
 800106e:	9000      	str	r0, [sp, #0]
 8001070:	e005      	b.n	800107e <delay_us+0x1a>
 8001072:	2802      	cmp	r0, #2
 8001074:	d0fb      	beq.n	800106e <delay_us+0xa>
 8001076:	2803      	cmp	r0, #3
 8001078:	d11b      	bne.n	80010b2 <delay_us+0x4e>
 800107a:	2312      	movs	r3, #18
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <delay_us+0x60>)
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	9201      	str	r2, [sp, #4]
 8001084:	9a01      	ldr	r2, [sp, #4]
 8001086:	9202      	str	r2, [sp, #8]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	9203      	str	r2, [sp, #12]
 800108c:	9903      	ldr	r1, [sp, #12]
 800108e:	9a02      	ldr	r2, [sp, #8]
 8001090:	4291      	cmp	r1, r2
 8001092:	d304      	bcc.n	800109e <delay_us+0x3a>
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	9901      	ldr	r1, [sp, #4]
 8001098:	440a      	add	r2, r1
 800109a:	3201      	adds	r2, #1
 800109c:	9201      	str	r2, [sp, #4]
 800109e:	9a03      	ldr	r2, [sp, #12]
 80010a0:	9202      	str	r2, [sp, #8]
 80010a2:	9a01      	ldr	r2, [sp, #4]
 80010a4:	9803      	ldr	r0, [sp, #12]
 80010a6:	9900      	ldr	r1, [sp, #0]
 80010a8:	1a12      	subs	r2, r2, r0
 80010aa:	428a      	cmp	r2, r1
 80010ac:	d3ec      	bcc.n	8001088 <delay_us+0x24>
 80010ae:	b004      	add	sp, #16
 80010b0:	4770      	bx	lr
 80010b2:	d9e4      	bls.n	800107e <delay_us+0x1a>
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <delay_us+0x64>)
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <delay_us+0x68>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3803      	subs	r0, #3
 80010bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80010c0:	4358      	muls	r0, r3
 80010c2:	e7d4      	b.n	800106e <delay_us+0xa>
 80010c4:	e000e010 	.word	0xe000e010
 80010c8:	2000028c 	.word	0x2000028c
 80010cc:	000f4240 	.word	0x000f4240

080010d0 <delay_ms>:
 80010d0:	b507      	push	{r0, r1, r2, lr}
 80010d2:	9001      	str	r0, [sp, #4]
 80010d4:	9b01      	ldr	r3, [sp, #4]
 80010d6:	b913      	cbnz	r3, 80010de <delay_ms+0xe>
 80010d8:	b003      	add	sp, #12
 80010da:	f85d fb04 	ldr.w	pc, [sp], #4
 80010de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e2:	f7ff ffbf 	bl	8001064 <delay_us>
 80010e6:	9b01      	ldr	r3, [sp, #4]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	e7f2      	b.n	80010d4 <delay_ms+0x4>
	...

080010f0 <InfoToUARTBeforeStart>:
 80010f0:	b538      	push	{r3, r4, r5, lr}
 80010f2:	4c68      	ldr	r4, [pc, #416]	; (8001294 <InfoToUARTBeforeStart+0x1a4>)
 80010f4:	4d68      	ldr	r5, [pc, #416]	; (8001298 <InfoToUARTBeforeStart+0x1a8>)
 80010f6:	4620      	mov	r0, r4
 80010f8:	f004 fa22 	bl	8005540 <printToBufferWithoutEndUART1>
 80010fc:	6829      	ldr	r1, [r5, #0]
 80010fe:	2200      	movs	r2, #0
 8001100:	4866      	ldr	r0, [pc, #408]	; (800129c <InfoToUARTBeforeStart+0x1ac>)
 8001102:	f004 fa61 	bl	80055c8 <printToBufferUART1D>
 8001106:	4620      	mov	r0, r4
 8001108:	f004 fa1a 	bl	8005540 <printToBufferWithoutEndUART1>
 800110c:	68a9      	ldr	r1, [r5, #8]
 800110e:	2200      	movs	r2, #0
 8001110:	4863      	ldr	r0, [pc, #396]	; (80012a0 <InfoToUARTBeforeStart+0x1b0>)
 8001112:	f004 fa59 	bl	80055c8 <printToBufferUART1D>
 8001116:	4620      	mov	r0, r4
 8001118:	f004 fa12 	bl	8005540 <printToBufferWithoutEndUART1>
 800111c:	6929      	ldr	r1, [r5, #16]
 800111e:	2200      	movs	r2, #0
 8001120:	4860      	ldr	r0, [pc, #384]	; (80012a4 <InfoToUARTBeforeStart+0x1b4>)
 8001122:	f004 fa51 	bl	80055c8 <printToBufferUART1D>
 8001126:	4620      	mov	r0, r4
 8001128:	f004 fa0a 	bl	8005540 <printToBufferWithoutEndUART1>
 800112c:	69a9      	ldr	r1, [r5, #24]
 800112e:	2200      	movs	r2, #0
 8001130:	485d      	ldr	r0, [pc, #372]	; (80012a8 <InfoToUARTBeforeStart+0x1b8>)
 8001132:	f004 fa49 	bl	80055c8 <printToBufferUART1D>
 8001136:	4620      	mov	r0, r4
 8001138:	f004 fa02 	bl	8005540 <printToBufferWithoutEndUART1>
 800113c:	6a29      	ldr	r1, [r5, #32]
 800113e:	2200      	movs	r2, #0
 8001140:	485a      	ldr	r0, [pc, #360]	; (80012ac <InfoToUARTBeforeStart+0x1bc>)
 8001142:	f004 fa41 	bl	80055c8 <printToBufferUART1D>
 8001146:	4620      	mov	r0, r4
 8001148:	f004 f9fa 	bl	8005540 <printToBufferWithoutEndUART1>
 800114c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800114e:	2200      	movs	r2, #0
 8001150:	4857      	ldr	r0, [pc, #348]	; (80012b0 <InfoToUARTBeforeStart+0x1c0>)
 8001152:	f004 fa39 	bl	80055c8 <printToBufferUART1D>
 8001156:	4620      	mov	r0, r4
 8001158:	f004 f9f2 	bl	8005540 <printToBufferWithoutEndUART1>
 800115c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800115e:	2200      	movs	r2, #0
 8001160:	4854      	ldr	r0, [pc, #336]	; (80012b4 <InfoToUARTBeforeStart+0x1c4>)
 8001162:	f004 fa31 	bl	80055c8 <printToBufferUART1D>
 8001166:	4620      	mov	r0, r4
 8001168:	f004 f9ea 	bl	8005540 <printToBufferWithoutEndUART1>
 800116c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800116e:	2200      	movs	r2, #0
 8001170:	4851      	ldr	r0, [pc, #324]	; (80012b8 <InfoToUARTBeforeStart+0x1c8>)
 8001172:	f004 fa29 	bl	80055c8 <printToBufferUART1D>
 8001176:	4620      	mov	r0, r4
 8001178:	f004 f9e2 	bl	8005540 <printToBufferWithoutEndUART1>
 800117c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800117e:	2200      	movs	r2, #0
 8001180:	484e      	ldr	r0, [pc, #312]	; (80012bc <InfoToUARTBeforeStart+0x1cc>)
 8001182:	f004 fa21 	bl	80055c8 <printToBufferUART1D>
 8001186:	4620      	mov	r0, r4
 8001188:	f004 f9da 	bl	8005540 <printToBufferWithoutEndUART1>
 800118c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800118e:	2200      	movs	r2, #0
 8001190:	484b      	ldr	r0, [pc, #300]	; (80012c0 <InfoToUARTBeforeStart+0x1d0>)
 8001192:	4d4c      	ldr	r5, [pc, #304]	; (80012c4 <InfoToUARTBeforeStart+0x1d4>)
 8001194:	f004 fa18 	bl	80055c8 <printToBufferUART1D>
 8001198:	2032      	movs	r0, #50	; 0x32
 800119a:	f7ff ff99 	bl	80010d0 <delay_ms>
 800119e:	4620      	mov	r0, r4
 80011a0:	f004 f9ce 	bl	8005540 <printToBufferWithoutEndUART1>
 80011a4:	6829      	ldr	r1, [r5, #0]
 80011a6:	2200      	movs	r2, #0
 80011a8:	4847      	ldr	r0, [pc, #284]	; (80012c8 <InfoToUARTBeforeStart+0x1d8>)
 80011aa:	f004 fa0d 	bl	80055c8 <printToBufferUART1D>
 80011ae:	4620      	mov	r0, r4
 80011b0:	f004 f9c6 	bl	8005540 <printToBufferWithoutEndUART1>
 80011b4:	68a9      	ldr	r1, [r5, #8]
 80011b6:	2200      	movs	r2, #0
 80011b8:	4844      	ldr	r0, [pc, #272]	; (80012cc <InfoToUARTBeforeStart+0x1dc>)
 80011ba:	f004 fa05 	bl	80055c8 <printToBufferUART1D>
 80011be:	4620      	mov	r0, r4
 80011c0:	f004 f9be 	bl	8005540 <printToBufferWithoutEndUART1>
 80011c4:	6929      	ldr	r1, [r5, #16]
 80011c6:	2200      	movs	r2, #0
 80011c8:	4841      	ldr	r0, [pc, #260]	; (80012d0 <InfoToUARTBeforeStart+0x1e0>)
 80011ca:	f004 f9fd 	bl	80055c8 <printToBufferUART1D>
 80011ce:	4620      	mov	r0, r4
 80011d0:	f004 f9b6 	bl	8005540 <printToBufferWithoutEndUART1>
 80011d4:	69a9      	ldr	r1, [r5, #24]
 80011d6:	2200      	movs	r2, #0
 80011d8:	483e      	ldr	r0, [pc, #248]	; (80012d4 <InfoToUARTBeforeStart+0x1e4>)
 80011da:	f004 f9f5 	bl	80055c8 <printToBufferUART1D>
 80011de:	4620      	mov	r0, r4
 80011e0:	f004 f9ae 	bl	8005540 <printToBufferWithoutEndUART1>
 80011e4:	6a29      	ldr	r1, [r5, #32]
 80011e6:	2200      	movs	r2, #0
 80011e8:	483b      	ldr	r0, [pc, #236]	; (80012d8 <InfoToUARTBeforeStart+0x1e8>)
 80011ea:	f004 f9ed 	bl	80055c8 <printToBufferUART1D>
 80011ee:	4620      	mov	r0, r4
 80011f0:	f004 f9a6 	bl	8005540 <printToBufferWithoutEndUART1>
 80011f4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80011f6:	2200      	movs	r2, #0
 80011f8:	4838      	ldr	r0, [pc, #224]	; (80012dc <InfoToUARTBeforeStart+0x1ec>)
 80011fa:	f004 f9e5 	bl	80055c8 <printToBufferUART1D>
 80011fe:	4620      	mov	r0, r4
 8001200:	f004 f99e 	bl	8005540 <printToBufferWithoutEndUART1>
 8001204:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001206:	2200      	movs	r2, #0
 8001208:	4835      	ldr	r0, [pc, #212]	; (80012e0 <InfoToUARTBeforeStart+0x1f0>)
 800120a:	f004 f9dd 	bl	80055c8 <printToBufferUART1D>
 800120e:	4620      	mov	r0, r4
 8001210:	f004 f996 	bl	8005540 <printToBufferWithoutEndUART1>
 8001214:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001216:	2200      	movs	r2, #0
 8001218:	4832      	ldr	r0, [pc, #200]	; (80012e4 <InfoToUARTBeforeStart+0x1f4>)
 800121a:	f004 f9d5 	bl	80055c8 <printToBufferUART1D>
 800121e:	4620      	mov	r0, r4
 8001220:	f004 f98e 	bl	8005540 <printToBufferWithoutEndUART1>
 8001224:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001226:	2200      	movs	r2, #0
 8001228:	482f      	ldr	r0, [pc, #188]	; (80012e8 <InfoToUARTBeforeStart+0x1f8>)
 800122a:	f004 f9cd 	bl	80055c8 <printToBufferUART1D>
 800122e:	4d2f      	ldr	r5, [pc, #188]	; (80012ec <InfoToUARTBeforeStart+0x1fc>)
 8001230:	2032      	movs	r0, #50	; 0x32
 8001232:	f7ff ff4d 	bl	80010d0 <delay_ms>
 8001236:	4620      	mov	r0, r4
 8001238:	f004 f982 	bl	8005540 <printToBufferWithoutEndUART1>
 800123c:	6829      	ldr	r1, [r5, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	482b      	ldr	r0, [pc, #172]	; (80012f0 <InfoToUARTBeforeStart+0x200>)
 8001242:	f004 f9c1 	bl	80055c8 <printToBufferUART1D>
 8001246:	4620      	mov	r0, r4
 8001248:	f004 f97a 	bl	8005540 <printToBufferWithoutEndUART1>
 800124c:	68a9      	ldr	r1, [r5, #8]
 800124e:	2200      	movs	r2, #0
 8001250:	4828      	ldr	r0, [pc, #160]	; (80012f4 <InfoToUARTBeforeStart+0x204>)
 8001252:	f004 f9b9 	bl	80055c8 <printToBufferUART1D>
 8001256:	4620      	mov	r0, r4
 8001258:	f004 f972 	bl	8005540 <printToBufferWithoutEndUART1>
 800125c:	6929      	ldr	r1, [r5, #16]
 800125e:	2200      	movs	r2, #0
 8001260:	4825      	ldr	r0, [pc, #148]	; (80012f8 <InfoToUARTBeforeStart+0x208>)
 8001262:	f004 f9b1 	bl	80055c8 <printToBufferUART1D>
 8001266:	4620      	mov	r0, r4
 8001268:	f004 f96a 	bl	8005540 <printToBufferWithoutEndUART1>
 800126c:	69a9      	ldr	r1, [r5, #24]
 800126e:	2200      	movs	r2, #0
 8001270:	4822      	ldr	r0, [pc, #136]	; (80012fc <InfoToUARTBeforeStart+0x20c>)
 8001272:	f004 f9a9 	bl	80055c8 <printToBufferUART1D>
 8001276:	4620      	mov	r0, r4
 8001278:	f004 f962 	bl	8005540 <printToBufferWithoutEndUART1>
 800127c:	4b20      	ldr	r3, [pc, #128]	; (8001300 <InfoToUARTBeforeStart+0x210>)
 800127e:	4821      	ldr	r0, [pc, #132]	; (8001304 <InfoToUARTBeforeStart+0x214>)
 8001280:	6819      	ldr	r1, [r3, #0]
 8001282:	2200      	movs	r2, #0
 8001284:	f004 f9a0 	bl	80055c8 <printToBufferUART1D>
 8001288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800128c:	2032      	movs	r0, #50	; 0x32
 800128e:	f7ff bf1f 	b.w	80010d0 <delay_ms>
 8001292:	bf00      	nop
 8001294:	0800606e 	.word	0x0800606e
 8001298:	20000004 	.word	0x20000004
 800129c:	08006075 	.word	0x08006075
 80012a0:	08006088 	.word	0x08006088
 80012a4:	080060a6 	.word	0x080060a6
 80012a8:	080060c5 	.word	0x080060c5
 80012ac:	080060e2 	.word	0x080060e2
 80012b0:	08006100 	.word	0x08006100
 80012b4:	0800611d 	.word	0x0800611d
 80012b8:	0800613b 	.word	0x0800613b
 80012bc:	08006159 	.word	0x08006159
 80012c0:	08006177 	.word	0x08006177
 80012c4:	20000154 	.word	0x20000154
 80012c8:	0800618f 	.word	0x0800618f
 80012cc:	080061a3 	.word	0x080061a3
 80012d0:	080061bc 	.word	0x080061bc
 80012d4:	080061c9 	.word	0x080061c9
 80012d8:	080061d6 	.word	0x080061d6
 80012dc:	080061e3 	.word	0x080061e3
 80012e0:	080061f1 	.word	0x080061f1
 80012e4:	08006203 	.word	0x08006203
 80012e8:	08006216 	.word	0x08006216
 80012ec:	200000f4 	.word	0x200000f4
 80012f0:	08006233 	.word	0x08006233
 80012f4:	0800624f 	.word	0x0800624f
 80012f8:	08006277 	.word	0x08006277
 80012fc:	08006299 	.word	0x08006299
 8001300:	2000028c 	.word	0x2000028c
 8001304:	080062a5 	.word	0x080062a5

08001308 <itoa>:
 8001308:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800130a:	2200      	movs	r2, #0
 800130c:	260a      	movs	r6, #10
 800130e:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 8001312:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 8001316:	ad04      	add	r5, sp, #16
 8001318:	b2d4      	uxtb	r4, r2
 800131a:	442a      	add	r2, r5
 800131c:	fb91 f5f6 	sdiv	r5, r1, r6
 8001320:	fb06 1115 	mls	r1, r6, r5, r1
 8001324:	1c63      	adds	r3, r4, #1
 8001326:	3130      	adds	r1, #48	; 0x30
 8001328:	f802 1c10 	strb.w	r1, [r2, #-16]
 800132c:	b25b      	sxtb	r3, r3
 800132e:	1e29      	subs	r1, r5, #0
 8001330:	461a      	mov	r2, r3
 8001332:	dcf0      	bgt.n	8001316 <itoa+0xe>
 8001334:	2800      	cmp	r0, #0
 8001336:	da06      	bge.n	8001346 <itoa+0x3e>
 8001338:	a904      	add	r1, sp, #16
 800133a:	440a      	add	r2, r1
 800133c:	212d      	movs	r1, #45	; 0x2d
 800133e:	1ca3      	adds	r3, r4, #2
 8001340:	f802 1c10 	strb.w	r1, [r2, #-16]
 8001344:	b25b      	sxtb	r3, r3
 8001346:	2200      	movs	r2, #0
 8001348:	a904      	add	r1, sp, #16
 800134a:	4419      	add	r1, r3
 800134c:	4c0a      	ldr	r4, [pc, #40]	; (8001378 <itoa+0x70>)
 800134e:	f801 2c10 	strb.w	r2, [r1, #-16]
 8001352:	b2d0      	uxtb	r0, r2
 8001354:	1a19      	subs	r1, r3, r0
 8001356:	4293      	cmp	r3, r2
 8001358:	b249      	sxtb	r1, r1
 800135a:	d104      	bne.n	8001366 <itoa+0x5e>
 800135c:	2200      	movs	r2, #0
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <itoa+0x70>)
 8001360:	54e2      	strb	r2, [r4, r3]
 8001362:	b004      	add	sp, #16
 8001364:	bd70      	pop	{r4, r5, r6, pc}
 8001366:	ad04      	add	r5, sp, #16
 8001368:	4429      	add	r1, r5
 800136a:	f811 1c11 	ldrb.w	r1, [r1, #-17]
 800136e:	54a1      	strb	r1, [r4, r2]
 8001370:	1c42      	adds	r2, r0, #1
 8001372:	b252      	sxtb	r2, r2
 8001374:	e7ed      	b.n	8001352 <itoa+0x4a>
 8001376:	bf00      	nop
 8001378:	20000758 	.word	0x20000758

0800137c <itoaP>:
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137e:	2300      	movs	r3, #0
 8001380:	270a      	movs	r7, #10
 8001382:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 8001386:	b085      	sub	sp, #20
 8001388:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
 800138c:	ae04      	add	r6, sp, #16
 800138e:	b2dd      	uxtb	r5, r3
 8001390:	4433      	add	r3, r6
 8001392:	fb94 f6f7 	sdiv	r6, r4, r7
 8001396:	fb07 4416 	mls	r4, r7, r6, r4
 800139a:	1c6a      	adds	r2, r5, #1
 800139c:	3430      	adds	r4, #48	; 0x30
 800139e:	f803 4c10 	strb.w	r4, [r3, #-16]
 80013a2:	b252      	sxtb	r2, r2
 80013a4:	1e34      	subs	r4, r6, #0
 80013a6:	4613      	mov	r3, r2
 80013a8:	dcf0      	bgt.n	800138c <itoaP+0x10>
 80013aa:	2800      	cmp	r0, #0
 80013ac:	da06      	bge.n	80013bc <itoaP+0x40>
 80013ae:	a804      	add	r0, sp, #16
 80013b0:	4403      	add	r3, r0
 80013b2:	202d      	movs	r0, #45	; 0x2d
 80013b4:	1caa      	adds	r2, r5, #2
 80013b6:	f803 0c10 	strb.w	r0, [r3, #-16]
 80013ba:	b252      	sxtb	r2, r2
 80013bc:	2300      	movs	r3, #0
 80013be:	a804      	add	r0, sp, #16
 80013c0:	4410      	add	r0, r2
 80013c2:	f800 3c10 	strb.w	r3, [r0, #-16]
 80013c6:	b2dd      	uxtb	r5, r3
 80013c8:	1b54      	subs	r4, r2, r5
 80013ca:	429a      	cmp	r2, r3
 80013cc:	b264      	sxtb	r4, r4
 80013ce:	eb01 0003 	add.w	r0, r1, r3
 80013d2:	d104      	bne.n	80013de <itoaP+0x62>
 80013d4:	2300      	movs	r3, #0
 80013d6:	7003      	strb	r3, [r0, #0]
 80013d8:	4608      	mov	r0, r1
 80013da:	b005      	add	sp, #20
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	a804      	add	r0, sp, #16
 80013e0:	4404      	add	r4, r0
 80013e2:	f814 0c11 	ldrb.w	r0, [r4, #-17]
 80013e6:	54c8      	strb	r0, [r1, r3]
 80013e8:	1c6b      	adds	r3, r5, #1
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	e7eb      	b.n	80013c6 <itoaP+0x4a>
	...

080013f0 <itoa_koma>:
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	2300      	movs	r3, #0
 80013f4:	270a      	movs	r7, #10
 80013f6:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 80013fa:	b08b      	sub	sp, #44	; 0x2c
 80013fc:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
 8001400:	ae0a      	add	r6, sp, #40	; 0x28
 8001402:	b2dd      	uxtb	r5, r3
 8001404:	4433      	add	r3, r6
 8001406:	fb94 f6f7 	sdiv	r6, r4, r7
 800140a:	fb07 4416 	mls	r4, r7, r6, r4
 800140e:	1c6a      	adds	r2, r5, #1
 8001410:	3430      	adds	r4, #48	; 0x30
 8001412:	f803 4c28 	strb.w	r4, [r3, #-40]
 8001416:	b252      	sxtb	r2, r2
 8001418:	1e34      	subs	r4, r6, #0
 800141a:	4613      	mov	r3, r2
 800141c:	dcf0      	bgt.n	8001400 <itoa_koma+0x10>
 800141e:	2a01      	cmp	r2, #1
 8001420:	bfd8      	it	le
 8001422:	2230      	movle	r2, #48	; 0x30
 8001424:	ac0a      	add	r4, sp, #40	; 0x28
 8001426:	4423      	add	r3, r4
 8001428:	bfcf      	iteee	gt
 800142a:	2400      	movgt	r4, #0
 800142c:	f803 2c28 	strble.w	r2, [r3, #-40]
 8001430:	1caa      	addle	r2, r5, #2
 8001432:	b252      	sxtble	r2, r2
 8001434:	bfc8      	it	gt
 8001436:	f803 4c28 	strbgt.w	r4, [r3, #-40]
 800143a:	2a02      	cmp	r2, #2
 800143c:	dc08      	bgt.n	8001450 <itoa_koma+0x60>
 800143e:	2901      	cmp	r1, #1
 8001440:	d906      	bls.n	8001450 <itoa_koma+0x60>
 8001442:	2430      	movs	r4, #48	; 0x30
 8001444:	ab0a      	add	r3, sp, #40	; 0x28
 8001446:	4413      	add	r3, r2
 8001448:	3201      	adds	r2, #1
 800144a:	f803 4c28 	strb.w	r4, [r3, #-40]
 800144e:	b252      	sxtb	r2, r2
 8001450:	2400      	movs	r4, #0
 8001452:	262e      	movs	r6, #46	; 0x2e
 8001454:	4623      	mov	r3, r4
 8001456:	b265      	sxtb	r5, r4
 8001458:	42aa      	cmp	r2, r5
 800145a:	dc0b      	bgt.n	8001474 <itoa_koma+0x84>
 800145c:	2800      	cmp	r0, #0
 800145e:	da06      	bge.n	800146e <itoa_koma+0x7e>
 8001460:	a90a      	add	r1, sp, #40	; 0x28
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	440b      	add	r3, r1
 8001466:	212d      	movs	r1, #45	; 0x2d
 8001468:	f803 1c14 	strb.w	r1, [r3, #-20]
 800146c:	b253      	sxtb	r3, r2
 800146e:	2200      	movs	r2, #0
 8001470:	4c12      	ldr	r4, [pc, #72]	; (80014bc <itoa_koma+0xcc>)
 8001472:	e019      	b.n	80014a8 <itoa_koma+0xb8>
 8001474:	428b      	cmp	r3, r1
 8001476:	461d      	mov	r5, r3
 8001478:	d105      	bne.n	8001486 <itoa_koma+0x96>
 800147a:	af0a      	add	r7, sp, #40	; 0x28
 800147c:	3301      	adds	r3, #1
 800147e:	443d      	add	r5, r7
 8001480:	b25b      	sxtb	r3, r3
 8001482:	f805 6c14 	strb.w	r6, [r5, #-20]
 8001486:	f81d 7004 	ldrb.w	r7, [sp, r4]
 800148a:	ad0a      	add	r5, sp, #40	; 0x28
 800148c:	441d      	add	r5, r3
 800148e:	3301      	adds	r3, #1
 8001490:	f805 7c14 	strb.w	r7, [r5, #-20]
 8001494:	b25b      	sxtb	r3, r3
 8001496:	3401      	adds	r4, #1
 8001498:	e7dd      	b.n	8001456 <itoa_koma+0x66>
 800149a:	ad0a      	add	r5, sp, #40	; 0x28
 800149c:	4429      	add	r1, r5
 800149e:	f811 1c15 	ldrb.w	r1, [r1, #-21]
 80014a2:	54a1      	strb	r1, [r4, r2]
 80014a4:	1c42      	adds	r2, r0, #1
 80014a6:	b252      	sxtb	r2, r2
 80014a8:	b2d0      	uxtb	r0, r2
 80014aa:	1a19      	subs	r1, r3, r0
 80014ac:	429a      	cmp	r2, r3
 80014ae:	b249      	sxtb	r1, r1
 80014b0:	d1f3      	bne.n	800149a <itoa_koma+0xaa>
 80014b2:	2300      	movs	r3, #0
 80014b4:	4801      	ldr	r0, [pc, #4]	; (80014bc <itoa_koma+0xcc>)
 80014b6:	54a3      	strb	r3, [r4, r2]
 80014b8:	b00b      	add	sp, #44	; 0x2c
 80014ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014bc:	20000768 	.word	0x20000768

080014c0 <itoa_komaP>:
 80014c0:	2300      	movs	r3, #0
 80014c2:	f04f 0c0a 	mov.w	ip, #10
 80014c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c8:	ea80 75e0 	eor.w	r5, r0, r0, asr #31
 80014cc:	b08b      	sub	sp, #44	; 0x2c
 80014ce:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
 80014d2:	af0a      	add	r7, sp, #40	; 0x28
 80014d4:	b2de      	uxtb	r6, r3
 80014d6:	443b      	add	r3, r7
 80014d8:	fb95 f7fc 	sdiv	r7, r5, ip
 80014dc:	fb0c 5517 	mls	r5, ip, r7, r5
 80014e0:	1c74      	adds	r4, r6, #1
 80014e2:	3530      	adds	r5, #48	; 0x30
 80014e4:	f803 5c28 	strb.w	r5, [r3, #-40]
 80014e8:	b264      	sxtb	r4, r4
 80014ea:	1e3d      	subs	r5, r7, #0
 80014ec:	4623      	mov	r3, r4
 80014ee:	dcf0      	bgt.n	80014d2 <itoa_komaP+0x12>
 80014f0:	2c01      	cmp	r4, #1
 80014f2:	bfd8      	it	le
 80014f4:	2430      	movle	r4, #48	; 0x30
 80014f6:	ad0a      	add	r5, sp, #40	; 0x28
 80014f8:	442b      	add	r3, r5
 80014fa:	bfcf      	iteee	gt
 80014fc:	2500      	movgt	r5, #0
 80014fe:	f803 4c28 	strble.w	r4, [r3, #-40]
 8001502:	1cb4      	addle	r4, r6, #2
 8001504:	b264      	sxtble	r4, r4
 8001506:	bfc8      	it	gt
 8001508:	f803 5c28 	strbgt.w	r5, [r3, #-40]
 800150c:	2c02      	cmp	r4, #2
 800150e:	dc08      	bgt.n	8001522 <itoa_komaP+0x62>
 8001510:	2a01      	cmp	r2, #1
 8001512:	d906      	bls.n	8001522 <itoa_komaP+0x62>
 8001514:	2530      	movs	r5, #48	; 0x30
 8001516:	ab0a      	add	r3, sp, #40	; 0x28
 8001518:	4423      	add	r3, r4
 800151a:	3401      	adds	r4, #1
 800151c:	f803 5c28 	strb.w	r5, [r3, #-40]
 8001520:	b264      	sxtb	r4, r4
 8001522:	2500      	movs	r5, #0
 8001524:	272e      	movs	r7, #46	; 0x2e
 8001526:	462b      	mov	r3, r5
 8001528:	b26e      	sxtb	r6, r5
 800152a:	42a6      	cmp	r6, r4
 800152c:	db0a      	blt.n	8001544 <itoa_komaP+0x84>
 800152e:	2800      	cmp	r0, #0
 8001530:	da06      	bge.n	8001540 <itoa_komaP+0x80>
 8001532:	a80a      	add	r0, sp, #40	; 0x28
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	4403      	add	r3, r0
 8001538:	202d      	movs	r0, #45	; 0x2d
 800153a:	f803 0c14 	strb.w	r0, [r3, #-20]
 800153e:	b253      	sxtb	r3, r2
 8001540:	2200      	movs	r2, #0
 8001542:	e01a      	b.n	800157a <itoa_komaP+0xba>
 8001544:	4293      	cmp	r3, r2
 8001546:	461e      	mov	r6, r3
 8001548:	d106      	bne.n	8001558 <itoa_komaP+0x98>
 800154a:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800154e:	3301      	adds	r3, #1
 8001550:	4466      	add	r6, ip
 8001552:	b25b      	sxtb	r3, r3
 8001554:	f806 7c14 	strb.w	r7, [r6, #-20]
 8001558:	f81d c005 	ldrb.w	ip, [sp, r5]
 800155c:	ae0a      	add	r6, sp, #40	; 0x28
 800155e:	441e      	add	r6, r3
 8001560:	3301      	adds	r3, #1
 8001562:	f806 cc14 	strb.w	ip, [r6, #-20]
 8001566:	b25b      	sxtb	r3, r3
 8001568:	3501      	adds	r5, #1
 800156a:	e7dd      	b.n	8001528 <itoa_komaP+0x68>
 800156c:	ad0a      	add	r5, sp, #40	; 0x28
 800156e:	442c      	add	r4, r5
 8001570:	f814 4c15 	ldrb.w	r4, [r4, #-21]
 8001574:	548c      	strb	r4, [r1, r2]
 8001576:	1c42      	adds	r2, r0, #1
 8001578:	b252      	sxtb	r2, r2
 800157a:	b2d0      	uxtb	r0, r2
 800157c:	1a1c      	subs	r4, r3, r0
 800157e:	429a      	cmp	r2, r3
 8001580:	b264      	sxtb	r4, r4
 8001582:	eb01 0502 	add.w	r5, r1, r2
 8001586:	d1f1      	bne.n	800156c <itoa_komaP+0xac>
 8001588:	2300      	movs	r3, #0
 800158a:	4608      	mov	r0, r1
 800158c:	702b      	strb	r3, [r5, #0]
 800158e:	b00b      	add	sp, #44	; 0x2c
 8001590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001592 <Module16>:
 8001592:	2800      	cmp	r0, #0
 8001594:	d002      	beq.n	800159c <Module16+0xa>
 8001596:	bfdc      	itt	le
 8001598:	4240      	negle	r0, r0
 800159a:	b200      	sxthle	r0, r0
 800159c:	4770      	bx	lr

0800159e <strlen1>:
 800159e:	2300      	movs	r3, #0
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	5c81      	ldrb	r1, [r0, r2]
 80015a4:	3301      	adds	r3, #1
 80015a6:	2900      	cmp	r1, #0
 80015a8:	d1fa      	bne.n	80015a0 <strlen1+0x2>
 80015aa:	4610      	mov	r0, r2
 80015ac:	4770      	bx	lr

080015ae <Merge2Strings>:
 80015ae:	b570      	push	{r4, r5, r6, lr}
 80015b0:	2400      	movs	r4, #0
 80015b2:	b265      	sxtb	r5, r4
 80015b4:	5d43      	ldrb	r3, [r0, r5]
 80015b6:	1c66      	adds	r6, r4, #1
 80015b8:	b94b      	cbnz	r3, 80015ce <Merge2Strings+0x20>
 80015ba:	b258      	sxtb	r0, r3
 80015bc:	5c0d      	ldrb	r5, [r1, r0]
 80015be:	1918      	adds	r0, r3, r4
 80015c0:	b240      	sxtb	r0, r0
 80015c2:	1816      	adds	r6, r2, r0
 80015c4:	3301      	adds	r3, #1
 80015c6:	b92d      	cbnz	r5, 80015d4 <Merge2Strings+0x26>
 80015c8:	7035      	strb	r5, [r6, #0]
 80015ca:	4610      	mov	r0, r2
 80015cc:	bd70      	pop	{r4, r5, r6, pc}
 80015ce:	5553      	strb	r3, [r2, r5]
 80015d0:	4634      	mov	r4, r6
 80015d2:	e7ee      	b.n	80015b2 <Merge2Strings+0x4>
 80015d4:	5415      	strb	r5, [r2, r0]
 80015d6:	e7f0      	b.n	80015ba <Merge2Strings+0xc>

080015d8 <Merge3Strings>:
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	2700      	movs	r7, #0
 80015dc:	b27c      	sxtb	r4, r7
 80015de:	5d05      	ldrb	r5, [r0, r4]
 80015e0:	1c7e      	adds	r6, r7, #1
 80015e2:	b98d      	cbnz	r5, 8001608 <Merge3Strings+0x30>
 80015e4:	b268      	sxtb	r0, r5
 80015e6:	197e      	adds	r6, r7, r5
 80015e8:	5c0c      	ldrb	r4, [r1, r0]
 80015ea:	b2f6      	uxtb	r6, r6
 80015ec:	b270      	sxtb	r0, r6
 80015ee:	3501      	adds	r5, #1
 80015f0:	b96c      	cbnz	r4, 800160e <Merge3Strings+0x36>
 80015f2:	4621      	mov	r1, r4
 80015f4:	b248      	sxtb	r0, r1
 80015f6:	5c14      	ldrb	r4, [r2, r0]
 80015f8:	1870      	adds	r0, r6, r1
 80015fa:	b240      	sxtb	r0, r0
 80015fc:	181d      	adds	r5, r3, r0
 80015fe:	3101      	adds	r1, #1
 8001600:	b93c      	cbnz	r4, 8001612 <Merge3Strings+0x3a>
 8001602:	702c      	strb	r4, [r5, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001608:	551d      	strb	r5, [r3, r4]
 800160a:	4637      	mov	r7, r6
 800160c:	e7e6      	b.n	80015dc <Merge3Strings+0x4>
 800160e:	541c      	strb	r4, [r3, r0]
 8001610:	e7e8      	b.n	80015e4 <Merge3Strings+0xc>
 8001612:	541c      	strb	r4, [r3, r0]
 8001614:	e7ee      	b.n	80015f4 <Merge3Strings+0x1c>

08001616 <ClockStringWithSec>:
 8001616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800161a:	4680      	mov	r8, r0
 800161c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8001620:	b086      	sub	sp, #24
 8001622:	460d      	mov	r5, r1
 8001624:	fbb8 f0f0 	udiv	r0, r8, r0
 8001628:	a901      	add	r1, sp, #4
 800162a:	f7ff fea7 	bl	800137c <itoaP>
 800162e:	a801      	add	r0, sp, #4
 8001630:	f7ff ffb5 	bl	800159e <strlen1>
 8001634:	2801      	cmp	r0, #1
 8001636:	bf96      	itet	ls
 8001638:	2201      	movls	r2, #1
 800163a:	2200      	movhi	r2, #0
 800163c:	2330      	movls	r3, #48	; 0x30
 800163e:	4614      	mov	r4, r2
 8001640:	bf98      	it	ls
 8001642:	702b      	strbls	r3, [r5, #0]
 8001644:	b2e6      	uxtb	r6, r4
 8001646:	1ab3      	subs	r3, r6, r2
 8001648:	a906      	add	r1, sp, #24
 800164a:	b25b      	sxtb	r3, r3
 800164c:	440b      	add	r3, r1
 800164e:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8001652:	192b      	adds	r3, r5, r4
 8001654:	1c74      	adds	r4, r6, #1
 8001656:	b264      	sxtb	r4, r4
 8001658:	2900      	cmp	r1, #0
 800165a:	d145      	bne.n	80016e8 <ClockStringWithSec+0xd2>
 800165c:	223a      	movs	r2, #58	; 0x3a
 800165e:	701a      	strb	r2, [r3, #0]
 8001660:	233c      	movs	r3, #60	; 0x3c
 8001662:	fbb8 f2f3 	udiv	r2, r8, r3
 8001666:	fbb2 f0f3 	udiv	r0, r2, r3
 800166a:	a901      	add	r1, sp, #4
 800166c:	fb03 2010 	mls	r0, r3, r0, r2
 8001670:	f7ff fe84 	bl	800137c <itoaP>
 8001674:	a801      	add	r0, sp, #4
 8001676:	f7ff ff92 	bl	800159e <strlen1>
 800167a:	2801      	cmp	r0, #1
 800167c:	bf9f      	itttt	ls
 800167e:	2330      	movls	r3, #48	; 0x30
 8001680:	552b      	strbls	r3, [r5, r4]
 8001682:	1cb4      	addls	r4, r6, #2
 8001684:	b264      	sxtbls	r4, r4
 8001686:	4626      	mov	r6, r4
 8001688:	b2f7      	uxtb	r7, r6
 800168a:	1b3b      	subs	r3, r7, r4
 800168c:	aa06      	add	r2, sp, #24
 800168e:	b25b      	sxtb	r3, r3
 8001690:	4413      	add	r3, r2
 8001692:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001696:	19ab      	adds	r3, r5, r6
 8001698:	1c7e      	adds	r6, r7, #1
 800169a:	b276      	sxtb	r6, r6
 800169c:	bb32      	cbnz	r2, 80016ec <ClockStringWithSec+0xd6>
 800169e:	223a      	movs	r2, #58	; 0x3a
 80016a0:	701a      	strb	r2, [r3, #0]
 80016a2:	233c      	movs	r3, #60	; 0x3c
 80016a4:	fbb8 f0f3 	udiv	r0, r8, r3
 80016a8:	a901      	add	r1, sp, #4
 80016aa:	fb03 8010 	mls	r0, r3, r0, r8
 80016ae:	f7ff fe65 	bl	800137c <itoaP>
 80016b2:	a801      	add	r0, sp, #4
 80016b4:	f7ff ff73 	bl	800159e <strlen1>
 80016b8:	2801      	cmp	r0, #1
 80016ba:	bf9c      	itt	ls
 80016bc:	2330      	movls	r3, #48	; 0x30
 80016be:	55ab      	strbls	r3, [r5, r6]
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	bf9c      	itt	ls
 80016c6:	1cbe      	addls	r6, r7, #2
 80016c8:	b276      	sxtbls	r6, r6
 80016ca:	b25a      	sxtb	r2, r3
 80016cc:	a906      	add	r1, sp, #24
 80016ce:	440a      	add	r2, r1
 80016d0:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80016d4:	18f2      	adds	r2, r6, r3
 80016d6:	b252      	sxtb	r2, r2
 80016d8:	18a8      	adds	r0, r5, r2
 80016da:	3301      	adds	r3, #1
 80016dc:	b941      	cbnz	r1, 80016f0 <ClockStringWithSec+0xda>
 80016de:	7001      	strb	r1, [r0, #0]
 80016e0:	4628      	mov	r0, r5
 80016e2:	b006      	add	sp, #24
 80016e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016e8:	7019      	strb	r1, [r3, #0]
 80016ea:	e7ab      	b.n	8001644 <ClockStringWithSec+0x2e>
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	e7cb      	b.n	8001688 <ClockStringWithSec+0x72>
 80016f0:	54a9      	strb	r1, [r5, r2]
 80016f2:	e7ea      	b.n	80016ca <ClockStringWithSec+0xb4>

080016f4 <ClockStringNoSec>:
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f6:	4607      	mov	r7, r0
 80016f8:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80016fc:	b087      	sub	sp, #28
 80016fe:	460d      	mov	r5, r1
 8001700:	fbb7 f0f0 	udiv	r0, r7, r0
 8001704:	a901      	add	r1, sp, #4
 8001706:	f7ff fe39 	bl	800137c <itoaP>
 800170a:	a801      	add	r0, sp, #4
 800170c:	f7ff ff47 	bl	800159e <strlen1>
 8001710:	2801      	cmp	r0, #1
 8001712:	bf96      	itet	ls
 8001714:	2201      	movls	r2, #1
 8001716:	2200      	movhi	r2, #0
 8001718:	2330      	movls	r3, #48	; 0x30
 800171a:	4614      	mov	r4, r2
 800171c:	bf98      	it	ls
 800171e:	702b      	strbls	r3, [r5, #0]
 8001720:	b2e6      	uxtb	r6, r4
 8001722:	1ab3      	subs	r3, r6, r2
 8001724:	a906      	add	r1, sp, #24
 8001726:	b25b      	sxtb	r3, r3
 8001728:	440b      	add	r3, r1
 800172a:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 800172e:	192b      	adds	r3, r5, r4
 8001730:	1c74      	adds	r4, r6, #1
 8001732:	b264      	sxtb	r4, r4
 8001734:	bb29      	cbnz	r1, 8001782 <ClockStringNoSec+0x8e>
 8001736:	223a      	movs	r2, #58	; 0x3a
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	233c      	movs	r3, #60	; 0x3c
 800173c:	fbb7 f7f3 	udiv	r7, r7, r3
 8001740:	fbb7 f0f3 	udiv	r0, r7, r3
 8001744:	a901      	add	r1, sp, #4
 8001746:	fb03 7010 	mls	r0, r3, r0, r7
 800174a:	f7ff fe17 	bl	800137c <itoaP>
 800174e:	a801      	add	r0, sp, #4
 8001750:	f7ff ff25 	bl	800159e <strlen1>
 8001754:	2801      	cmp	r0, #1
 8001756:	bf9c      	itt	ls
 8001758:	2330      	movls	r3, #48	; 0x30
 800175a:	552b      	strbls	r3, [r5, r4]
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	bf9c      	itt	ls
 8001762:	1cb4      	addls	r4, r6, #2
 8001764:	b264      	sxtbls	r4, r4
 8001766:	b25a      	sxtb	r2, r3
 8001768:	a906      	add	r1, sp, #24
 800176a:	440a      	add	r2, r1
 800176c:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8001770:	18e2      	adds	r2, r4, r3
 8001772:	b252      	sxtb	r2, r2
 8001774:	18a8      	adds	r0, r5, r2
 8001776:	3301      	adds	r3, #1
 8001778:	b929      	cbnz	r1, 8001786 <ClockStringNoSec+0x92>
 800177a:	7001      	strb	r1, [r0, #0]
 800177c:	4628      	mov	r0, r5
 800177e:	b007      	add	sp, #28
 8001780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001782:	7019      	strb	r1, [r3, #0]
 8001784:	e7cc      	b.n	8001720 <ClockStringNoSec+0x2c>
 8001786:	54a9      	strb	r1, [r5, r2]
 8001788:	e7ed      	b.n	8001766 <ClockStringNoSec+0x72>
	...

0800178c <middle_of_3Imax1>:
 800178c:	4602      	mov	r2, r0
 800178e:	490d      	ldr	r1, [pc, #52]	; (80017c4 <middle_of_3Imax1+0x38>)
 8001790:	684b      	ldr	r3, [r1, #4]
 8001792:	6808      	ldr	r0, [r1, #0]
 8001794:	608b      	str	r3, [r1, #8]
 8001796:	4283      	cmp	r3, r0
 8001798:	e9c1 2000 	strd	r2, r0, [r1]
 800179c:	dc07      	bgt.n	80017ae <middle_of_3Imax1+0x22>
 800179e:	4293      	cmp	r3, r2
 80017a0:	dc03      	bgt.n	80017aa <middle_of_3Imax1+0x1e>
 80017a2:	4290      	cmp	r0, r2
 80017a4:	bfa8      	it	ge
 80017a6:	4610      	movge	r0, r2
 80017a8:	4770      	bx	lr
 80017aa:	4283      	cmp	r3, r0
 80017ac:	db06      	blt.n	80017bc <middle_of_3Imax1+0x30>
 80017ae:	4290      	cmp	r0, r2
 80017b0:	dc04      	bgt.n	80017bc <middle_of_3Imax1+0x30>
 80017b2:	4293      	cmp	r3, r2
 80017b4:	bfa8      	it	ge
 80017b6:	4613      	movge	r3, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	4770      	bx	lr
 80017bc:	4298      	cmp	r0, r3
 80017be:	bfa8      	it	ge
 80017c0:	4618      	movge	r0, r3
 80017c2:	4770      	bx	lr
 80017c4:	2000071c 	.word	0x2000071c

080017c8 <middle_of_3Imax2>:
 80017c8:	4602      	mov	r2, r0
 80017ca:	490d      	ldr	r1, [pc, #52]	; (8001800 <middle_of_3Imax2+0x38>)
 80017cc:	684b      	ldr	r3, [r1, #4]
 80017ce:	6808      	ldr	r0, [r1, #0]
 80017d0:	608b      	str	r3, [r1, #8]
 80017d2:	4283      	cmp	r3, r0
 80017d4:	e9c1 2000 	strd	r2, r0, [r1]
 80017d8:	dc07      	bgt.n	80017ea <middle_of_3Imax2+0x22>
 80017da:	4293      	cmp	r3, r2
 80017dc:	dc03      	bgt.n	80017e6 <middle_of_3Imax2+0x1e>
 80017de:	4290      	cmp	r0, r2
 80017e0:	bfa8      	it	ge
 80017e2:	4610      	movge	r0, r2
 80017e4:	4770      	bx	lr
 80017e6:	4283      	cmp	r3, r0
 80017e8:	db06      	blt.n	80017f8 <middle_of_3Imax2+0x30>
 80017ea:	4290      	cmp	r0, r2
 80017ec:	dc04      	bgt.n	80017f8 <middle_of_3Imax2+0x30>
 80017ee:	4293      	cmp	r3, r2
 80017f0:	bfa8      	it	ge
 80017f2:	4613      	movge	r3, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	4770      	bx	lr
 80017f8:	4298      	cmp	r0, r3
 80017fa:	bfa8      	it	ge
 80017fc:	4618      	movge	r0, r3
 80017fe:	4770      	bx	lr
 8001800:	20000728 	.word	0x20000728

08001804 <middle_of_3Umax1>:
 8001804:	4602      	mov	r2, r0
 8001806:	490d      	ldr	r1, [pc, #52]	; (800183c <middle_of_3Umax1+0x38>)
 8001808:	684b      	ldr	r3, [r1, #4]
 800180a:	6808      	ldr	r0, [r1, #0]
 800180c:	608b      	str	r3, [r1, #8]
 800180e:	4283      	cmp	r3, r0
 8001810:	e9c1 2000 	strd	r2, r0, [r1]
 8001814:	dc07      	bgt.n	8001826 <middle_of_3Umax1+0x22>
 8001816:	4293      	cmp	r3, r2
 8001818:	dc03      	bgt.n	8001822 <middle_of_3Umax1+0x1e>
 800181a:	4290      	cmp	r0, r2
 800181c:	bfa8      	it	ge
 800181e:	4610      	movge	r0, r2
 8001820:	4770      	bx	lr
 8001822:	4283      	cmp	r3, r0
 8001824:	db06      	blt.n	8001834 <middle_of_3Umax1+0x30>
 8001826:	4290      	cmp	r0, r2
 8001828:	dc04      	bgt.n	8001834 <middle_of_3Umax1+0x30>
 800182a:	4293      	cmp	r3, r2
 800182c:	bfa8      	it	ge
 800182e:	4613      	movge	r3, r2
 8001830:	4618      	mov	r0, r3
 8001832:	4770      	bx	lr
 8001834:	4298      	cmp	r0, r3
 8001836:	bfa8      	it	ge
 8001838:	4618      	movge	r0, r3
 800183a:	4770      	bx	lr
 800183c:	20000734 	.word	0x20000734

08001840 <middle_of_3Umax2>:
 8001840:	4602      	mov	r2, r0
 8001842:	490d      	ldr	r1, [pc, #52]	; (8001878 <middle_of_3Umax2+0x38>)
 8001844:	684b      	ldr	r3, [r1, #4]
 8001846:	6808      	ldr	r0, [r1, #0]
 8001848:	608b      	str	r3, [r1, #8]
 800184a:	4283      	cmp	r3, r0
 800184c:	e9c1 2000 	strd	r2, r0, [r1]
 8001850:	dc07      	bgt.n	8001862 <middle_of_3Umax2+0x22>
 8001852:	4293      	cmp	r3, r2
 8001854:	dc03      	bgt.n	800185e <middle_of_3Umax2+0x1e>
 8001856:	4290      	cmp	r0, r2
 8001858:	bfa8      	it	ge
 800185a:	4610      	movge	r0, r2
 800185c:	4770      	bx	lr
 800185e:	4283      	cmp	r3, r0
 8001860:	db06      	blt.n	8001870 <middle_of_3Umax2+0x30>
 8001862:	4290      	cmp	r0, r2
 8001864:	dc04      	bgt.n	8001870 <middle_of_3Umax2+0x30>
 8001866:	4293      	cmp	r3, r2
 8001868:	bfa8      	it	ge
 800186a:	4613      	movge	r3, r2
 800186c:	4618      	mov	r0, r3
 800186e:	4770      	bx	lr
 8001870:	4298      	cmp	r0, r3
 8001872:	bfa8      	it	ge
 8001874:	4618      	movge	r0, r3
 8001876:	4770      	bx	lr
 8001878:	20000740 	.word	0x20000740

0800187c <middle_of_3Umax3>:
 800187c:	4602      	mov	r2, r0
 800187e:	490d      	ldr	r1, [pc, #52]	; (80018b4 <middle_of_3Umax3+0x38>)
 8001880:	684b      	ldr	r3, [r1, #4]
 8001882:	6808      	ldr	r0, [r1, #0]
 8001884:	608b      	str	r3, [r1, #8]
 8001886:	4283      	cmp	r3, r0
 8001888:	e9c1 2000 	strd	r2, r0, [r1]
 800188c:	dc07      	bgt.n	800189e <middle_of_3Umax3+0x22>
 800188e:	4293      	cmp	r3, r2
 8001890:	dc03      	bgt.n	800189a <middle_of_3Umax3+0x1e>
 8001892:	4290      	cmp	r0, r2
 8001894:	bfa8      	it	ge
 8001896:	4610      	movge	r0, r2
 8001898:	4770      	bx	lr
 800189a:	4283      	cmp	r3, r0
 800189c:	db06      	blt.n	80018ac <middle_of_3Umax3+0x30>
 800189e:	4290      	cmp	r0, r2
 80018a0:	dc04      	bgt.n	80018ac <middle_of_3Umax3+0x30>
 80018a2:	4293      	cmp	r3, r2
 80018a4:	bfa8      	it	ge
 80018a6:	4613      	movge	r3, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	4770      	bx	lr
 80018ac:	4298      	cmp	r0, r3
 80018ae:	bfa8      	it	ge
 80018b0:	4618      	movge	r0, r3
 80018b2:	4770      	bx	lr
 80018b4:	2000074c 	.word	0x2000074c

080018b8 <RunningAverageI1>:
 80018b8:	4770      	bx	lr

080018ba <RunningAverageI2>:
 80018ba:	4770      	bx	lr

080018bc <RunningAverageU1>:
 80018bc:	4770      	bx	lr

080018be <RunningAverageU2>:
 80018be:	4770      	bx	lr

080018c0 <RunningAverageU3>:
 80018c0:	4770      	bx	lr
	...

080018c4 <Menu_GetCurrentMenu>:
 80018c4:	4b01      	ldr	r3, [pc, #4]	; (80018cc <Menu_GetCurrentMenu+0x8>)
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	2000024c 	.word	0x2000024c

080018d0 <Menu_Navigate>:
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <Menu_Navigate+0x28>)
 80018d2:	b510      	push	{r4, lr}
 80018d4:	4298      	cmp	r0, r3
 80018d6:	d00d      	beq.n	80018f4 <Menu_Navigate+0x24>
 80018d8:	b160      	cbz	r0, 80018f4 <Menu_Navigate+0x24>
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <Menu_Navigate+0x2c>)
 80018dc:	4c08      	ldr	r4, [pc, #32]	; (8001900 <Menu_Navigate+0x30>)
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	6020      	str	r0, [r4, #0]
 80018e2:	b10a      	cbz	r2, 80018e8 <Menu_Navigate+0x18>
 80018e4:	3018      	adds	r0, #24
 80018e6:	4790      	blx	r2
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	b113      	cbz	r3, 80018f4 <Menu_Navigate+0x24>
 80018ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018f2:	4718      	bx	r3
 80018f4:	bd10      	pop	{r4, pc}
 80018f6:	bf00      	nop
 80018f8:	080062c0 	.word	0x080062c0
 80018fc:	2000077c 	.word	0x2000077c
 8001900:	2000024c 	.word	0x2000024c

08001904 <Menu_SetGenericWriteCallback>:
 8001904:	4b02      	ldr	r3, [pc, #8]	; (8001910 <Menu_SetGenericWriteCallback+0xc>)
 8001906:	6018      	str	r0, [r3, #0]
 8001908:	4b02      	ldr	r3, [pc, #8]	; (8001914 <Menu_SetGenericWriteCallback+0x10>)
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	f7ff bfe0 	b.w	80018d0 <Menu_Navigate>
 8001910:	2000077c 	.word	0x2000077c
 8001914:	2000024c 	.word	0x2000024c

08001918 <Menu_SelectItem>:
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <Menu_SelectItem+0x14>)
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <Menu_SelectItem+0x18>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4293      	cmp	r3, r2
 8001920:	d003      	beq.n	800192a <Menu_SelectItem+0x12>
 8001922:	b113      	cbz	r3, 800192a <Menu_SelectItem+0x12>
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	b103      	cbz	r3, 800192a <Menu_SelectItem+0x12>
 8001928:	4718      	bx	r3
 800192a:	4770      	bx	lr
 800192c:	2000024c 	.word	0x2000024c
 8001930:	080062c0 	.word	0x080062c0

08001934 <strobe>:
 8001934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001938:	b510      	push	{r4, lr}
 800193a:	4c06      	ldr	r4, [pc, #24]	; (8001954 <strobe+0x20>)
 800193c:	2002      	movs	r0, #2
 800193e:	6123      	str	r3, [r4, #16]
 8001940:	f7ff fb90 	bl	8001064 <delay_us>
 8001944:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001948:	2002      	movs	r0, #2
 800194a:	6123      	str	r3, [r4, #16]
 800194c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001950:	f7ff bb88 	b.w	8001064 <delay_us>
 8001954:	40010c00 	.word	0x40010c00

08001958 <lcd_set_4bit_mode>:
 8001958:	b570      	push	{r4, r5, r6, lr}
 800195a:	f04f 457c 	mov.w	r5, #4227858432	; 0xfc000000
 800195e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8001962:	4c0d      	ldr	r4, [pc, #52]	; (8001998 <lcd_set_4bit_mode+0x40>)
 8001964:	6125      	str	r5, [r4, #16]
 8001966:	6126      	str	r6, [r4, #16]
 8001968:	f7ff ffe4 	bl	8001934 <strobe>
 800196c:	2001      	movs	r0, #1
 800196e:	f7ff fbaf 	bl	80010d0 <delay_ms>
 8001972:	6125      	str	r5, [r4, #16]
 8001974:	6126      	str	r6, [r4, #16]
 8001976:	f7ff ffdd 	bl	8001934 <strobe>
 800197a:	2001      	movs	r0, #1
 800197c:	f7ff fba8 	bl	80010d0 <delay_ms>
 8001980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001984:	6125      	str	r5, [r4, #16]
 8001986:	6123      	str	r3, [r4, #16]
 8001988:	f7ff ffd4 	bl	8001934 <strobe>
 800198c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001990:	2001      	movs	r0, #1
 8001992:	f7ff bb9d 	b.w	80010d0 <delay_ms>
 8001996:	bf00      	nop
 8001998:	40010c00 	.word	0x40010c00

0800199c <lcd_send>:
 800199c:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 80019a0:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <lcd_send+0x98>)
 80019a2:	b570      	push	{r4, r5, r6, lr}
 80019a4:	4604      	mov	r4, r0
 80019a6:	611a      	str	r2, [r3, #16]
 80019a8:	460e      	mov	r6, r1
 80019aa:	b111      	cbz	r1, 80019b2 <lcd_send+0x16>
 80019ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019b0:	611a      	str	r2, [r3, #16]
 80019b2:	06e2      	lsls	r2, r4, #27
 80019b4:	bf44      	itt	mi
 80019b6:	f44f 5200 	movmi.w	r2, #8192	; 0x2000
 80019ba:	611a      	strmi	r2, [r3, #16]
 80019bc:	f014 0f20 	tst.w	r4, #32
 80019c0:	bf18      	it	ne
 80019c2:	f44f 5280 	movne.w	r2, #4096	; 0x1000
 80019c6:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <lcd_send+0x98>)
 80019c8:	bf18      	it	ne
 80019ca:	611a      	strne	r2, [r3, #16]
 80019cc:	0665      	lsls	r5, r4, #25
 80019ce:	bf44      	itt	mi
 80019d0:	f44f 6200 	movmi.w	r2, #2048	; 0x800
 80019d4:	611a      	strmi	r2, [r3, #16]
 80019d6:	f014 0f80 	tst.w	r4, #128	; 0x80
 80019da:	bf18      	it	ne
 80019dc:	f44f 6380 	movne.w	r3, #1024	; 0x400
 80019e0:	4d14      	ldr	r5, [pc, #80]	; (8001a34 <lcd_send+0x98>)
 80019e2:	bf18      	it	ne
 80019e4:	612b      	strne	r3, [r5, #16]
 80019e6:	f7ff ffa5 	bl	8001934 <strobe>
 80019ea:	f04f 5370 	mov.w	r3, #1006632960	; 0x3c000000
 80019ee:	07e0      	lsls	r0, r4, #31
 80019f0:	612b      	str	r3, [r5, #16]
 80019f2:	bf44      	itt	mi
 80019f4:	f44f 5300 	movmi.w	r3, #8192	; 0x2000
 80019f8:	612b      	strmi	r3, [r5, #16]
 80019fa:	07a1      	lsls	r1, r4, #30
 80019fc:	bf42      	ittt	mi
 80019fe:	f44f 5280 	movmi.w	r2, #4096	; 0x1000
 8001a02:	4b0c      	ldrmi	r3, [pc, #48]	; (8001a34 <lcd_send+0x98>)
 8001a04:	611a      	strmi	r2, [r3, #16]
 8001a06:	0762      	lsls	r2, r4, #29
 8001a08:	bf42      	ittt	mi
 8001a0a:	f44f 6200 	movmi.w	r2, #2048	; 0x800
 8001a0e:	4b09      	ldrmi	r3, [pc, #36]	; (8001a34 <lcd_send+0x98>)
 8001a10:	611a      	strmi	r2, [r3, #16]
 8001a12:	0723      	lsls	r3, r4, #28
 8001a14:	bf42      	ittt	mi
 8001a16:	f44f 6280 	movmi.w	r2, #1024	; 0x400
 8001a1a:	4b06      	ldrmi	r3, [pc, #24]	; (8001a34 <lcd_send+0x98>)
 8001a1c:	611a      	strmi	r2, [r3, #16]
 8001a1e:	f7ff ff89 	bl	8001934 <strobe>
 8001a22:	2002      	movs	r0, #2
 8001a24:	f7ff fb54 	bl	80010d0 <delay_ms>
 8001a28:	b11e      	cbz	r6, 8001a32 <lcd_send+0x96>
 8001a2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a2e:	4b01      	ldr	r3, [pc, #4]	; (8001a34 <lcd_send+0x98>)
 8001a30:	611a      	str	r2, [r3, #16]
 8001a32:	bd70      	pop	{r4, r5, r6, pc}
 8001a34:	40010c00 	.word	0x40010c00

08001a38 <lcd_set_user_char>:
 8001a38:	00c0      	lsls	r0, r0, #3
 8001a3a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8001a3e:	b538      	push	{r3, r4, r5, lr}
 8001a40:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8001a44:	460c      	mov	r4, r1
 8001a46:	2100      	movs	r1, #0
 8001a48:	f7ff ffa8 	bl	800199c <lcd_send>
 8001a4c:	1e65      	subs	r5, r4, #1
 8001a4e:	3407      	adds	r4, #7
 8001a50:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001a54:	2101      	movs	r1, #1
 8001a56:	f7ff ffa1 	bl	800199c <lcd_send>
 8001a5a:	42a5      	cmp	r5, r4
 8001a5c:	d1f8      	bne.n	8001a50 <lcd_set_user_char+0x18>
 8001a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a62:	2100      	movs	r1, #0
 8001a64:	2080      	movs	r0, #128	; 0x80
 8001a66:	f7ff bf99 	b.w	800199c <lcd_send>
	...

08001a6c <SetSymbols>:
 8001a6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a6e:	4c1f      	ldr	r4, [pc, #124]	; (8001aec <SetSymbols+0x80>)
 8001a70:	4d1f      	ldr	r5, [pc, #124]	; (8001af0 <SetSymbols+0x84>)
 8001a72:	4669      	mov	r1, sp
 8001a74:	2000      	movs	r0, #0
 8001a76:	e9cd 4500 	strd	r4, r5, [sp]
 8001a7a:	4e1e      	ldr	r6, [pc, #120]	; (8001af4 <SetSymbols+0x88>)
 8001a7c:	f7ff ffdc 	bl	8001a38 <lcd_set_user_char>
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <SetSymbols+0x8c>)
 8001a82:	4669      	mov	r1, sp
 8001a84:	2001      	movs	r0, #1
 8001a86:	e9cd 3600 	strd	r3, r6, [sp]
 8001a8a:	f7ff ffd5 	bl	8001a38 <lcd_set_user_char>
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <SetSymbols+0x90>)
 8001a90:	4669      	mov	r1, sp
 8001a92:	e9cd 3500 	strd	r3, r5, [sp]
 8001a96:	2002      	movs	r0, #2
 8001a98:	4d19      	ldr	r5, [pc, #100]	; (8001b00 <SetSymbols+0x94>)
 8001a9a:	f7ff ffcd 	bl	8001a38 <lcd_set_user_char>
 8001a9e:	4669      	mov	r1, sp
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	e9cd 5600 	strd	r5, r6, [sp]
 8001aa6:	f7ff ffc7 	bl	8001a38 <lcd_set_user_char>
 8001aaa:	4669      	mov	r1, sp
 8001aac:	2004      	movs	r0, #4
 8001aae:	e9cd 5400 	strd	r5, r4, [sp]
 8001ab2:	f7ff ffc1 	bl	8001a38 <lcd_set_user_char>
 8001ab6:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <SetSymbols+0x98>)
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <SetSymbols+0x9c>)
 8001aba:	4669      	mov	r1, sp
 8001abc:	2005      	movs	r0, #5
 8001abe:	e9cd 2300 	strd	r2, r3, [sp]
 8001ac2:	f7ff ffb9 	bl	8001a38 <lcd_set_user_char>
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <SetSymbols+0xa0>)
 8001ac8:	4911      	ldr	r1, [pc, #68]	; (8001b10 <SetSymbols+0xa4>)
 8001aca:	2006      	movs	r0, #6
 8001acc:	e9cd 1300 	strd	r1, r3, [sp]
 8001ad0:	4669      	mov	r1, sp
 8001ad2:	f7ff ffb1 	bl	8001a38 <lcd_set_user_char>
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <SetSymbols+0xa8>)
 8001ad8:	480f      	ldr	r0, [pc, #60]	; (8001b18 <SetSymbols+0xac>)
 8001ada:	4669      	mov	r1, sp
 8001adc:	e9cd 0300 	strd	r0, r3, [sp]
 8001ae0:	2007      	movs	r0, #7
 8001ae2:	f7ff ffa9 	bl	8001a38 <lcd_set_user_char>
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd70      	pop	{r4, r5, r6, pc}
 8001aea:	bf00      	nop
 8001aec:	040e1504 	.word	0x040e1504
 8001af0:	1f1f0400 	.word	0x1f1f0400
 8001af4:	1f040000 	.word	0x1f040000
 8001af8:	00040e15 	.word	0x00040e15
 8001afc:	150e0400 	.word	0x150e0400
 8001b00:	04150e04 	.word	0x04150e04
 8001b04:	0a070702 	.word	0x0a070702
 8001b08:	081c1c0a 	.word	0x081c1c0a
 8001b0c:	00091505 	.word	0x00091505
 8001b10:	0505050f 	.word	0x0505050f
 8001b14:	00010101 	.word	0x00010101
 8001b18:	1f111111 	.word	0x1f111111

08001b1c <lcd_set_xy>:
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <lcd_set_xy+0x1c>)
 8001b1e:	7010      	strb	r0, [r2, #0]
 8001b20:	4a06      	ldr	r2, [pc, #24]	; (8001b3c <lcd_set_xy+0x20>)
 8001b22:	7011      	strb	r1, [r2, #0]
 8001b24:	b919      	cbnz	r1, 8001b2e <lcd_set_xy+0x12>
 8001b26:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001b2a:	f7ff bf37 	b.w	800199c <lcd_send>
 8001b2e:	2100      	movs	r1, #0
 8001b30:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8001b34:	e7f9      	b.n	8001b2a <lcd_set_xy+0xe>
 8001b36:	bf00      	nop
 8001b38:	20000780 	.word	0x20000780
 8001b3c:	20000781 	.word	0x20000781

08001b40 <lcd_out>:
 8001b40:	b570      	push	{r4, r5, r6, lr}
 8001b42:	460d      	mov	r5, r1
 8001b44:	4604      	mov	r4, r0
 8001b46:	43c6      	mvns	r6, r0
 8001b48:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001b4c:	b900      	cbnz	r0, 8001b50 <lcd_out+0x10>
 8001b4e:	bd70      	pop	{r4, r5, r6, pc}
 8001b50:	2101      	movs	r1, #1
 8001b52:	f7ff ff23 	bl	800199c <lcd_send>
 8001b56:	2d01      	cmp	r5, #1
 8001b58:	d1f6      	bne.n	8001b48 <lcd_out+0x8>
 8001b5a:	1933      	adds	r3, r6, r4
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b07      	cmp	r3, #7
 8001b60:	d1f2      	bne.n	8001b48 <lcd_out+0x8>
 8001b62:	4629      	mov	r1, r5
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff ffd9 	bl	8001b1c <lcd_set_xy>
 8001b6a:	e7ed      	b.n	8001b48 <lcd_out+0x8>

08001b6c <LcdOutbyNumber>:
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	b2c0      	uxtb	r0, r0
 8001b70:	f7ff bf14 	b.w	800199c <lcd_send>

08001b74 <LcdOut>:
 8001b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b78:	460f      	mov	r7, r1
 8001b7a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001bf4 <LcdOut+0x80>
 8001b7e:	4c1b      	ldr	r4, [pc, #108]	; (8001bec <LcdOut+0x78>)
 8001b80:	4e1b      	ldr	r6, [pc, #108]	; (8001bf0 <LcdOut+0x7c>)
 8001b82:	1e45      	subs	r5, r0, #1
 8001b84:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001b88:	b908      	cbnz	r0, 8001b8e <LcdOut+0x1a>
 8001b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b8e:	28b2      	cmp	r0, #178	; 0xb2
 8001b90:	d119      	bne.n	8001bc6 <LcdOut+0x52>
 8001b92:	2101      	movs	r1, #1
 8001b94:	2049      	movs	r0, #73	; 0x49
 8001b96:	f7ff ff01 	bl	800199c <lcd_send>
 8001b9a:	7823      	ldrb	r3, [r4, #0]
 8001b9c:	f896 9000 	ldrb.w	r9, [r6]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	7023      	strb	r3, [r4, #0]
 8001ba6:	f1b9 0f00 	cmp.w	r9, #0
 8001baa:	d1eb      	bne.n	8001b84 <LcdOut+0x10>
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d1e9      	bne.n	8001b84 <LcdOut+0x10>
 8001bb0:	2f02      	cmp	r7, #2
 8001bb2:	d1e7      	bne.n	8001b84 <LcdOut+0x10>
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	4648      	mov	r0, r9
 8001bb8:	f7ff ffb0 	bl	8001b1c <lcd_set_xy>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f884 9000 	strb.w	r9, [r4]
 8001bc2:	7033      	strb	r3, [r6, #0]
 8001bc4:	e7de      	b.n	8001b84 <LcdOut+0x10>
 8001bc6:	28af      	cmp	r0, #175	; 0xaf
 8001bc8:	d102      	bne.n	8001bd0 <LcdOut+0x5c>
 8001bca:	2101      	movs	r1, #1
 8001bcc:	2003      	movs	r0, #3
 8001bce:	e7e2      	b.n	8001b96 <LcdOut+0x22>
 8001bd0:	28aa      	cmp	r0, #170	; 0xaa
 8001bd2:	d102      	bne.n	8001bda <LcdOut+0x66>
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	2002      	movs	r0, #2
 8001bd8:	e7dd      	b.n	8001b96 <LcdOut+0x22>
 8001bda:	28bf      	cmp	r0, #191	; 0xbf
 8001bdc:	bf89      	itett	hi
 8001bde:	4440      	addhi	r0, r8
 8001be0:	2101      	movls	r1, #1
 8001be2:	2101      	movhi	r1, #1
 8001be4:	f810 0cc0 	ldrbhi.w	r0, [r0, #-192]
 8001be8:	e7d5      	b.n	8001b96 <LcdOut+0x22>
 8001bea:	bf00      	nop
 8001bec:	20000780 	.word	0x20000780
 8001bf0:	20000781 	.word	0x20000781
 8001bf4:	20000250 	.word	0x20000250

08001bf8 <lcd_clear>:
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f7ff bece 	b.w	800199c <lcd_send>

08001c00 <lcd_init>:
 8001c00:	b508      	push	{r3, lr}
 8001c02:	2064      	movs	r0, #100	; 0x64
 8001c04:	f7ff fa64 	bl	80010d0 <delay_ms>
 8001c08:	f7ff fea6 	bl	8001958 <lcd_set_4bit_mode>
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	200e      	movs	r0, #14
 8001c10:	f7ff fec4 	bl	800199c <lcd_send>
 8001c14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001c18:	f7ff bfee 	b.w	8001bf8 <lcd_clear>

08001c1c <PrintToLCD>:
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	f7ff bfa9 	b.w	8001b74 <LcdOut>

08001c22 <PrintToLCD_xy>:
 8001c22:	b510      	push	{r4, lr}
 8001c24:	4604      	mov	r4, r0
 8001c26:	4608      	mov	r0, r1
 8001c28:	4611      	mov	r1, r2
 8001c2a:	f7ff ff77 	bl	8001b1c <lcd_set_xy>
 8001c2e:	4620      	mov	r0, r4
 8001c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c34:	2102      	movs	r1, #2
 8001c36:	f7ff bf9d 	b.w	8001b74 <LcdOut>

08001c3a <InitLCD>:
 8001c3a:	b508      	push	{r3, lr}
 8001c3c:	f7ff ffe0 	bl	8001c00 <lcd_init>
 8001c40:	f7ff ffda 	bl	8001bf8 <lcd_clear>
 8001c44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001c48:	2100      	movs	r1, #0
 8001c4a:	200c      	movs	r0, #12
 8001c4c:	f7ff bea6 	b.w	800199c <lcd_send>

08001c50 <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <LL_APB2_GRP1_EnableClock+0x18>)
{
 8001c52:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c54:	699a      	ldr	r2, [r3, #24]
 8001c56:	4302      	orrs	r2, r0
 8001c58:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4018      	ands	r0, r3
 8001c5e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001c60:	9b01      	ldr	r3, [sp, #4]
}
 8001c62:	b002      	add	sp, #8
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000

08001c6c <MenuLog_Enter>:
			ClockOnLCD_noSec(DischargeTimeSec);
		}
}
void MenuLog_Enter()
{
	i_LogItems = 0;
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4b01      	ldr	r3, [pc, #4]	; (8001c74 <MenuLog_Enter+0x8>)
 8001c70:	801a      	strh	r2, [r3, #0]
}
 8001c72:	4770      	bx	lr
 8001c74:	200007f2 	.word	0x200007f2

08001c78 <MenuCalibrationWriteToFlash_Enter>:
			break;
	}
}

void MenuCalibrationWriteToFlash_Enter(Key_Pressed_t key)
{
 8001c78:	b508      	push	{r3, lr}
	CalibrationWriteToFlash_CRC();
 8001c7a:	f7fe fea9 	bl	80009d0 <CalibrationWriteToFlash_CRC>
	WriteInLOG("Calibration");
}
 8001c7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	WriteInLOG("Calibration");
 8001c82:	4801      	ldr	r0, [pc, #4]	; (8001c88 <MenuCalibrationWriteToFlash_Enter+0x10>)
 8001c84:	f7ff b88a 	b.w	8000d9c <WriteInLOG>
 8001c88:	080062f1 	.word	0x080062f1

08001c8c <MenuSettingsBatteryType_Enter>:
{
 8001c8c:	b510      	push	{r4, lr}
	if(CountShowBT == 0)
 8001c8e:	4c3b      	ldr	r4, [pc, #236]	; (8001d7c <MenuSettingsBatteryType_Enter+0xf0>)
 8001c90:	f994 1000 	ldrsb.w	r1, [r4]
 8001c94:	b961      	cbnz	r1, 8001cb0 <MenuSettingsBatteryType_Enter+0x24>
		lcd_set_xy(0,0);
 8001c96:	4608      	mov	r0, r1
 8001c98:	f7ff ff40 	bl	8001b1c <lcd_set_xy>
		PrintToLCD(" 10.8V  14.6V   ");
 8001c9c:	4838      	ldr	r0, [pc, #224]	; (8001d80 <MenuSettingsBatteryType_Enter+0xf4>)
 8001c9e:	f7ff ffbd 	bl	8001c1c <PrintToLCD>
		SettingsData.LowVoltage = 1080;
 8001ca2:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8001ca6:	4b37      	ldr	r3, [pc, #220]	; (8001d84 <MenuSettingsBatteryType_Enter+0xf8>)
 8001ca8:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 1460;
 8001caa:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8001cae:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 1)
 8001cb0:	f994 3000 	ldrsb.w	r3, [r4]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d10d      	bne.n	8001cd4 <MenuSettingsBatteryType_Enter+0x48>
		lcd_set_xy(0,0);
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4608      	mov	r0, r1
 8001cbc:	f7ff ff2e 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("  3.0V   4.2V   ");
 8001cc0:	4831      	ldr	r0, [pc, #196]	; (8001d88 <MenuSettingsBatteryType_Enter+0xfc>)
 8001cc2:	f7ff ffab 	bl	8001c1c <PrintToLCD>
		SettingsData.LowVoltage = 300;
 8001cc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cca:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <MenuSettingsBatteryType_Enter+0xf8>)
 8001ccc:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 420;
 8001cce:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001cd2:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 2)
 8001cd4:	f994 3000 	ldrsb.w	r3, [r4]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d10d      	bne.n	8001cf8 <MenuSettingsBatteryType_Enter+0x6c>
		lcd_set_xy(0,0);
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4608      	mov	r0, r1
 8001ce0:	f7ff ff1c 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("  2.8V   3.7V   ");
 8001ce4:	4829      	ldr	r0, [pc, #164]	; (8001d8c <MenuSettingsBatteryType_Enter+0x100>)
 8001ce6:	f7ff ff99 	bl	8001c1c <PrintToLCD>
		SettingsData.LowVoltage = 280;
 8001cea:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001cee:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <MenuSettingsBatteryType_Enter+0xf8>)
 8001cf0:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 370;
 8001cf2:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001cf6:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 3)
 8001cf8:	f994 3000 	ldrsb.w	r3, [r4]
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d10c      	bne.n	8001d1a <MenuSettingsBatteryType_Enter+0x8e>
		lcd_set_xy(0,0);
 8001d00:	2100      	movs	r1, #0
 8001d02:	4608      	mov	r0, r1
 8001d04:	f7ff ff0a 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("  1.6V   2.8V   ");
 8001d08:	4821      	ldr	r0, [pc, #132]	; (8001d90 <MenuSettingsBatteryType_Enter+0x104>)
 8001d0a:	f7ff ff87 	bl	8001c1c <PrintToLCD>
		SettingsData.LowVoltage = 160;
 8001d0e:	22a0      	movs	r2, #160	; 0xa0
 8001d10:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <MenuSettingsBatteryType_Enter+0xf8>)
 8001d12:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 280;
 8001d14:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001d18:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 4)
 8001d1a:	f994 3000 	ldrsb.w	r3, [r4]
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d10d      	bne.n	8001d3e <MenuSettingsBatteryType_Enter+0xb2>
		lcd_set_xy(0,0);
 8001d22:	2100      	movs	r1, #0
 8001d24:	4608      	mov	r0, r1
 8001d26:	f7ff fef9 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("   8V  13.6V    ");
 8001d2a:	481a      	ldr	r0, [pc, #104]	; (8001d94 <MenuSettingsBatteryType_Enter+0x108>)
 8001d2c:	f7ff ff76 	bl	8001c1c <PrintToLCD>
		SettingsData.LowVoltage = 800;
 8001d30:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <MenuSettingsBatteryType_Enter+0xf8>)
 8001d36:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 1360;
 8001d38:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 8001d3c:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 5)
 8001d3e:	f994 3000 	ldrsb.w	r3, [r4]
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d10c      	bne.n	8001d60 <MenuSettingsBatteryType_Enter+0xd4>
		lcd_set_xy(0,0);
 8001d46:	2100      	movs	r1, #0
 8001d48:	4608      	mov	r0, r1
 8001d4a:	f7ff fee7 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("  1V    20V     ");
 8001d4e:	4812      	ldr	r0, [pc, #72]	; (8001d98 <MenuSettingsBatteryType_Enter+0x10c>)
 8001d50:	f7ff ff64 	bl	8001c1c <PrintToLCD>
		SettingsData.LowVoltage = 100;
 8001d54:	2264      	movs	r2, #100	; 0x64
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <MenuSettingsBatteryType_Enter+0xf8>)
 8001d58:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 2000;
 8001d5a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001d5e:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 6)
 8001d60:	f994 3000 	ldrsb.w	r3, [r4]
 8001d64:	2b06      	cmp	r3, #6
		CountShowBT = 0;
 8001d66:	bf04      	itt	eq
 8001d68:	2300      	moveq	r3, #0
 8001d6a:	7023      	strbeq	r3, [r4, #0]
	SettingsWriteToFlash_CRC();
 8001d6c:	f7fe fe66 	bl	8000a3c <SettingsWriteToFlash_CRC>
}
 8001d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay_ms(600);
 8001d74:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001d78:	f7ff b9aa 	b.w	80010d0 <delay_ms>
 8001d7c:	2000079b 	.word	0x2000079b
 8001d80:	080064af 	.word	0x080064af
 8001d84:	20000154 	.word	0x20000154
 8001d88:	080064c0 	.word	0x080064c0
 8001d8c:	080064d1 	.word	0x080064d1
 8001d90:	080064e2 	.word	0x080064e2
 8001d94:	080064f3 	.word	0x080064f3
 8001d98:	08006504 	.word	0x08006504

08001d9c <MenuSettingsWriteToFlash_Enter>:

void MenuSettingsWriteToFlash_Enter(Key_Pressed_t key)
{
	SettingsWriteToFlash_CRC();
 8001d9c:	f7fe be4e 	b.w	8000a3c <SettingsWriteToFlash_CRC>

08001da0 <MenuOption_Enter>:
	}

}

void MenuOption_Enter(Key_Pressed_t key)
{
 8001da0:	b508      	push	{r3, lr}
	lcd_set_xy(7,1);
 8001da2:	2101      	movs	r1, #1
 8001da4:	2007      	movs	r0, #7
 8001da6:	f7ff feb9 	bl	8001b1c <lcd_set_xy>
	lcd_send(255,DATA);
 8001daa:	2101      	movs	r1, #1
 8001dac:	20ff      	movs	r0, #255	; 0xff
 8001dae:	f7ff fdf5 	bl	800199c <lcd_send>
	SettingsWriteToFlash_CRC();
 8001db2:	f7fe fe43 	bl	8000a3c <SettingsWriteToFlash_CRC>
	SelectedOptionValue = SettingsData.Option1;
 8001db6:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <MenuOption_Enter+0x28>)
	delay_ms(200);
 8001db8:	20c8      	movs	r0, #200	; 0xc8
	SelectedOptionValue = SettingsData.Option1;
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <MenuOption_Enter+0x2c>)
 8001dbe:	601a      	str	r2, [r3, #0]
}
 8001dc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);
 8001dc4:	f7ff b984 	b.w	80010d0 <delay_ms>
 8001dc8:	20000154 	.word	0x20000154
 8001dcc:	20000a2c 	.word	0x20000a2c

08001dd0 <MenuOption_Enter1>:

void MenuOption_Enter1(Key_Pressed_t key)
{
 8001dd0:	b508      	push	{r3, lr}
	lcd_set_xy(7,1);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2007      	movs	r0, #7
 8001dd6:	f7ff fea1 	bl	8001b1c <lcd_set_xy>
	lcd_send(255,DATA);
 8001dda:	2101      	movs	r1, #1
 8001ddc:	20ff      	movs	r0, #255	; 0xff
 8001dde:	f7ff fddd 	bl	800199c <lcd_send>
	SettingsWriteToFlash_CRC();
 8001de2:	f7fe fe2b 	bl	8000a3c <SettingsWriteToFlash_CRC>
	SelectedOptionValue1 = SettingsData.Option2;
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <MenuOption_Enter1+0x28>)
	delay_ms(200);
 8001de8:	20c8      	movs	r0, #200	; 0xc8
	SelectedOptionValue1 = SettingsData.Option2;
 8001dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <MenuOption_Enter1+0x2c>)
 8001dee:	601a      	str	r2, [r3, #0]
}
 8001df0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);
 8001df4:	f7ff b96c 	b.w	80010d0 <delay_ms>
 8001df8:	20000154 	.word	0x20000154
 8001dfc:	20000a24 	.word	0x20000a24

08001e00 <Generic_Write>:
	if (Text) PrintToLCD_xy(Text,0,0);
 8001e00:	b118      	cbz	r0, 8001e0a <Generic_Write+0xa>
 8001e02:	2200      	movs	r2, #0
 8001e04:	4611      	mov	r1, r2
 8001e06:	f7ff bf0c 	b.w	8001c22 <PrintToLCD_xy>
}
 8001e0a:	4770      	bx	lr

08001e0c <MenuDischarge_Enter>:
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001e0c:	f649 23af 	movw	r3, #39599	; 0x9aaf
{
 8001e10:	b510      	push	{r4, lr}
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001e12:	4c0e      	ldr	r4, [pc, #56]	; (8001e4c <MenuDischarge_Enter+0x40>)
{
 8001e14:	b090      	sub	sp, #64	; 0x40
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001e16:	6822      	ldr	r2, [r4, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d915      	bls.n	8001e48 <MenuDischarge_Enter+0x3c>
		ClockStringNoSec(DischargeTimeSec,s_clock);
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <MenuDischarge_Enter+0x44>)
 8001e1e:	a90b      	add	r1, sp, #44	; 0x2c
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	f7ff fc67 	bl	80016f4 <ClockStringNoSec>
		Merge3Strings(itoaP(BatteryCapacityDischargeCurrent/3600,str),"mAh",s_clock,strout);
 8001e26:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001e2a:	6820      	ldr	r0, [r4, #0]
 8001e2c:	a901      	add	r1, sp, #4
 8001e2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e32:	f7ff faa3 	bl	800137c <itoaP>
 8001e36:	4907      	ldr	r1, [pc, #28]	; (8001e54 <MenuDischarge_Enter+0x48>)
 8001e38:	ab06      	add	r3, sp, #24
 8001e3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8001e3c:	f7ff fbcc 	bl	80015d8 <Merge3Strings>
		WriteInLOGc(strout,DISCHARGE_l);
 8001e40:	2102      	movs	r1, #2
 8001e42:	a806      	add	r0, sp, #24
 8001e44:	f7ff f85c 	bl	8000f00 <WriteInLOGc>
}
 8001e48:	b010      	add	sp, #64	; 0x40
 8001e4a:	bd10      	pop	{r4, pc}
 8001e4c:	20000788 	.word	0x20000788
 8001e50:	200007a0 	.word	0x200007a0
 8001e54:	08006401 	.word	0x08006401

08001e58 <MenuCharge_Enter>:
{
 8001e58:	b510      	push	{r4, lr}
	logDebugD("charge=",BatteryCapacityCharge,0);
 8001e5a:	4c16      	ldr	r4, [pc, #88]	; (8001eb4 <MenuCharge_Enter+0x5c>)
{
 8001e5c:	b090      	sub	sp, #64	; 0x40
	logDebugD("charge=",BatteryCapacityCharge,0);
 8001e5e:	4816      	ldr	r0, [pc, #88]	; (8001eb8 <MenuCharge_Enter+0x60>)
 8001e60:	f003 fb6e 	bl	8005540 <printToBufferWithoutEndUART1>
 8001e64:	2200      	movs	r2, #0
 8001e66:	6821      	ldr	r1, [r4, #0]
 8001e68:	4814      	ldr	r0, [pc, #80]	; (8001ebc <MenuCharge_Enter+0x64>)
 8001e6a:	f003 fbad 	bl	80055c8 <printToBufferUART1D>
	if (BatteryCapacityCharge/3600>10)
 8001e6e:	f649 23af 	movw	r3, #39599	; 0x9aaf
 8001e72:	6822      	ldr	r2, [r4, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d91b      	bls.n	8001eb0 <MenuCharge_Enter+0x58>
		ClockStringNoSec(ChargeTimeSec,s_clock);
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <MenuCharge_Enter+0x68>)
 8001e7a:	a90b      	add	r1, sp, #44	; 0x2c
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	f7ff fc39 	bl	80016f4 <ClockStringNoSec>
		Merge3Strings(itoaP(BatteryCapacityCharge/3600,str),"mAh",s_clock,strout);
 8001e82:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001e86:	6820      	ldr	r0, [r4, #0]
 8001e88:	a901      	add	r1, sp, #4
 8001e8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e8e:	f7ff fa75 	bl	800137c <itoaP>
 8001e92:	ab06      	add	r3, sp, #24
 8001e94:	aa0b      	add	r2, sp, #44	; 0x2c
 8001e96:	490b      	ldr	r1, [pc, #44]	; (8001ec4 <MenuCharge_Enter+0x6c>)
 8001e98:	f7ff fb9e 	bl	80015d8 <Merge3Strings>
		WriteInLOGc(strout,CHARGE_H);
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	a806      	add	r0, sp, #24
 8001ea0:	f7ff f82e 	bl	8000f00 <WriteInLOGc>
		logDebug(strout);
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <MenuCharge_Enter+0x60>)
 8001ea6:	f003 fb4b 	bl	8005540 <printToBufferWithoutEndUART1>
 8001eaa:	a806      	add	r0, sp, #24
 8001eac:	f003 fade 	bl	800546c <printToBufferUART1>
}
 8001eb0:	b010      	add	sp, #64	; 0x40
 8001eb2:	bd10      	pop	{r4, pc}
 8001eb4:	20000784 	.word	0x20000784
 8001eb8:	08006059 	.word	0x08006059
 8001ebc:	0800639d 	.word	0x0800639d
 8001ec0:	20000794 	.word	0x20000794
 8001ec4:	08006401 	.word	0x08006401

08001ec8 <SelectedOption.part.8>:
void SelectedOption(void)
 8001ec8:	b508      	push	{r3, lr}
		lcd_set_xy(7,1);
 8001eca:	2101      	movs	r1, #1
 8001ecc:	2007      	movs	r0, #7
 8001ece:	f7ff fe25 	bl	8001b1c <lcd_set_xy>
}
 8001ed2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lcd_send(255,DATA);
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	20ff      	movs	r0, #255	; 0xff
 8001eda:	f7ff bd5f 	b.w	800199c <lcd_send>
	...

08001ee0 <LL_ADC_SetChannelSamplingTime.constprop.32>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_55CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
 8001ee0:	b570      	push	{r4, r5, r6, lr}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ee6:	fa91 f1a1 	rbit	r1, r1
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001eea:	fab1 f381 	clz	r3, r1
 8001eee:	4c10      	ldr	r4, [pc, #64]	; (8001f30 <LL_ADC_SetChannelSamplingTime.constprop.32+0x50>)
 8001ef0:	f000 7100 	and.w	r1, r0, #33554432	; 0x2000000
 8001ef4:	40d9      	lsrs	r1, r3
  
  MODIFY_REG(*preg,
 8001ef6:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 8001efa:	f000 70f8 	and.w	r0, r0, #32505856	; 0x1f00000
 8001efe:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001f02:	fa92 f3a2 	rbit	r3, r2
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	fa92 f2a2 	rbit	r2, r2
 8001f0e:	2607      	movs	r6, #7
 8001f10:	fab2 f282 	clz	r2, r2
 8001f14:	fa20 f303 	lsr.w	r3, r0, r3
 8001f18:	fa06 f303 	lsl.w	r3, r6, r3
 8001f1c:	40d0      	lsrs	r0, r2
 8001f1e:	ea25 0303 	bic.w	r3, r5, r3
 8001f22:	fa06 f000 	lsl.w	r0, r6, r0
 8001f26:	4318      	orrs	r0, r3
 8001f28:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001f2c:	bd70      	pop	{r4, r5, r6, pc}
 8001f2e:	bf00      	nop
 8001f30:	4001240c 	.word	0x4001240c

08001f34 <LL_ADC_REG_SetSequencerRanks.constprop.33>:
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
 8001f34:	b530      	push	{r4, r5, lr}
 8001f36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f3a:	fa93 f3a3 	rbit	r3, r3
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001f3e:	fab3 f383 	clz	r3, r3
  MODIFY_REG(*preg,
 8001f42:	241f      	movs	r4, #31
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001f44:	f400 7240 	and.w	r2, r0, #768	; 0x300
 8001f48:	4d07      	ldr	r5, [pc, #28]	; (8001f68 <LL_ADC_REG_SetSequencerRanks.constprop.33+0x34>)
 8001f4a:	40da      	lsrs	r2, r3
  MODIFY_REG(*preg,
 8001f4c:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8001f50:	f000 001f 	and.w	r0, r0, #31
 8001f54:	4084      	lsls	r4, r0
 8001f56:	f001 011f 	and.w	r1, r1, #31
 8001f5a:	ea23 0304 	bic.w	r3, r3, r4
 8001f5e:	4081      	lsls	r1, r0
 8001f60:	4319      	orrs	r1, r3
 8001f62:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
}
 8001f66:	bd30      	pop	{r4, r5, pc}
 8001f68:	4001242c 	.word	0x4001242c

08001f6c <NVIC_EncodePriority.constprop.34>:

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	4770      	bx	lr

08001f70 <MenuTraining_WriteInLOG>:
	s[1] = '\0';
 8001f70:	2300      	movs	r3, #0
{
 8001f72:	b510      	push	{r4, lr}
 8001f74:	b096      	sub	sp, #88	; 0x58
 8001f76:	4604      	mov	r4, r0
 8001f78:	4608      	mov	r0, r1
	ClockStringNoSec(Time,s_clock);
 8001f7a:	a911      	add	r1, sp, #68	; 0x44
	s[0] = c;
 8001f7c:	f88d 2004 	strb.w	r2, [sp, #4]
	s[1] = '\0';
 8001f80:	f88d 3005 	strb.w	r3, [sp, #5]
	ClockStringNoSec(Time,s_clock);
 8001f84:	f7ff fbb6 	bl	80016f4 <ClockStringNoSec>
	Merge3Strings(itoaP(Capacity/3600,str),"mAh",s_clock,strout);
 8001f88:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8001f8c:	a902      	add	r1, sp, #8
 8001f8e:	fbb4 f0f0 	udiv	r0, r4, r0
 8001f92:	f7ff f9f3 	bl	800137c <itoaP>
 8001f96:	ab07      	add	r3, sp, #28
 8001f98:	aa11      	add	r2, sp, #68	; 0x44
 8001f9a:	4907      	ldr	r1, [pc, #28]	; (8001fb8 <MenuTraining_WriteInLOG+0x48>)
 8001f9c:	f7ff fb1c 	bl	80015d8 <Merge3Strings>
	Merge2Strings(s,strout,strout1);
 8001fa0:	aa0c      	add	r2, sp, #48	; 0x30
 8001fa2:	a907      	add	r1, sp, #28
 8001fa4:	a801      	add	r0, sp, #4
 8001fa6:	f7ff fb02 	bl	80015ae <Merge2Strings>
	WriteInLOGc(strout1,TRAINING_);
 8001faa:	2104      	movs	r1, #4
 8001fac:	a80c      	add	r0, sp, #48	; 0x30
 8001fae:	f7fe ffa7 	bl	8000f00 <WriteInLOGc>
}
 8001fb2:	b016      	add	sp, #88	; 0x58
 8001fb4:	bd10      	pop	{r4, pc}
 8001fb6:	bf00      	nop
 8001fb8:	08006401 	.word	0x08006401

08001fbc <MenuLog>:
	if (key == KEY_NEXT)
 8001fbc:	2802      	cmp	r0, #2
{
 8001fbe:	b538      	push	{r3, r4, r5, lr}
 8001fc0:	4c1f      	ldr	r4, [pc, #124]	; (8002040 <MenuLog+0x84>)
 8001fc2:	4d20      	ldr	r5, [pc, #128]	; (8002044 <MenuLog+0x88>)
	if (key == KEY_NEXT)
 8001fc4:	d12a      	bne.n	800201c <MenuLog+0x60>
		i_LogItems++;
 8001fc6:	8823      	ldrh	r3, [r4, #0]
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8001fc8:	682a      	ldr	r2, [r5, #0]
		i_LogItems++;
 8001fca:	3301      	adds	r3, #1
 8001fcc:	b21b      	sxth	r3, r3
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8001fce:	4293      	cmp	r3, r2
		i_LogItems++;
 8001fd0:	8023      	strh	r3, [r4, #0]
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8001fd2:	d301      	bcc.n	8001fd8 <MenuLog+0x1c>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	8023      	strh	r3, [r4, #0]
	lcd_set_xy(0,0);
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4608      	mov	r0, r1
 8001fdc:	f7ff fd9e 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(LoggingData.Records[LoggingData.RecordsQuantity - i_LogItems-1]);
 8001fe0:	6828      	ldr	r0, [r5, #0]
 8001fe2:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001fe6:	3801      	subs	r0, #1
 8001fe8:	1ac0      	subs	r0, r0, r3
 8001fea:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8001fee:	3004      	adds	r0, #4
 8001ff0:	4428      	add	r0, r5
 8001ff2:	f7ff fe13 	bl	8001c1c <PrintToLCD>
	logDebugD("i_LogItems: ",i_LogItems,0);
 8001ff6:	4814      	ldr	r0, [pc, #80]	; (8002048 <MenuLog+0x8c>)
 8001ff8:	f003 faa2 	bl	8005540 <printToBufferWithoutEndUART1>
 8001ffc:	f9b4 1000 	ldrsh.w	r1, [r4]
 8002000:	2200      	movs	r2, #0
 8002002:	4812      	ldr	r0, [pc, #72]	; (800204c <MenuLog+0x90>)
 8002004:	f003 fae0 	bl	80055c8 <printToBufferUART1D>
	logDebugD("MRecordsQuantity: ",LoggingData.RecordsQuantity,0);
 8002008:	480f      	ldr	r0, [pc, #60]	; (8002048 <MenuLog+0x8c>)
 800200a:	f003 fa99 	bl	8005540 <printToBufferWithoutEndUART1>
 800200e:	6829      	ldr	r1, [r5, #0]
 8002010:	2200      	movs	r2, #0
}
 8002012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	logDebugD("MRecordsQuantity: ",LoggingData.RecordsQuantity,0);
 8002016:	480e      	ldr	r0, [pc, #56]	; (8002050 <MenuLog+0x94>)
 8002018:	f003 bad6 	b.w	80055c8 <printToBufferUART1D>
	if (key == KEY_BACK)
 800201c:	2801      	cmp	r0, #1
 800201e:	d1db      	bne.n	8001fd8 <MenuLog+0x1c>
		i_LogItems--;
 8002020:	8823      	ldrh	r3, [r4, #0]
 8002022:	3b01      	subs	r3, #1
 8002024:	b21b      	sxth	r3, r3
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 8002026:	2b00      	cmp	r3, #0
		i_LogItems--;
 8002028:	8023      	strh	r3, [r4, #0]
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 800202a:	bfbe      	ittt	lt
 800202c:	682b      	ldrlt	r3, [r5, #0]
 800202e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8002032:	8023      	strhlt	r3, [r4, #0]
		if (i_LogItems<0) i_LogItems=0;
 8002034:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	dacd      	bge.n	8001fd8 <MenuLog+0x1c>
 800203c:	e7ca      	b.n	8001fd4 <MenuLog+0x18>
 800203e:	bf00      	nop
 8002040:	200007f2 	.word	0x200007f2
 8002044:	20000888 	.word	0x20000888
 8002048:	08006059 	.word	0x08006059
 800204c:	08006405 	.word	0x08006405
 8002050:	08006412 	.word	0x08006412

08002054 <MenuCalibration_CURRENT_Out_to_0>:
		lcd_set_xy(0,0);
 8002054:	2100      	movs	r1, #0
{
 8002056:	b510      	push	{r4, lr}
 8002058:	4604      	mov	r4, r0
		lcd_set_xy(0,0);
 800205a:	4608      	mov	r0, r1
 800205c:	f7ff fd5e 	bl	8001b1c <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <MenuCalibration_CURRENT_Out_to_0+0x38>)
 8002062:	8818      	ldrh	r0, [r3, #0]
 8002064:	b200      	sxth	r0, r0
 8002066:	f7ff f94f 	bl	8001308 <itoa>
 800206a:	f7ff fdd7 	bl	8001c1c <PrintToLCD>
		PrintToLCD("mA >> set 0   ");
 800206e:	4808      	ldr	r0, [pc, #32]	; (8002090 <MenuCalibration_CURRENT_Out_to_0+0x3c>)
 8002070:	f7ff fdd4 	bl	8001c1c <PrintToLCD>
		if (key == KEY_NEXT)
 8002074:	2c02      	cmp	r4, #2
 8002076:	d108      	bne.n	800208a <MenuCalibration_CURRENT_Out_to_0+0x36>
}
 8002078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			CalibrationData.Calibration0ValueForCurrent = Current_Out;
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <MenuCalibration_CURRENT_Out_to_0+0x40>)
 800207e:	4a06      	ldr	r2, [pc, #24]	; (8002098 <MenuCalibration_CURRENT_Out_to_0+0x44>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b21b      	sxth	r3, r3
 8002084:	6093      	str	r3, [r2, #8]
			CalibrationWriteToFlash_CRC();
 8002086:	f7fe bca3 	b.w	80009d0 <CalibrationWriteToFlash_CRC>
}
 800208a:	bd10      	pop	{r4, pc}
 800208c:	2000086a 	.word	0x2000086a
 8002090:	08006355 	.word	0x08006355
 8002094:	200002ba 	.word	0x200002ba
 8002098:	20000004 	.word	0x20000004

0800209c <MenuCalibration_CURRENT_Load_to_0>:
	lcd_set_xy(0,0);
 800209c:	2100      	movs	r1, #0
{
 800209e:	b510      	push	{r4, lr}
 80020a0:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 80020a2:	4608      	mov	r0, r1
 80020a4:	f7ff fd3a 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(	itoa(Current));
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <MenuCalibration_CURRENT_Load_to_0+0x38>)
 80020aa:	8818      	ldrh	r0, [r3, #0]
 80020ac:	b200      	sxth	r0, r0
 80020ae:	f7ff f92b 	bl	8001308 <itoa>
 80020b2:	f7ff fdb3 	bl	8001c1c <PrintToLCD>
	PrintToLCD("mA >> set 0   ");
 80020b6:	4808      	ldr	r0, [pc, #32]	; (80020d8 <MenuCalibration_CURRENT_Load_to_0+0x3c>)
 80020b8:	f7ff fdb0 	bl	8001c1c <PrintToLCD>
	if (key == KEY_NEXT)
 80020bc:	2c02      	cmp	r4, #2
 80020be:	d108      	bne.n	80020d2 <MenuCalibration_CURRENT_Load_to_0+0x36>
}
 80020c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CalibrationData.Calibration0ValueForCurrent1 = Current_load;
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <MenuCalibration_CURRENT_Load_to_0+0x40>)
 80020c6:	4a06      	ldr	r2, [pc, #24]	; (80020e0 <MenuCalibration_CURRENT_Load_to_0+0x44>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	6113      	str	r3, [r2, #16]
		CalibrationWriteToFlash_CRC();
 80020ce:	f7fe bc7f 	b.w	80009d0 <CalibrationWriteToFlash_CRC>
}
 80020d2:	bd10      	pop	{r4, pc}
 80020d4:	2000086a 	.word	0x2000086a
 80020d8:	08006355 	.word	0x08006355
 80020dc:	200002bc 	.word	0x200002bc
 80020e0:	20000004 	.word	0x20000004

080020e4 <MenuCalibration_BackToFactory>:
	lcd_set_xy(0,0);
 80020e4:	2100      	movs	r1, #0
{
 80020e6:	b510      	push	{r4, lr}
 80020e8:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 80020ea:	4608      	mov	r0, r1
 80020ec:	f7ff fd16 	bl	8001b1c <lcd_set_xy>
	PrintToLCD("Factory-press >>");
 80020f0:	481f      	ldr	r0, [pc, #124]	; (8002170 <MenuCalibration_BackToFactory+0x8c>)
 80020f2:	f7ff fd93 	bl	8001c1c <PrintToLCD>
	if (key == KEY_NEXT)
 80020f6:	2c02      	cmp	r4, #2
 80020f8:	d130      	bne.n	800215c <MenuCalibration_BackToFactory+0x78>
		FactoryWriteToFlash_CRC();
 80020fa:	f7fe fd41 	bl	8000b80 <FactoryWriteToFlash_CRC>
		EEpromReadStatus = ReadFromFlash();
 80020fe:	f7fe fc23 	bl	8000948 <ReadFromFlash>
		lcd_set_xy(0,0);
 8002102:	2100      	movs	r1, #0
		EEpromReadStatus = ReadFromFlash();
 8002104:	4604      	mov	r4, r0
		lcd_set_xy(0,0);
 8002106:	4608      	mov	r0, r1
 8002108:	f7ff fd08 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("In Proccess ....");
 800210c:	4819      	ldr	r0, [pc, #100]	; (8002174 <MenuCalibration_BackToFactory+0x90>)
 800210e:	f7ff fd85 	bl	8001c1c <PrintToLCD>
		delay_ms(2000);
 8002112:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002116:	f7fe ffdb 	bl	80010d0 <delay_ms>
		lcd_set_xy(0,0);
 800211a:	2100      	movs	r1, #0
 800211c:	4608      	mov	r0, r1
 800211e:	f7ff fcfd 	bl	8001b1c <lcd_set_xy>
		if (EEpromReadStatus == 1)
 8002122:	2c01      	cmp	r4, #1
 8002124:	d11b      	bne.n	800215e <MenuCalibration_BackToFactory+0x7a>
			PrintToLCD("Factory are OK  ");
 8002126:	4814      	ldr	r0, [pc, #80]	; (8002178 <MenuCalibration_BackToFactory+0x94>)
 8002128:	f7ff fd78 	bl	8001c1c <PrintToLCD>
			WriteInLOG("Factory are OK");
 800212c:	4813      	ldr	r0, [pc, #76]	; (800217c <MenuCalibration_BackToFactory+0x98>)
 800212e:	f7fe fe35 	bl	8000d9c <WriteInLOG>
			delay_ms(2000);
 8002132:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002136:	f7fe ffcb 	bl	80010d0 <delay_ms>
		    BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MenuCalibration_BackToFactory+0x9c>)
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <MenuCalibration_BackToFactory+0xa0>)
 8002140:	601a      	str	r2, [r3, #0]
		    ChargeDurationSec = SettingsData.ChargeTime*3600;
 8002142:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <MenuCalibration_BackToFactory+0xa4>)
 8002148:	6919      	ldr	r1, [r3, #16]
 800214a:	434a      	muls	r2, r1
 800214c:	490f      	ldr	r1, [pc, #60]	; (800218c <MenuCalibration_BackToFactory+0xa8>)
 800214e:	600a      	str	r2, [r1, #0]
		    SelectedOptionValue = SettingsData.Option1;
 8002150:	6899      	ldr	r1, [r3, #8]
 8002152:	4a0f      	ldr	r2, [pc, #60]	; (8002190 <MenuCalibration_BackToFactory+0xac>)
 8002154:	6011      	str	r1, [r2, #0]
		    SelectedOptionValue1 = SettingsData.Option2;
 8002156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <MenuCalibration_BackToFactory+0xb0>)
 800215a:	601a      	str	r2, [r3, #0]
}
 800215c:	bd10      	pop	{r4, pc}
			PrintToLCD("EEprom read FAIL");
 800215e:	480e      	ldr	r0, [pc, #56]	; (8002198 <MenuCalibration_BackToFactory+0xb4>)
 8002160:	f7ff fd5c 	bl	8001c1c <PrintToLCD>
}
 8002164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			delay_ms(4000);
 8002168:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800216c:	f7fe bfb0 	b.w	80010d0 <delay_ms>
 8002170:	080062fd 	.word	0x080062fd
 8002174:	0800630e 	.word	0x0800630e
 8002178:	0800631f 	.word	0x0800631f
 800217c:	08006330 	.word	0x08006330
 8002180:	200000f4 	.word	0x200000f4
 8002184:	2000078c 	.word	0x2000078c
 8002188:	20000154 	.word	0x20000154
 800218c:	20000a28 	.word	0x20000a28
 8002190:	20000a2c 	.word	0x20000a2c
 8002194:	20000a24 	.word	0x20000a24
 8002198:	0800633f 	.word	0x0800633f

0800219c <MenuSettingsChargeTime>:
	if (key == KEY_NEXT) SettingsData.ChargeTime++;
 800219c:	2802      	cmp	r0, #2
{
 800219e:	b510      	push	{r4, lr}
 80021a0:	4c0e      	ldr	r4, [pc, #56]	; (80021dc <MenuSettingsChargeTime+0x40>)
	if (key == KEY_NEXT) SettingsData.ChargeTime++;
 80021a2:	d115      	bne.n	80021d0 <MenuSettingsChargeTime+0x34>
 80021a4:	6923      	ldr	r3, [r4, #16]
 80021a6:	3301      	adds	r3, #1
	if (key == KEY_BACK) SettingsData.ChargeTime--;
 80021a8:	6123      	str	r3, [r4, #16]
	lcd_set_xy(0,0);
 80021aa:	2100      	movs	r1, #0
 80021ac:	4608      	mov	r0, r1
 80021ae:	f7ff fcb5 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.ChargeTime));
 80021b2:	6920      	ldr	r0, [r4, #16]
 80021b4:	f7ff f8a8 	bl	8001308 <itoa>
 80021b8:	f7ff fd30 	bl	8001c1c <PrintToLCD>
	PrintToLCD("h   ");
 80021bc:	4808      	ldr	r0, [pc, #32]	; (80021e0 <MenuSettingsChargeTime+0x44>)
 80021be:	f7ff fd2d 	bl	8001c1c <PrintToLCD>
    ChargeDurationSec = SettingsData.ChargeTime*3600;
 80021c2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80021c6:	6922      	ldr	r2, [r4, #16]
 80021c8:	4353      	muls	r3, r2
 80021ca:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <MenuSettingsChargeTime+0x48>)
 80021cc:	6013      	str	r3, [r2, #0]
}
 80021ce:	bd10      	pop	{r4, pc}
	if (key == KEY_BACK) SettingsData.ChargeTime--;
 80021d0:	2801      	cmp	r0, #1
 80021d2:	d1ea      	bne.n	80021aa <MenuSettingsChargeTime+0xe>
 80021d4:	6923      	ldr	r3, [r4, #16]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	e7e6      	b.n	80021a8 <MenuSettingsChargeTime+0xc>
 80021da:	bf00      	nop
 80021dc:	20000154 	.word	0x20000154
 80021e0:	0800651b 	.word	0x0800651b
 80021e4:	20000a28 	.word	0x20000a28

080021e8 <MenuSettingsBatteryType>:
{
 80021e8:	b510      	push	{r4, lr}
 80021ea:	4c30      	ldr	r4, [pc, #192]	; (80022ac <MenuSettingsBatteryType+0xc4>)
	if (key == KEY_NEXT)
 80021ec:	2802      	cmp	r0, #2
 80021ee:	f994 3000 	ldrsb.w	r3, [r4]
 80021f2:	d152      	bne.n	800229a <MenuSettingsBatteryType+0xb2>
		CountShowBT++;
 80021f4:	3301      	adds	r3, #1
 80021f6:	b25b      	sxtb	r3, r3
		if (CountShowBT==MAXITEM_BT) CountShowBT=0;
 80021f8:	2b07      	cmp	r3, #7
 80021fa:	bf08      	it	eq
 80021fc:	2300      	moveq	r3, #0
		if (CountShowBT<0) CountShowBT=MAXITEM_BT-1;
 80021fe:	7023      	strb	r3, [r4, #0]
	if(CountShowBT == 0)
 8002200:	f994 1000 	ldrsb.w	r1, [r4]
 8002204:	b929      	cbnz	r1, 8002212 <MenuSettingsBatteryType+0x2a>
		lcd_set_xy(0,0);
 8002206:	4608      	mov	r0, r1
 8002208:	f7ff fc88 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("12V Pb Battery  ");
 800220c:	4828      	ldr	r0, [pc, #160]	; (80022b0 <MenuSettingsBatteryType+0xc8>)
 800220e:	f7ff fd05 	bl	8001c1c <PrintToLCD>
	if(CountShowBT == 1)
 8002212:	f994 3000 	ldrsb.w	r3, [r4]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d106      	bne.n	8002228 <MenuSettingsBatteryType+0x40>
		lcd_set_xy(0,0);
 800221a:	2100      	movs	r1, #0
 800221c:	4608      	mov	r0, r1
 800221e:	f7ff fc7d 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("Li ion  Battery  ");
 8002222:	4824      	ldr	r0, [pc, #144]	; (80022b4 <MenuSettingsBatteryType+0xcc>)
 8002224:	f7ff fcfa 	bl	8001c1c <PrintToLCD>
	if(CountShowBT == 2)
 8002228:	f994 3000 	ldrsb.w	r3, [r4]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d106      	bne.n	800223e <MenuSettingsBatteryType+0x56>
		lcd_set_xy(0,0);
 8002230:	2100      	movs	r1, #0
 8002232:	4608      	mov	r0, r1
 8002234:	f7ff fc72 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("LiFePo4 Battery ");
 8002238:	481f      	ldr	r0, [pc, #124]	; (80022b8 <MenuSettingsBatteryType+0xd0>)
 800223a:	f7ff fcef 	bl	8001c1c <PrintToLCD>
	if(CountShowBT == 3)
 800223e:	f994 3000 	ldrsb.w	r3, [r4]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d106      	bne.n	8002254 <MenuSettingsBatteryType+0x6c>
		lcd_set_xy(0,0);
 8002246:	2100      	movs	r1, #0
 8002248:	4608      	mov	r0, r1
 800224a:	f7ff fc67 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("LiTo Battery   ");
 800224e:	481b      	ldr	r0, [pc, #108]	; (80022bc <MenuSettingsBatteryType+0xd4>)
 8002250:	f7ff fce4 	bl	8001c1c <PrintToLCD>
	if(CountShowBT == 4)
 8002254:	f994 3000 	ldrsb.w	r3, [r4]
 8002258:	2b04      	cmp	r3, #4
 800225a:	d106      	bne.n	800226a <MenuSettingsBatteryType+0x82>
		lcd_set_xy(0,0);
 800225c:	2100      	movs	r1, #0
 800225e:	4608      	mov	r0, r1
 8002260:	f7ff fc5c 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("NIMh 9.6V Bat.  ");
 8002264:	4816      	ldr	r0, [pc, #88]	; (80022c0 <MenuSettingsBatteryType+0xd8>)
 8002266:	f7ff fcd9 	bl	8001c1c <PrintToLCD>
	if(CountShowBT == 5)
 800226a:	f994 3000 	ldrsb.w	r3, [r4]
 800226e:	2b05      	cmp	r3, #5
 8002270:	d106      	bne.n	8002280 <MenuSettingsBatteryType+0x98>
		lcd_set_xy(0,0);
 8002272:	2100      	movs	r1, #0
 8002274:	4608      	mov	r0, r1
 8002276:	f7ff fc51 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("Min 1V  MAX 20V");
 800227a:	4812      	ldr	r0, [pc, #72]	; (80022c4 <MenuSettingsBatteryType+0xdc>)
 800227c:	f7ff fcce 	bl	8001c1c <PrintToLCD>
	if(CountShowBT == 6)
 8002280:	f994 3000 	ldrsb.w	r3, [r4]
 8002284:	2b06      	cmp	r3, #6
 8002286:	d110      	bne.n	80022aa <MenuSettingsBatteryType+0xc2>
		lcd_set_xy(0,0);
 8002288:	2100      	movs	r1, #0
 800228a:	4608      	mov	r0, r1
 800228c:	f7ff fc46 	bl	8001b1c <lcd_set_xy>
}
 8002290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PrintToLCD("   OK to Exit  ");
 8002294:	480c      	ldr	r0, [pc, #48]	; (80022c8 <MenuSettingsBatteryType+0xe0>)
 8002296:	f7ff bcc1 	b.w	8001c1c <PrintToLCD>
	if (key == KEY_BACK)
 800229a:	2801      	cmp	r0, #1
 800229c:	d1b0      	bne.n	8002200 <MenuSettingsBatteryType+0x18>
		CountShowBT--;
 800229e:	3b01      	subs	r3, #1
 80022a0:	b25b      	sxtb	r3, r3
		if (CountShowBT<0) CountShowBT=MAXITEM_BT-1;
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	bfb8      	it	lt
 80022a6:	2306      	movlt	r3, #6
 80022a8:	e7a9      	b.n	80021fe <MenuSettingsBatteryType+0x16>
}
 80022aa:	bd10      	pop	{r4, pc}
 80022ac:	2000079b 	.word	0x2000079b
 80022b0:	0800643a 	.word	0x0800643a
 80022b4:	0800644b 	.word	0x0800644b
 80022b8:	0800645d 	.word	0x0800645d
 80022bc:	0800646e 	.word	0x0800646e
 80022c0:	0800647e 	.word	0x0800647e
 80022c4:	0800648f 	.word	0x0800648f
 80022c8:	0800649f 	.word	0x0800649f

080022cc <MenuSettingsLowVolt>:
	if (key == KEY_NEXT) SettingsData.LowVoltage = SettingsData.LowVoltage + 10;
 80022cc:	2802      	cmp	r0, #2
{
 80022ce:	b510      	push	{r4, lr}
 80022d0:	4c0d      	ldr	r4, [pc, #52]	; (8002308 <MenuSettingsLowVolt+0x3c>)
	if (key == KEY_NEXT) SettingsData.LowVoltage = SettingsData.LowVoltage + 10;
 80022d2:	d114      	bne.n	80022fe <MenuSettingsLowVolt+0x32>
 80022d4:	69a3      	ldr	r3, [r4, #24]
 80022d6:	330a      	adds	r3, #10
	if (key == KEY_BACK) SettingsData.LowVoltage = SettingsData.LowVoltage - 10;
 80022d8:	61a3      	str	r3, [r4, #24]
	lcd_set_xy(0,0);
 80022da:	2100      	movs	r1, #0
 80022dc:	4608      	mov	r0, r1
 80022de:	f7ff fc1d 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 80022e2:	230a      	movs	r3, #10
 80022e4:	69a0      	ldr	r0, [r4, #24]
 80022e6:	2101      	movs	r1, #1
 80022e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80022ec:	f7ff f880 	bl	80013f0 <itoa_koma>
 80022f0:	f7ff fc94 	bl	8001c1c <PrintToLCD>
}
 80022f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V   ");
 80022f8:	4804      	ldr	r0, [pc, #16]	; (800230c <MenuSettingsLowVolt+0x40>)
 80022fa:	f7ff bc8f 	b.w	8001c1c <PrintToLCD>
	if (key == KEY_BACK) SettingsData.LowVoltage = SettingsData.LowVoltage - 10;
 80022fe:	2801      	cmp	r0, #1
 8002300:	d1eb      	bne.n	80022da <MenuSettingsLowVolt+0xe>
 8002302:	69a3      	ldr	r3, [r4, #24]
 8002304:	3b0a      	subs	r3, #10
 8002306:	e7e7      	b.n	80022d8 <MenuSettingsLowVolt+0xc>
 8002308:	20000154 	.word	0x20000154
 800230c:	080064cc 	.word	0x080064cc

08002310 <MenuSettingsMaxVolt>:
	if (key == KEY_NEXT) SettingsData.MaxVoltage = SettingsData.MaxVoltage + 10;
 8002310:	2802      	cmp	r0, #2
{
 8002312:	b510      	push	{r4, lr}
 8002314:	4c0d      	ldr	r4, [pc, #52]	; (800234c <MenuSettingsMaxVolt+0x3c>)
	if (key == KEY_NEXT) SettingsData.MaxVoltage = SettingsData.MaxVoltage + 10;
 8002316:	d114      	bne.n	8002342 <MenuSettingsMaxVolt+0x32>
 8002318:	6a23      	ldr	r3, [r4, #32]
 800231a:	330a      	adds	r3, #10
	if (key == KEY_BACK) SettingsData.MaxVoltage = SettingsData.MaxVoltage - 10;
 800231c:	6223      	str	r3, [r4, #32]
	lcd_set_xy(0,0);
 800231e:	2100      	movs	r1, #0
 8002320:	4608      	mov	r0, r1
 8002322:	f7ff fbfb 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002326:	230a      	movs	r3, #10
 8002328:	6a20      	ldr	r0, [r4, #32]
 800232a:	2101      	movs	r1, #1
 800232c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002330:	f7ff f85e 	bl	80013f0 <itoa_koma>
 8002334:	f7ff fc72 	bl	8001c1c <PrintToLCD>
}
 8002338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V   ");
 800233c:	4804      	ldr	r0, [pc, #16]	; (8002350 <MenuSettingsMaxVolt+0x40>)
 800233e:	f7ff bc6d 	b.w	8001c1c <PrintToLCD>
	if (key == KEY_BACK) SettingsData.MaxVoltage = SettingsData.MaxVoltage - 10;
 8002342:	2801      	cmp	r0, #1
 8002344:	d1eb      	bne.n	800231e <MenuSettingsMaxVolt+0xe>
 8002346:	6a23      	ldr	r3, [r4, #32]
 8002348:	3b0a      	subs	r3, #10
 800234a:	e7e7      	b.n	800231c <MenuSettingsMaxVolt+0xc>
 800234c:	20000154 	.word	0x20000154
 8002350:	080064cc 	.word	0x080064cc

08002354 <MenuSettingsSwngChrgTime>:
	if (key == KEY_NEXT)  SettingsData.Swing_Chrg_time++;
 8002354:	2802      	cmp	r0, #2
{
 8002356:	b510      	push	{r4, lr}
 8002358:	4c0b      	ldr	r4, [pc, #44]	; (8002388 <MenuSettingsSwngChrgTime+0x34>)
	if (key == KEY_NEXT)  SettingsData.Swing_Chrg_time++;
 800235a:	d110      	bne.n	800237e <MenuSettingsSwngChrgTime+0x2a>
 800235c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800235e:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.Swing_Chrg_time--;
 8002360:	62a3      	str	r3, [r4, #40]	; 0x28
	lcd_set_xy(0,0);
 8002362:	2100      	movs	r1, #0
 8002364:	4608      	mov	r0, r1
 8002366:	f7ff fbd9 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.Swing_Chrg_time));
 800236a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800236c:	f7fe ffcc 	bl	8001308 <itoa>
 8002370:	f7ff fc54 	bl	8001c1c <PrintToLCD>
}
 8002374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD(" sec.   ");
 8002378:	4804      	ldr	r0, [pc, #16]	; (800238c <MenuSettingsSwngChrgTime+0x38>)
 800237a:	f7ff bc4f 	b.w	8001c1c <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.Swing_Chrg_time--;
 800237e:	2801      	cmp	r0, #1
 8002380:	d1ef      	bne.n	8002362 <MenuSettingsSwngChrgTime+0xe>
 8002382:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002384:	3b01      	subs	r3, #1
 8002386:	e7eb      	b.n	8002360 <MenuSettingsSwngChrgTime+0xc>
 8002388:	20000154 	.word	0x20000154
 800238c:	080065ca 	.word	0x080065ca

08002390 <MenuSettingsSwngDChrgTime>:
	if (key == KEY_NEXT)  SettingsData.Swing_DChrg_time++;
 8002390:	2802      	cmp	r0, #2
{
 8002392:	b510      	push	{r4, lr}
 8002394:	4c0b      	ldr	r4, [pc, #44]	; (80023c4 <MenuSettingsSwngDChrgTime+0x34>)
	if (key == KEY_NEXT)  SettingsData.Swing_DChrg_time++;
 8002396:	d110      	bne.n	80023ba <MenuSettingsSwngDChrgTime+0x2a>
 8002398:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800239a:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.Swing_DChrg_time--;
 800239c:	6323      	str	r3, [r4, #48]	; 0x30
	lcd_set_xy(0,0);
 800239e:	2100      	movs	r1, #0
 80023a0:	4608      	mov	r0, r1
 80023a2:	f7ff fbbb 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.Swing_DChrg_time));
 80023a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80023a8:	f7fe ffae 	bl	8001308 <itoa>
 80023ac:	f7ff fc36 	bl	8001c1c <PrintToLCD>
}
 80023b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD(" sec.   ");
 80023b4:	4804      	ldr	r0, [pc, #16]	; (80023c8 <MenuSettingsSwngDChrgTime+0x38>)
 80023b6:	f7ff bc31 	b.w	8001c1c <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.Swing_DChrg_time--;
 80023ba:	2801      	cmp	r0, #1
 80023bc:	d1ef      	bne.n	800239e <MenuSettingsSwngDChrgTime+0xe>
 80023be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023c0:	3b01      	subs	r3, #1
 80023c2:	e7eb      	b.n	800239c <MenuSettingsSwngDChrgTime+0xc>
 80023c4:	20000154 	.word	0x20000154
 80023c8:	080065ca 	.word	0x080065ca

080023cc <MenuSettingsChargeAddapt>:
	if (key == KEY_NEXT)  SettingsData.ChargeAdapt++;
 80023cc:	2802      	cmp	r0, #2
{
 80023ce:	b538      	push	{r3, r4, r5, lr}
 80023d0:	4c1a      	ldr	r4, [pc, #104]	; (800243c <MenuSettingsChargeAddapt+0x70>)
	if (key == KEY_NEXT)  SettingsData.ChargeAdapt++;
 80023d2:	d12d      	bne.n	8002430 <MenuSettingsChargeAddapt+0x64>
 80023d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023d6:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.ChargeAdapt--;
 80023d8:	63a3      	str	r3, [r4, #56]	; 0x38
	lcd_set_xy(0,0);
 80023da:	2100      	movs	r1, #0
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80023dc:	250a      	movs	r5, #10
	lcd_set_xy(0,0);
 80023de:	4608      	mov	r0, r1
 80023e0:	f7ff fb9c 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.ChargeAdapt));
 80023e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80023e6:	f7fe ff8f 	bl	8001308 <itoa>
 80023ea:	f7ff fc17 	bl	8001c1c <PrintToLCD>
	PrintToLCD("% ");
 80023ee:	4814      	ldr	r0, [pc, #80]	; (8002440 <MenuSettingsChargeAddapt+0x74>)
 80023f0:	f7ff fc14 	bl	8001c1c <PrintToLCD>
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80023f4:	6a20      	ldr	r0, [r4, #32]
 80023f6:	2101      	movs	r1, #1
 80023f8:	fbb0 f0f5 	udiv	r0, r0, r5
 80023fc:	f7fe fff8 	bl	80013f0 <itoa_koma>
 8002400:	f7ff fc0c 	bl	8001c1c <PrintToLCD>
	PrintToLCD("V ");
 8002404:	480f      	ldr	r0, [pc, #60]	; (8002444 <MenuSettingsChargeAddapt+0x78>)
 8002406:	f7ff fc09 	bl	8001c1c <PrintToLCD>
	PrintToLCD(itoa_koma((SettingsData.MaxVoltage-(SettingsData.MaxVoltage * SettingsData.ChargeAdapt/100))/10,1));
 800240a:	2264      	movs	r2, #100	; 0x64
 800240c:	6a23      	ldr	r3, [r4, #32]
 800240e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002410:	2101      	movs	r1, #1
 8002412:	4358      	muls	r0, r3
 8002414:	fbb0 f0f2 	udiv	r0, r0, r2
 8002418:	1a18      	subs	r0, r3, r0
 800241a:	fbb0 f0f5 	udiv	r0, r0, r5
 800241e:	f7fe ffe7 	bl	80013f0 <itoa_koma>
 8002422:	f7ff fbfb 	bl	8001c1c <PrintToLCD>
}
 8002426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PrintToLCD("V   ");
 800242a:	4807      	ldr	r0, [pc, #28]	; (8002448 <MenuSettingsChargeAddapt+0x7c>)
 800242c:	f7ff bbf6 	b.w	8001c1c <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.ChargeAdapt--;
 8002430:	2801      	cmp	r0, #1
 8002432:	d1d2      	bne.n	80023da <MenuSettingsChargeAddapt+0xe>
 8002434:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002436:	3b01      	subs	r3, #1
 8002438:	e7ce      	b.n	80023d8 <MenuSettingsChargeAddapt+0xc>
 800243a:	bf00      	nop
 800243c:	20000154 	.word	0x20000154
 8002440:	08006515 	.word	0x08006515
 8002444:	08006518 	.word	0x08006518
 8002448:	080064cc 	.word	0x080064cc

0800244c <SelectedOption>:
	if (SelectedOptionValue == SettingsData.Option1)
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <SelectedOption+0x14>)
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <SelectedOption+0x18>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d101      	bne.n	800245c <SelectedOption+0x10>
 8002458:	f7ff bd36 	b.w	8001ec8 <SelectedOption.part.8>
}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000154 	.word	0x20000154
 8002464:	20000a2c 	.word	0x20000a2c

08002468 <SelectedOption1>:
	if (SelectedOptionValue1 == SettingsData.Option2)
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <SelectedOption1+0x14>)
 800246a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <SelectedOption1+0x18>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d101      	bne.n	8002478 <SelectedOption1+0x10>
 8002474:	f7ff bd28 	b.w	8001ec8 <SelectedOption.part.8>
}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000154 	.word	0x20000154
 8002480:	20000a24 	.word	0x20000a24

08002484 <MenuSettingsSaveMenuPosWhenOFF>:
	lcd_set_xy(0,0);
 8002484:	2100      	movs	r1, #0
{
 8002486:	b510      	push	{r4, lr}
 8002488:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 800248a:	4608      	mov	r0, r1
 800248c:	f7ff fb46 	bl	8001b1c <lcd_set_xy>
	if (key == KEY_NEXT)
 8002490:	2c02      	cmp	r4, #2
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <MenuSettingsSaveMenuPosWhenOFF+0x6c>)
 8002494:	d10f      	bne.n	80024b6 <MenuSettingsSaveMenuPosWhenOFF+0x32>
		SettingsData.Option1++;
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	3201      	adds	r2, #1
		if (SettingsData.Option1==QUANTITY_OPTIONS+1) SettingsData.Option1=1;
 800249a:	2a08      	cmp	r2, #8
 800249c:	bf08      	it	eq
 800249e:	2201      	moveq	r2, #1
		if (SettingsData.Option1==0) SettingsData.Option1 = QUANTITY_OPTIONS;
 80024a0:	609a      	str	r2, [r3, #8]
	switch (SettingsData.Option1)
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	3a01      	subs	r2, #1
 80024a6:	2a06      	cmp	r2, #6
 80024a8:	d81f      	bhi.n	80024ea <MenuSettingsSaveMenuPosWhenOFF+0x66>
 80024aa:	e8df f002 	tbb	[pc, r2]
 80024ae:	120b      	.short	0x120b
 80024b0:	1a181614 	.word	0x1a181614
 80024b4:	1c          	.byte	0x1c
 80024b5:	00          	.byte	0x00
	if (key == KEY_BACK)
 80024b6:	2c01      	cmp	r4, #1
 80024b8:	d1f3      	bne.n	80024a2 <MenuSettingsSaveMenuPosWhenOFF+0x1e>
		SettingsData.Option1--;
 80024ba:	689a      	ldr	r2, [r3, #8]
		if (SettingsData.Option1==0) SettingsData.Option1 = QUANTITY_OPTIONS;
 80024bc:	3a01      	subs	r2, #1
 80024be:	bf08      	it	eq
 80024c0:	2207      	moveq	r2, #7
 80024c2:	e7ed      	b.n	80024a0 <MenuSettingsSaveMenuPosWhenOFF+0x1c>
			PrintToLCD("PowerSupply     ");
 80024c4:	480b      	ldr	r0, [pc, #44]	; (80024f4 <MenuSettingsSaveMenuPosWhenOFF+0x70>)
			PrintToLCD("Swing           ");
 80024c6:	f7ff fba9 	bl	8001c1c <PrintToLCD>
}
 80024ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			SelectedOption();
 80024ce:	f7ff bfbd 	b.w	800244c <SelectedOption>
			PrintToLCD("Load Menu       ");
 80024d2:	4809      	ldr	r0, [pc, #36]	; (80024f8 <MenuSettingsSaveMenuPosWhenOFF+0x74>)
 80024d4:	e7f7      	b.n	80024c6 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("Charge CC CV    ");
 80024d6:	4809      	ldr	r0, [pc, #36]	; (80024fc <MenuSettingsSaveMenuPosWhenOFF+0x78>)
 80024d8:	e7f5      	b.n	80024c6 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("Charge addapt   ");
 80024da:	4809      	ldr	r0, [pc, #36]	; (8002500 <MenuSettingsSaveMenuPosWhenOFF+0x7c>)
 80024dc:	e7f3      	b.n	80024c6 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("DisCharge       ");
 80024de:	4809      	ldr	r0, [pc, #36]	; (8002504 <MenuSettingsSaveMenuPosWhenOFF+0x80>)
 80024e0:	e7f1      	b.n	80024c6 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("Training        ");
 80024e2:	4809      	ldr	r0, [pc, #36]	; (8002508 <MenuSettingsSaveMenuPosWhenOFF+0x84>)
 80024e4:	e7ef      	b.n	80024c6 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("Swing           ");
 80024e6:	4809      	ldr	r0, [pc, #36]	; (800250c <MenuSettingsSaveMenuPosWhenOFF+0x88>)
 80024e8:	e7ed      	b.n	80024c6 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			SettingsData.Option1 =1;
 80024ea:	2201      	movs	r2, #1
 80024ec:	609a      	str	r2, [r3, #8]
}
 80024ee:	bd10      	pop	{r4, pc}
 80024f0:	20000154 	.word	0x20000154
 80024f4:	08006553 	.word	0x08006553
 80024f8:	08006564 	.word	0x08006564
 80024fc:	08006575 	.word	0x08006575
 8002500:	08006586 	.word	0x08006586
 8002504:	08006597 	.word	0x08006597
 8002508:	080065a8 	.word	0x080065a8
 800250c:	080065b9 	.word	0x080065b9

08002510 <MenuSettingsOutAfterPowerUp>:
	lcd_set_xy(0,0);
 8002510:	2100      	movs	r1, #0
{
 8002512:	b510      	push	{r4, lr}
 8002514:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8002516:	4608      	mov	r0, r1
 8002518:	f7ff fb00 	bl	8001b1c <lcd_set_xy>
	if (key == KEY_NEXT)
 800251c:	2c02      	cmp	r4, #2
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <MenuSettingsOutAfterPowerUp+0x58>)
 8002520:	d113      	bne.n	800254a <MenuSettingsOutAfterPowerUp+0x3a>
		SettingsData.Option2++;
 8002522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002524:	3201      	adds	r2, #1
		if (SettingsData.Option2==QUANTITY_OPTIONS1+1) SettingsData.Option2=1;
 8002526:	2a04      	cmp	r2, #4
 8002528:	bf08      	it	eq
 800252a:	2201      	moveq	r2, #1
		if (SettingsData.Option2==0) SettingsData.Option2 = QUANTITY_OPTIONS1;
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
	switch (SettingsData.Option2)
 800252e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002530:	2a02      	cmp	r2, #2
 8002532:	d011      	beq.n	8002558 <MenuSettingsOutAfterPowerUp+0x48>
 8002534:	2a03      	cmp	r2, #3
 8002536:	d011      	beq.n	800255c <MenuSettingsOutAfterPowerUp+0x4c>
 8002538:	2a01      	cmp	r2, #1
 800253a:	d111      	bne.n	8002560 <MenuSettingsOutAfterPowerUp+0x50>
			PrintToLCD("OFF             ");
 800253c:	480b      	ldr	r0, [pc, #44]	; (800256c <MenuSettingsOutAfterPowerUp+0x5c>)
			PrintToLCD("Previous        ");
 800253e:	f7ff fb6d 	bl	8001c1c <PrintToLCD>
}
 8002542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			SelectedOption1();
 8002546:	f7ff bf8f 	b.w	8002468 <SelectedOption1>
	if (key == KEY_BACK)
 800254a:	2c01      	cmp	r4, #1
 800254c:	d1ef      	bne.n	800252e <MenuSettingsOutAfterPowerUp+0x1e>
		SettingsData.Option2--;
 800254e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		if (SettingsData.Option2==0) SettingsData.Option2 = QUANTITY_OPTIONS1;
 8002550:	3a01      	subs	r2, #1
 8002552:	bf08      	it	eq
 8002554:	2203      	moveq	r2, #3
 8002556:	e7e9      	b.n	800252c <MenuSettingsOutAfterPowerUp+0x1c>
			PrintToLCD("ON              ");
 8002558:	4805      	ldr	r0, [pc, #20]	; (8002570 <MenuSettingsOutAfterPowerUp+0x60>)
 800255a:	e7f0      	b.n	800253e <MenuSettingsOutAfterPowerUp+0x2e>
			PrintToLCD("Previous        ");
 800255c:	4805      	ldr	r0, [pc, #20]	; (8002574 <MenuSettingsOutAfterPowerUp+0x64>)
 800255e:	e7ee      	b.n	800253e <MenuSettingsOutAfterPowerUp+0x2e>
			SettingsData.Option2 =1;
 8002560:	2201      	movs	r2, #1
 8002562:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002564:	bd10      	pop	{r4, pc}
 8002566:	bf00      	nop
 8002568:	20000154 	.word	0x20000154
 800256c:	08006520 	.word	0x08006520
 8002570:	08006531 	.word	0x08006531
 8002574:	08006542 	.word	0x08006542

08002578 <BUT_Debrief>:
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <BUT_Debrief+0x58>)
 800257a:	4916      	ldr	r1, [pc, #88]	; (80025d4 <BUT_Debrief+0x5c>)
 800257c:	689a      	ldr	r2, [r3, #8]
int16_t comp = 0;
void BUT_Debrief(void)
{
	Key_Pressed_t key;

  if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_4))
 800257e:	f012 0f10 	tst.w	r2, #16
 8002582:	d00c      	beq.n	800259e <BUT_Debrief+0x26>
 8002584:	689a      	ldr	r2, [r3, #8]
    key = KEY_OK;
  else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_5))
 8002586:	0690      	lsls	r0, r2, #26
 8002588:	d516      	bpl.n	80025b8 <BUT_Debrief+0x40>
 800258a:	689a      	ldr	r2, [r3, #8]
    key = KEY_NEXT;
  else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_6))
 800258c:	0652      	lsls	r2, r2, #25
 800258e:	d515      	bpl.n	80025bc <BUT_Debrief+0x44>
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	43db      	mvns	r3, r3
    key = KEY_BACK;
  else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_7))
 8002594:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002598:	d112      	bne.n	80025c0 <BUT_Debrief+0x48>
      {
       pressedKey = key;
        return;
      }
    }
    else comp=0;
 800259a:	800b      	strh	r3, [r1, #0]
 800259c:	4770      	bx	lr
    key = KEY_OK;
 800259e:	2203      	movs	r2, #3
      if (comp > THRESHOLD2)
 80025a0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80025a4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80025a8:	4283      	cmp	r3, r0
 80025aa:	dd0b      	ble.n	80025c4 <BUT_Debrief+0x4c>
        comp = THRESHOLD2 - 40;
 80025ac:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80025b0:	800b      	strh	r3, [r1, #0]
       pressedKey = key;
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <BUT_Debrief+0x60>)
 80025b4:	701a      	strb	r2, [r3, #0]
        return;
 80025b6:	e00a      	b.n	80025ce <BUT_Debrief+0x56>
    key = KEY_NEXT;
 80025b8:	2202      	movs	r2, #2
 80025ba:	e7f1      	b.n	80025a0 <BUT_Debrief+0x28>
    key = KEY_BACK;
 80025bc:	2201      	movs	r2, #1
 80025be:	e7ef      	b.n	80025a0 <BUT_Debrief+0x28>
    key = KEY_UP;
 80025c0:	2204      	movs	r2, #4
 80025c2:	e7ed      	b.n	80025a0 <BUT_Debrief+0x28>
      else comp++;
 80025c4:	3301      	adds	r3, #1
 80025c6:	b21b      	sxth	r3, r3
      if (comp == THRESHOLD)
 80025c8:	2b14      	cmp	r3, #20
      else comp++;
 80025ca:	800b      	strh	r3, [r1, #0]
      if (comp == THRESHOLD)
 80025cc:	d0f1      	beq.n	80025b2 <BUT_Debrief+0x3a>
}
 80025ce:	4770      	bx	lr
 80025d0:	40010c00 	.word	0x40010c00
 80025d4:	200007f0 	.word	0x200007f0
 80025d8:	200007f4 	.word	0x200007f4

080025dc <BUT_GetKey>:


Key_Pressed_t BUT_GetKey(void)
{
	if (pressedKey) PowerOffTimesec=0;
 80025dc:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <BUT_GetKey+0x14>)
 80025de:	7818      	ldrb	r0, [r3, #0]
 80025e0:	b110      	cbz	r0, 80025e8 <BUT_GetKey+0xc>
 80025e2:	2100      	movs	r1, #0
 80025e4:	4a03      	ldr	r2, [pc, #12]	; (80025f4 <BUT_GetKey+0x18>)
 80025e6:	6011      	str	r1, [r2, #0]
	Key_Pressed_t key = pressedKey;
	pressedKey = 0;
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
	return key;
}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	200007f4 	.word	0x200007f4
 80025f4:	200007ac 	.word	0x200007ac

080025f8 <Start_Timer_sec>:



void Start_Timer_sec()
{
	Timer_Sec = 0;
 80025f8:	2200      	movs	r2, #0
 80025fa:	4b03      	ldr	r3, [pc, #12]	; (8002608 <Start_Timer_sec+0x10>)
 80025fc:	601a      	str	r2, [r3, #0]
	Status_Timer_Sec = 1;
 80025fe:	2201      	movs	r2, #1
 8002600:	4b02      	ldr	r3, [pc, #8]	; (800260c <Start_Timer_sec+0x14>)
 8002602:	701a      	strb	r2, [r3, #0]
}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	200007e0 	.word	0x200007e0
 800260c:	200007b2 	.word	0x200007b2

08002610 <ClockOnLCD_noSec>:
	if (strlen1(string)<2) lcd_out("0",1);
	lcd_out(string,1);

}
void ClockOnLCD_noSec (uint32_t time)
{
 8002610:	b538      	push	{r3, r4, r5, lr}
 8002612:	4604      	mov	r4, r0
	char *string;
	//(" ",1);
	string = itoa(time/3600);
 8002614:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8002618:	fbb4 f0f0 	udiv	r0, r4, r0
 800261c:	f7fe fe74 	bl	8001308 <itoa>
 8002620:	4605      	mov	r5, r0
	if (strlen1(string)<2) lcd_out("0",1);
 8002622:	f7fe ffbc 	bl	800159e <strlen1>
 8002626:	2801      	cmp	r0, #1
 8002628:	d803      	bhi.n	8002632 <ClockOnLCD_noSec+0x22>
 800262a:	2101      	movs	r1, #1
 800262c:	4811      	ldr	r0, [pc, #68]	; (8002674 <ClockOnLCD_noSec+0x64>)
 800262e:	f7ff fa87 	bl	8001b40 <lcd_out>
	lcd_out(string,1);
 8002632:	2101      	movs	r1, #1
 8002634:	4628      	mov	r0, r5
 8002636:	f7ff fa83 	bl	8001b40 <lcd_out>

	lcd_out(":",1);
 800263a:	2101      	movs	r1, #1
 800263c:	480e      	ldr	r0, [pc, #56]	; (8002678 <ClockOnLCD_noSec+0x68>)
 800263e:	f7ff fa7f 	bl	8001b40 <lcd_out>
	string = itoa((time/60)%60);
 8002642:	233c      	movs	r3, #60	; 0x3c
 8002644:	fbb4 f4f3 	udiv	r4, r4, r3
 8002648:	fbb4 f0f3 	udiv	r0, r4, r3
 800264c:	fb03 4010 	mls	r0, r3, r0, r4
 8002650:	f7fe fe5a 	bl	8001308 <itoa>
 8002654:	4604      	mov	r4, r0
	if (strlen1(string)<2) lcd_out("0",1);
 8002656:	f7fe ffa2 	bl	800159e <strlen1>
 800265a:	2801      	cmp	r0, #1
 800265c:	d803      	bhi.n	8002666 <ClockOnLCD_noSec+0x56>
 800265e:	2101      	movs	r1, #1
 8002660:	4804      	ldr	r0, [pc, #16]	; (8002674 <ClockOnLCD_noSec+0x64>)
 8002662:	f7ff fa6d 	bl	8001b40 <lcd_out>
	lcd_out(string,1);
 8002666:	4620      	mov	r0, r4


}
 8002668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_out(string,1);
 800266c:	2101      	movs	r1, #1
 800266e:	f7ff ba67 	b.w	8001b40 <lcd_out>
 8002672:	bf00      	nop
 8002674:	080062ef 	.word	0x080062ef
 8002678:	08006379 	.word	0x08006379

0800267c <OUT_OFF>:
*/

void OUT_OFF()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	GPIOB->BSRR =  GPIO_BSRR_BR0;//ON-OFF OUT
 800267c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <OUT_OFF+0x20>)
 8002682:	611a      	str	r2, [r3, #16]
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1
	GPIOA->BSRR =  GPIO_BSRR_BR8;//led out on/off
 8002684:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002688:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800268c:	611a      	str	r2, [r3, #16]
	On_off = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	4a03      	ldr	r2, [pc, #12]	; (80026a0 <OUT_OFF+0x24>)
 8002692:	7013      	strb	r3, [r2, #0]
	Status_Out = 0;
 8002694:	4a03      	ldr	r2, [pc, #12]	; (80026a4 <OUT_OFF+0x28>)
 8002696:	7013      	strb	r3, [r2, #0]
}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40010c00 	.word	0x40010c00
 80026a0:	200007aa 	.word	0x200007aa
 80026a4:	200007b1 	.word	0x200007b1

080026a8 <OUT_ON>:
void OUT_ON()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	GPIOB->BSRR =  GPIO_BSRR_BS0;//ON-OFF OUT
 80026a8:	2301      	movs	r3, #1
 80026aa:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <OUT_ON+0x18>)
 80026ac:	6113      	str	r3, [r2, #16]
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1
	On_off = 1;
 80026ae:	4a05      	ldr	r2, [pc, #20]	; (80026c4 <OUT_ON+0x1c>)
 80026b0:	7013      	strb	r3, [r2, #0]
	Status_Out = 1;
 80026b2:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <OUT_ON+0x20>)
 80026b4:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS8;//led out on/off
 80026b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ba:	4b04      	ldr	r3, [pc, #16]	; (80026cc <OUT_ON+0x24>)
 80026bc:	611a      	str	r2, [r3, #16]
}
 80026be:	4770      	bx	lr
 80026c0:	40010c00 	.word	0x40010c00
 80026c4:	200007aa 	.word	0x200007aa
 80026c8:	200007b1 	.word	0x200007b1
 80026cc:	40010800 	.word	0x40010800

080026d0 <OUTStateAfterPowerUpFunction>:
    if (OutStateAfterPowerUp ==2)
 80026d0:	4909      	ldr	r1, [pc, #36]	; (80026f8 <OUTStateAfterPowerUpFunction+0x28>)
{
 80026d2:	b508      	push	{r3, lr}
    if (OutStateAfterPowerUp ==2)
 80026d4:	680b      	ldr	r3, [r1, #0]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d103      	bne.n	80026e2 <OUTStateAfterPowerUpFunction+0x12>
    	OUT_ON();
 80026da:	f7ff ffe5 	bl	80026a8 <OUT_ON>
    	OutStateAfterPowerUp = 1;
 80026de:	2301      	movs	r3, #1
 80026e0:	600b      	str	r3, [r1, #0]
    if (OutStateAfterPowerUp ==3)
 80026e2:	680b      	ldr	r3, [r1, #0]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d106      	bne.n	80026f6 <OUTStateAfterPowerUpFunction+0x26>
    	if (SaveDataWhenPowerOff.OutState==1)
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <OUTStateAfterPowerUpFunction+0x2c>)
 80026ea:	6998      	ldr	r0, [r3, #24]
 80026ec:	2801      	cmp	r0, #1
 80026ee:	d102      	bne.n	80026f6 <OUTStateAfterPowerUpFunction+0x26>
    		OUT_ON();
 80026f0:	f7ff ffda 	bl	80026a8 <OUT_ON>
    		OutStateAfterPowerUp = 1;
 80026f4:	6008      	str	r0, [r1, #0]
}
 80026f6:	bd08      	pop	{r3, pc}
 80026f8:	20000274 	.word	0x20000274
 80026fc:	200000f4 	.word	0x200000f4

08002700 <MenuPowerSupply>:
	lcd_set_xy(0,0);
 8002700:	2100      	movs	r1, #0
{
 8002702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status = 1;
 8002706:	2601      	movs	r6, #1
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <MenuPowerSupply+0xb0>)
	if (On_off == 0)
 800270a:	4d2a      	ldr	r5, [pc, #168]	; (80027b4 <MenuPowerSupply+0xb4>)
{
 800270c:	4607      	mov	r7, r0
	lcd_set_xy(0,0);
 800270e:	4608      	mov	r0, r1
	EnterInMenu_Status = 1;
 8002710:	701e      	strb	r6, [r3, #0]
	lcd_set_xy(0,0);
 8002712:	f7ff fa03 	bl	8001b1c <lcd_set_xy>
	if (On_off == 0)
 8002716:	782b      	ldrb	r3, [r5, #0]
 8002718:	4c27      	ldr	r4, [pc, #156]	; (80027b8 <MenuPowerSupply+0xb8>)
 800271a:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 800271e:	bb3b      	cbnz	r3, 8002770 <MenuPowerSupply+0x70>
		PrintToLCD(itoa_koma(U_PS,2));
 8002720:	4b26      	ldr	r3, [pc, #152]	; (80027bc <MenuPowerSupply+0xbc>)
 8002722:	2102      	movs	r1, #2
 8002724:	8818      	ldrh	r0, [r3, #0]
 8002726:	f7fe fe63 	bl	80013f0 <itoa_koma>
 800272a:	f7ff fa77 	bl	8001c1c <PrintToLCD>
		PrintToLCD("V  ");
 800272e:	4824      	ldr	r0, [pc, #144]	; (80027c0 <MenuPowerSupply+0xc0>)
 8002730:	f7ff fa74 	bl	8001c1c <PrintToLCD>
		lcd_set_xy(7,0);
 8002734:	4641      	mov	r1, r8
 8002736:	2007      	movs	r0, #7
 8002738:	f7ff f9f0 	bl	8001b1c <lcd_set_xy>
		PrintToLCD(itoa(Current));
 800273c:	8820      	ldrh	r0, [r4, #0]
 800273e:	b200      	sxth	r0, r0
 8002740:	f7fe fde2 	bl	8001308 <itoa>
 8002744:	f7ff fa6a 	bl	8001c1c <PrintToLCD>
		PrintToLCD("mA   ");
 8002748:	481e      	ldr	r0, [pc, #120]	; (80027c4 <MenuPowerSupply+0xc4>)
 800274a:	f7ff fa67 	bl	8001c1c <PrintToLCD>
		lcd_set_xy(5,1);
 800274e:	2005      	movs	r0, #5
 8002750:	4631      	mov	r1, r6
 8002752:	f7ff f9e3 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("OFF ");
 8002756:	481c      	ldr	r0, [pc, #112]	; (80027c8 <MenuPowerSupply+0xc8>)
		PrintToLCD("ON ");
 8002758:	f7ff fa60 	bl	8001c1c <PrintToLCD>
    if (key == KEY_NEXT)
 800275c:	2f02      	cmp	r7, #2
 800275e:	d103      	bne.n	8002768 <MenuPowerSupply+0x68>
    	if (On_off == 0)
 8002760:	782b      	ldrb	r3, [r5, #0]
 8002762:	bb13      	cbnz	r3, 80027aa <MenuPowerSupply+0xaa>
    		OUT_ON();
 8002764:	f7ff ffa0 	bl	80026a8 <OUT_ON>
}
 8002768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    OUTStateAfterPowerUpFunction();
 800276c:	f7ff bfb0 	b.w	80026d0 <OUTStateAfterPowerUpFunction>
		PrintToLCD(itoa_koma(U_OUT,2));
 8002770:	4b16      	ldr	r3, [pc, #88]	; (80027cc <MenuPowerSupply+0xcc>)
 8002772:	2102      	movs	r1, #2
 8002774:	8818      	ldrh	r0, [r3, #0]
 8002776:	f7fe fe3b 	bl	80013f0 <itoa_koma>
 800277a:	f7ff fa4f 	bl	8001c1c <PrintToLCD>
		PrintToLCD("V  ");
 800277e:	4810      	ldr	r0, [pc, #64]	; (80027c0 <MenuPowerSupply+0xc0>)
 8002780:	f7ff fa4c 	bl	8001c1c <PrintToLCD>
		lcd_set_xy(7,0);
 8002784:	2100      	movs	r1, #0
 8002786:	2007      	movs	r0, #7
 8002788:	f7ff f9c8 	bl	8001b1c <lcd_set_xy>
		PrintToLCD(itoa(Current));
 800278c:	8820      	ldrh	r0, [r4, #0]
 800278e:	b200      	sxth	r0, r0
 8002790:	f7fe fdba 	bl	8001308 <itoa>
 8002794:	f7ff fa42 	bl	8001c1c <PrintToLCD>
		PrintToLCD("mA    ");
 8002798:	480d      	ldr	r0, [pc, #52]	; (80027d0 <MenuPowerSupply+0xd0>)
 800279a:	f7ff fa3f 	bl	8001c1c <PrintToLCD>
		lcd_set_xy(6,1);
 800279e:	2006      	movs	r0, #6
 80027a0:	4631      	mov	r1, r6
 80027a2:	f7ff f9bb 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("ON ");
 80027a6:	480b      	ldr	r0, [pc, #44]	; (80027d4 <MenuPowerSupply+0xd4>)
 80027a8:	e7d6      	b.n	8002758 <MenuPowerSupply+0x58>
    		OUT_OFF();
 80027aa:	f7ff ff67 	bl	800267c <OUT_OFF>
 80027ae:	e7db      	b.n	8002768 <MenuPowerSupply+0x68>
 80027b0:	200007a8 	.word	0x200007a8
 80027b4:	200007aa 	.word	0x200007aa
 80027b8:	2000086a 	.word	0x2000086a
 80027bc:	20000884 	.word	0x20000884
 80027c0:	08006425 	.word	0x08006425
 80027c4:	08006429 	.word	0x08006429
 80027c8:	080062e2 	.word	0x080062e2
 80027cc:	2000087e 	.word	0x2000087e
 80027d0:	0800642f 	.word	0x0800642f
 80027d4:	08006436 	.word	0x08006436

080027d8 <MenuCalibration_CURRENT_Out>:
	EnterInMenu_Status=1;
 80027d8:	2201      	movs	r2, #1
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <MenuCalibration_CURRENT_Out+0x5c>)
{
 80027dc:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 80027de:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 80027e0:	f7ff ff62 	bl	80026a8 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForCurrent++;
 80027e4:	2802      	cmp	r0, #2
 80027e6:	4c14      	ldr	r4, [pc, #80]	; (8002838 <MenuCalibration_CURRENT_Out+0x60>)
 80027e8:	d11e      	bne.n	8002828 <MenuCalibration_CURRENT_Out+0x50>
 80027ea:	69a3      	ldr	r3, [r4, #24]
 80027ec:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent--;
 80027ee:	61a3      	str	r3, [r4, #24]
	lcd_set_xy(0,0);
 80027f0:	2100      	movs	r1, #0
 80027f2:	4608      	mov	r0, r1
 80027f4:	f7ff f992 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForCurrent));
 80027f8:	69a0      	ldr	r0, [r4, #24]
 80027fa:	f7fe fd85 	bl	8001308 <itoa>
 80027fe:	f7ff fa0d 	bl	8001c1c <PrintToLCD>
	PrintToLCD("   ");
 8002802:	480e      	ldr	r0, [pc, #56]	; (800283c <MenuCalibration_CURRENT_Out+0x64>)
 8002804:	f7ff fa0a 	bl	8001c1c <PrintToLCD>
	lcd_set_xy(0,1);
 8002808:	2101      	movs	r1, #1
 800280a:	2000      	movs	r0, #0
 800280c:	f7ff f986 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa(Current));
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <MenuCalibration_CURRENT_Out+0x68>)
 8002812:	8818      	ldrh	r0, [r3, #0]
 8002814:	b200      	sxth	r0, r0
 8002816:	f7fe fd77 	bl	8001308 <itoa>
 800281a:	f7ff f9ff 	bl	8001c1c <PrintToLCD>
}
 800281e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("mA  ");
 8002822:	4808      	ldr	r0, [pc, #32]	; (8002844 <MenuCalibration_CURRENT_Out+0x6c>)
 8002824:	f7ff b9fa 	b.w	8001c1c <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent--;
 8002828:	2801      	cmp	r0, #1
 800282a:	d1e1      	bne.n	80027f0 <MenuCalibration_CURRENT_Out+0x18>
 800282c:	69a3      	ldr	r3, [r4, #24]
 800282e:	3b01      	subs	r3, #1
 8002830:	e7dd      	b.n	80027ee <MenuCalibration_CURRENT_Out+0x16>
 8002832:	bf00      	nop
 8002834:	200007a8 	.word	0x200007a8
 8002838:	20000004 	.word	0x20000004
 800283c:	0800653e 	.word	0x0800653e
 8002840:	2000086a 	.word	0x2000086a
 8002844:	08006350 	.word	0x08006350

08002848 <MenuCalibration_VoltagePS>:
	EnterInMenu_Status=1;
 8002848:	2201      	movs	r2, #1
 800284a:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <MenuCalibration_VoltagePS+0x5c>)
{
 800284c:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 800284e:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8002850:	f7ff ff2a 	bl	80026a8 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForVoltage++;
 8002854:	2802      	cmp	r0, #2
 8002856:	4c14      	ldr	r4, [pc, #80]	; (80028a8 <MenuCalibration_VoltagePS+0x60>)
 8002858:	d11e      	bne.n	8002898 <MenuCalibration_VoltagePS+0x50>
 800285a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800285c:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage--;
 800285e:	62a3      	str	r3, [r4, #40]	; 0x28
	lcd_set_xy(0,0);
 8002860:	2100      	movs	r1, #0
 8002862:	4608      	mov	r0, r1
 8002864:	f7ff f95a 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForVoltage));
 8002868:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800286a:	f7fe fd4d 	bl	8001308 <itoa>
 800286e:	f7ff f9d5 	bl	8001c1c <PrintToLCD>
	PrintToLCD("   ");
 8002872:	480e      	ldr	r0, [pc, #56]	; (80028ac <MenuCalibration_VoltagePS+0x64>)
 8002874:	f7ff f9d2 	bl	8001c1c <PrintToLCD>
	lcd_set_xy(0,1);
 8002878:	2101      	movs	r1, #1
 800287a:	2000      	movs	r0, #0
 800287c:	f7ff f94e 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa_koma(U_PS,2));
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <MenuCalibration_VoltagePS+0x68>)
 8002882:	2102      	movs	r1, #2
 8002884:	8818      	ldrh	r0, [r3, #0]
 8002886:	f7fe fdb3 	bl	80013f0 <itoa_koma>
 800288a:	f7ff f9c7 	bl	8001c1c <PrintToLCD>
}
 800288e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8002892:	4808      	ldr	r0, [pc, #32]	; (80028b4 <MenuCalibration_VoltagePS+0x6c>)
 8002894:	f7ff b9c2 	b.w	8001c1c <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage--;
 8002898:	2801      	cmp	r0, #1
 800289a:	d1e1      	bne.n	8002860 <MenuCalibration_VoltagePS+0x18>
 800289c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800289e:	3b01      	subs	r3, #1
 80028a0:	e7dd      	b.n	800285e <MenuCalibration_VoltagePS+0x16>
 80028a2:	bf00      	nop
 80028a4:	200007a8 	.word	0x200007a8
 80028a8:	20000004 	.word	0x20000004
 80028ac:	0800653e 	.word	0x0800653e
 80028b0:	20000884 	.word	0x20000884
 80028b4:	08006425 	.word	0x08006425

080028b8 <MenuCalibration_VoltageOut>:
	EnterInMenu_Status=1;
 80028b8:	2201      	movs	r2, #1
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <MenuCalibration_VoltageOut+0x5c>)
{
 80028bc:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 80028be:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 80028c0:	f7ff fef2 	bl	80026a8 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForVoltage1++;
 80028c4:	2802      	cmp	r0, #2
 80028c6:	4c14      	ldr	r4, [pc, #80]	; (8002918 <MenuCalibration_VoltageOut+0x60>)
 80028c8:	d11e      	bne.n	8002908 <MenuCalibration_VoltageOut+0x50>
 80028ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80028cc:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage1--;
 80028ce:	6323      	str	r3, [r4, #48]	; 0x30
	lcd_set_xy(0,0);
 80028d0:	2100      	movs	r1, #0
 80028d2:	4608      	mov	r0, r1
 80028d4:	f7ff f922 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForVoltage1));
 80028d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80028da:	f7fe fd15 	bl	8001308 <itoa>
 80028de:	f7ff f99d 	bl	8001c1c <PrintToLCD>
	PrintToLCD("   ");
 80028e2:	480e      	ldr	r0, [pc, #56]	; (800291c <MenuCalibration_VoltageOut+0x64>)
 80028e4:	f7ff f99a 	bl	8001c1c <PrintToLCD>
	lcd_set_xy(0,1);
 80028e8:	2101      	movs	r1, #1
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7ff f916 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <MenuCalibration_VoltageOut+0x68>)
 80028f2:	2102      	movs	r1, #2
 80028f4:	8818      	ldrh	r0, [r3, #0]
 80028f6:	f7fe fd7b 	bl	80013f0 <itoa_koma>
 80028fa:	f7ff f98f 	bl	8001c1c <PrintToLCD>
}
 80028fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8002902:	4808      	ldr	r0, [pc, #32]	; (8002924 <MenuCalibration_VoltageOut+0x6c>)
 8002904:	f7ff b98a 	b.w	8001c1c <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage1--;
 8002908:	2801      	cmp	r0, #1
 800290a:	d1e1      	bne.n	80028d0 <MenuCalibration_VoltageOut+0x18>
 800290c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800290e:	3b01      	subs	r3, #1
 8002910:	e7dd      	b.n	80028ce <MenuCalibration_VoltageOut+0x16>
 8002912:	bf00      	nop
 8002914:	200007a8 	.word	0x200007a8
 8002918:	20000004 	.word	0x20000004
 800291c:	0800653e 	.word	0x0800653e
 8002920:	2000087e 	.word	0x2000087e
 8002924:	08006425 	.word	0x08006425

08002928 <MenuCalibration_VoltageIn>:
	EnterInMenu_Status=1;
 8002928:	2201      	movs	r2, #1
 800292a:	4b16      	ldr	r3, [pc, #88]	; (8002984 <MenuCalibration_VoltageIn+0x5c>)
{
 800292c:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 800292e:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8002930:	f7ff feba 	bl	80026a8 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForVoltage2++;
 8002934:	2802      	cmp	r0, #2
 8002936:	4c14      	ldr	r4, [pc, #80]	; (8002988 <MenuCalibration_VoltageIn+0x60>)
 8002938:	d11e      	bne.n	8002978 <MenuCalibration_VoltageIn+0x50>
 800293a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800293c:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage2--;
 800293e:	63a3      	str	r3, [r4, #56]	; 0x38
	lcd_set_xy(0,0);
 8002940:	2100      	movs	r1, #0
 8002942:	4608      	mov	r0, r1
 8002944:	f7ff f8ea 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForVoltage2));
 8002948:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800294a:	f7fe fcdd 	bl	8001308 <itoa>
 800294e:	f7ff f965 	bl	8001c1c <PrintToLCD>
	PrintToLCD("   ");
 8002952:	480e      	ldr	r0, [pc, #56]	; (800298c <MenuCalibration_VoltageIn+0x64>)
 8002954:	f7ff f962 	bl	8001c1c <PrintToLCD>
	lcd_set_xy(0,1);
 8002958:	2101      	movs	r1, #1
 800295a:	2000      	movs	r0, #0
 800295c:	f7ff f8de 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa_koma(U_IN,2));
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <MenuCalibration_VoltageIn+0x68>)
 8002962:	2102      	movs	r1, #2
 8002964:	8818      	ldrh	r0, [r3, #0]
 8002966:	f7fe fd43 	bl	80013f0 <itoa_koma>
 800296a:	f7ff f957 	bl	8001c1c <PrintToLCD>
}
 800296e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8002972:	4808      	ldr	r0, [pc, #32]	; (8002994 <MenuCalibration_VoltageIn+0x6c>)
 8002974:	f7ff b952 	b.w	8001c1c <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage2--;
 8002978:	2801      	cmp	r0, #1
 800297a:	d1e1      	bne.n	8002940 <MenuCalibration_VoltageIn+0x18>
 800297c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800297e:	3b01      	subs	r3, #1
 8002980:	e7dd      	b.n	800293e <MenuCalibration_VoltageIn+0x16>
 8002982:	bf00      	nop
 8002984:	200007a8 	.word	0x200007a8
 8002988:	20000004 	.word	0x20000004
 800298c:	0800653e 	.word	0x0800653e
 8002990:	20000868 	.word	0x20000868
 8002994:	08006425 	.word	0x08006425

08002998 <MenuCalibration_Resist_Comp_5V1A>:
		EnterInMenu_Status=1;
 8002998:	2201      	movs	r2, #1
{
 800299a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		EnterInMenu_Status=1;
 800299c:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <MenuCalibration_Resist_Comp_5V1A+0xac>)
 800299e:	4e2a      	ldr	r6, [pc, #168]	; (8002a48 <MenuCalibration_Resist_Comp_5V1A+0xb0>)
 80029a0:	701a      	strb	r2, [r3, #0]
		OUT_ON();
 80029a2:	f7ff fe81 	bl	80026a8 <OUT_ON>
		if (key == KEY_NEXT) ResistanceComp_Voltage++;
 80029a6:	2802      	cmp	r0, #2
 80029a8:	d12e      	bne.n	8002a08 <MenuCalibration_Resist_Comp_5V1A+0x70>
 80029aa:	8833      	ldrh	r3, [r6, #0]
 80029ac:	3301      	adds	r3, #1
		if (key == KEY_BACK) ResistanceComp_Voltage--;
 80029ae:	8033      	strh	r3, [r6, #0]
		lcd_set_xy(0,0);
 80029b0:	2100      	movs	r1, #0
 80029b2:	4608      	mov	r0, r1
 80029b4:	f7ff f8b2 	bl	8001b1c <lcd_set_xy>
		PrintToLCD(itoa_koma(ResistanceComp_Voltage,2));
 80029b8:	2102      	movs	r1, #2
 80029ba:	8830      	ldrh	r0, [r6, #0]
 80029bc:	f7fe fd18 	bl	80013f0 <itoa_koma>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 80029c0:	4f22      	ldr	r7, [pc, #136]	; (8002a4c <MenuCalibration_Resist_Comp_5V1A+0xb4>)
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 80029c2:	4c23      	ldr	r4, [pc, #140]	; (8002a50 <MenuCalibration_Resist_Comp_5V1A+0xb8>)
		PrintToLCD(itoa_koma(ResistanceComp_Voltage,2));
 80029c4:	f7ff f92a 	bl	8001c1c <PrintToLCD>
		PrintToLCD("V ");
 80029c8:	4822      	ldr	r0, [pc, #136]	; (8002a54 <MenuCalibration_Resist_Comp_5V1A+0xbc>)
 80029ca:	f7ff f927 	bl	8001c1c <PrintToLCD>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 80029ce:	883b      	ldrh	r3, [r7, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 80029d0:	8822      	ldrh	r2, [r4, #0]
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 80029d2:	b29b      	uxth	r3, r3
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 80029d4:	b212      	sxth	r2, r2
 80029d6:	2a00      	cmp	r2, #0
 80029d8:	4d1f      	ldr	r5, [pc, #124]	; (8002a58 <MenuCalibration_Resist_Comp_5V1A+0xc0>)
 80029da:	dc1a      	bgt.n	8002a12 <MenuCalibration_Resist_Comp_5V1A+0x7a>
 80029dc:	2346      	movs	r3, #70	; 0x46
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 80029de:	642b      	str	r3, [r5, #64]	; 0x40
		PrintToLCD(itoa(CalibrationData.ResistanceComp_Ishunt_Wires));
 80029e0:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80029e2:	f7fe fc91 	bl	8001308 <itoa>
 80029e6:	f7ff f919 	bl	8001c1c <PrintToLCD>
		PrintToLCD("mOm       ");
 80029ea:	481c      	ldr	r0, [pc, #112]	; (8002a5c <MenuCalibration_Resist_Comp_5V1A+0xc4>)
 80029ec:	f7ff f916 	bl	8001c1c <PrintToLCD>
		Delta = U_PS - U_OUT_ForSetResistance;
 80029f0:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <MenuCalibration_Resist_Comp_5V1A+0xc8>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	883a      	ldrh	r2, [r7, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 80029f6:	8821      	ldrh	r1, [r4, #0]
		Delta = U_PS - U_OUT_ForSetResistance;
 80029f8:	b29b      	uxth	r3, r3
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 80029fa:	b209      	sxth	r1, r1
 80029fc:	2900      	cmp	r1, #0
		Delta = U_PS - U_OUT_ForSetResistance;
 80029fe:	b292      	uxth	r2, r2
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8002a00:	dc14      	bgt.n	8002a2c <MenuCalibration_Resist_Comp_5V1A+0x94>
 8002a02:	230a      	movs	r3, #10
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8002a04:	64ab      	str	r3, [r5, #72]	; 0x48
}
 8002a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (key == KEY_BACK) ResistanceComp_Voltage--;
 8002a08:	2801      	cmp	r0, #1
 8002a0a:	d1d1      	bne.n	80029b0 <MenuCalibration_Resist_Comp_5V1A+0x18>
 8002a0c:	8833      	ldrh	r3, [r6, #0]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	e7cd      	b.n	80029ae <MenuCalibration_Resist_Comp_5V1A+0x16>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002a12:	8832      	ldrh	r2, [r6, #0]
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8002a14:	8821      	ldrh	r1, [r4, #0]
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002a16:	1a9b      	subs	r3, r3, r2
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8002a18:	f242 7210 	movw	r2, #10000	; 0x2710
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002a1c:	b21b      	sxth	r3, r3
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8002a1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a22:	4353      	muls	r3, r2
 8002a24:	b209      	sxth	r1, r1
 8002a26:	fb93 f3f1 	sdiv	r3, r3, r1
 8002a2a:	e7d8      	b.n	80029de <MenuCalibration_Resist_Comp_5V1A+0x46>
		Delta = U_PS - U_OUT_ForSetResistance;
 8002a2c:	1a9b      	subs	r3, r3, r2
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8002a2e:	f242 7210 	movw	r2, #10000	; 0x2710
		Delta = U_PS - U_OUT_ForSetResistance;
 8002a32:	b21b      	sxth	r3, r3
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8002a34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a38:	4353      	muls	r3, r2
 8002a3a:	8821      	ldrh	r1, [r4, #0]
 8002a3c:	b209      	sxth	r1, r1
 8002a3e:	fb93 f3f1 	sdiv	r3, r3, r1
 8002a42:	e7df      	b.n	8002a04 <MenuCalibration_Resist_Comp_5V1A+0x6c>
 8002a44:	200007a8 	.word	0x200007a8
 8002a48:	20000278 	.word	0x20000278
 8002a4c:	200002be 	.word	0x200002be
 8002a50:	2000086a 	.word	0x2000086a
 8002a54:	08006518 	.word	0x08006518
 8002a58:	20000004 	.word	0x20000004
 8002a5c:	08006364 	.word	0x08006364
 8002a60:	20000884 	.word	0x20000884

08002a64 <LOAD_ON>:

void LOAD_ON()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//ON-OFF OUT
	GPIOB->BSRR =  GPIO_BSRR_BS1; //load1
 8002a64:	2202      	movs	r2, #2
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <LOAD_ON+0x1c>)
 8002a68:	611a      	str	r2, [r3, #16]
	On_off = 1;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	4a05      	ldr	r2, [pc, #20]	; (8002a84 <LOAD_ON+0x20>)
 8002a6e:	7013      	strb	r3, [r2, #0]
	Status_Load = 1;
 8002a70:	4a05      	ldr	r2, [pc, #20]	; (8002a88 <LOAD_ON+0x24>)
 8002a72:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS11;//led load on/off
 8002a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <LOAD_ON+0x28>)
 8002a7a:	611a      	str	r2, [r3, #16]
}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40010c00 	.word	0x40010c00
 8002a84:	200007aa 	.word	0x200007aa
 8002a88:	200007b0 	.word	0x200007b0
 8002a8c:	40010800 	.word	0x40010800

08002a90 <discharge>:
{
 8002a90:	b508      	push	{r3, lr}
	OUT_OFF();
 8002a92:	f7ff fdf3 	bl	800267c <OUT_OFF>
	LOAD_ON();
 8002a96:	f7ff ffe5 	bl	8002a64 <LOAD_ON>
}
 8002a9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(50);
 8002a9e:	2032      	movs	r0, #50	; 0x32
 8002aa0:	f7fe bb16 	b.w	80010d0 <delay_ms>

08002aa4 <MenuCalibration_CURRENT_Load>:
{
 8002aa4:	b538      	push	{r3, r4, r5, lr}
	EnterInMenu_Status=1;
 8002aa6:	2201      	movs	r2, #1
{
 8002aa8:	4605      	mov	r5, r0
	EnterInMenu_Status=1;
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <MenuCalibration_CURRENT_Load+0x5c>)
 8002aac:	4c15      	ldr	r4, [pc, #84]	; (8002b04 <MenuCalibration_CURRENT_Load+0x60>)
 8002aae:	701a      	strb	r2, [r3, #0]
	discharge();
 8002ab0:	f7ff ffee 	bl	8002a90 <discharge>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForCurrent1++;
 8002ab4:	2d02      	cmp	r5, #2
 8002ab6:	d11e      	bne.n	8002af6 <MenuCalibration_CURRENT_Load+0x52>
 8002ab8:	6a23      	ldr	r3, [r4, #32]
 8002aba:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent1--;
 8002abc:	6223      	str	r3, [r4, #32]
	lcd_set_xy(0,0);
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4608      	mov	r0, r1
 8002ac2:	f7ff f82b 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForCurrent1));
 8002ac6:	6a20      	ldr	r0, [r4, #32]
 8002ac8:	f7fe fc1e 	bl	8001308 <itoa>
 8002acc:	f7ff f8a6 	bl	8001c1c <PrintToLCD>
	PrintToLCD("   ");
 8002ad0:	480d      	ldr	r0, [pc, #52]	; (8002b08 <MenuCalibration_CURRENT_Load+0x64>)
 8002ad2:	f7ff f8a3 	bl	8001c1c <PrintToLCD>
	lcd_set_xy(0,1);
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7ff f81f 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa(Current));
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <MenuCalibration_CURRENT_Load+0x68>)
 8002ae0:	8818      	ldrh	r0, [r3, #0]
 8002ae2:	b200      	sxth	r0, r0
 8002ae4:	f7fe fc10 	bl	8001308 <itoa>
 8002ae8:	f7ff f898 	bl	8001c1c <PrintToLCD>
}
 8002aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PrintToLCD("mA  ");
 8002af0:	4807      	ldr	r0, [pc, #28]	; (8002b10 <MenuCalibration_CURRENT_Load+0x6c>)
 8002af2:	f7ff b893 	b.w	8001c1c <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent1--;
 8002af6:	2d01      	cmp	r5, #1
 8002af8:	d1e1      	bne.n	8002abe <MenuCalibration_CURRENT_Load+0x1a>
 8002afa:	6a23      	ldr	r3, [r4, #32]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	e7dd      	b.n	8002abc <MenuCalibration_CURRENT_Load+0x18>
 8002b00:	200007a8 	.word	0x200007a8
 8002b04:	20000004 	.word	0x20000004
 8002b08:	0800653e 	.word	0x0800653e
 8002b0c:	2000086a 	.word	0x2000086a
 8002b10:	08006350 	.word	0x08006350

08002b14 <discharge1>:
{
 8002b14:	b508      	push	{r3, lr}
	if (ChargeDischargeState !=2)
 8002b16:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <discharge1+0x38>)
 8002b18:	f993 2000 	ldrsb.w	r2, [r3]
 8002b1c:	2a02      	cmp	r2, #2
 8002b1e:	d013      	beq.n	8002b48 <discharge1+0x34>
		ChargeDischargeState = 2;
 8002b20:	2202      	movs	r2, #2
 8002b22:	701a      	strb	r2, [r3, #0]
		OUT_OFF();
 8002b24:	f7ff fdaa 	bl	800267c <OUT_OFF>
		LOAD_ON();
 8002b28:	f7ff ff9c 	bl	8002a64 <LOAD_ON>
		TimerForReadyMeasurement_ms = 0;
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <discharge1+0x3c>)
		delay_ms(50);
 8002b30:	2032      	movs	r0, #50	; 0x32
		TimerForReadyMeasurement_ms = 0;
 8002b32:	601a      	str	r2, [r3, #0]
		delay_ms(50);
 8002b34:	f7fe facc 	bl	80010d0 <delay_ms>
		logDebug("DIsCharge");
 8002b38:	4806      	ldr	r0, [pc, #24]	; (8002b54 <discharge1+0x40>)
 8002b3a:	f002 fd01 	bl	8005540 <printToBufferWithoutEndUART1>
}
 8002b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logDebug("DIsCharge");
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <discharge1+0x44>)
 8002b44:	f002 bc92 	b.w	800546c <printToBufferUART1>
}
 8002b48:	bd08      	pop	{r3, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000792 	.word	0x20000792
 8002b50:	200007dc 	.word	0x200007dc
 8002b54:	08006059 	.word	0x08006059
 8002b58:	08007151 	.word	0x08007151

08002b5c <LOAD_OFF>:

void LOAD_OFF()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//ON-OFF OUT
	GPIOB->BSRR =  GPIO_BSRR_BR1; //load1
 8002b5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b60:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <LOAD_OFF+0x24>)
 8002b62:	611a      	str	r2, [r3, #16]
	On_off = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	4a07      	ldr	r2, [pc, #28]	; (8002b84 <LOAD_OFF+0x28>)
 8002b68:	7013      	strb	r3, [r2, #0]
	Status_Load = 0;
 8002b6a:	4a07      	ldr	r2, [pc, #28]	; (8002b88 <LOAD_OFF+0x2c>)
 8002b6c:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BR11;//led load on/off
 8002b6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b76:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002b7a:	611a      	str	r2, [r3, #16]
}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40010c00 	.word	0x40010c00
 8002b84:	200007aa 	.word	0x200007aa
 8002b88:	200007b0 	.word	0x200007b0

08002b8c <MenuLoad>:
	EnterInMenu_Status = 1;
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <MenuLoad+0x90>)
	if (key == KEY_NEXT)
 8002b90:	2802      	cmp	r0, #2
{
 8002b92:	b510      	push	{r4, lr}
	EnterInMenu_Status = 1;
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	4c22      	ldr	r4, [pc, #136]	; (8002c20 <MenuLoad+0x94>)
	if (key == KEY_NEXT)
 8002b98:	d103      	bne.n	8002ba2 <MenuLoad+0x16>
		if (On_off == 0)
 8002b9a:	7823      	ldrb	r3, [r4, #0]
 8002b9c:	bb73      	cbnz	r3, 8002bfc <MenuLoad+0x70>
			LOAD_ON();
 8002b9e:	f7ff ff61 	bl	8002a64 <LOAD_ON>
	lcd_set_xy(0,0);
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4608      	mov	r0, r1
 8002ba6:	f7fe ffb9 	bl	8001b1c <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 8002baa:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <MenuLoad+0x98>)
 8002bac:	2102      	movs	r1, #2
 8002bae:	8818      	ldrh	r0, [r3, #0]
 8002bb0:	f7fe fc1e 	bl	80013f0 <itoa_koma>
 8002bb4:	f7ff f832 	bl	8001c1c <PrintToLCD>
	PrintToLCD("V ");
 8002bb8:	481b      	ldr	r0, [pc, #108]	; (8002c28 <MenuLoad+0x9c>)
 8002bba:	f7ff f82f 	bl	8001c1c <PrintToLCD>
	PrintToLCD(itoa(Current));
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <MenuLoad+0xa0>)
 8002bc0:	8818      	ldrh	r0, [r3, #0]
 8002bc2:	b200      	sxth	r0, r0
 8002bc4:	f7fe fba0 	bl	8001308 <itoa>
 8002bc8:	f7ff f828 	bl	8001c1c <PrintToLCD>
	PrintToLCD("mA    ");
 8002bcc:	4818      	ldr	r0, [pc, #96]	; (8002c30 <MenuLoad+0xa4>)
 8002bce:	f7ff f825 	bl	8001c1c <PrintToLCD>
	if (On_off ==0)
 8002bd2:	7823      	ldrb	r3, [r4, #0]
			lcd_set_xy(6,1);
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	4c17      	ldr	r4, [pc, #92]	; (8002c34 <MenuLoad+0xa8>)
 8002bd8:	2006      	movs	r0, #6
	if (On_off ==0)
 8002bda:	b993      	cbnz	r3, 8002c02 <MenuLoad+0x76>
			lcd_set_xy(6,1);
 8002bdc:	f7fe ff9e 	bl	8001b1c <lcd_set_xy>
			LcdOutbyNumber(2,1);
 8002be0:	2101      	movs	r1, #1
 8002be2:	2002      	movs	r0, #2
 8002be4:	f7fe ffc2 	bl	8001b6c <LcdOutbyNumber>
			LcdOutbyNumber(2,1);
 8002be8:	2101      	movs	r1, #1
 8002bea:	2002      	movs	r0, #2
					LcdOutbyNumber(3,1);
 8002bec:	f7fe ffbe 	bl	8001b6c <LcdOutbyNumber>
		if (Blink_message_counter>10)
 8002bf0:	7823      	ldrb	r3, [r4, #0]
 8002bf2:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 8002bf4:	bf84      	itt	hi
 8002bf6:	2300      	movhi	r3, #0
 8002bf8:	7023      	strbhi	r3, [r4, #0]
}
 8002bfa:	bd10      	pop	{r4, pc}
			LOAD_OFF();
 8002bfc:	f7ff ffae 	bl	8002b5c <LOAD_OFF>
 8002c00:	e7cf      	b.n	8002ba2 <MenuLoad+0x16>
			if (Blink_message_counter<=5)
 8002c02:	7823      	ldrb	r3, [r4, #0]
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d9e9      	bls.n	8002bdc <MenuLoad+0x50>
					lcd_set_xy(6,1);
 8002c08:	f7fe ff88 	bl	8001b1c <lcd_set_xy>
					LcdOutbyNumber(3,1);
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	2003      	movs	r0, #3
 8002c10:	f7fe ffac 	bl	8001b6c <LcdOutbyNumber>
					LcdOutbyNumber(3,1);
 8002c14:	2101      	movs	r1, #1
 8002c16:	2003      	movs	r0, #3
 8002c18:	e7e8      	b.n	8002bec <MenuLoad+0x60>
 8002c1a:	bf00      	nop
 8002c1c:	200007a8 	.word	0x200007a8
 8002c20:	200007aa 	.word	0x200007aa
 8002c24:	2000087e 	.word	0x2000087e
 8002c28:	08006518 	.word	0x08006518
 8002c2c:	2000086a 	.word	0x2000086a
 8002c30:	0800642f 	.word	0x0800642f
 8002c34:	20000791 	.word	0x20000791

08002c38 <MenuBatterySimilation>:
	lcd_set_xy(0,0);
 8002c38:	2100      	movs	r1, #0
{
 8002c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status = 1;
 8002c3e:	2601      	movs	r6, #1
 8002c40:	4b2c      	ldr	r3, [pc, #176]	; (8002cf4 <MenuBatterySimilation+0xbc>)
	if (On_off == 0)
 8002c42:	4d2d      	ldr	r5, [pc, #180]	; (8002cf8 <MenuBatterySimilation+0xc0>)
{
 8002c44:	4607      	mov	r7, r0
	lcd_set_xy(0,0);
 8002c46:	4608      	mov	r0, r1
	EnterInMenu_Status = 1;
 8002c48:	701e      	strb	r6, [r3, #0]
	lcd_set_xy(0,0);
 8002c4a:	f7fe ff67 	bl	8001b1c <lcd_set_xy>
	if (On_off == 0)
 8002c4e:	782b      	ldrb	r3, [r5, #0]
 8002c50:	4c2a      	ldr	r4, [pc, #168]	; (8002cfc <MenuBatterySimilation+0xc4>)
 8002c52:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8002c56:	bb3b      	cbnz	r3, 8002ca8 <MenuBatterySimilation+0x70>
		PrintToLCD(itoa_koma(U_PS,2));
 8002c58:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <MenuBatterySimilation+0xc8>)
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	8818      	ldrh	r0, [r3, #0]
 8002c5e:	f7fe fbc7 	bl	80013f0 <itoa_koma>
 8002c62:	f7fe ffdb 	bl	8001c1c <PrintToLCD>
		PrintToLCD("V  ");
 8002c66:	4827      	ldr	r0, [pc, #156]	; (8002d04 <MenuBatterySimilation+0xcc>)
 8002c68:	f7fe ffd8 	bl	8001c1c <PrintToLCD>
		lcd_set_xy(7,0);
 8002c6c:	4641      	mov	r1, r8
 8002c6e:	2007      	movs	r0, #7
 8002c70:	f7fe ff54 	bl	8001b1c <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002c74:	8820      	ldrh	r0, [r4, #0]
 8002c76:	b200      	sxth	r0, r0
 8002c78:	f7fe fb46 	bl	8001308 <itoa>
 8002c7c:	f7fe ffce 	bl	8001c1c <PrintToLCD>
		PrintToLCD("mA   ");
 8002c80:	4821      	ldr	r0, [pc, #132]	; (8002d08 <MenuBatterySimilation+0xd0>)
 8002c82:	f7fe ffcb 	bl	8001c1c <PrintToLCD>
		lcd_set_xy(5,1);
 8002c86:	2005      	movs	r0, #5
 8002c88:	4631      	mov	r1, r6
 8002c8a:	f7fe ff47 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("OFF ");
 8002c8e:	481f      	ldr	r0, [pc, #124]	; (8002d0c <MenuBatterySimilation+0xd4>)
		PrintToLCD("ON ");
 8002c90:	f7fe ffc4 	bl	8001c1c <PrintToLCD>
    if (key == KEY_NEXT)
 8002c94:	2f02      	cmp	r7, #2
 8002c96:	d12a      	bne.n	8002cee <MenuBatterySimilation+0xb6>
    	if (On_off == 0)
 8002c98:	782b      	ldrb	r3, [r5, #0]
 8002c9a:	bb13      	cbnz	r3, 8002ce2 <MenuBatterySimilation+0xaa>
    		OUT_ON();
 8002c9c:	f7ff fd04 	bl	80026a8 <OUT_ON>
}
 8002ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		LOAD_ON();
 8002ca4:	f7ff bede 	b.w	8002a64 <LOAD_ON>
		PrintToLCD(itoa_koma(U_OUT,2));
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <MenuBatterySimilation+0xd8>)
 8002caa:	2102      	movs	r1, #2
 8002cac:	8818      	ldrh	r0, [r3, #0]
 8002cae:	f7fe fb9f 	bl	80013f0 <itoa_koma>
 8002cb2:	f7fe ffb3 	bl	8001c1c <PrintToLCD>
		PrintToLCD("V  ");
 8002cb6:	4813      	ldr	r0, [pc, #76]	; (8002d04 <MenuBatterySimilation+0xcc>)
 8002cb8:	f7fe ffb0 	bl	8001c1c <PrintToLCD>
		lcd_set_xy(7,0);
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	2007      	movs	r0, #7
 8002cc0:	f7fe ff2c 	bl	8001b1c <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002cc4:	8820      	ldrh	r0, [r4, #0]
 8002cc6:	b200      	sxth	r0, r0
 8002cc8:	f7fe fb1e 	bl	8001308 <itoa>
 8002ccc:	f7fe ffa6 	bl	8001c1c <PrintToLCD>
		PrintToLCD("mA    ");
 8002cd0:	4810      	ldr	r0, [pc, #64]	; (8002d14 <MenuBatterySimilation+0xdc>)
 8002cd2:	f7fe ffa3 	bl	8001c1c <PrintToLCD>
		lcd_set_xy(6,1);
 8002cd6:	2006      	movs	r0, #6
 8002cd8:	4631      	mov	r1, r6
 8002cda:	f7fe ff1f 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("ON ");
 8002cde:	480e      	ldr	r0, [pc, #56]	; (8002d18 <MenuBatterySimilation+0xe0>)
 8002ce0:	e7d6      	b.n	8002c90 <MenuBatterySimilation+0x58>
    		OUT_OFF();
 8002ce2:	f7ff fccb 	bl	800267c <OUT_OFF>
}
 8002ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		LOAD_OFF();
 8002cea:	f7ff bf37 	b.w	8002b5c <LOAD_OFF>
}
 8002cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200007a8 	.word	0x200007a8
 8002cf8:	200007aa 	.word	0x200007aa
 8002cfc:	2000086a 	.word	0x2000086a
 8002d00:	20000884 	.word	0x20000884
 8002d04:	08006425 	.word	0x08006425
 8002d08:	08006429 	.word	0x08006429
 8002d0c:	080062e2 	.word	0x080062e2
 8002d10:	2000087e 	.word	0x2000087e
 8002d14:	0800642f 	.word	0x0800642f
 8002d18:	08006436 	.word	0x08006436

08002d1c <charge>:
{
 8002d1c:	b508      	push	{r3, lr}
	LOAD_OFF();
 8002d1e:	f7ff ff1d 	bl	8002b5c <LOAD_OFF>
	OUT_ON();
 8002d22:	f7ff fcc1 	bl	80026a8 <OUT_ON>
}
 8002d26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(50);
 8002d2a:	2032      	movs	r0, #50	; 0x32
 8002d2c:	f7fe b9d0 	b.w	80010d0 <delay_ms>

08002d30 <charge1>:
{
 8002d30:	b508      	push	{r3, lr}
	if (ChargeDischargeState !=1)
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <charge1+0x38>)
 8002d34:	f993 2000 	ldrsb.w	r2, [r3]
 8002d38:	2a01      	cmp	r2, #1
 8002d3a:	d013      	beq.n	8002d64 <charge1+0x34>
		ChargeDischargeState = 1;
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
		LOAD_OFF();
 8002d40:	f7ff ff0c 	bl	8002b5c <LOAD_OFF>
		OUT_ON();
 8002d44:	f7ff fcb0 	bl	80026a8 <OUT_ON>
		TimerForReadyMeasurement_ms = 0;
 8002d48:	2200      	movs	r2, #0
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <charge1+0x3c>)
		delay_ms(50);
 8002d4c:	2032      	movs	r0, #50	; 0x32
		TimerForReadyMeasurement_ms = 0;
 8002d4e:	601a      	str	r2, [r3, #0]
		delay_ms(50);
 8002d50:	f7fe f9be 	bl	80010d0 <delay_ms>
		logDebug("Charge");
 8002d54:	4806      	ldr	r0, [pc, #24]	; (8002d70 <charge1+0x40>)
 8002d56:	f002 fbf3 	bl	8005540 <printToBufferWithoutEndUART1>
}
 8002d5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logDebug("Charge");
 8002d5e:	4805      	ldr	r0, [pc, #20]	; (8002d74 <charge1+0x44>)
 8002d60:	f002 bb84 	b.w	800546c <printToBufferUART1>
}
 8002d64:	bd08      	pop	{r3, pc}
 8002d66:	bf00      	nop
 8002d68:	20000792 	.word	0x20000792
 8002d6c:	200007dc 	.word	0x200007dc
 8002d70:	08006059 	.word	0x08006059
 8002d74:	08007154 	.word	0x08007154

08002d78 <MenuTraining_new>:
{
 8002d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (EnterInMenu_Status == 0)
 8002d7c:	4abc      	ldr	r2, [pc, #752]	; (8003070 <MenuTraining_new+0x2f8>)
{
 8002d7e:	b087      	sub	sp, #28
	if (EnterInMenu_Status == 0)
 8002d80:	7813      	ldrb	r3, [r2, #0]
{
 8002d82:	9001      	str	r0, [sp, #4]
	if (EnterInMenu_Status == 0)
 8002d84:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8002d88:	9202      	str	r2, [sp, #8]
 8002d8a:	f8df a344 	ldr.w	sl, [pc, #836]	; 80030d0 <MenuTraining_new+0x358>
 8002d8e:	f8df b344 	ldr.w	fp, [pc, #836]	; 80030d4 <MenuTraining_new+0x35c>
 8002d92:	f8df 9344 	ldr.w	r9, [pc, #836]	; 80030d8 <MenuTraining_new+0x360>
 8002d96:	4fb7      	ldr	r7, [pc, #732]	; (8003074 <MenuTraining_new+0x2fc>)
 8002d98:	f8df 8340 	ldr.w	r8, [pc, #832]	; 80030dc <MenuTraining_new+0x364>
 8002d9c:	4db6      	ldr	r5, [pc, #728]	; (8003078 <MenuTraining_new+0x300>)
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d13d      	bne.n	8002e1e <MenuTraining_new+0xa6>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8002da2:	4bb6      	ldr	r3, [pc, #728]	; (800307c <MenuTraining_new+0x304>)
 8002da4:	881a      	ldrh	r2, [r3, #0]
 8002da6:	4bb6      	ldr	r3, [pc, #728]	; (8003080 <MenuTraining_new+0x308>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	3305      	adds	r3, #5
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d915      	bls.n	8002ddc <MenuTraining_new+0x64>
			lcd_set_xy(0,0);
 8002db0:	4621      	mov	r1, r4
 8002db2:	4620      	mov	r0, r4
 8002db4:	f7fe feb2 	bl	8001b1c <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8002db8:	48b2      	ldr	r0, [pc, #712]	; (8003084 <MenuTraining_new+0x30c>)
 8002dba:	f7fe ff2f 	bl	8001c1c <PrintToLCD>
			delay_ms(2000);
 8002dbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002dc2:	f7fe f985 	bl	80010d0 <delay_ms>
			lcd_set_xy(0,0);
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f7fe fea7 	bl	8001b1c <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8002dce:	48ae      	ldr	r0, [pc, #696]	; (8003088 <MenuTraining_new+0x310>)
 8002dd0:	f7fe ff24 	bl	8001c1c <PrintToLCD>
			delay_ms(3000);
 8002dd4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002dd8:	f7fe f97a 	bl	80010d0 <delay_ms>
		EnterInMenu_Status = 1;
 8002ddc:	2601      	movs	r6, #1
		ChargeStatusForTimer = 0;
 8002dde:	2400      	movs	r4, #0
		EnterInMenu_Status = 1;
 8002de0:	9b02      	ldr	r3, [sp, #8]
 8002de2:	701e      	strb	r6, [r3, #0]
		DischargeTimeSec_Previous = 0;
 8002de4:	4ba9      	ldr	r3, [pc, #676]	; (800308c <MenuTraining_new+0x314>)
		ChargeStatusForTimer = 0;
 8002de6:	f88a 4000 	strb.w	r4, [sl]
		DisChargeStatusForTimer = 0;
 8002dea:	f88b 4000 	strb.w	r4, [fp]
		ChargeTimeSec = 0;
 8002dee:	f8c9 4000 	str.w	r4, [r9]
		DischargeTimeSec = 0;
 8002df2:	603c      	str	r4, [r7, #0]
		DischargeTimeSec_Previous = 0;
 8002df4:	601c      	str	r4, [r3, #0]
		BatteryCapacityCharge = 0;
 8002df6:	f8c8 4000 	str.w	r4, [r8]
		BatteryCapacityDischargeCurrent = 0;
 8002dfa:	602c      	str	r4, [r5, #0]
		ChargeStatusForTimer = 1;
 8002dfc:	f88a 6000 	strb.w	r6, [sl]
		charge1();
 8002e00:	f7ff ff96 	bl	8002d30 <charge1>
		ChargeDischargeStatus = CHARGEs;
 8002e04:	4ba2      	ldr	r3, [pc, #648]	; (8003090 <MenuTraining_new+0x318>)
		lcd_set_xy(0,0);
 8002e06:	4621      	mov	r1, r4
 8002e08:	4620      	mov	r0, r4
		ChargeDischargeStatus = CHARGEs;
 8002e0a:	701e      	strb	r6, [r3, #0]
		lcd_set_xy(0,0);
 8002e0c:	f7fe fe86 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("Testing Battery.");
 8002e10:	48a0      	ldr	r0, [pc, #640]	; (8003094 <MenuTraining_new+0x31c>)
 8002e12:	f7fe ff03 	bl	8001c1c <PrintToLCD>
		delay_ms(1000);
 8002e16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e1a:	f7fe f959 	bl	80010d0 <delay_ms>
	if (Module16(Current)>5)
 8002e1e:	4c9e      	ldr	r4, [pc, #632]	; (8003098 <MenuTraining_new+0x320>)
 8002e20:	8820      	ldrh	r0, [r4, #0]
 8002e22:	b200      	sxth	r0, r0
 8002e24:	f7fe fbb5 	bl	8001592 <Module16>
 8002e28:	2805      	cmp	r0, #5
 8002e2a:	9404      	str	r4, [sp, #16]
 8002e2c:	f340 81d1 	ble.w	80031d2 <MenuTraining_new+0x45a>
		if (U_OUT < SettingsData.LowVoltage && ChargeDischargeStatus == DISCHARGEs  && TimerForReadyMeasurement_ms>1000)
 8002e30:	4b9a      	ldr	r3, [pc, #616]	; (800309c <MenuTraining_new+0x324>)
 8002e32:	4e93      	ldr	r6, [pc, #588]	; (8003080 <MenuTraining_new+0x308>)
 8002e34:	881a      	ldrh	r2, [r3, #0]
 8002e36:	69b1      	ldr	r1, [r6, #24]
 8002e38:	9303      	str	r3, [sp, #12]
 8002e3a:	4291      	cmp	r1, r2
 8002e3c:	d920      	bls.n	8002e80 <MenuTraining_new+0x108>
 8002e3e:	4c94      	ldr	r4, [pc, #592]	; (8003090 <MenuTraining_new+0x318>)
 8002e40:	7822      	ldrb	r2, [r4, #0]
 8002e42:	2a02      	cmp	r2, #2
 8002e44:	d11c      	bne.n	8002e80 <MenuTraining_new+0x108>
 8002e46:	4b96      	ldr	r3, [pc, #600]	; (80030a0 <MenuTraining_new+0x328>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e4e:	d917      	bls.n	8002e80 <MenuTraining_new+0x108>
			DisChargeStatusForTimer = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f88b 3000 	strb.w	r3, [fp]
			if (BatteryCapacityDischargeCurrent/3600 > 100)
 8002e56:	6829      	ldr	r1, [r5, #0]
 8002e58:	4b92      	ldr	r3, [pc, #584]	; (80030a4 <MenuTraining_new+0x32c>)
 8002e5a:	4299      	cmp	r1, r3
 8002e5c:	d903      	bls.n	8002e66 <MenuTraining_new+0xee>
				MenuTraining_WriteInLOG(BatteryCapacityDischargeCurrent,DischargeTimeSec,DISCHARGE_l);
 8002e5e:	6828      	ldr	r0, [r5, #0]
 8002e60:	6839      	ldr	r1, [r7, #0]
 8002e62:	f7ff f885 	bl	8001f70 <MenuTraining_WriteInLOG>
			ChargeTimeSec = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f8c9 3000 	str.w	r3, [r9]
			BatteryCapacityCharge = 0;
 8002e6c:	f8c8 3000 	str.w	r3, [r8]
			ChargeStatusForTimer = 1;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f88a 3000 	strb.w	r3, [sl]
 8002e76:	9305      	str	r3, [sp, #20]
			charge1();
 8002e78:	f7ff ff5a 	bl	8002d30 <charge1>
			ChargeDischargeStatus = CHARGEs;
 8002e7c:	9b05      	ldr	r3, [sp, #20]
 8002e7e:	7023      	strb	r3, [r4, #0]
		if ((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))
 8002e80:	9b03      	ldr	r3, [sp, #12]
 8002e82:	6a32      	ldr	r2, [r6, #32]
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d208      	bcs.n	8002e9c <MenuTraining_new+0x124>
 8002e8a:	4b81      	ldr	r3, [pc, #516]	; (8003090 <MenuTraining_new+0x318>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d104      	bne.n	8002e9c <MenuTraining_new+0x124>
 8002e92:	4b83      	ldr	r3, [pc, #524]	; (80030a0 <MenuTraining_new+0x328>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e9a:	d809      	bhi.n	8002eb0 <MenuTraining_new+0x138>
 8002e9c:	4b82      	ldr	r3, [pc, #520]	; (80030a8 <MenuTraining_new+0x330>)
 8002e9e:	f8d9 2000 	ldr.w	r2, [r9]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d923      	bls.n	8002ef0 <MenuTraining_new+0x178>
 8002ea8:	4b79      	ldr	r3, [pc, #484]	; (8003090 <MenuTraining_new+0x318>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d11f      	bne.n	8002ef0 <MenuTraining_new+0x178>
			ChargeStatusForTimer = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f88a 3000 	strb.w	r3, [sl]
			if (BatteryCapacityCharge/3600 > 100)
 8002eb6:	f8d8 2000 	ldr.w	r2, [r8]
 8002eba:	4b7a      	ldr	r3, [pc, #488]	; (80030a4 <MenuTraining_new+0x32c>)
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d906      	bls.n	8002ece <MenuTraining_new+0x156>
				MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8002ec0:	f8d8 0000 	ldr.w	r0, [r8]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f8d9 1000 	ldr.w	r1, [r9]
 8002eca:	f7ff f851 	bl	8001f70 <MenuTraining_WriteInLOG>
			DischargeTimeSec_Previous = DischargeTimeSec;
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	4b6e      	ldr	r3, [pc, #440]	; (800308c <MenuTraining_new+0x314>)
 8002ed2:	601a      	str	r2, [r3, #0]
			SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 8002ed4:	682a      	ldr	r2, [r5, #0]
 8002ed6:	4b75      	ldr	r3, [pc, #468]	; (80030ac <MenuTraining_new+0x334>)
 8002ed8:	609a      	str	r2, [r3, #8]
			DischargeTimeSec = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	603b      	str	r3, [r7, #0]
			BatteryCapacityDischargeCurrent = 0;
 8002ede:	602b      	str	r3, [r5, #0]
			DisChargeStatusForTimer = 1;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f88b 3000 	strb.w	r3, [fp]
			discharge1();
 8002ee6:	f7ff fe15 	bl	8002b14 <discharge1>
			ChargeDischargeStatus = DISCHARGEs;
 8002eea:	2202      	movs	r2, #2
 8002eec:	4b68      	ldr	r3, [pc, #416]	; (8003090 <MenuTraining_new+0x318>)
 8002eee:	701a      	strb	r2, [r3, #0]
		if (key == KEY_NEXT)
 8002ef0:	9a01      	ldr	r2, [sp, #4]
 8002ef2:	4c6f      	ldr	r4, [pc, #444]	; (80030b0 <MenuTraining_new+0x338>)
 8002ef4:	2a02      	cmp	r2, #2
 8002ef6:	f994 3000 	ldrsb.w	r3, [r4]
 8002efa:	f040 8159 	bne.w	80031b0 <MenuTraining_new+0x438>
			CountShow++;
 8002efe:	3301      	adds	r3, #1
 8002f00:	b25b      	sxtb	r3, r3
			if (CountShow==MAX_SCREENS__MENU_TRAINING) CountShow=0;
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	bf08      	it	eq
 8002f06:	2300      	moveq	r3, #0
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_TRAINING-1;
 8002f08:	7023      	strb	r3, [r4, #0]
		if(CountShow == 0)
 8002f0a:	f994 3000 	ldrsb.w	r3, [r4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d132      	bne.n	8002f78 <MenuTraining_new+0x200>
			lcd_set_xy(0,0);
 8002f12:	4619      	mov	r1, r3
 8002f14:	4618      	mov	r0, r3
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	f7fe fe00 	bl	8001b1c <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 8002f1c:	9b03      	ldr	r3, [sp, #12]
 8002f1e:	2102      	movs	r1, #2
 8002f20:	8818      	ldrh	r0, [r3, #0]
 8002f22:	f7fe fa65 	bl	80013f0 <itoa_koma>
 8002f26:	f7fe fe79 	bl	8001c1c <PrintToLCD>
			PrintToLCD("V ");
 8002f2a:	4862      	ldr	r0, [pc, #392]	; (80030b4 <MenuTraining_new+0x33c>)
 8002f2c:	f7fe fe76 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa(Current));
 8002f30:	9b04      	ldr	r3, [sp, #16]
 8002f32:	8818      	ldrh	r0, [r3, #0]
 8002f34:	b200      	sxth	r0, r0
 8002f36:	f7fe f9e7 	bl	8001308 <itoa>
 8002f3a:	f7fe fe6f 	bl	8001c1c <PrintToLCD>
			PrintToLCD("mA     ");
 8002f3e:	485e      	ldr	r0, [pc, #376]	; (80030b8 <MenuTraining_new+0x340>)
 8002f40:	f7fe fe6c 	bl	8001c1c <PrintToLCD>
			lcd_set_xy(6,1);
 8002f44:	2101      	movs	r1, #1
 8002f46:	2006      	movs	r0, #6
 8002f48:	f7fe fde8 	bl	8001b1c <lcd_set_xy>
			LcdOutbyNumber(4,1);
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	2004      	movs	r0, #4
 8002f50:	f7fe fe0c 	bl	8001b6c <LcdOutbyNumber>
			if (Status_Out ==1)
 8002f54:	4a59      	ldr	r2, [pc, #356]	; (80030bc <MenuTraining_new+0x344>)
 8002f56:	9b01      	ldr	r3, [sp, #4]
 8002f58:	7812      	ldrb	r2, [r2, #0]
 8002f5a:	2a01      	cmp	r2, #1
 8002f5c:	f040 8132 	bne.w	80031c4 <MenuTraining_new+0x44c>
				lcd_set_xy(7,1);
 8002f60:	4611      	mov	r1, r2
 8002f62:	2007      	movs	r0, #7
 8002f64:	9303      	str	r3, [sp, #12]
 8002f66:	9201      	str	r2, [sp, #4]
 8002f68:	f7fe fdd8 	bl	8001b1c <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8002f6c:	9a01      	ldr	r2, [sp, #4]
 8002f6e:	9b03      	ldr	r3, [sp, #12]
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
				LcdOutbyNumber(2,1);//discharge
 8002f74:	f7fe fdfa 	bl	8001b6c <LcdOutbyNumber>
		if(CountShow == 1)
 8002f78:	f994 3000 	ldrsb.w	r3, [r4]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d128      	bne.n	8002fd2 <MenuTraining_new+0x25a>
			lcd_set_xy(0,0);
 8002f80:	2100      	movs	r1, #0
 8002f82:	4608      	mov	r0, r1
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	f7fe fdc9 	bl	8001b1c <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8002f8a:	6930      	ldr	r0, [r6, #16]
 8002f8c:	f7fe f9bc 	bl	8001308 <itoa>
 8002f90:	f7fe fe44 	bl	8001c1c <PrintToLCD>
			PrintToLCD("h ");
 8002f94:	484a      	ldr	r0, [pc, #296]	; (80030c0 <MenuTraining_new+0x348>)
 8002f96:	f7fe fe41 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8002f9a:	220a      	movs	r2, #10
 8002f9c:	9b01      	ldr	r3, [sp, #4]
 8002f9e:	69b0      	ldr	r0, [r6, #24]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	fbb0 f0f2 	udiv	r0, r0, r2
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9201      	str	r2, [sp, #4]
 8002faa:	f7fe fa21 	bl	80013f0 <itoa_koma>
 8002fae:	f7fe fe35 	bl	8001c1c <PrintToLCD>
			PrintToLCD("V ");
 8002fb2:	4840      	ldr	r0, [pc, #256]	; (80030b4 <MenuTraining_new+0x33c>)
 8002fb4:	f7fe fe32 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002fb8:	9b03      	ldr	r3, [sp, #12]
 8002fba:	9a01      	ldr	r2, [sp, #4]
 8002fbc:	6a30      	ldr	r0, [r6, #32]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	fbb0 f0f2 	udiv	r0, r0, r2
 8002fc4:	f7fe fa14 	bl	80013f0 <itoa_koma>
 8002fc8:	f7fe fe28 	bl	8001c1c <PrintToLCD>
			PrintToLCD("V     ");
 8002fcc:	483d      	ldr	r0, [pc, #244]	; (80030c4 <MenuTraining_new+0x34c>)
 8002fce:	f7fe fe25 	bl	8001c1c <PrintToLCD>
		if(CountShow == 2)
 8002fd2:	f994 6000 	ldrsb.w	r6, [r4]
 8002fd6:	2e02      	cmp	r6, #2
 8002fd8:	d121      	bne.n	800301e <MenuTraining_new+0x2a6>
			lcd_set_xy(0,0);
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4608      	mov	r0, r1
 8002fde:	f7fe fd9d 	bl	8001b1c <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4630      	mov	r0, r6
 8002fe6:	f7fe fdc1 	bl	8001b6c <LcdOutbyNumber>
			lcd_set_xy(1,0);
 8002fea:	2100      	movs	r1, #0
 8002fec:	2001      	movs	r0, #1
 8002fee:	f7fe fd95 	bl	8001b1c <lcd_set_xy>
			PrintToLCD(" ");
 8002ff2:	4835      	ldr	r0, [pc, #212]	; (80030c8 <MenuTraining_new+0x350>)
 8002ff4:	f7fe fe12 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600));
 8002ff8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002ffc:	6828      	ldr	r0, [r5, #0]
 8002ffe:	fbb0 f0f3 	udiv	r0, r0, r3
 8003002:	f7fe f981 	bl	8001308 <itoa>
 8003006:	f7fe fe09 	bl	8001c1c <PrintToLCD>
			PrintToLCD("mAH      ");
 800300a:	4830      	ldr	r0, [pc, #192]	; (80030cc <MenuTraining_new+0x354>)
 800300c:	f7fe fe06 	bl	8001c1c <PrintToLCD>
			lcd_set_xy(3,1);
 8003010:	2003      	movs	r0, #3
 8003012:	2101      	movs	r1, #1
 8003014:	f7fe fd82 	bl	8001b1c <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 8003018:	6838      	ldr	r0, [r7, #0]
 800301a:	f7ff faf9 	bl	8002610 <ClockOnLCD_noSec>
		if(CountShow == 3)
 800301e:	f994 6000 	ldrsb.w	r6, [r4]
 8003022:	2e03      	cmp	r6, #3
 8003024:	d15c      	bne.n	80030e0 <MenuTraining_new+0x368>
			lcd_set_xy(0,0);
 8003026:	2100      	movs	r1, #0
 8003028:	4608      	mov	r0, r1
 800302a:	f7fe fd77 	bl	8001b1c <lcd_set_xy>
			LcdOutbyNumber(0,1);//charge
 800302e:	2101      	movs	r1, #1
 8003030:	2000      	movs	r0, #0
 8003032:	f7fe fd9b 	bl	8001b6c <LcdOutbyNumber>
			lcd_set_xy(1,0);
 8003036:	2100      	movs	r1, #0
 8003038:	2001      	movs	r0, #1
 800303a:	f7fe fd6f 	bl	8001b1c <lcd_set_xy>
			PrintToLCD(" ");
 800303e:	4822      	ldr	r0, [pc, #136]	; (80030c8 <MenuTraining_new+0x350>)
 8003040:	f7fe fdec 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityCharge/3600));
 8003044:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003048:	f8d8 0000 	ldr.w	r0, [r8]
 800304c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003050:	f7fe f95a 	bl	8001308 <itoa>
 8003054:	f7fe fde2 	bl	8001c1c <PrintToLCD>
			PrintToLCD("mAH      ");
 8003058:	481c      	ldr	r0, [pc, #112]	; (80030cc <MenuTraining_new+0x354>)
 800305a:	f7fe fddf 	bl	8001c1c <PrintToLCD>
			lcd_set_xy(3,1);
 800305e:	4630      	mov	r0, r6
 8003060:	2101      	movs	r1, #1
 8003062:	f7fe fd5b 	bl	8001b1c <lcd_set_xy>
			ClockOnLCD_noSec(ChargeTimeSec);
 8003066:	f8d9 0000 	ldr.w	r0, [r9]
 800306a:	f7ff fad1 	bl	8002610 <ClockOnLCD_noSec>
 800306e:	e037      	b.n	80030e0 <MenuTraining_new+0x368>
 8003070:	200007a8 	.word	0x200007a8
 8003074:	200007a0 	.word	0x200007a0
 8003078:	20000788 	.word	0x20000788
 800307c:	20000884 	.word	0x20000884
 8003080:	20000154 	.word	0x20000154
 8003084:	080065db 	.word	0x080065db
 8003088:	080065ec 	.word	0x080065ec
 800308c:	200007a4 	.word	0x200007a4
 8003090:	20000270 	.word	0x20000270
 8003094:	080065fd 	.word	0x080065fd
 8003098:	2000086a 	.word	0x2000086a
 800309c:	2000087e 	.word	0x2000087e
 80030a0:	200007dc 	.word	0x200007dc
 80030a4:	00058c4f 	.word	0x00058c4f
 80030a8:	20000a28 	.word	0x20000a28
 80030ac:	200000f4 	.word	0x200000f4
 80030b0:	20000799 	.word	0x20000799
 80030b4:	08006518 	.word	0x08006518
 80030b8:	0800660e 	.word	0x0800660e
 80030bc:	200007b1 	.word	0x200007b1
 80030c0:	08005dbe 	.word	0x08005dbe
 80030c4:	0800650e 	.word	0x0800650e
 80030c8:	08006540 	.word	0x08006540
 80030cc:	08006616 	.word	0x08006616
 80030d0:	20000793 	.word	0x20000793
 80030d4:	2000079c 	.word	0x2000079c
 80030d8:	20000794 	.word	0x20000794
 80030dc:	20000784 	.word	0x20000784
		if(CountShow == 4)
 80030e0:	f994 3000 	ldrsb.w	r3, [r4]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d123      	bne.n	8003130 <MenuTraining_new+0x3b8>
			lcd_set_xy(0,0);
 80030e8:	2100      	movs	r1, #0
 80030ea:	4608      	mov	r0, r1
 80030ec:	f7fe fd16 	bl	8001b1c <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 80030f0:	2101      	movs	r1, #1
 80030f2:	2002      	movs	r0, #2
 80030f4:	f7fe fd3a 	bl	8001b6c <LcdOutbyNumber>
			lcd_set_xy(1,0);
 80030f8:	2100      	movs	r1, #0
 80030fa:	2001      	movs	r0, #1
 80030fc:	f7fe fd0e 	bl	8001b1c <lcd_set_xy>
			PrintToLCD("P ");
 8003100:	483a      	ldr	r0, [pc, #232]	; (80031ec <MenuTraining_new+0x474>)
 8003102:	f7fe fd8b 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa(SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue/3600));
 8003106:	4b3a      	ldr	r3, [pc, #232]	; (80031f0 <MenuTraining_new+0x478>)
 8003108:	6898      	ldr	r0, [r3, #8]
 800310a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800310e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003112:	f7fe f8f9 	bl	8001308 <itoa>
 8003116:	f7fe fd81 	bl	8001c1c <PrintToLCD>
			PrintToLCD("mAH     ");
 800311a:	4836      	ldr	r0, [pc, #216]	; (80031f4 <MenuTraining_new+0x47c>)
 800311c:	f7fe fd7e 	bl	8001c1c <PrintToLCD>
			lcd_set_xy(3,1);
 8003120:	2003      	movs	r0, #3
 8003122:	2101      	movs	r1, #1
 8003124:	f7fe fcfa 	bl	8001b1c <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec_Previous);
 8003128:	4b33      	ldr	r3, [pc, #204]	; (80031f8 <MenuTraining_new+0x480>)
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	f7ff fa70 	bl	8002610 <ClockOnLCD_noSec>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003130:	4832      	ldr	r0, [pc, #200]	; (80031fc <MenuTraining_new+0x484>)
 8003132:	f002 fa05 	bl	8005540 <printToBufferWithoutEndUART1>
 8003136:	9b02      	ldr	r3, [sp, #8]
 8003138:	2200      	movs	r2, #0
 800313a:	7819      	ldrb	r1, [r3, #0]
 800313c:	4830      	ldr	r0, [pc, #192]	; (8003200 <MenuTraining_new+0x488>)
 800313e:	f002 fa43 	bl	80055c8 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003142:	482e      	ldr	r0, [pc, #184]	; (80031fc <MenuTraining_new+0x484>)
 8003144:	f002 f9fc 	bl	8005540 <printToBufferWithoutEndUART1>
 8003148:	f89a 1000 	ldrb.w	r1, [sl]
 800314c:	2200      	movs	r2, #0
 800314e:	482d      	ldr	r0, [pc, #180]	; (8003204 <MenuTraining_new+0x48c>)
 8003150:	f002 fa3a 	bl	80055c8 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003154:	4829      	ldr	r0, [pc, #164]	; (80031fc <MenuTraining_new+0x484>)
 8003156:	f002 f9f3 	bl	8005540 <printToBufferWithoutEndUART1>
 800315a:	f8d9 1000 	ldr.w	r1, [r9]
 800315e:	2200      	movs	r2, #0
 8003160:	4829      	ldr	r0, [pc, #164]	; (8003208 <MenuTraining_new+0x490>)
 8003162:	f002 fa31 	bl	80055c8 <printToBufferUART1D>
	logDebugD("BatteryCapacityCharge: ",BatteryCapacityCharge,0);
 8003166:	4825      	ldr	r0, [pc, #148]	; (80031fc <MenuTraining_new+0x484>)
 8003168:	f002 f9ea 	bl	8005540 <printToBufferWithoutEndUART1>
 800316c:	f8d8 1000 	ldr.w	r1, [r8]
 8003170:	2200      	movs	r2, #0
 8003172:	4826      	ldr	r0, [pc, #152]	; (800320c <MenuTraining_new+0x494>)
 8003174:	f002 fa28 	bl	80055c8 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8003178:	4820      	ldr	r0, [pc, #128]	; (80031fc <MenuTraining_new+0x484>)
 800317a:	f002 f9e1 	bl	8005540 <printToBufferWithoutEndUART1>
 800317e:	f89b 1000 	ldrb.w	r1, [fp]
 8003182:	2200      	movs	r2, #0
 8003184:	4822      	ldr	r0, [pc, #136]	; (8003210 <MenuTraining_new+0x498>)
 8003186:	f002 fa1f 	bl	80055c8 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 800318a:	481c      	ldr	r0, [pc, #112]	; (80031fc <MenuTraining_new+0x484>)
 800318c:	f002 f9d8 	bl	8005540 <printToBufferWithoutEndUART1>
 8003190:	6839      	ldr	r1, [r7, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	481f      	ldr	r0, [pc, #124]	; (8003214 <MenuTraining_new+0x49c>)
 8003196:	f002 fa17 	bl	80055c8 <printToBufferUART1D>
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 800319a:	4818      	ldr	r0, [pc, #96]	; (80031fc <MenuTraining_new+0x484>)
 800319c:	f002 f9d0 	bl	8005540 <printToBufferWithoutEndUART1>
 80031a0:	2200      	movs	r2, #0
 80031a2:	6829      	ldr	r1, [r5, #0]
 80031a4:	481c      	ldr	r0, [pc, #112]	; (8003218 <MenuTraining_new+0x4a0>)
}
 80031a6:	b007      	add	sp, #28
 80031a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 80031ac:	f002 ba0c 	b.w	80055c8 <printToBufferUART1D>
		if (key == KEY_BACK)
 80031b0:	9a01      	ldr	r2, [sp, #4]
 80031b2:	2a01      	cmp	r2, #1
 80031b4:	f47f aea9 	bne.w	8002f0a <MenuTraining_new+0x192>
			CountShow--;
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_TRAINING-1;
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bfb8      	it	lt
 80031c0:	2304      	movlt	r3, #4
 80031c2:	e6a1      	b.n	8002f08 <MenuTraining_new+0x190>
				lcd_set_xy(7,1);
 80031c4:	2101      	movs	r1, #1
 80031c6:	2007      	movs	r0, #7
 80031c8:	f7fe fca8 	bl	8001b1c <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 80031cc:	2101      	movs	r1, #1
 80031ce:	2002      	movs	r0, #2
 80031d0:	e6d0      	b.n	8002f74 <MenuTraining_new+0x1fc>
		if (TimerForReadyMeasurement_ms>1000)
 80031d2:	4b12      	ldr	r3, [pc, #72]	; (800321c <MenuTraining_new+0x4a4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031da:	d9a9      	bls.n	8003130 <MenuTraining_new+0x3b8>
			lcd_set_xy(0,0);
 80031dc:	2100      	movs	r1, #0
 80031de:	4608      	mov	r0, r1
 80031e0:	f7fe fc9c 	bl	8001b1c <lcd_set_xy>
			PrintToLCD("NO/BAD Battery  ");
 80031e4:	480e      	ldr	r0, [pc, #56]	; (8003220 <MenuTraining_new+0x4a8>)
 80031e6:	f7fe fd19 	bl	8001c1c <PrintToLCD>
 80031ea:	e7a1      	b.n	8003130 <MenuTraining_new+0x3b8>
 80031ec:	08006620 	.word	0x08006620
 80031f0:	200000f4 	.word	0x200000f4
 80031f4:	08006623 	.word	0x08006623
 80031f8:	200007a4 	.word	0x200007a4
 80031fc:	08006059 	.word	0x08006059
 8003200:	0800663d 	.word	0x0800663d
 8003204:	08006652 	.word	0x08006652
 8003208:	08006667 	.word	0x08006667
 800320c:	08006677 	.word	0x08006677
 8003210:	0800668f 	.word	0x0800668f
 8003214:	080066a7 	.word	0x080066a7
 8003218:	080066ba 	.word	0x080066ba
 800321c:	200007dc 	.word	0x200007dc
 8003220:	0800662c 	.word	0x0800662c

08003224 <MenuSwing>:
   	lcd_set_xy(0,0);
 8003224:	2100      	movs	r1, #0
{
 8003226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003228:	4606      	mov	r6, r0
   	lcd_set_xy(0,0);
 800322a:	4608      	mov	r0, r1
 800322c:	f7fe fc76 	bl	8001b1c <lcd_set_xy>
       	EnterInMenu_Status = 1;
 8003230:	2201      	movs	r2, #1
 8003232:	4b66      	ldr	r3, [pc, #408]	; (80033cc <MenuSwing+0x1a8>)
 8003234:	701a      	strb	r2, [r3, #0]
       	if (InitiStatus==0)
 8003236:	4b66      	ldr	r3, [pc, #408]	; (80033d0 <MenuSwing+0x1ac>)
 8003238:	7819      	ldrb	r1, [r3, #0]
 800323a:	b911      	cbnz	r1, 8003242 <MenuSwing+0x1e>
       		InitiStatus=1;
 800323c:	701a      	strb	r2, [r3, #0]
       		Start_Timer_sec();
 800323e:	f7ff f9db 	bl	80025f8 <Start_Timer_sec>
       if (Timer_Sec<=SettingsData.Swing_Chrg_time)
 8003242:	4d64      	ldr	r5, [pc, #400]	; (80033d4 <MenuSwing+0x1b0>)
 8003244:	4c64      	ldr	r4, [pc, #400]	; (80033d8 <MenuSwing+0x1b4>)
 8003246:	682b      	ldr	r3, [r5, #0]
 8003248:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800324a:	429a      	cmp	r2, r3
 800324c:	d311      	bcc.n	8003272 <MenuSwing+0x4e>
    	   charge1();
 800324e:	f7ff fd6f 	bl	8002d30 <charge1>
           if (U_OUT>SettingsData.MaxVoltage && TimerForReadyMeasurement_ms>400)
 8003252:	4b62      	ldr	r3, [pc, #392]	; (80033dc <MenuSwing+0x1b8>)
 8003254:	6a22      	ldr	r2, [r4, #32]
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d20a      	bcs.n	8003272 <MenuSwing+0x4e>
 800325c:	4b60      	ldr	r3, [pc, #384]	; (80033e0 <MenuSwing+0x1bc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003264:	d905      	bls.n	8003272 <MenuSwing+0x4e>
        	   ReStart_Timer_sec();
 8003266:	f7ff f9c7 	bl	80025f8 <Start_Timer_sec>
               Timer_Sec  = Timer_Sec+ SettingsData.Swing_Chrg_time;
 800326a:	682b      	ldr	r3, [r5, #0]
 800326c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800326e:	4413      	add	r3, r2
 8003270:	602b      	str	r3, [r5, #0]
       if (Timer_Sec > SettingsData.Swing_Chrg_time)
 8003272:	682b      	ldr	r3, [r5, #0]
 8003274:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003276:	429a      	cmp	r2, r3
 8003278:	d20d      	bcs.n	8003296 <MenuSwing+0x72>
           discharge1();
 800327a:	f7ff fc4b 	bl	8002b14 <discharge1>
           if (U_OUT<SettingsData.LowVoltage && TimerForReadyMeasurement_ms>400)
 800327e:	4b57      	ldr	r3, [pc, #348]	; (80033dc <MenuSwing+0x1b8>)
 8003280:	69a2      	ldr	r2, [r4, #24]
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d906      	bls.n	8003296 <MenuSwing+0x72>
 8003288:	4b55      	ldr	r3, [pc, #340]	; (80033e0 <MenuSwing+0x1bc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003290:	d901      	bls.n	8003296 <MenuSwing+0x72>
        	   ReStart_Timer_sec();
 8003292:	f7ff f9b1 	bl	80025f8 <Start_Timer_sec>
       if (Timer_Sec > (SettingsData.Swing_Chrg_time+SettingsData.Swing_DChrg_time))
 8003296:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003298:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800329a:	682a      	ldr	r2, [r5, #0]
 800329c:	440b      	add	r3, r1
 800329e:	4293      	cmp	r3, r2
 80032a0:	d201      	bcs.n	80032a6 <MenuSwing+0x82>
    	   ReStart_Timer_sec();
 80032a2:	f7ff f9a9 	bl	80025f8 <Start_Timer_sec>
 80032a6:	4d4f      	ldr	r5, [pc, #316]	; (80033e4 <MenuSwing+0x1c0>)
		if (key == KEY_NEXT)
 80032a8:	2e02      	cmp	r6, #2
 80032aa:	f995 3000 	ldrsb.w	r3, [r5]
 80032ae:	d17d      	bne.n	80033ac <MenuSwing+0x188>
			CountShow++;
 80032b0:	3301      	adds	r3, #1
 80032b2:	b25b      	sxtb	r3, r3
			if (CountShow==MAXITEM6) CountShow=0;
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	bf08      	it	eq
 80032b8:	2300      	moveq	r3, #0
			if (CountShow<0) CountShow=MAXITEM6-1;
 80032ba:	702b      	strb	r3, [r5, #0]
		if(CountShow == 0)
 80032bc:	f995 6000 	ldrsb.w	r6, [r5]
 80032c0:	bb5e      	cbnz	r6, 800331a <MenuSwing+0xf6>
			lcd_set_xy(0,0);
 80032c2:	4631      	mov	r1, r6
 80032c4:	4630      	mov	r0, r6
 80032c6:	f7fe fc29 	bl	8001b1c <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 80032ca:	4b44      	ldr	r3, [pc, #272]	; (80033dc <MenuSwing+0x1b8>)
 80032cc:	2102      	movs	r1, #2
 80032ce:	8818      	ldrh	r0, [r3, #0]
 80032d0:	f7fe f88e 	bl	80013f0 <itoa_koma>
 80032d4:	f7fe fca2 	bl	8001c1c <PrintToLCD>
			PrintToLCD("V ");
 80032d8:	4843      	ldr	r0, [pc, #268]	; (80033e8 <MenuSwing+0x1c4>)
 80032da:	f7fe fc9f 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa(Current));
 80032de:	4b43      	ldr	r3, [pc, #268]	; (80033ec <MenuSwing+0x1c8>)
 80032e0:	8818      	ldrh	r0, [r3, #0]
 80032e2:	b200      	sxth	r0, r0
 80032e4:	f7fe f810 	bl	8001308 <itoa>
 80032e8:	f7fe fc98 	bl	8001c1c <PrintToLCD>
			PrintToLCD("mA     ");
 80032ec:	4840      	ldr	r0, [pc, #256]	; (80033f0 <MenuSwing+0x1cc>)
 80032ee:	f7fe fc95 	bl	8001c1c <PrintToLCD>
			lcd_set_xy(6,1);
 80032f2:	2101      	movs	r1, #1
 80032f4:	2006      	movs	r0, #6
 80032f6:	f7fe fc11 	bl	8001b1c <lcd_set_xy>
			LcdOutbyNumber(5,1);
 80032fa:	2101      	movs	r1, #1
 80032fc:	2005      	movs	r0, #5
 80032fe:	f7fe fc35 	bl	8001b6c <LcdOutbyNumber>
			if (Status_Out ==1)
 8003302:	4b3c      	ldr	r3, [pc, #240]	; (80033f4 <MenuSwing+0x1d0>)
 8003304:	781f      	ldrb	r7, [r3, #0]
 8003306:	2f01      	cmp	r7, #1
 8003308:	d158      	bne.n	80033bc <MenuSwing+0x198>
				lcd_set_xy(7,1);
 800330a:	4639      	mov	r1, r7
 800330c:	2007      	movs	r0, #7
 800330e:	f7fe fc05 	bl	8001b1c <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8003312:	4639      	mov	r1, r7
 8003314:	4630      	mov	r0, r6
				LcdOutbyNumber(2,1);//discharge
 8003316:	f7fe fc29 	bl	8001b6c <LcdOutbyNumber>
		if(CountShow == 1)
 800331a:	f995 6000 	ldrsb.w	r6, [r5]
 800331e:	2e01      	cmp	r6, #1
 8003320:	d122      	bne.n	8003368 <MenuSwing+0x144>
			lcd_set_xy(0,0);
 8003322:	2100      	movs	r1, #0
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8003324:	270a      	movs	r7, #10
			lcd_set_xy(0,0);
 8003326:	4608      	mov	r0, r1
 8003328:	f7fe fbf8 	bl	8001b1c <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 800332c:	6920      	ldr	r0, [r4, #16]
 800332e:	f7fd ffeb 	bl	8001308 <itoa>
 8003332:	f7fe fc73 	bl	8001c1c <PrintToLCD>
			PrintToLCD("h ");
 8003336:	4830      	ldr	r0, [pc, #192]	; (80033f8 <MenuSwing+0x1d4>)
 8003338:	f7fe fc70 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 800333c:	69a0      	ldr	r0, [r4, #24]
 800333e:	4631      	mov	r1, r6
 8003340:	fbb0 f0f7 	udiv	r0, r0, r7
 8003344:	f7fe f854 	bl	80013f0 <itoa_koma>
 8003348:	f7fe fc68 	bl	8001c1c <PrintToLCD>
			PrintToLCD("V ");
 800334c:	4826      	ldr	r0, [pc, #152]	; (80033e8 <MenuSwing+0x1c4>)
 800334e:	f7fe fc65 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003352:	6a20      	ldr	r0, [r4, #32]
 8003354:	4631      	mov	r1, r6
 8003356:	fbb0 f0f7 	udiv	r0, r0, r7
 800335a:	f7fe f849 	bl	80013f0 <itoa_koma>
 800335e:	f7fe fc5d 	bl	8001c1c <PrintToLCD>
			PrintToLCD("V     ");
 8003362:	4826      	ldr	r0, [pc, #152]	; (80033fc <MenuSwing+0x1d8>)
 8003364:	f7fe fc5a 	bl	8001c1c <PrintToLCD>
		if(CountShow == 2)
 8003368:	f995 3000 	ldrsb.w	r3, [r5]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d12c      	bne.n	80033ca <MenuSwing+0x1a6>
			lcd_set_xy(0,0);
 8003370:	2100      	movs	r1, #0
 8003372:	4608      	mov	r0, r1
 8003374:	f7fe fbd2 	bl	8001b1c <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.Swing_Chrg_time));
 8003378:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800337a:	f7fd ffc5 	bl	8001308 <itoa>
 800337e:	f7fe fc4d 	bl	8001c1c <PrintToLCD>
			PrintToLCD("s ");
 8003382:	481f      	ldr	r0, [pc, #124]	; (8003400 <MenuSwing+0x1dc>)
 8003384:	f7fe fc4a 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa(SettingsData.Swing_DChrg_time));
 8003388:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800338a:	f7fd ffbd 	bl	8001308 <itoa>
 800338e:	f7fe fc45 	bl	8001c1c <PrintToLCD>
			PrintToLCD("s      ");
 8003392:	481c      	ldr	r0, [pc, #112]	; (8003404 <MenuSwing+0x1e0>)
 8003394:	f7fe fc42 	bl	8001c1c <PrintToLCD>
			lcd_set_xy(3,1);
 8003398:	2003      	movs	r0, #3
 800339a:	2101      	movs	r1, #1
 800339c:	f7fe fbbe 	bl	8001b1c <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <MenuSwing+0x1e4>)
 80033a2:	6818      	ldr	r0, [r3, #0]
}
 80033a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			ClockOnLCD_noSec(DischargeTimeSec);
 80033a8:	f7ff b932 	b.w	8002610 <ClockOnLCD_noSec>
		if (key == KEY_BACK)
 80033ac:	2e01      	cmp	r6, #1
 80033ae:	d185      	bne.n	80032bc <MenuSwing+0x98>
			CountShow--;
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAXITEM6-1;
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bfb8      	it	lt
 80033b8:	2302      	movlt	r3, #2
 80033ba:	e77e      	b.n	80032ba <MenuSwing+0x96>
				lcd_set_xy(7,1);
 80033bc:	2101      	movs	r1, #1
 80033be:	2007      	movs	r0, #7
 80033c0:	f7fe fbac 	bl	8001b1c <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 80033c4:	2101      	movs	r1, #1
 80033c6:	2002      	movs	r0, #2
 80033c8:	e7a5      	b.n	8003316 <MenuSwing+0xf2>
}
 80033ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033cc:	200007a8 	.word	0x200007a8
 80033d0:	200007a9 	.word	0x200007a9
 80033d4:	200007e0 	.word	0x200007e0
 80033d8:	20000154 	.word	0x20000154
 80033dc:	2000087e 	.word	0x2000087e
 80033e0:	200007dc 	.word	0x200007dc
 80033e4:	20000799 	.word	0x20000799
 80033e8:	08006518 	.word	0x08006518
 80033ec:	2000086a 	.word	0x2000086a
 80033f0:	0800660e 	.word	0x0800660e
 80033f4:	200007b1 	.word	0x200007b1
 80033f8:	08005dbe 	.word	0x08005dbe
 80033fc:	0800650e 	.word	0x0800650e
 8003400:	0800719c 	.word	0x0800719c
 8003404:	080065d3 	.word	0x080065d3
 8003408:	200007a0 	.word	0x200007a0

0800340c <OFF>:
{
 800340c:	b508      	push	{r3, lr}
	LOAD_OFF();
 800340e:	f7ff fba5 	bl	8002b5c <LOAD_OFF>
}
 8003412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	OUT_OFF();
 8003416:	f7ff b931 	b.w	800267c <OUT_OFF>
	...

0800341c <MenuChargeCC_CV>:
	EnterInMenu_Status = 1;
 800341c:	2201      	movs	r2, #1
{
 800341e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (InitiStatus==0)
 8003422:	4e96      	ldr	r6, [pc, #600]	; (800367c <MenuChargeCC_CV+0x260>)
	EnterInMenu_Status = 1;
 8003424:	4b96      	ldr	r3, [pc, #600]	; (8003680 <MenuChargeCC_CV+0x264>)
	if (InitiStatus==0)
 8003426:	7834      	ldrb	r4, [r6, #0]
{
 8003428:	4682      	mov	sl, r0
	EnterInMenu_Status = 1;
 800342a:	701a      	strb	r2, [r3, #0]
 800342c:	4698      	mov	r8, r3
 800342e:	4d95      	ldr	r5, [pc, #596]	; (8003684 <MenuChargeCC_CV+0x268>)
 8003430:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 80036f4 <MenuChargeCC_CV+0x2d8>
 8003434:	4f94      	ldr	r7, [pc, #592]	; (8003688 <MenuChargeCC_CV+0x26c>)
	if (InitiStatus==0)
 8003436:	bb2c      	cbnz	r4, 8003484 <MenuChargeCC_CV+0x68>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8003438:	4b94      	ldr	r3, [pc, #592]	; (800368c <MenuChargeCC_CV+0x270>)
 800343a:	881a      	ldrh	r2, [r3, #0]
 800343c:	4b94      	ldr	r3, [pc, #592]	; (8003690 <MenuChargeCC_CV+0x274>)
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	3305      	adds	r3, #5
 8003442:	4293      	cmp	r3, r2
 8003444:	d915      	bls.n	8003472 <MenuChargeCC_CV+0x56>
			lcd_set_xy(0,0);
 8003446:	4621      	mov	r1, r4
 8003448:	4620      	mov	r0, r4
 800344a:	f7fe fb67 	bl	8001b1c <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 800344e:	4891      	ldr	r0, [pc, #580]	; (8003694 <MenuChargeCC_CV+0x278>)
 8003450:	f7fe fbe4 	bl	8001c1c <PrintToLCD>
			delay_ms(2000);
 8003454:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003458:	f7fd fe3a 	bl	80010d0 <delay_ms>
			lcd_set_xy(0,0);
 800345c:	4621      	mov	r1, r4
 800345e:	4620      	mov	r0, r4
 8003460:	f7fe fb5c 	bl	8001b1c <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8003464:	488c      	ldr	r0, [pc, #560]	; (8003698 <MenuChargeCC_CV+0x27c>)
 8003466:	f7fe fbd9 	bl	8001c1c <PrintToLCD>
			delay_ms(3000);
 800346a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800346e:	f7fd fe2f 	bl	80010d0 <delay_ms>
		ChargeStatusForTimer = 0;
 8003472:	2300      	movs	r3, #0
		BatteryCapacityCharge = 0;
 8003474:	4a89      	ldr	r2, [pc, #548]	; (800369c <MenuChargeCC_CV+0x280>)
		ChargeStatusForTimer = 0;
 8003476:	702b      	strb	r3, [r5, #0]
		DisChargeStatusForTimer = 0;
 8003478:	f889 3000 	strb.w	r3, [r9]
		BatteryCapacityCharge = 0;
 800347c:	6013      	str	r3, [r2, #0]
		InitiStatus = 1;
 800347e:	2201      	movs	r2, #1
		ChargeTimeSec = 0;
 8003480:	603b      	str	r3, [r7, #0]
		InitiStatus = 1;
 8003482:	7032      	strb	r2, [r6, #0]
	if ((ChargeTimeSec > ChargeDurationSec)|| (U_OUT> SettingsData.MaxVoltage))
 8003484:	4b86      	ldr	r3, [pc, #536]	; (80036a0 <MenuChargeCC_CV+0x284>)
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d805      	bhi.n	800349a <MenuChargeCC_CV+0x7e>
 800348e:	4b85      	ldr	r3, [pc, #532]	; (80036a4 <MenuChargeCC_CV+0x288>)
 8003490:	4a7f      	ldr	r2, [pc, #508]	; (8003690 <MenuChargeCC_CV+0x274>)
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	6a12      	ldr	r2, [r2, #32]
 8003496:	429a      	cmp	r2, r3
 8003498:	d203      	bcs.n	80034a2 <MenuChargeCC_CV+0x86>
		OFF();
 800349a:	f7ff ffb7 	bl	800340c <OFF>
		ChargeStatusForTimer = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	702b      	strb	r3, [r5, #0]
    OUTStateAfterPowerUpFunction();
 80034a2:	f7ff f915 	bl	80026d0 <OUTStateAfterPowerUpFunction>
	if (key == KEY_NEXT)
 80034a6:	f1ba 0f02 	cmp.w	sl, #2
 80034aa:	4c7f      	ldr	r4, [pc, #508]	; (80036a8 <MenuChargeCC_CV+0x28c>)
 80034ac:	f040 80bd 	bne.w	800362a <MenuChargeCC_CV+0x20e>
		if (On_off == 0)
 80034b0:	4b7e      	ldr	r3, [pc, #504]	; (80036ac <MenuChargeCC_CV+0x290>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f040 80b4 	bne.w	8003622 <MenuChargeCC_CV+0x206>
			charge();
 80034ba:	f7ff fc2f 	bl	8002d1c <charge>
			ChargeStatusForTimer = 1;
 80034be:	2301      	movs	r3, #1
			ChargeStatusForTimer = 0;
 80034c0:	702b      	strb	r3, [r5, #0]
	if(CountShow == 0)
 80034c2:	f994 1000 	ldrsb.w	r1, [r4]
 80034c6:	bba1      	cbnz	r1, 8003532 <MenuChargeCC_CV+0x116>
		lcd_set_xy(0,0);
 80034c8:	4608      	mov	r0, r1
 80034ca:	f7fe fb27 	bl	8001b1c <lcd_set_xy>
		if (On_off ==0)
 80034ce:	4b77      	ldr	r3, [pc, #476]	; (80036ac <MenuChargeCC_CV+0x290>)
 80034d0:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 80036a4 <MenuChargeCC_CV+0x288>
 80034d4:	781a      	ldrb	r2, [r3, #0]
 80034d6:	469b      	mov	fp, r3
 80034d8:	2a00      	cmp	r2, #0
 80034da:	f040 80b2 	bne.w	8003642 <MenuChargeCC_CV+0x226>
			PrintToLCD(itoa_koma(U_PS,2));
 80034de:	4b6b      	ldr	r3, [pc, #428]	; (800368c <MenuChargeCC_CV+0x270>)
 80034e0:	2102      	movs	r1, #2
 80034e2:	8818      	ldrh	r0, [r3, #0]
 80034e4:	f7fd ff84 	bl	80013f0 <itoa_koma>
 80034e8:	f7fe fb98 	bl	8001c1c <PrintToLCD>
			PrintToLCD("V ");
 80034ec:	4870      	ldr	r0, [pc, #448]	; (80036b0 <MenuChargeCC_CV+0x294>)
 80034ee:	f7fe fb95 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa_koma(U_OUT,2));
 80034f2:	2102      	movs	r1, #2
 80034f4:	f8ba 0000 	ldrh.w	r0, [sl]
 80034f8:	f7fd ff7a 	bl	80013f0 <itoa_koma>
 80034fc:	f7fe fb8e 	bl	8001c1c <PrintToLCD>
			PrintToLCD("V     ");
 8003500:	486c      	ldr	r0, [pc, #432]	; (80036b4 <MenuChargeCC_CV+0x298>)
			PrintToLCD("mA     ");
 8003502:	f7fe fb8b 	bl	8001c1c <PrintToLCD>
		if (On_off ==0)
 8003506:	f89b 3000 	ldrb.w	r3, [fp]
 800350a:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 80036f8 <MenuChargeCC_CV+0x2dc>
			lcd_set_xy(7,1);
 800350e:	2101      	movs	r1, #1
 8003510:	2007      	movs	r0, #7
		if (On_off ==0)
 8003512:	2b00      	cmp	r3, #0
 8003514:	f040 80a8 	bne.w	8003668 <MenuChargeCC_CV+0x24c>
			lcd_set_xy(7,1);
 8003518:	f7fe fb00 	bl	8001b1c <lcd_set_xy>
			LcdOutbyNumber(0,1);
 800351c:	2101      	movs	r1, #1
 800351e:	2000      	movs	r0, #0
					LcdOutbyNumber(1,1);
 8003520:	f7fe fb24 	bl	8001b6c <LcdOutbyNumber>
		if (Blink_message_counter>10)
 8003524:	f89a 3000 	ldrb.w	r3, [sl]
 8003528:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 800352a:	bf84      	itt	hi
 800352c:	2300      	movhi	r3, #0
 800352e:	f88a 3000 	strbhi.w	r3, [sl]
	if(CountShow == 1)
 8003532:	f994 a000 	ldrsb.w	sl, [r4]
 8003536:	f1ba 0f01 	cmp.w	sl, #1
 800353a:	d11e      	bne.n	800357a <MenuChargeCC_CV+0x15e>
		lcd_set_xy(0,0);
 800353c:	2100      	movs	r1, #0
		PrintToLCD(itoa(SettingsData.ChargeTime));
 800353e:	f8df b150 	ldr.w	fp, [pc, #336]	; 8003690 <MenuChargeCC_CV+0x274>
		lcd_set_xy(0,0);
 8003542:	4608      	mov	r0, r1
 8003544:	f7fe faea 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("T:");
 8003548:	485b      	ldr	r0, [pc, #364]	; (80036b8 <MenuChargeCC_CV+0x29c>)
 800354a:	f7fe fb67 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa(SettingsData.ChargeTime));
 800354e:	f8db 0010 	ldr.w	r0, [fp, #16]
 8003552:	f7fd fed9 	bl	8001308 <itoa>
 8003556:	f7fe fb61 	bl	8001c1c <PrintToLCD>
		PrintToLCD("h MaxV:");
 800355a:	4858      	ldr	r0, [pc, #352]	; (80036bc <MenuChargeCC_CV+0x2a0>)
 800355c:	f7fe fb5e 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003560:	230a      	movs	r3, #10
 8003562:	f8db 0020 	ldr.w	r0, [fp, #32]
 8003566:	4651      	mov	r1, sl
 8003568:	fbb0 f0f3 	udiv	r0, r0, r3
 800356c:	f7fd ff40 	bl	80013f0 <itoa_koma>
 8003570:	f7fe fb54 	bl	8001c1c <PrintToLCD>
		PrintToLCD("V   ");
 8003574:	4852      	ldr	r0, [pc, #328]	; (80036c0 <MenuChargeCC_CV+0x2a4>)
 8003576:	f7fe fb51 	bl	8001c1c <PrintToLCD>
	if(CountShow == 2)
 800357a:	f994 3000 	ldrsb.w	r3, [r4]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d11a      	bne.n	80035b8 <MenuChargeCC_CV+0x19c>
		lcd_set_xy(0,0);
 8003582:	2100      	movs	r1, #0
 8003584:	4608      	mov	r0, r1
 8003586:	f7fe fac9 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("C ");
 800358a:	484e      	ldr	r0, [pc, #312]	; (80036c4 <MenuChargeCC_CV+0x2a8>)
 800358c:	f7fe fb46 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityCharge/3600));
 8003590:	4b42      	ldr	r3, [pc, #264]	; (800369c <MenuChargeCC_CV+0x280>)
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003598:	fbb0 f0f3 	udiv	r0, r0, r3
 800359c:	f7fd feb4 	bl	8001308 <itoa>
 80035a0:	f7fe fb3c 	bl	8001c1c <PrintToLCD>
		PrintToLCD("mAh     ");
 80035a4:	4848      	ldr	r0, [pc, #288]	; (80036c8 <MenuChargeCC_CV+0x2ac>)
 80035a6:	f7fe fb39 	bl	8001c1c <PrintToLCD>
		lcd_set_xy(3,1);
 80035aa:	2003      	movs	r0, #3
 80035ac:	2101      	movs	r1, #1
 80035ae:	f7fe fab5 	bl	8001b1c <lcd_set_xy>
		ClockOnLCD_noSec(ChargeTimeSec);
 80035b2:	6838      	ldr	r0, [r7, #0]
 80035b4:	f7ff f82c 	bl	8002610 <ClockOnLCD_noSec>
	logDebugD("Init status: ",InitiStatus,0);
 80035b8:	4844      	ldr	r0, [pc, #272]	; (80036cc <MenuChargeCC_CV+0x2b0>)
 80035ba:	f001 ffc1 	bl	8005540 <printToBufferWithoutEndUART1>
 80035be:	7831      	ldrb	r1, [r6, #0]
 80035c0:	2200      	movs	r2, #0
 80035c2:	4843      	ldr	r0, [pc, #268]	; (80036d0 <MenuChargeCC_CV+0x2b4>)
 80035c4:	f002 f800 	bl	80055c8 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 80035c8:	4840      	ldr	r0, [pc, #256]	; (80036cc <MenuChargeCC_CV+0x2b0>)
 80035ca:	f001 ffb9 	bl	8005540 <printToBufferWithoutEndUART1>
 80035ce:	f898 1000 	ldrb.w	r1, [r8]
 80035d2:	2200      	movs	r2, #0
 80035d4:	483f      	ldr	r0, [pc, #252]	; (80036d4 <MenuChargeCC_CV+0x2b8>)
 80035d6:	f001 fff7 	bl	80055c8 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 80035da:	483c      	ldr	r0, [pc, #240]	; (80036cc <MenuChargeCC_CV+0x2b0>)
 80035dc:	f001 ffb0 	bl	8005540 <printToBufferWithoutEndUART1>
 80035e0:	7829      	ldrb	r1, [r5, #0]
 80035e2:	2200      	movs	r2, #0
 80035e4:	483c      	ldr	r0, [pc, #240]	; (80036d8 <MenuChargeCC_CV+0x2bc>)
 80035e6:	f001 ffef 	bl	80055c8 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 80035ea:	4838      	ldr	r0, [pc, #224]	; (80036cc <MenuChargeCC_CV+0x2b0>)
 80035ec:	f001 ffa8 	bl	8005540 <printToBufferWithoutEndUART1>
 80035f0:	6839      	ldr	r1, [r7, #0]
 80035f2:	2200      	movs	r2, #0
 80035f4:	4839      	ldr	r0, [pc, #228]	; (80036dc <MenuChargeCC_CV+0x2c0>)
 80035f6:	f001 ffe7 	bl	80055c8 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 80035fa:	4834      	ldr	r0, [pc, #208]	; (80036cc <MenuChargeCC_CV+0x2b0>)
 80035fc:	f001 ffa0 	bl	8005540 <printToBufferWithoutEndUART1>
 8003600:	f899 1000 	ldrb.w	r1, [r9]
 8003604:	2200      	movs	r2, #0
 8003606:	4836      	ldr	r0, [pc, #216]	; (80036e0 <MenuChargeCC_CV+0x2c4>)
 8003608:	f001 ffde 	bl	80055c8 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 800360c:	482f      	ldr	r0, [pc, #188]	; (80036cc <MenuChargeCC_CV+0x2b0>)
 800360e:	f001 ff97 	bl	8005540 <printToBufferWithoutEndUART1>
 8003612:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <MenuChargeCC_CV+0x2c8>)
 8003614:	2200      	movs	r2, #0
 8003616:	6819      	ldr	r1, [r3, #0]
 8003618:	4833      	ldr	r0, [pc, #204]	; (80036e8 <MenuChargeCC_CV+0x2cc>)
}
 800361a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 800361e:	f001 bfd3 	b.w	80055c8 <printToBufferUART1D>
			OFF();
 8003622:	f7ff fef3 	bl	800340c <OFF>
			ChargeStatusForTimer = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	e74a      	b.n	80034c0 <MenuChargeCC_CV+0xa4>
	if (key == KEY_BACK)
 800362a:	f1ba 0f01 	cmp.w	sl, #1
 800362e:	f47f af48 	bne.w	80034c2 <MenuChargeCC_CV+0xa6>
		CountShow--;
 8003632:	7823      	ldrb	r3, [r4, #0]
 8003634:	3b01      	subs	r3, #1
 8003636:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM0-1;
 8003638:	2b00      	cmp	r3, #0
 800363a:	bfb8      	it	lt
 800363c:	2302      	movlt	r3, #2
 800363e:	7023      	strb	r3, [r4, #0]
 8003640:	e73f      	b.n	80034c2 <MenuChargeCC_CV+0xa6>
			PrintToLCD(itoa_koma(U_OUT,2));
 8003642:	2102      	movs	r1, #2
 8003644:	f8ba 0000 	ldrh.w	r0, [sl]
 8003648:	f7fd fed2 	bl	80013f0 <itoa_koma>
 800364c:	f7fe fae6 	bl	8001c1c <PrintToLCD>
			PrintToLCD("V ");
 8003650:	4817      	ldr	r0, [pc, #92]	; (80036b0 <MenuChargeCC_CV+0x294>)
 8003652:	f7fe fae3 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa(Current));
 8003656:	4b25      	ldr	r3, [pc, #148]	; (80036ec <MenuChargeCC_CV+0x2d0>)
 8003658:	8818      	ldrh	r0, [r3, #0]
 800365a:	b200      	sxth	r0, r0
 800365c:	f7fd fe54 	bl	8001308 <itoa>
 8003660:	f7fe fadc 	bl	8001c1c <PrintToLCD>
			PrintToLCD("mA     ");
 8003664:	4822      	ldr	r0, [pc, #136]	; (80036f0 <MenuChargeCC_CV+0x2d4>)
 8003666:	e74c      	b.n	8003502 <MenuChargeCC_CV+0xe6>
			if (Blink_message_counter<=5)
 8003668:	f89a 3000 	ldrb.w	r3, [sl]
 800366c:	2b05      	cmp	r3, #5
 800366e:	f67f af53 	bls.w	8003518 <MenuChargeCC_CV+0xfc>
					lcd_set_xy(7,1);
 8003672:	f7fe fa53 	bl	8001b1c <lcd_set_xy>
					LcdOutbyNumber(1,1);
 8003676:	2101      	movs	r1, #1
 8003678:	4608      	mov	r0, r1
 800367a:	e751      	b.n	8003520 <MenuChargeCC_CV+0x104>
 800367c:	200007a9 	.word	0x200007a9
 8003680:	200007a8 	.word	0x200007a8
 8003684:	20000793 	.word	0x20000793
 8003688:	20000794 	.word	0x20000794
 800368c:	20000884 	.word	0x20000884
 8003690:	20000154 	.word	0x20000154
 8003694:	080065db 	.word	0x080065db
 8003698:	080065ec 	.word	0x080065ec
 800369c:	20000784 	.word	0x20000784
 80036a0:	20000a28 	.word	0x20000a28
 80036a4:	2000087e 	.word	0x2000087e
 80036a8:	20000799 	.word	0x20000799
 80036ac:	200007aa 	.word	0x200007aa
 80036b0:	08006518 	.word	0x08006518
 80036b4:	0800650e 	.word	0x0800650e
 80036b8:	08006378 	.word	0x08006378
 80036bc:	0800637b 	.word	0x0800637b
 80036c0:	080064cc 	.word	0x080064cc
 80036c4:	08006383 	.word	0x08006383
 80036c8:	08006386 	.word	0x08006386
 80036cc:	08006059 	.word	0x08006059
 80036d0:	0800638f 	.word	0x0800638f
 80036d4:	0800663d 	.word	0x0800663d
 80036d8:	08006652 	.word	0x08006652
 80036dc:	08006667 	.word	0x08006667
 80036e0:	0800668f 	.word	0x0800668f
 80036e4:	200007a0 	.word	0x200007a0
 80036e8:	080066a7 	.word	0x080066a7
 80036ec:	2000086a 	.word	0x2000086a
 80036f0:	0800660e 	.word	0x0800660e
 80036f4:	2000079c 	.word	0x2000079c
 80036f8:	20000791 	.word	0x20000791

080036fc <MenuChargeAdapt>:
	EnterInMenu_Status = 1;
 80036fc:	2201      	movs	r2, #1
{
 80036fe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (InitiStatus==0)
 8003702:	4eba      	ldr	r6, [pc, #744]	; (80039ec <MenuChargeAdapt+0x2f0>)
	EnterInMenu_Status = 1;
 8003704:	4bba      	ldr	r3, [pc, #744]	; (80039f0 <MenuChargeAdapt+0x2f4>)
	if (InitiStatus==0)
 8003706:	7835      	ldrb	r5, [r6, #0]
{
 8003708:	4682      	mov	sl, r0
	EnterInMenu_Status = 1;
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	4698      	mov	r8, r3
 800370e:	4cb9      	ldr	r4, [pc, #740]	; (80039f4 <MenuChargeAdapt+0x2f8>)
 8003710:	f8df 9350 	ldr.w	r9, [pc, #848]	; 8003a64 <MenuChargeAdapt+0x368>
 8003714:	4fb8      	ldr	r7, [pc, #736]	; (80039f8 <MenuChargeAdapt+0x2fc>)
	if (InitiStatus==0)
 8003716:	bb2d      	cbnz	r5, 8003764 <MenuChargeAdapt+0x68>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8003718:	4bb8      	ldr	r3, [pc, #736]	; (80039fc <MenuChargeAdapt+0x300>)
 800371a:	881a      	ldrh	r2, [r3, #0]
 800371c:	4bb8      	ldr	r3, [pc, #736]	; (8003a00 <MenuChargeAdapt+0x304>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	3305      	adds	r3, #5
 8003722:	4293      	cmp	r3, r2
 8003724:	d915      	bls.n	8003752 <MenuChargeAdapt+0x56>
			lcd_set_xy(0,0);
 8003726:	4629      	mov	r1, r5
 8003728:	4628      	mov	r0, r5
 800372a:	f7fe f9f7 	bl	8001b1c <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 800372e:	48b5      	ldr	r0, [pc, #724]	; (8003a04 <MenuChargeAdapt+0x308>)
 8003730:	f7fe fa74 	bl	8001c1c <PrintToLCD>
			delay_ms(2000);
 8003734:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003738:	f7fd fcca 	bl	80010d0 <delay_ms>
			lcd_set_xy(0,0);
 800373c:	4629      	mov	r1, r5
 800373e:	4628      	mov	r0, r5
 8003740:	f7fe f9ec 	bl	8001b1c <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8003744:	48b0      	ldr	r0, [pc, #704]	; (8003a08 <MenuChargeAdapt+0x30c>)
 8003746:	f7fe fa69 	bl	8001c1c <PrintToLCD>
			delay_ms(3000);
 800374a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800374e:	f7fd fcbf 	bl	80010d0 <delay_ms>
		ChargeStatusForTimer = 0;
 8003752:	2300      	movs	r3, #0
		BatteryCapacityCharge = 0;
 8003754:	4aad      	ldr	r2, [pc, #692]	; (8003a0c <MenuChargeAdapt+0x310>)
		ChargeStatusForTimer = 0;
 8003756:	7023      	strb	r3, [r4, #0]
		DisChargeStatusForTimer = 0;
 8003758:	f889 3000 	strb.w	r3, [r9]
		BatteryCapacityCharge = 0;
 800375c:	6013      	str	r3, [r2, #0]
		InitiStatus = 1;
 800375e:	2201      	movs	r2, #1
		ChargeTimeSec = 0;
 8003760:	603b      	str	r3, [r7, #0]
		InitiStatus = 1;
 8003762:	7032      	strb	r2, [r6, #0]
	if (ChargeTimeSec > ChargeDurationSec)
 8003764:	4baa      	ldr	r3, [pc, #680]	; (8003a10 <MenuChargeAdapt+0x314>)
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	f240 80fb 	bls.w	8003966 <MenuChargeAdapt+0x26a>
			OFF();
 8003770:	f7ff fe4c 	bl	800340c <OFF>
			ChargeStatusForTimer = 0;
 8003774:	2300      	movs	r3, #0
				ChargeStatusForTimer = 1;
 8003776:	7023      	strb	r3, [r4, #0]
    OUTStateAfterPowerUpFunction();
 8003778:	f7fe ffaa 	bl	80026d0 <OUTStateAfterPowerUpFunction>
	if (key == KEY_NEXT)
 800377c:	f1ba 0f02 	cmp.w	sl, #2
 8003780:	4da4      	ldr	r5, [pc, #656]	; (8003a14 <MenuChargeAdapt+0x318>)
 8003782:	f040 8109 	bne.w	8003998 <MenuChargeAdapt+0x29c>
		if (On_off == 0)
 8003786:	4ba4      	ldr	r3, [pc, #656]	; (8003a18 <MenuChargeAdapt+0x31c>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f040 8100 	bne.w	8003990 <MenuChargeAdapt+0x294>
			charge();
 8003790:	f7ff fac4 	bl	8002d1c <charge>
			ChargeStatusForTimer = 1;
 8003794:	2301      	movs	r3, #1
			ChargeStatusForTimer = 0;
 8003796:	7023      	strb	r3, [r4, #0]
	if(CountShow == 0)
 8003798:	f995 1000 	ldrsb.w	r1, [r5]
 800379c:	bba1      	cbnz	r1, 8003808 <MenuChargeAdapt+0x10c>
		lcd_set_xy(0,0);
 800379e:	4608      	mov	r0, r1
 80037a0:	f7fe f9bc 	bl	8001b1c <lcd_set_xy>
		if (On_off ==0)
 80037a4:	4b9c      	ldr	r3, [pc, #624]	; (8003a18 <MenuChargeAdapt+0x31c>)
 80037a6:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 8003a58 <MenuChargeAdapt+0x35c>
 80037aa:	781a      	ldrb	r2, [r3, #0]
 80037ac:	469b      	mov	fp, r3
 80037ae:	2a00      	cmp	r2, #0
 80037b0:	f040 80fe 	bne.w	80039b0 <MenuChargeAdapt+0x2b4>
			PrintToLCD(itoa_koma(U_PS,2));
 80037b4:	4b91      	ldr	r3, [pc, #580]	; (80039fc <MenuChargeAdapt+0x300>)
 80037b6:	2102      	movs	r1, #2
 80037b8:	8818      	ldrh	r0, [r3, #0]
 80037ba:	f7fd fe19 	bl	80013f0 <itoa_koma>
 80037be:	f7fe fa2d 	bl	8001c1c <PrintToLCD>
			PrintToLCD("V ");
 80037c2:	4896      	ldr	r0, [pc, #600]	; (8003a1c <MenuChargeAdapt+0x320>)
 80037c4:	f7fe fa2a 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa_koma(U_OUT,2));
 80037c8:	2102      	movs	r1, #2
 80037ca:	f8ba 0000 	ldrh.w	r0, [sl]
 80037ce:	f7fd fe0f 	bl	80013f0 <itoa_koma>
 80037d2:	f7fe fa23 	bl	8001c1c <PrintToLCD>
			PrintToLCD("V   ");
 80037d6:	4892      	ldr	r0, [pc, #584]	; (8003a20 <MenuChargeAdapt+0x324>)
			PrintToLCD("mA      ");
 80037d8:	f7fe fa20 	bl	8001c1c <PrintToLCD>
		if (On_off ==0)
 80037dc:	f89b 3000 	ldrb.w	r3, [fp]
 80037e0:	f8df a284 	ldr.w	sl, [pc, #644]	; 8003a68 <MenuChargeAdapt+0x36c>
			lcd_set_xy(7,1);
 80037e4:	2101      	movs	r1, #1
 80037e6:	2007      	movs	r0, #7
		if (On_off ==0)
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f040 80f4 	bne.w	80039d6 <MenuChargeAdapt+0x2da>
			lcd_set_xy(7,1);
 80037ee:	f7fe f995 	bl	8001b1c <lcd_set_xy>
			LcdOutbyNumber(0,1);
 80037f2:	2101      	movs	r1, #1
 80037f4:	2000      	movs	r0, #0
					LcdOutbyNumber(1,1);
 80037f6:	f7fe f9b9 	bl	8001b6c <LcdOutbyNumber>
		if (Blink_message_counter>10)
 80037fa:	f89a 3000 	ldrb.w	r3, [sl]
 80037fe:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 8003800:	bf84      	itt	hi
 8003802:	2300      	movhi	r3, #0
 8003804:	f88a 3000 	strbhi.w	r3, [sl]
	if(CountShow == 1)
 8003808:	f995 a000 	ldrsb.w	sl, [r5]
 800380c:	f1ba 0f01 	cmp.w	sl, #1
 8003810:	d11e      	bne.n	8003850 <MenuChargeAdapt+0x154>
		lcd_set_xy(0,0);
 8003812:	2100      	movs	r1, #0
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8003814:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8003a00 <MenuChargeAdapt+0x304>
		lcd_set_xy(0,0);
 8003818:	4608      	mov	r0, r1
 800381a:	f7fe f97f 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("T:");
 800381e:	4881      	ldr	r0, [pc, #516]	; (8003a24 <MenuChargeAdapt+0x328>)
 8003820:	f7fe f9fc 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8003824:	f8db 0010 	ldr.w	r0, [fp, #16]
 8003828:	f7fd fd6e 	bl	8001308 <itoa>
 800382c:	f7fe f9f6 	bl	8001c1c <PrintToLCD>
		PrintToLCD("h MaxV:");
 8003830:	487d      	ldr	r0, [pc, #500]	; (8003a28 <MenuChargeAdapt+0x32c>)
 8003832:	f7fe f9f3 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003836:	230a      	movs	r3, #10
 8003838:	f8db 0020 	ldr.w	r0, [fp, #32]
 800383c:	4651      	mov	r1, sl
 800383e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003842:	f7fd fdd5 	bl	80013f0 <itoa_koma>
 8003846:	f7fe f9e9 	bl	8001c1c <PrintToLCD>
		PrintToLCD("V   ");
 800384a:	4875      	ldr	r0, [pc, #468]	; (8003a20 <MenuChargeAdapt+0x324>)
 800384c:	f7fe f9e6 	bl	8001c1c <PrintToLCD>
	if(CountShow == 2)
 8003850:	f995 3000 	ldrsb.w	r3, [r5]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d12f      	bne.n	80038b8 <MenuChargeAdapt+0x1bc>
		lcd_set_xy(0,0);
 8003858:	2100      	movs	r1, #0
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800385a:	f04f 0a0a 	mov.w	sl, #10
		PrintToLCD(itoa(SettingsData.ChargeAdapt));
 800385e:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 8003a00 <MenuChargeAdapt+0x304>
		lcd_set_xy(0,0);
 8003862:	4608      	mov	r0, r1
 8003864:	f7fe f95a 	bl	8001b1c <lcd_set_xy>
		PrintToLCD(itoa(SettingsData.ChargeAdapt));
 8003868:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 800386c:	f7fd fd4c 	bl	8001308 <itoa>
 8003870:	f7fe f9d4 	bl	8001c1c <PrintToLCD>
		PrintToLCD("% ");
 8003874:	486d      	ldr	r0, [pc, #436]	; (8003a2c <MenuChargeAdapt+0x330>)
 8003876:	f7fe f9d1 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800387a:	f8db 0020 	ldr.w	r0, [fp, #32]
 800387e:	2101      	movs	r1, #1
 8003880:	fbb0 f0fa 	udiv	r0, r0, sl
 8003884:	f7fd fdb4 	bl	80013f0 <itoa_koma>
 8003888:	f7fe f9c8 	bl	8001c1c <PrintToLCD>
		PrintToLCD("V ");
 800388c:	4863      	ldr	r0, [pc, #396]	; (8003a1c <MenuChargeAdapt+0x320>)
 800388e:	f7fe f9c5 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa_koma((SettingsData.MaxVoltage-(SettingsData.MaxVoltage*SettingsData.ChargeAdapt/100))/10,1));
 8003892:	2264      	movs	r2, #100	; 0x64
 8003894:	f8db 3020 	ldr.w	r3, [fp, #32]
 8003898:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 800389c:	2101      	movs	r1, #1
 800389e:	4358      	muls	r0, r3
 80038a0:	fbb0 f0f2 	udiv	r0, r0, r2
 80038a4:	1a18      	subs	r0, r3, r0
 80038a6:	fbb0 f0fa 	udiv	r0, r0, sl
 80038aa:	f7fd fda1 	bl	80013f0 <itoa_koma>
 80038ae:	f7fe f9b5 	bl	8001c1c <PrintToLCD>
		PrintToLCD("V   ");
 80038b2:	485b      	ldr	r0, [pc, #364]	; (8003a20 <MenuChargeAdapt+0x324>)
 80038b4:	f7fe f9b2 	bl	8001c1c <PrintToLCD>
	if(CountShow == 3)
 80038b8:	f995 5000 	ldrsb.w	r5, [r5]
 80038bc:	2d03      	cmp	r5, #3
 80038be:	d11a      	bne.n	80038f6 <MenuChargeAdapt+0x1fa>
		lcd_set_xy(0,0);
 80038c0:	2100      	movs	r1, #0
 80038c2:	4608      	mov	r0, r1
 80038c4:	f7fe f92a 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("C ");
 80038c8:	4859      	ldr	r0, [pc, #356]	; (8003a30 <MenuChargeAdapt+0x334>)
 80038ca:	f7fe f9a7 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityCharge/3600));
 80038ce:	4b4f      	ldr	r3, [pc, #316]	; (8003a0c <MenuChargeAdapt+0x310>)
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80038d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80038da:	f7fd fd15 	bl	8001308 <itoa>
 80038de:	f7fe f99d 	bl	8001c1c <PrintToLCD>
		PrintToLCD("mAH     ");
 80038e2:	4854      	ldr	r0, [pc, #336]	; (8003a34 <MenuChargeAdapt+0x338>)
 80038e4:	f7fe f99a 	bl	8001c1c <PrintToLCD>
		lcd_set_xy(3,1);
 80038e8:	4628      	mov	r0, r5
 80038ea:	2101      	movs	r1, #1
 80038ec:	f7fe f916 	bl	8001b1c <lcd_set_xy>
		ClockOnLCD_noSec(ChargeTimeSec);
 80038f0:	6838      	ldr	r0, [r7, #0]
 80038f2:	f7fe fe8d 	bl	8002610 <ClockOnLCD_noSec>
	delay_ms(MENUDELAY);
 80038f6:	2064      	movs	r0, #100	; 0x64
 80038f8:	f7fd fbea 	bl	80010d0 <delay_ms>
	logDebugD("Init status: ",InitiStatus,0);
 80038fc:	484e      	ldr	r0, [pc, #312]	; (8003a38 <MenuChargeAdapt+0x33c>)
 80038fe:	f001 fe1f 	bl	8005540 <printToBufferWithoutEndUART1>
 8003902:	7831      	ldrb	r1, [r6, #0]
 8003904:	2200      	movs	r2, #0
 8003906:	484d      	ldr	r0, [pc, #308]	; (8003a3c <MenuChargeAdapt+0x340>)
 8003908:	f001 fe5e 	bl	80055c8 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 800390c:	484a      	ldr	r0, [pc, #296]	; (8003a38 <MenuChargeAdapt+0x33c>)
 800390e:	f001 fe17 	bl	8005540 <printToBufferWithoutEndUART1>
 8003912:	f898 1000 	ldrb.w	r1, [r8]
 8003916:	2200      	movs	r2, #0
 8003918:	4849      	ldr	r0, [pc, #292]	; (8003a40 <MenuChargeAdapt+0x344>)
 800391a:	f001 fe55 	bl	80055c8 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 800391e:	4846      	ldr	r0, [pc, #280]	; (8003a38 <MenuChargeAdapt+0x33c>)
 8003920:	f001 fe0e 	bl	8005540 <printToBufferWithoutEndUART1>
 8003924:	7821      	ldrb	r1, [r4, #0]
 8003926:	2200      	movs	r2, #0
 8003928:	4846      	ldr	r0, [pc, #280]	; (8003a44 <MenuChargeAdapt+0x348>)
 800392a:	f001 fe4d 	bl	80055c8 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 800392e:	4842      	ldr	r0, [pc, #264]	; (8003a38 <MenuChargeAdapt+0x33c>)
 8003930:	f001 fe06 	bl	8005540 <printToBufferWithoutEndUART1>
 8003934:	6839      	ldr	r1, [r7, #0]
 8003936:	2200      	movs	r2, #0
 8003938:	4843      	ldr	r0, [pc, #268]	; (8003a48 <MenuChargeAdapt+0x34c>)
 800393a:	f001 fe45 	bl	80055c8 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 800393e:	483e      	ldr	r0, [pc, #248]	; (8003a38 <MenuChargeAdapt+0x33c>)
 8003940:	f001 fdfe 	bl	8005540 <printToBufferWithoutEndUART1>
 8003944:	f899 1000 	ldrb.w	r1, [r9]
 8003948:	2200      	movs	r2, #0
 800394a:	4840      	ldr	r0, [pc, #256]	; (8003a4c <MenuChargeAdapt+0x350>)
 800394c:	f001 fe3c 	bl	80055c8 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003950:	4839      	ldr	r0, [pc, #228]	; (8003a38 <MenuChargeAdapt+0x33c>)
 8003952:	f001 fdf5 	bl	8005540 <printToBufferWithoutEndUART1>
 8003956:	4b3e      	ldr	r3, [pc, #248]	; (8003a50 <MenuChargeAdapt+0x354>)
 8003958:	2200      	movs	r2, #0
 800395a:	6819      	ldr	r1, [r3, #0]
 800395c:	483d      	ldr	r0, [pc, #244]	; (8003a54 <MenuChargeAdapt+0x358>)
}
 800395e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003962:	f001 be31 	b.w	80055c8 <printToBufferUART1D>
		if (U_OUT> SettingsData.MaxVoltage)
 8003966:	493c      	ldr	r1, [pc, #240]	; (8003a58 <MenuChargeAdapt+0x35c>)
 8003968:	4a25      	ldr	r2, [pc, #148]	; (8003a00 <MenuChargeAdapt+0x304>)
 800396a:	8808      	ldrh	r0, [r1, #0]
 800396c:	6a13      	ldr	r3, [r2, #32]
 800396e:	4283      	cmp	r3, r0
 8003970:	f4ff aefe 	bcc.w	8003770 <MenuChargeAdapt+0x74>
			if (U_OUT< (SettingsData.MaxVoltage-(SettingsData.MaxVoltage*SettingsData.ChargeAdapt/100))   )
 8003974:	2064      	movs	r0, #100	; 0x64
 8003976:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003978:	8809      	ldrh	r1, [r1, #0]
 800397a:	435a      	muls	r2, r3
 800397c:	fbb2 f2f0 	udiv	r2, r2, r0
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	428b      	cmp	r3, r1
 8003984:	f67f aef8 	bls.w	8003778 <MenuChargeAdapt+0x7c>
				charge();
 8003988:	f7ff f9c8 	bl	8002d1c <charge>
				ChargeStatusForTimer = 1;
 800398c:	2301      	movs	r3, #1
 800398e:	e6f2      	b.n	8003776 <MenuChargeAdapt+0x7a>
			OFF();
 8003990:	f7ff fd3c 	bl	800340c <OFF>
			ChargeStatusForTimer = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	e6fe      	b.n	8003796 <MenuChargeAdapt+0x9a>
	if (key == KEY_BACK)
 8003998:	f1ba 0f01 	cmp.w	sl, #1
 800399c:	f47f aefc 	bne.w	8003798 <MenuChargeAdapt+0x9c>
		CountShow--;
 80039a0:	782b      	ldrb	r3, [r5, #0]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM1-1;
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bfb8      	it	lt
 80039aa:	2303      	movlt	r3, #3
 80039ac:	702b      	strb	r3, [r5, #0]
 80039ae:	e6f3      	b.n	8003798 <MenuChargeAdapt+0x9c>
			PrintToLCD(itoa_koma(U_OUT,2));
 80039b0:	2102      	movs	r1, #2
 80039b2:	f8ba 0000 	ldrh.w	r0, [sl]
 80039b6:	f7fd fd1b 	bl	80013f0 <itoa_koma>
 80039ba:	f7fe f92f 	bl	8001c1c <PrintToLCD>
			PrintToLCD("V ");
 80039be:	4817      	ldr	r0, [pc, #92]	; (8003a1c <MenuChargeAdapt+0x320>)
 80039c0:	f7fe f92c 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa(Current));
 80039c4:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <MenuChargeAdapt+0x360>)
 80039c6:	8818      	ldrh	r0, [r3, #0]
 80039c8:	b200      	sxth	r0, r0
 80039ca:	f7fd fc9d 	bl	8001308 <itoa>
 80039ce:	f7fe f925 	bl	8001c1c <PrintToLCD>
			PrintToLCD("mA      ");
 80039d2:	4823      	ldr	r0, [pc, #140]	; (8003a60 <MenuChargeAdapt+0x364>)
 80039d4:	e700      	b.n	80037d8 <MenuChargeAdapt+0xdc>
			if (Blink_message_counter<=5)
 80039d6:	f89a 3000 	ldrb.w	r3, [sl]
 80039da:	2b05      	cmp	r3, #5
 80039dc:	f67f af07 	bls.w	80037ee <MenuChargeAdapt+0xf2>
					lcd_set_xy(7,1);
 80039e0:	f7fe f89c 	bl	8001b1c <lcd_set_xy>
					LcdOutbyNumber(1,1);
 80039e4:	2101      	movs	r1, #1
 80039e6:	4608      	mov	r0, r1
 80039e8:	e705      	b.n	80037f6 <MenuChargeAdapt+0xfa>
 80039ea:	bf00      	nop
 80039ec:	200007a9 	.word	0x200007a9
 80039f0:	200007a8 	.word	0x200007a8
 80039f4:	20000793 	.word	0x20000793
 80039f8:	20000794 	.word	0x20000794
 80039fc:	20000884 	.word	0x20000884
 8003a00:	20000154 	.word	0x20000154
 8003a04:	080065db 	.word	0x080065db
 8003a08:	080065ec 	.word	0x080065ec
 8003a0c:	20000784 	.word	0x20000784
 8003a10:	20000a28 	.word	0x20000a28
 8003a14:	20000799 	.word	0x20000799
 8003a18:	200007aa 	.word	0x200007aa
 8003a1c:	08006518 	.word	0x08006518
 8003a20:	080064cc 	.word	0x080064cc
 8003a24:	08006378 	.word	0x08006378
 8003a28:	0800637b 	.word	0x0800637b
 8003a2c:	08006515 	.word	0x08006515
 8003a30:	08006383 	.word	0x08006383
 8003a34:	08006623 	.word	0x08006623
 8003a38:	08006059 	.word	0x08006059
 8003a3c:	0800638f 	.word	0x0800638f
 8003a40:	0800663d 	.word	0x0800663d
 8003a44:	08006652 	.word	0x08006652
 8003a48:	08006667 	.word	0x08006667
 8003a4c:	0800668f 	.word	0x0800668f
 8003a50:	200007a0 	.word	0x200007a0
 8003a54:	080066a7 	.word	0x080066a7
 8003a58:	2000087e 	.word	0x2000087e
 8003a5c:	2000086a 	.word	0x2000086a
 8003a60:	0800636f 	.word	0x0800636f
 8003a64:	2000079c 	.word	0x2000079c
 8003a68:	20000791 	.word	0x20000791

08003a6c <MenuDisCharge>:
	EnterInMenu_Status = 1;
 8003a6c:	2101      	movs	r1, #1
{
 8003a6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (InitiStatus==0)
 8003a72:	4d8a      	ldr	r5, [pc, #552]	; (8003c9c <MenuDisCharge+0x230>)
	EnterInMenu_Status = 1;
 8003a74:	4e8a      	ldr	r6, [pc, #552]	; (8003ca0 <MenuDisCharge+0x234>)
	if (InitiStatus==0)
 8003a76:	782b      	ldrb	r3, [r5, #0]
	EnterInMenu_Status = 1;
 8003a78:	7031      	strb	r1, [r6, #0]
 8003a7a:	4a8a      	ldr	r2, [pc, #552]	; (8003ca4 <MenuDisCharge+0x238>)
	if (InitiStatus==0)
 8003a7c:	b94b      	cbnz	r3, 8003a92 <MenuDisCharge+0x26>
		InitiStatus = 1;
 8003a7e:	7029      	strb	r1, [r5, #0]
		ChargeStatusForTimer = 0;
 8003a80:	4989      	ldr	r1, [pc, #548]	; (8003ca8 <MenuDisCharge+0x23c>)
		BatteryLow=0;
 8003a82:	7013      	strb	r3, [r2, #0]
		ChargeStatusForTimer = 0;
 8003a84:	700b      	strb	r3, [r1, #0]
		DisChargeStatusForTimer = 0;
 8003a86:	4989      	ldr	r1, [pc, #548]	; (8003cac <MenuDisCharge+0x240>)
 8003a88:	700b      	strb	r3, [r1, #0]
		BatteryCapacityDischargeCurrent = 0;
 8003a8a:	4989      	ldr	r1, [pc, #548]	; (8003cb0 <MenuDisCharge+0x244>)
 8003a8c:	600b      	str	r3, [r1, #0]
		DischargeTimeSec = 0;
 8003a8e:	4989      	ldr	r1, [pc, #548]	; (8003cb4 <MenuDisCharge+0x248>)
 8003a90:	600b      	str	r3, [r1, #0]
	U_BatteryTmp = U_OUT;
 8003a92:	4f89      	ldr	r7, [pc, #548]	; (8003cb8 <MenuDisCharge+0x24c>)
 8003a94:	4989      	ldr	r1, [pc, #548]	; (8003cbc <MenuDisCharge+0x250>)
 8003a96:	883b      	ldrh	r3, [r7, #0]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	800b      	strh	r3, [r1, #0]
	if (U_BatteryTmp >=SettingsData.LowVoltage) BatteryLow=0;
 8003a9c:	4988      	ldr	r1, [pc, #544]	; (8003cc0 <MenuDisCharge+0x254>)
 8003a9e:	698c      	ldr	r4, [r1, #24]
 8003aa0:	4688      	mov	r8, r1
 8003aa2:	42a3      	cmp	r3, r4
 8003aa4:	f0c0 80f1 	bcc.w	8003c8a <MenuDisCharge+0x21e>
 8003aa8:	2300      	movs	r3, #0
		BatteryLow = 1;
 8003aaa:	7013      	strb	r3, [r2, #0]
	if ((time_sec - U_Battery_Timer)>3 && BatteryLow !=0)//was 10
 8003aac:	4985      	ldr	r1, [pc, #532]	; (8003cc4 <MenuDisCharge+0x258>)
 8003aae:	4b86      	ldr	r3, [pc, #536]	; (8003cc8 <MenuDisCharge+0x25c>)
 8003ab0:	6809      	ldr	r1, [r1, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8003cac <MenuDisCharge+0x240>
 8003ab8:	1a5b      	subs	r3, r3, r1
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d906      	bls.n	8003acc <MenuDisCharge+0x60>
 8003abe:	7813      	ldrb	r3, [r2, #0]
 8003ac0:	b123      	cbz	r3, 8003acc <MenuDisCharge+0x60>
		OFF();
 8003ac2:	f7ff fca3 	bl	800340c <OFF>
		DisChargeStatusForTimer = 0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f889 3000 	strb.w	r3, [r9]
	if (key == KEY_NEXT)
 8003acc:	2802      	cmp	r0, #2
 8003ace:	4c7f      	ldr	r4, [pc, #508]	; (8003ccc <MenuDisCharge+0x260>)
 8003ad0:	f040 80c7 	bne.w	8003c62 <MenuDisCharge+0x1f6>
    	if (On_off == 0)
 8003ad4:	4b7e      	ldr	r3, [pc, #504]	; (8003cd0 <MenuDisCharge+0x264>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f040 80be 	bne.w	8003c5a <MenuDisCharge+0x1ee>
    		discharge();
 8003ade:	f7fe ffd7 	bl	8002a90 <discharge>
    		DisChargeStatusForTimer = 1;
 8003ae2:	2301      	movs	r3, #1
    		DisChargeStatusForTimer = 0;
 8003ae4:	f889 3000 	strb.w	r3, [r9]
	if(CountShow == 0)
 8003ae8:	f994 1000 	ldrsb.w	r1, [r4]
 8003aec:	bb41      	cbnz	r1, 8003b40 <MenuDisCharge+0xd4>
		lcd_set_xy(0,0);
 8003aee:	4608      	mov	r0, r1
 8003af0:	f7fe f814 	bl	8001b1c <lcd_set_xy>
		PrintToLCD(itoa_koma(U_OUT ,2));
 8003af4:	2102      	movs	r1, #2
 8003af6:	8838      	ldrh	r0, [r7, #0]
 8003af8:	f7fd fc7a 	bl	80013f0 <itoa_koma>
 8003afc:	f7fe f88e 	bl	8001c1c <PrintToLCD>
		PrintToLCD("V ");
 8003b00:	4874      	ldr	r0, [pc, #464]	; (8003cd4 <MenuDisCharge+0x268>)
 8003b02:	f7fe f88b 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa(Current ));
 8003b06:	4b74      	ldr	r3, [pc, #464]	; (8003cd8 <MenuDisCharge+0x26c>)
 8003b08:	4f74      	ldr	r7, [pc, #464]	; (8003cdc <MenuDisCharge+0x270>)
 8003b0a:	8818      	ldrh	r0, [r3, #0]
 8003b0c:	b200      	sxth	r0, r0
 8003b0e:	f7fd fbfb 	bl	8001308 <itoa>
 8003b12:	f7fe f883 	bl	8001c1c <PrintToLCD>
		PrintToLCD("mA      ");
 8003b16:	4872      	ldr	r0, [pc, #456]	; (8003ce0 <MenuDisCharge+0x274>)
 8003b18:	f7fe f880 	bl	8001c1c <PrintToLCD>
		if (On_off ==0)
 8003b1c:	4b6c      	ldr	r3, [pc, #432]	; (8003cd0 <MenuDisCharge+0x264>)
				lcd_set_xy(7,1);
 8003b1e:	2101      	movs	r1, #1
		if (On_off ==0)
 8003b20:	781b      	ldrb	r3, [r3, #0]
				lcd_set_xy(7,1);
 8003b22:	2007      	movs	r0, #7
		if (On_off ==0)
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f040 80a7 	bne.w	8003c78 <MenuDisCharge+0x20c>
				lcd_set_xy(7,1);
 8003b2a:	f7fd fff7 	bl	8001b1c <lcd_set_xy>
				LcdOutbyNumber(2,1);
 8003b2e:	2101      	movs	r1, #1
 8003b30:	2002      	movs	r0, #2
						LcdOutbyNumber(3,1);
 8003b32:	f7fe f81b 	bl	8001b6c <LcdOutbyNumber>
			if (Blink_message_counter>10)
 8003b36:	783b      	ldrb	r3, [r7, #0]
 8003b38:	2b0a      	cmp	r3, #10
				Blink_message_counter = 0;
 8003b3a:	bf84      	itt	hi
 8003b3c:	2300      	movhi	r3, #0
 8003b3e:	703b      	strbhi	r3, [r7, #0]
	if(CountShow == 1)
 8003b40:	f994 7000 	ldrsb.w	r7, [r4]
 8003b44:	2f01      	cmp	r7, #1
 8003b46:	d113      	bne.n	8003b70 <MenuDisCharge+0x104>
		lcd_set_xy(0,0);
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4608      	mov	r0, r1
 8003b4c:	f7fd ffe6 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("OffWhen Vb<");
 8003b50:	4864      	ldr	r0, [pc, #400]	; (8003ce4 <MenuDisCharge+0x278>)
 8003b52:	f7fe f863 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.LowVoltage/10 ,1));
 8003b56:	230a      	movs	r3, #10
 8003b58:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8003b5c:	4639      	mov	r1, r7
 8003b5e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003b62:	f7fd fc45 	bl	80013f0 <itoa_koma>
 8003b66:	f7fe f859 	bl	8001c1c <PrintToLCD>
		PrintToLCD("V   ");
 8003b6a:	485f      	ldr	r0, [pc, #380]	; (8003ce8 <MenuDisCharge+0x27c>)
 8003b6c:	f7fe f856 	bl	8001c1c <PrintToLCD>
	if(CountShow == 2)
 8003b70:	f994 3000 	ldrsb.w	r3, [r4]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d11b      	bne.n	8003bb0 <MenuDisCharge+0x144>
		lcd_set_xy(0,0);
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4608      	mov	r0, r1
 8003b7c:	f7fd ffce 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("P ");
 8003b80:	485a      	ldr	r0, [pc, #360]	; (8003cec <MenuDisCharge+0x280>)
 8003b82:	f7fe f84b 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa(SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue/3600 ));
 8003b86:	4b5a      	ldr	r3, [pc, #360]	; (8003cf0 <MenuDisCharge+0x284>)
 8003b88:	6898      	ldr	r0, [r3, #8]
 8003b8a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003b8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003b92:	f7fd fbb9 	bl	8001308 <itoa>
 8003b96:	f7fe f841 	bl	8001c1c <PrintToLCD>
		PrintToLCD("mAh     ");
 8003b9a:	4856      	ldr	r0, [pc, #344]	; (8003cf4 <MenuDisCharge+0x288>)
 8003b9c:	f7fe f83e 	bl	8001c1c <PrintToLCD>
		lcd_set_xy(3,1);
 8003ba0:	2003      	movs	r0, #3
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	f7fd ffba 	bl	8001b1c <lcd_set_xy>
		ClockOnLCD_noSec(DischargeTimeSec_Previous);
 8003ba8:	4b53      	ldr	r3, [pc, #332]	; (8003cf8 <MenuDisCharge+0x28c>)
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	f7fe fd30 	bl	8002610 <ClockOnLCD_noSec>
	if(CountShow == 3)
 8003bb0:	f994 7000 	ldrsb.w	r7, [r4]
 8003bb4:	4c3f      	ldr	r4, [pc, #252]	; (8003cb4 <MenuDisCharge+0x248>)
 8003bb6:	2f03      	cmp	r7, #3
 8003bb8:	d11a      	bne.n	8003bf0 <MenuDisCharge+0x184>
		lcd_set_xy(0,0);
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	f7fd ffad 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("N ");
 8003bc2:	484e      	ldr	r0, [pc, #312]	; (8003cfc <MenuDisCharge+0x290>)
 8003bc4:	f7fe f82a 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600 ));
 8003bc8:	4b39      	ldr	r3, [pc, #228]	; (8003cb0 <MenuDisCharge+0x244>)
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003bd0:	fbb0 f0f3 	udiv	r0, r0, r3
 8003bd4:	f7fd fb98 	bl	8001308 <itoa>
 8003bd8:	f7fe f820 	bl	8001c1c <PrintToLCD>
		PrintToLCD("mAH     ");
 8003bdc:	4848      	ldr	r0, [pc, #288]	; (8003d00 <MenuDisCharge+0x294>)
 8003bde:	f7fe f81d 	bl	8001c1c <PrintToLCD>
		lcd_set_xy(3,1);
 8003be2:	4638      	mov	r0, r7
 8003be4:	2101      	movs	r1, #1
 8003be6:	f7fd ff99 	bl	8001b1c <lcd_set_xy>
		ClockOnLCD_noSec(DischargeTimeSec);
 8003bea:	6820      	ldr	r0, [r4, #0]
 8003bec:	f7fe fd10 	bl	8002610 <ClockOnLCD_noSec>
	logDebugD("Init status: ",InitiStatus,0);
 8003bf0:	4844      	ldr	r0, [pc, #272]	; (8003d04 <MenuDisCharge+0x298>)
 8003bf2:	f001 fca5 	bl	8005540 <printToBufferWithoutEndUART1>
 8003bf6:	7829      	ldrb	r1, [r5, #0]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	4843      	ldr	r0, [pc, #268]	; (8003d08 <MenuDisCharge+0x29c>)
 8003bfc:	f001 fce4 	bl	80055c8 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003c00:	4840      	ldr	r0, [pc, #256]	; (8003d04 <MenuDisCharge+0x298>)
 8003c02:	f001 fc9d 	bl	8005540 <printToBufferWithoutEndUART1>
 8003c06:	7831      	ldrb	r1, [r6, #0]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	4840      	ldr	r0, [pc, #256]	; (8003d0c <MenuDisCharge+0x2a0>)
 8003c0c:	f001 fcdc 	bl	80055c8 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003c10:	483c      	ldr	r0, [pc, #240]	; (8003d04 <MenuDisCharge+0x298>)
 8003c12:	f001 fc95 	bl	8005540 <printToBufferWithoutEndUART1>
 8003c16:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <MenuDisCharge+0x23c>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	7819      	ldrb	r1, [r3, #0]
 8003c1c:	483c      	ldr	r0, [pc, #240]	; (8003d10 <MenuDisCharge+0x2a4>)
 8003c1e:	f001 fcd3 	bl	80055c8 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003c22:	4838      	ldr	r0, [pc, #224]	; (8003d04 <MenuDisCharge+0x298>)
 8003c24:	f001 fc8c 	bl	8005540 <printToBufferWithoutEndUART1>
 8003c28:	4b3a      	ldr	r3, [pc, #232]	; (8003d14 <MenuDisCharge+0x2a8>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	6819      	ldr	r1, [r3, #0]
 8003c2e:	483a      	ldr	r0, [pc, #232]	; (8003d18 <MenuDisCharge+0x2ac>)
 8003c30:	f001 fcca 	bl	80055c8 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8003c34:	4833      	ldr	r0, [pc, #204]	; (8003d04 <MenuDisCharge+0x298>)
 8003c36:	f001 fc83 	bl	8005540 <printToBufferWithoutEndUART1>
 8003c3a:	f899 1000 	ldrb.w	r1, [r9]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	4836      	ldr	r0, [pc, #216]	; (8003d1c <MenuDisCharge+0x2b0>)
 8003c42:	f001 fcc1 	bl	80055c8 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003c46:	482f      	ldr	r0, [pc, #188]	; (8003d04 <MenuDisCharge+0x298>)
 8003c48:	f001 fc7a 	bl	8005540 <printToBufferWithoutEndUART1>
 8003c4c:	6821      	ldr	r1, [r4, #0]
 8003c4e:	2200      	movs	r2, #0
}
 8003c50:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003c54:	4832      	ldr	r0, [pc, #200]	; (8003d20 <MenuDisCharge+0x2b4>)
 8003c56:	f001 bcb7 	b.w	80055c8 <printToBufferUART1D>
    		OFF();
 8003c5a:	f7ff fbd7 	bl	800340c <OFF>
    		DisChargeStatusForTimer = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	e740      	b.n	8003ae4 <MenuDisCharge+0x78>
	if (key == KEY_BACK)
 8003c62:	2801      	cmp	r0, #1
 8003c64:	f47f af40 	bne.w	8003ae8 <MenuDisCharge+0x7c>
		CountShow--;
 8003c68:	7823      	ldrb	r3, [r4, #0]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM2-1;
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bfb8      	it	lt
 8003c72:	2303      	movlt	r3, #3
 8003c74:	7023      	strb	r3, [r4, #0]
 8003c76:	e737      	b.n	8003ae8 <MenuDisCharge+0x7c>
				if (Blink_message_counter<=5)
 8003c78:	783b      	ldrb	r3, [r7, #0]
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	f67f af55 	bls.w	8003b2a <MenuDisCharge+0xbe>
						lcd_set_xy(7,1);
 8003c80:	f7fd ff4c 	bl	8001b1c <lcd_set_xy>
						LcdOutbyNumber(3,1);
 8003c84:	2101      	movs	r1, #1
 8003c86:	2003      	movs	r0, #3
 8003c88:	e753      	b.n	8003b32 <MenuDisCharge+0xc6>
		if (BatteryLow == 0) U_Battery_Timer = time_sec;
 8003c8a:	7813      	ldrb	r3, [r2, #0]
 8003c8c:	b91b      	cbnz	r3, 8003c96 <MenuDisCharge+0x22a>
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <MenuDisCharge+0x25c>)
 8003c90:	6819      	ldr	r1, [r3, #0]
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <MenuDisCharge+0x258>)
 8003c94:	6019      	str	r1, [r3, #0]
		BatteryLow = 1;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e707      	b.n	8003aaa <MenuDisCharge+0x3e>
 8003c9a:	bf00      	nop
 8003c9c:	200007a9 	.word	0x200007a9
 8003ca0:	200007a8 	.word	0x200007a8
 8003ca4:	20000790 	.word	0x20000790
 8003ca8:	20000793 	.word	0x20000793
 8003cac:	2000079c 	.word	0x2000079c
 8003cb0:	20000788 	.word	0x20000788
 8003cb4:	200007a0 	.word	0x200007a0
 8003cb8:	2000087e 	.word	0x2000087e
 8003cbc:	200007e4 	.word	0x200007e4
 8003cc0:	20000154 	.word	0x20000154
 8003cc4:	200007e8 	.word	0x200007e8
 8003cc8:	200007f8 	.word	0x200007f8
 8003ccc:	20000799 	.word	0x20000799
 8003cd0:	200007aa 	.word	0x200007aa
 8003cd4:	08006518 	.word	0x08006518
 8003cd8:	2000086a 	.word	0x2000086a
 8003cdc:	20000791 	.word	0x20000791
 8003ce0:	0800636f 	.word	0x0800636f
 8003ce4:	080063f5 	.word	0x080063f5
 8003ce8:	080064cc 	.word	0x080064cc
 8003cec:	08006620 	.word	0x08006620
 8003cf0:	200000f4 	.word	0x200000f4
 8003cf4:	08006386 	.word	0x08006386
 8003cf8:	200007a4 	.word	0x200007a4
 8003cfc:	08006437 	.word	0x08006437
 8003d00:	08006623 	.word	0x08006623
 8003d04:	08006059 	.word	0x08006059
 8003d08:	0800638f 	.word	0x0800638f
 8003d0c:	0800663d 	.word	0x0800663d
 8003d10:	08006652 	.word	0x08006652
 8003d14:	20000794 	.word	0x20000794
 8003d18:	08006667 	.word	0x08006667
 8003d1c:	0800668f 	.word	0x0800668f
 8003d20:	080066a7 	.word	0x080066a7

08003d24 <MenuCheckingCapacity>:
{
 8003d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (EnterInMenu_Status == 0)
 8003d28:	4a86      	ldr	r2, [pc, #536]	; (8003f44 <MenuCheckingCapacity+0x220>)
{
 8003d2a:	b085      	sub	sp, #20
	if (EnterInMenu_Status == 0)
 8003d2c:	7813      	ldrb	r3, [r2, #0]
{
 8003d2e:	4683      	mov	fp, r0
	if (EnterInMenu_Status == 0)
 8003d30:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8003d34:	9200      	str	r2, [sp, #0]
 8003d36:	f8df a258 	ldr.w	sl, [pc, #600]	; 8003f90 <MenuCheckingCapacity+0x26c>
 8003d3a:	4e83      	ldr	r6, [pc, #524]	; (8003f48 <MenuCheckingCapacity+0x224>)
 8003d3c:	f8df 9254 	ldr.w	r9, [pc, #596]	; 8003f94 <MenuCheckingCapacity+0x270>
 8003d40:	4d82      	ldr	r5, [pc, #520]	; (8003f4c <MenuCheckingCapacity+0x228>)
 8003d42:	4f83      	ldr	r7, [pc, #524]	; (8003f50 <MenuCheckingCapacity+0x22c>)
 8003d44:	4c83      	ldr	r4, [pc, #524]	; (8003f54 <MenuCheckingCapacity+0x230>)
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d146      	bne.n	8003dd8 <MenuCheckingCapacity+0xb4>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8003d4a:	4b83      	ldr	r3, [pc, #524]	; (8003f58 <MenuCheckingCapacity+0x234>)
 8003d4c:	881a      	ldrh	r2, [r3, #0]
 8003d4e:	4b83      	ldr	r3, [pc, #524]	; (8003f5c <MenuCheckingCapacity+0x238>)
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	3305      	adds	r3, #5
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d915      	bls.n	8003d84 <MenuCheckingCapacity+0x60>
			lcd_set_xy(0,0);
 8003d58:	4641      	mov	r1, r8
 8003d5a:	4640      	mov	r0, r8
 8003d5c:	f7fd fede 	bl	8001b1c <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8003d60:	487f      	ldr	r0, [pc, #508]	; (8003f60 <MenuCheckingCapacity+0x23c>)
 8003d62:	f7fd ff5b 	bl	8001c1c <PrintToLCD>
			delay_ms(2000);
 8003d66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003d6a:	f7fd f9b1 	bl	80010d0 <delay_ms>
			lcd_set_xy(0,0);
 8003d6e:	4641      	mov	r1, r8
 8003d70:	4640      	mov	r0, r8
 8003d72:	f7fd fed3 	bl	8001b1c <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8003d76:	487b      	ldr	r0, [pc, #492]	; (8003f64 <MenuCheckingCapacity+0x240>)
 8003d78:	f7fd ff50 	bl	8001c1c <PrintToLCD>
			delay_ms(3000);
 8003d7c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003d80:	f7fd f9a6 	bl	80010d0 <delay_ms>
		EnterInMenu_Status = 1;
 8003d84:	2301      	movs	r3, #1
		ChargeStatusForTimer = 0;
 8003d86:	f04f 0800 	mov.w	r8, #0
		EnterInMenu_Status = 1;
 8003d8a:	9a00      	ldr	r2, [sp, #0]
		ChargeStatusForTimer = 1;
 8003d8c:	9301      	str	r3, [sp, #4]
		EnterInMenu_Status = 1;
 8003d8e:	7013      	strb	r3, [r2, #0]
		DisChargeStatusForTimer = 0;
 8003d90:	4a75      	ldr	r2, [pc, #468]	; (8003f68 <MenuCheckingCapacity+0x244>)
		ChargeStatusForTimer = 0;
 8003d92:	f88a 8000 	strb.w	r8, [sl]
		DisChargeStatusForTimer = 0;
 8003d96:	f882 8000 	strb.w	r8, [r2]
		DischargeTimeSec_Previous = 0;
 8003d9a:	4a74      	ldr	r2, [pc, #464]	; (8003f6c <MenuCheckingCapacity+0x248>)
		ChargeTimeSec = 0;
 8003d9c:	f8c6 8000 	str.w	r8, [r6]
		DischargeTimeSec = 0;
 8003da0:	f8c9 8000 	str.w	r8, [r9]
		DischargeTimeSec_Previous = 0;
 8003da4:	f8c2 8000 	str.w	r8, [r2]
		BatteryCapacityCharge = 0;
 8003da8:	f8c5 8000 	str.w	r8, [r5]
		BatteryCapacityDischargeCurrent = 0;
 8003dac:	f8c7 8000 	str.w	r8, [r7]
		ChargeStatusForTimer = 1;
 8003db0:	f88a 3000 	strb.w	r3, [sl]
		charge1();
 8003db4:	f7fe ffbc 	bl	8002d30 <charge1>
		ChargeDischargeStatus = CHARGEs;
 8003db8:	9b01      	ldr	r3, [sp, #4]
 8003dba:	4a6d      	ldr	r2, [pc, #436]	; (8003f70 <MenuCheckingCapacity+0x24c>)
		lcd_set_xy(0,0);
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	4640      	mov	r0, r8
		ChargeDischargeStatus = CHARGEs;
 8003dc0:	7013      	strb	r3, [r2, #0]
		lcd_set_xy(0,0);
 8003dc2:	f7fd feab 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("Testing Battery.");
 8003dc6:	486b      	ldr	r0, [pc, #428]	; (8003f74 <MenuCheckingCapacity+0x250>)
 8003dc8:	f7fd ff28 	bl	8001c1c <PrintToLCD>
		delay_ms(1000);
 8003dcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dd0:	f7fd f97e 	bl	80010d0 <delay_ms>
		CheckingCapacityCounter = 1;
 8003dd4:	9b01      	ldr	r3, [sp, #4]
 8003dd6:	7023      	strb	r3, [r4, #0]
	if (CheckingCapacityCounter<=3)
 8003dd8:	f994 3000 	ldrsb.w	r3, [r4]
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	f300 81f9 	bgt.w	80041d4 <MenuCheckingCapacity+0x4b0>
		if (Module16(Current)>5)
 8003de2:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8003f98 <MenuCheckingCapacity+0x274>
 8003de6:	f8b8 0000 	ldrh.w	r0, [r8]
 8003dea:	b200      	sxth	r0, r0
 8003dec:	f7fd fbd1 	bl	8001592 <Module16>
 8003df0:	2805      	cmp	r0, #5
 8003df2:	f8cd 8004 	str.w	r8, [sp, #4]
 8003df6:	f340 81a2 	ble.w	800413e <MenuCheckingCapacity+0x41a>
			if (U_OUT < SettingsData.LowVoltage && ChargeDischargeStatus == DISCHARGEs  && TimerForReadyMeasurement_ms>1000)
 8003dfa:	4b5f      	ldr	r3, [pc, #380]	; (8003f78 <MenuCheckingCapacity+0x254>)
 8003dfc:	4a57      	ldr	r2, [pc, #348]	; (8003f5c <MenuCheckingCapacity+0x238>)
 8003dfe:	8819      	ldrh	r1, [r3, #0]
 8003e00:	6990      	ldr	r0, [r2, #24]
 8003e02:	4690      	mov	r8, r2
 8003e04:	4288      	cmp	r0, r1
 8003e06:	9302      	str	r3, [sp, #8]
 8003e08:	d92a      	bls.n	8003e60 <MenuCheckingCapacity+0x13c>
 8003e0a:	4b59      	ldr	r3, [pc, #356]	; (8003f70 <MenuCheckingCapacity+0x24c>)
 8003e0c:	781a      	ldrb	r2, [r3, #0]
 8003e0e:	2a02      	cmp	r2, #2
 8003e10:	d126      	bne.n	8003e60 <MenuCheckingCapacity+0x13c>
 8003e12:	4b5a      	ldr	r3, [pc, #360]	; (8003f7c <MenuCheckingCapacity+0x258>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e1a:	d921      	bls.n	8003e60 <MenuCheckingCapacity+0x13c>
				DisChargeStatusForTimer = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	4952      	ldr	r1, [pc, #328]	; (8003f68 <MenuCheckingCapacity+0x244>)
 8003e20:	700b      	strb	r3, [r1, #0]
				if (BatteryCapacityDischargeCurrent/3600 > 100)
 8003e22:	6839      	ldr	r1, [r7, #0]
 8003e24:	4b56      	ldr	r3, [pc, #344]	; (8003f80 <MenuCheckingCapacity+0x25c>)
 8003e26:	4299      	cmp	r1, r3
 8003e28:	d904      	bls.n	8003e34 <MenuCheckingCapacity+0x110>
					MenuTraining_WriteInLOG(BatteryCapacityDischargeCurrent,DischargeTimeSec,DISCHARGE_l);
 8003e2a:	6838      	ldr	r0, [r7, #0]
 8003e2c:	f8d9 1000 	ldr.w	r1, [r9]
 8003e30:	f7fe f89e 	bl	8001f70 <MenuTraining_WriteInLOG>
				DischargeTimeSec_Previous = DischargeTimeSec;
 8003e34:	f8d9 2000 	ldr.w	r2, [r9]
 8003e38:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <MenuCheckingCapacity+0x248>)
 8003e3a:	601a      	str	r2, [r3, #0]
				SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	4b51      	ldr	r3, [pc, #324]	; (8003f84 <MenuCheckingCapacity+0x260>)
 8003e40:	609a      	str	r2, [r3, #8]
				ChargeStatusForTimer = 1;
 8003e42:	2201      	movs	r2, #1
				BatteryCapacityCharge = 0;
 8003e44:	2300      	movs	r3, #0
				ChargeStatusForTimer = 1;
 8003e46:	f88a 2000 	strb.w	r2, [sl]
 8003e4a:	9203      	str	r2, [sp, #12]
				BatteryCapacityCharge = 0;
 8003e4c:	602b      	str	r3, [r5, #0]
				ChargeTimeSec = 0;
 8003e4e:	6033      	str	r3, [r6, #0]
				charge1();
 8003e50:	f7fe ff6e 	bl	8002d30 <charge1>
				CheckingCapacityCounter ++;
 8003e54:	7823      	ldrb	r3, [r4, #0]
				ChargeDischargeStatus = CHARGEs;
 8003e56:	9a03      	ldr	r2, [sp, #12]
				CheckingCapacityCounter ++;
 8003e58:	3301      	adds	r3, #1
 8003e5a:	7023      	strb	r3, [r4, #0]
				ChargeDischargeStatus = CHARGEs;
 8003e5c:	4b44      	ldr	r3, [pc, #272]	; (8003f70 <MenuCheckingCapacity+0x24c>)
 8003e5e:	701a      	strb	r2, [r3, #0]
			if (((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))&&CheckingCapacityCounter<3)
 8003e60:	4b45      	ldr	r3, [pc, #276]	; (8003f78 <MenuCheckingCapacity+0x254>)
 8003e62:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d208      	bcs.n	8003e7e <MenuCheckingCapacity+0x15a>
 8003e6c:	4b40      	ldr	r3, [pc, #256]	; (8003f70 <MenuCheckingCapacity+0x24c>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d104      	bne.n	8003e7e <MenuCheckingCapacity+0x15a>
 8003e74:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <MenuCheckingCapacity+0x258>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e7c:	d808      	bhi.n	8003e90 <MenuCheckingCapacity+0x16c>
 8003e7e:	4b42      	ldr	r3, [pc, #264]	; (8003f88 <MenuCheckingCapacity+0x264>)
 8003e80:	6832      	ldr	r2, [r6, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d922      	bls.n	8003ece <MenuCheckingCapacity+0x1aa>
 8003e88:	4b39      	ldr	r3, [pc, #228]	; (8003f70 <MenuCheckingCapacity+0x24c>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d11e      	bne.n	8003ece <MenuCheckingCapacity+0x1aa>
 8003e90:	f994 3000 	ldrsb.w	r3, [r4]
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	dc1a      	bgt.n	8003ece <MenuCheckingCapacity+0x1aa>
				ChargeStatusForTimer = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f88a 3000 	strb.w	r3, [sl]
				if (BatteryCapacityCharge/3600 > 100)
 8003e9e:	682a      	ldr	r2, [r5, #0]
 8003ea0:	4b37      	ldr	r3, [pc, #220]	; (8003f80 <MenuCheckingCapacity+0x25c>)
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d904      	bls.n	8003eb0 <MenuCheckingCapacity+0x18c>
					MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003ea6:	6828      	ldr	r0, [r5, #0]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	6831      	ldr	r1, [r6, #0]
 8003eac:	f7fe f860 	bl	8001f70 <MenuTraining_WriteInLOG>
				DisChargeStatusForTimer = 1;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	4a2d      	ldr	r2, [pc, #180]	; (8003f68 <MenuCheckingCapacity+0x244>)
 8003eb4:	7013      	strb	r3, [r2, #0]
				BatteryCapacityDischargeCurrent = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	603b      	str	r3, [r7, #0]
				DischargeTimeSec = 0;
 8003eba:	f8c9 3000 	str.w	r3, [r9]
				discharge1();
 8003ebe:	f7fe fe29 	bl	8002b14 <discharge1>
				ChargeDischargeStatus = DISCHARGEs;
 8003ec2:	2202      	movs	r2, #2
				CheckingCapacityCounter ++;
 8003ec4:	7823      	ldrb	r3, [r4, #0]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	7023      	strb	r3, [r4, #0]
				ChargeDischargeStatus = DISCHARGEs;
 8003eca:	4b29      	ldr	r3, [pc, #164]	; (8003f70 <MenuCheckingCapacity+0x24c>)
 8003ecc:	701a      	strb	r2, [r3, #0]
			if (((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))&&CheckingCapacityCounter>=3)
 8003ece:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <MenuCheckingCapacity+0x254>)
 8003ed0:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d208      	bcs.n	8003eec <MenuCheckingCapacity+0x1c8>
 8003eda:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <MenuCheckingCapacity+0x24c>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d104      	bne.n	8003eec <MenuCheckingCapacity+0x1c8>
 8003ee2:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <MenuCheckingCapacity+0x258>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eea:	d808      	bhi.n	8003efe <MenuCheckingCapacity+0x1da>
 8003eec:	4b26      	ldr	r3, [pc, #152]	; (8003f88 <MenuCheckingCapacity+0x264>)
 8003eee:	6832      	ldr	r2, [r6, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d952      	bls.n	8003f9c <MenuCheckingCapacity+0x278>
 8003ef6:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <MenuCheckingCapacity+0x24c>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d14e      	bne.n	8003f9c <MenuCheckingCapacity+0x278>
 8003efe:	f994 3000 	ldrsb.w	r3, [r4]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	dd4a      	ble.n	8003f9c <MenuCheckingCapacity+0x278>
				OFF();
 8003f06:	f7ff fa81 	bl	800340c <OFF>
				ChargeStatusForTimer = 0;
 8003f0a:	2300      	movs	r3, #0
				DisChargeStatusForTimer = 0;
 8003f0c:	4a16      	ldr	r2, [pc, #88]	; (8003f68 <MenuCheckingCapacity+0x244>)
				ChargeStatusForTimer = 0;
 8003f0e:	f88a 3000 	strb.w	r3, [sl]
				DisChargeStatusForTimer = 0;
 8003f12:	7013      	strb	r3, [r2, #0]
				if (BatteryCapacityCharge/3600 > 100)
 8003f14:	682a      	ldr	r2, [r5, #0]
 8003f16:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <MenuCheckingCapacity+0x25c>)
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d904      	bls.n	8003f26 <MenuCheckingCapacity+0x202>
					MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003f1c:	6828      	ldr	r0, [r5, #0]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	6831      	ldr	r1, [r6, #0]
 8003f22:	f7fe f825 	bl	8001f70 <MenuTraining_WriteInLOG>
				CountShow = 2;
 8003f26:	2202      	movs	r2, #2
				CheckingCapacityCounter ++;
 8003f28:	7823      	ldrb	r3, [r4, #0]
			if (key == KEY_NEXT)
 8003f2a:	4593      	cmp	fp, r2
				CheckingCapacityCounter ++;
 8003f2c:	f103 0301 	add.w	r3, r3, #1
 8003f30:	7023      	strb	r3, [r4, #0]
				CountShow = 2;
 8003f32:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <MenuCheckingCapacity+0x268>)
 8003f34:	701a      	strb	r2, [r3, #0]
			if (key == KEY_NEXT)
 8003f36:	f040 80ee 	bne.w	8004116 <MenuCheckingCapacity+0x3f2>
				if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY-1;
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <MenuCheckingCapacity+0x268>)
 8003f3e:	701a      	strb	r2, [r3, #0]
 8003f40:	e038      	b.n	8003fb4 <MenuCheckingCapacity+0x290>
 8003f42:	bf00      	nop
 8003f44:	200007a8 	.word	0x200007a8
 8003f48:	20000794 	.word	0x20000794
 8003f4c:	20000784 	.word	0x20000784
 8003f50:	20000788 	.word	0x20000788
 8003f54:	20000798 	.word	0x20000798
 8003f58:	20000884 	.word	0x20000884
 8003f5c:	20000154 	.word	0x20000154
 8003f60:	080065db 	.word	0x080065db
 8003f64:	080065ec 	.word	0x080065ec
 8003f68:	2000079c 	.word	0x2000079c
 8003f6c:	200007a4 	.word	0x200007a4
 8003f70:	20000270 	.word	0x20000270
 8003f74:	080065fd 	.word	0x080065fd
 8003f78:	2000087e 	.word	0x2000087e
 8003f7c:	200007dc 	.word	0x200007dc
 8003f80:	00058c4f 	.word	0x00058c4f
 8003f84:	200000f4 	.word	0x200000f4
 8003f88:	20000a28 	.word	0x20000a28
 8003f8c:	20000799 	.word	0x20000799
 8003f90:	20000793 	.word	0x20000793
 8003f94:	200007a0 	.word	0x200007a0
 8003f98:	2000086a 	.word	0x2000086a
			if (key == KEY_NEXT)
 8003f9c:	f1bb 0f02 	cmp.w	fp, #2
 8003fa0:	f040 80b9 	bne.w	8004116 <MenuCheckingCapacity+0x3f2>
				CountShow++;
 8003fa4:	4ac6      	ldr	r2, [pc, #792]	; (80042c0 <MenuCheckingCapacity+0x59c>)
 8003fa6:	7813      	ldrb	r3, [r2, #0]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	b25b      	sxtb	r3, r3
				if (CountShow==MAX_SCREENS__MENU_CAPACITY) CountShow=0;
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	bf08      	it	eq
 8003fb0:	2300      	moveq	r3, #0
 8003fb2:	7013      	strb	r3, [r2, #0]
			if(CountShow == 0)
 8003fb4:	4cc2      	ldr	r4, [pc, #776]	; (80042c0 <MenuCheckingCapacity+0x59c>)
 8003fb6:	f994 b000 	ldrsb.w	fp, [r4]
 8003fba:	f1bb 0f00 	cmp.w	fp, #0
 8003fbe:	d12e      	bne.n	800401e <MenuCheckingCapacity+0x2fa>
				lcd_set_xy(0,0);
 8003fc0:	4659      	mov	r1, fp
 8003fc2:	4658      	mov	r0, fp
 8003fc4:	f7fd fdaa 	bl	8001b1c <lcd_set_xy>
				PrintToLCD(itoa_koma(U_OUT,2));
 8003fc8:	9b02      	ldr	r3, [sp, #8]
 8003fca:	2102      	movs	r1, #2
 8003fcc:	8818      	ldrh	r0, [r3, #0]
 8003fce:	f7fd fa0f 	bl	80013f0 <itoa_koma>
 8003fd2:	f7fd fe23 	bl	8001c1c <PrintToLCD>
				PrintToLCD("V ");
 8003fd6:	48bb      	ldr	r0, [pc, #748]	; (80042c4 <MenuCheckingCapacity+0x5a0>)
 8003fd8:	f7fd fe20 	bl	8001c1c <PrintToLCD>
				PrintToLCD(itoa(Current));
 8003fdc:	9b01      	ldr	r3, [sp, #4]
 8003fde:	8818      	ldrh	r0, [r3, #0]
 8003fe0:	b200      	sxth	r0, r0
 8003fe2:	f7fd f991 	bl	8001308 <itoa>
 8003fe6:	f7fd fe19 	bl	8001c1c <PrintToLCD>
				PrintToLCD("mA     ");
 8003fea:	48b7      	ldr	r0, [pc, #732]	; (80042c8 <MenuCheckingCapacity+0x5a4>)
 8003fec:	f7fd fe16 	bl	8001c1c <PrintToLCD>
				lcd_set_xy(6,1);
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	2006      	movs	r0, #6
 8003ff4:	f7fd fd92 	bl	8001b1c <lcd_set_xy>
				LcdOutbyNumber(4,1);
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	2004      	movs	r0, #4
 8003ffc:	f7fd fdb6 	bl	8001b6c <LcdOutbyNumber>
				if (Status_Out ==1)
 8004000:	4bb2      	ldr	r3, [pc, #712]	; (80042cc <MenuCheckingCapacity+0x5a8>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	f040 8093 	bne.w	8004130 <MenuCheckingCapacity+0x40c>
					lcd_set_xy(7,1);
 800400a:	4619      	mov	r1, r3
 800400c:	2007      	movs	r0, #7
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	f7fd fd84 	bl	8001b1c <lcd_set_xy>
					LcdOutbyNumber(0,1);//charge
 8004014:	9b01      	ldr	r3, [sp, #4]
 8004016:	4658      	mov	r0, fp
 8004018:	4619      	mov	r1, r3
					LcdOutbyNumber(2,1);//discharge
 800401a:	f7fd fda7 	bl	8001b6c <LcdOutbyNumber>
			if(CountShow == 1)
 800401e:	f994 b000 	ldrsb.w	fp, [r4]
 8004022:	f1bb 0f01 	cmp.w	fp, #1
 8004026:	d127      	bne.n	8004078 <MenuCheckingCapacity+0x354>
				lcd_set_xy(0,0);
 8004028:	2100      	movs	r1, #0
 800402a:	4608      	mov	r0, r1
 800402c:	f7fd fd76 	bl	8001b1c <lcd_set_xy>
				PrintToLCD(itoa(SettingsData.ChargeTime));
 8004030:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004034:	f7fd f968 	bl	8001308 <itoa>
 8004038:	f7fd fdf0 	bl	8001c1c <PrintToLCD>
				PrintToLCD("h ");
 800403c:	48a4      	ldr	r0, [pc, #656]	; (80042d0 <MenuCheckingCapacity+0x5ac>)
 800403e:	f7fd fded 	bl	8001c1c <PrintToLCD>
				PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8004042:	230a      	movs	r3, #10
 8004044:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8004048:	4659      	mov	r1, fp
 800404a:	fbb0 f0f3 	udiv	r0, r0, r3
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	f7fd f9ce 	bl	80013f0 <itoa_koma>
 8004054:	f7fd fde2 	bl	8001c1c <PrintToLCD>
				PrintToLCD("V ");
 8004058:	489a      	ldr	r0, [pc, #616]	; (80042c4 <MenuCheckingCapacity+0x5a0>)
 800405a:	f7fd fddf 	bl	8001c1c <PrintToLCD>
				PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800405e:	4659      	mov	r1, fp
 8004060:	f8d8 0020 	ldr.w	r0, [r8, #32]
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8004064:	9b01      	ldr	r3, [sp, #4]
 8004066:	fbb0 f0f3 	udiv	r0, r0, r3
 800406a:	f7fd f9c1 	bl	80013f0 <itoa_koma>
 800406e:	f7fd fdd5 	bl	8001c1c <PrintToLCD>
			PrintToLCD("V     ");
 8004072:	4898      	ldr	r0, [pc, #608]	; (80042d4 <MenuCheckingCapacity+0x5b0>)
 8004074:	f7fd fdd2 	bl	8001c1c <PrintToLCD>
		if(CountShow == 2)
 8004078:	f994 8000 	ldrsb.w	r8, [r4]
 800407c:	f1b8 0f02 	cmp.w	r8, #2
 8004080:	d122      	bne.n	80040c8 <MenuCheckingCapacity+0x3a4>
			lcd_set_xy(0,0);
 8004082:	2100      	movs	r1, #0
 8004084:	4608      	mov	r0, r1
 8004086:	f7fd fd49 	bl	8001b1c <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 800408a:	2101      	movs	r1, #1
 800408c:	4640      	mov	r0, r8
 800408e:	f7fd fd6d 	bl	8001b6c <LcdOutbyNumber>
			lcd_set_xy(1,0);
 8004092:	2100      	movs	r1, #0
 8004094:	2001      	movs	r0, #1
 8004096:	f7fd fd41 	bl	8001b1c <lcd_set_xy>
			PrintToLCD(" ");
 800409a:	488f      	ldr	r0, [pc, #572]	; (80042d8 <MenuCheckingCapacity+0x5b4>)
 800409c:	f7fd fdbe 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600));
 80040a0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80040a4:	6838      	ldr	r0, [r7, #0]
 80040a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80040aa:	f7fd f92d 	bl	8001308 <itoa>
 80040ae:	f7fd fdb5 	bl	8001c1c <PrintToLCD>
			PrintToLCD("mAH      ");
 80040b2:	488a      	ldr	r0, [pc, #552]	; (80042dc <MenuCheckingCapacity+0x5b8>)
 80040b4:	f7fd fdb2 	bl	8001c1c <PrintToLCD>
			lcd_set_xy(3,1);
 80040b8:	2003      	movs	r0, #3
 80040ba:	2101      	movs	r1, #1
 80040bc:	f7fd fd2e 	bl	8001b1c <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 80040c0:	f8d9 0000 	ldr.w	r0, [r9]
 80040c4:	f7fe faa4 	bl	8002610 <ClockOnLCD_noSec>
		if(CountShow == 3)
 80040c8:	f994 4000 	ldrsb.w	r4, [r4]
 80040cc:	2c03      	cmp	r4, #3
 80040ce:	d142      	bne.n	8004156 <MenuCheckingCapacity+0x432>
			lcd_set_xy(0,0);
 80040d0:	2100      	movs	r1, #0
 80040d2:	4608      	mov	r0, r1
 80040d4:	f7fd fd22 	bl	8001b1c <lcd_set_xy>
			LcdOutbyNumber(0,1);//charge
 80040d8:	2101      	movs	r1, #1
 80040da:	2000      	movs	r0, #0
 80040dc:	f7fd fd46 	bl	8001b6c <LcdOutbyNumber>
			lcd_set_xy(1,0);
 80040e0:	2100      	movs	r1, #0
 80040e2:	2001      	movs	r0, #1
 80040e4:	f7fd fd1a 	bl	8001b1c <lcd_set_xy>
			PrintToLCD(" ");
 80040e8:	487b      	ldr	r0, [pc, #492]	; (80042d8 <MenuCheckingCapacity+0x5b4>)
 80040ea:	f7fd fd97 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityCharge/3600));
 80040ee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80040f2:	6828      	ldr	r0, [r5, #0]
 80040f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80040f8:	f7fd f906 	bl	8001308 <itoa>
 80040fc:	f7fd fd8e 	bl	8001c1c <PrintToLCD>
			PrintToLCD("mAH      ");
 8004100:	4876      	ldr	r0, [pc, #472]	; (80042dc <MenuCheckingCapacity+0x5b8>)
 8004102:	f7fd fd8b 	bl	8001c1c <PrintToLCD>
			lcd_set_xy(3,1);
 8004106:	4620      	mov	r0, r4
 8004108:	2101      	movs	r1, #1
 800410a:	f7fd fd07 	bl	8001b1c <lcd_set_xy>
			ClockOnLCD_noSec(ChargeTimeSec);
 800410e:	6830      	ldr	r0, [r6, #0]
 8004110:	f7fe fa7e 	bl	8002610 <ClockOnLCD_noSec>
 8004114:	e01f      	b.n	8004156 <MenuCheckingCapacity+0x432>
			if (key == KEY_BACK)
 8004116:	f1bb 0f01 	cmp.w	fp, #1
 800411a:	f47f af4b 	bne.w	8003fb4 <MenuCheckingCapacity+0x290>
				CountShow--;
 800411e:	4a68      	ldr	r2, [pc, #416]	; (80042c0 <MenuCheckingCapacity+0x59c>)
 8004120:	7813      	ldrb	r3, [r2, #0]
 8004122:	3b01      	subs	r3, #1
 8004124:	b25b      	sxtb	r3, r3
				if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY-1;
 8004126:	2b00      	cmp	r3, #0
				CountShow--;
 8004128:	7013      	strb	r3, [r2, #0]
				if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY-1;
 800412a:	f6bf af43 	bge.w	8003fb4 <MenuCheckingCapacity+0x290>
 800412e:	e704      	b.n	8003f3a <MenuCheckingCapacity+0x216>
					lcd_set_xy(7,1);
 8004130:	2101      	movs	r1, #1
 8004132:	2007      	movs	r0, #7
 8004134:	f7fd fcf2 	bl	8001b1c <lcd_set_xy>
					LcdOutbyNumber(2,1);//discharge
 8004138:	2101      	movs	r1, #1
 800413a:	2002      	movs	r0, #2
 800413c:	e76d      	b.n	800401a <MenuCheckingCapacity+0x2f6>
			if (TimerForReadyMeasurement_ms>1000)
 800413e:	4b68      	ldr	r3, [pc, #416]	; (80042e0 <MenuCheckingCapacity+0x5bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004146:	d906      	bls.n	8004156 <MenuCheckingCapacity+0x432>
				lcd_set_xy(0,0);
 8004148:	2100      	movs	r1, #0
 800414a:	4608      	mov	r0, r1
 800414c:	f7fd fce6 	bl	8001b1c <lcd_set_xy>
				PrintToLCD("NO/BAD Battery  ");
 8004150:	4864      	ldr	r0, [pc, #400]	; (80042e4 <MenuCheckingCapacity+0x5c0>)
 8004152:	f7fd fd63 	bl	8001c1c <PrintToLCD>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8004156:	4864      	ldr	r0, [pc, #400]	; (80042e8 <MenuCheckingCapacity+0x5c4>)
 8004158:	f001 f9f2 	bl	8005540 <printToBufferWithoutEndUART1>
 800415c:	9b00      	ldr	r3, [sp, #0]
 800415e:	2200      	movs	r2, #0
 8004160:	7819      	ldrb	r1, [r3, #0]
 8004162:	4862      	ldr	r0, [pc, #392]	; (80042ec <MenuCheckingCapacity+0x5c8>)
 8004164:	f001 fa30 	bl	80055c8 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8004168:	485f      	ldr	r0, [pc, #380]	; (80042e8 <MenuCheckingCapacity+0x5c4>)
 800416a:	f001 f9e9 	bl	8005540 <printToBufferWithoutEndUART1>
 800416e:	f89a 1000 	ldrb.w	r1, [sl]
 8004172:	2200      	movs	r2, #0
 8004174:	485e      	ldr	r0, [pc, #376]	; (80042f0 <MenuCheckingCapacity+0x5cc>)
 8004176:	f001 fa27 	bl	80055c8 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 800417a:	485b      	ldr	r0, [pc, #364]	; (80042e8 <MenuCheckingCapacity+0x5c4>)
 800417c:	f001 f9e0 	bl	8005540 <printToBufferWithoutEndUART1>
 8004180:	6831      	ldr	r1, [r6, #0]
 8004182:	2200      	movs	r2, #0
 8004184:	485b      	ldr	r0, [pc, #364]	; (80042f4 <MenuCheckingCapacity+0x5d0>)
 8004186:	f001 fa1f 	bl	80055c8 <printToBufferUART1D>
	logDebugD("BatteryCapacityCharge: ",BatteryCapacityCharge,0);
 800418a:	4857      	ldr	r0, [pc, #348]	; (80042e8 <MenuCheckingCapacity+0x5c4>)
 800418c:	f001 f9d8 	bl	8005540 <printToBufferWithoutEndUART1>
 8004190:	6829      	ldr	r1, [r5, #0]
 8004192:	2200      	movs	r2, #0
 8004194:	4858      	ldr	r0, [pc, #352]	; (80042f8 <MenuCheckingCapacity+0x5d4>)
 8004196:	f001 fa17 	bl	80055c8 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 800419a:	4853      	ldr	r0, [pc, #332]	; (80042e8 <MenuCheckingCapacity+0x5c4>)
 800419c:	f001 f9d0 	bl	8005540 <printToBufferWithoutEndUART1>
 80041a0:	4b56      	ldr	r3, [pc, #344]	; (80042fc <MenuCheckingCapacity+0x5d8>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	7819      	ldrb	r1, [r3, #0]
 80041a6:	4856      	ldr	r0, [pc, #344]	; (8004300 <MenuCheckingCapacity+0x5dc>)
 80041a8:	f001 fa0e 	bl	80055c8 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 80041ac:	484e      	ldr	r0, [pc, #312]	; (80042e8 <MenuCheckingCapacity+0x5c4>)
 80041ae:	f001 f9c7 	bl	8005540 <printToBufferWithoutEndUART1>
 80041b2:	f8d9 1000 	ldr.w	r1, [r9]
 80041b6:	2200      	movs	r2, #0
 80041b8:	4852      	ldr	r0, [pc, #328]	; (8004304 <MenuCheckingCapacity+0x5e0>)
 80041ba:	f001 fa05 	bl	80055c8 <printToBufferUART1D>
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 80041be:	484a      	ldr	r0, [pc, #296]	; (80042e8 <MenuCheckingCapacity+0x5c4>)
 80041c0:	f001 f9be 	bl	8005540 <printToBufferWithoutEndUART1>
 80041c4:	2200      	movs	r2, #0
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	484f      	ldr	r0, [pc, #316]	; (8004308 <MenuCheckingCapacity+0x5e4>)
}
 80041ca:	b005      	add	sp, #20
 80041cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 80041d0:	f001 b9fa 	b.w	80055c8 <printToBufferUART1D>
 80041d4:	4c3a      	ldr	r4, [pc, #232]	; (80042c0 <MenuCheckingCapacity+0x59c>)
		if (key == KEY_NEXT)
 80041d6:	f1bb 0f02 	cmp.w	fp, #2
 80041da:	f994 3000 	ldrsb.w	r3, [r4]
 80041de:	d15f      	bne.n	80042a0 <MenuCheckingCapacity+0x57c>
			CountShow++;
 80041e0:	3301      	adds	r3, #1
 80041e2:	b25b      	sxtb	r3, r3
			if (CountShow==MAX_SCREENS__MENU_CAPACITY1) CountShow=0;
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	bf08      	it	eq
 80041e8:	2300      	moveq	r3, #0
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY1-1;
 80041ea:	7023      	strb	r3, [r4, #0]
		if(CountShow == 0)
 80041ec:	f994 8000 	ldrsb.w	r8, [r4]
 80041f0:	f1b8 0f00 	cmp.w	r8, #0
 80041f4:	d12d      	bne.n	8004252 <MenuCheckingCapacity+0x52e>
			lcd_set_xy(0,0);
 80041f6:	4641      	mov	r1, r8
 80041f8:	4640      	mov	r0, r8
 80041fa:	f7fd fc8f 	bl	8001b1c <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 80041fe:	4b43      	ldr	r3, [pc, #268]	; (800430c <MenuCheckingCapacity+0x5e8>)
 8004200:	2102      	movs	r1, #2
 8004202:	8818      	ldrh	r0, [r3, #0]
 8004204:	f7fd f8f4 	bl	80013f0 <itoa_koma>
 8004208:	f7fd fd08 	bl	8001c1c <PrintToLCD>
			PrintToLCD("V ");
 800420c:	482d      	ldr	r0, [pc, #180]	; (80042c4 <MenuCheckingCapacity+0x5a0>)
 800420e:	f7fd fd05 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa(Current));
 8004212:	4b3f      	ldr	r3, [pc, #252]	; (8004310 <MenuCheckingCapacity+0x5ec>)
 8004214:	8818      	ldrh	r0, [r3, #0]
 8004216:	b200      	sxth	r0, r0
 8004218:	f7fd f876 	bl	8001308 <itoa>
 800421c:	f7fd fcfe 	bl	8001c1c <PrintToLCD>
			PrintToLCD("mA     ");
 8004220:	4829      	ldr	r0, [pc, #164]	; (80042c8 <MenuCheckingCapacity+0x5a4>)
 8004222:	f7fd fcfb 	bl	8001c1c <PrintToLCD>
			lcd_set_xy(6,1);
 8004226:	2101      	movs	r1, #1
 8004228:	2006      	movs	r0, #6
 800422a:	f7fd fc77 	bl	8001b1c <lcd_set_xy>
			LcdOutbyNumber(4,1);
 800422e:	2101      	movs	r1, #1
 8004230:	2004      	movs	r0, #4
 8004232:	f7fd fc9b 	bl	8001b6c <LcdOutbyNumber>
			if (Status_Out ==1)
 8004236:	4b25      	ldr	r3, [pc, #148]	; (80042cc <MenuCheckingCapacity+0x5a8>)
 8004238:	f893 b000 	ldrb.w	fp, [r3]
 800423c:	f1bb 0f01 	cmp.w	fp, #1
 8004240:	d137      	bne.n	80042b2 <MenuCheckingCapacity+0x58e>
				lcd_set_xy(7,1);
 8004242:	4659      	mov	r1, fp
 8004244:	2007      	movs	r0, #7
 8004246:	f7fd fc69 	bl	8001b1c <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 800424a:	4659      	mov	r1, fp
 800424c:	4640      	mov	r0, r8
				LcdOutbyNumber(2,1);//discharge
 800424e:	f7fd fc8d 	bl	8001b6c <LcdOutbyNumber>
		if(CountShow == 1)
 8004252:	f994 8000 	ldrsb.w	r8, [r4]
 8004256:	f1b8 0f01 	cmp.w	r8, #1
 800425a:	f47f af0d 	bne.w	8004078 <MenuCheckingCapacity+0x354>
			lcd_set_xy(0,0);
 800425e:	2100      	movs	r1, #0
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8004260:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8004314 <MenuCheckingCapacity+0x5f0>
			lcd_set_xy(0,0);
 8004264:	4608      	mov	r0, r1
 8004266:	f7fd fc59 	bl	8001b1c <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 800426a:	f8db 0010 	ldr.w	r0, [fp, #16]
 800426e:	f7fd f84b 	bl	8001308 <itoa>
 8004272:	f7fd fcd3 	bl	8001c1c <PrintToLCD>
			PrintToLCD("h ");
 8004276:	4816      	ldr	r0, [pc, #88]	; (80042d0 <MenuCheckingCapacity+0x5ac>)
 8004278:	f7fd fcd0 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 800427c:	230a      	movs	r3, #10
 800427e:	f8db 0018 	ldr.w	r0, [fp, #24]
 8004282:	4641      	mov	r1, r8
 8004284:	fbb0 f0f3 	udiv	r0, r0, r3
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	f7fd f8b1 	bl	80013f0 <itoa_koma>
 800428e:	f7fd fcc5 	bl	8001c1c <PrintToLCD>
			PrintToLCD("V ");
 8004292:	480c      	ldr	r0, [pc, #48]	; (80042c4 <MenuCheckingCapacity+0x5a0>)
 8004294:	f7fd fcc2 	bl	8001c1c <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8004298:	f8db 0020 	ldr.w	r0, [fp, #32]
 800429c:	4641      	mov	r1, r8
 800429e:	e6e1      	b.n	8004064 <MenuCheckingCapacity+0x340>
		if (key == KEY_BACK)
 80042a0:	f1bb 0f01 	cmp.w	fp, #1
 80042a4:	d1a2      	bne.n	80041ec <MenuCheckingCapacity+0x4c8>
			CountShow--;
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY1-1;
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bfb8      	it	lt
 80042ae:	2303      	movlt	r3, #3
 80042b0:	e79b      	b.n	80041ea <MenuCheckingCapacity+0x4c6>
				lcd_set_xy(7,1);
 80042b2:	2101      	movs	r1, #1
 80042b4:	2007      	movs	r0, #7
 80042b6:	f7fd fc31 	bl	8001b1c <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 80042ba:	2101      	movs	r1, #1
 80042bc:	2002      	movs	r0, #2
 80042be:	e7c6      	b.n	800424e <MenuCheckingCapacity+0x52a>
 80042c0:	20000799 	.word	0x20000799
 80042c4:	08006518 	.word	0x08006518
 80042c8:	0800660e 	.word	0x0800660e
 80042cc:	200007b1 	.word	0x200007b1
 80042d0:	08005dbe 	.word	0x08005dbe
 80042d4:	0800650e 	.word	0x0800650e
 80042d8:	08006540 	.word	0x08006540
 80042dc:	08006616 	.word	0x08006616
 80042e0:	200007dc 	.word	0x200007dc
 80042e4:	0800662c 	.word	0x0800662c
 80042e8:	08006059 	.word	0x08006059
 80042ec:	0800663d 	.word	0x0800663d
 80042f0:	08006652 	.word	0x08006652
 80042f4:	08006667 	.word	0x08006667
 80042f8:	08006677 	.word	0x08006677
 80042fc:	2000079c 	.word	0x2000079c
 8004300:	0800668f 	.word	0x0800668f
 8004304:	080066a7 	.word	0x080066a7
 8004308:	080066ba 	.word	0x080066ba
 800430c:	2000087e 	.word	0x2000087e
 8004310:	2000086a 	.word	0x2000086a
 8004314:	20000154 	.word	0x20000154

08004318 <All_OUT_OFF_When_Power_OFF>:
{
 8004318:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ( (U_IN < VOLTAGE_OFF_SYSTEM) && (time_sec>6))
 800431a:	4d34      	ldr	r5, [pc, #208]	; (80043ec <All_OUT_OFF_When_Power_OFF+0xd4>)
{
 800431c:	b091      	sub	sp, #68	; 0x44
	if ( (U_IN < VOLTAGE_OFF_SYSTEM) && (time_sec>6))
 800431e:	882b      	ldrh	r3, [r5, #0]
 8004320:	4933      	ldr	r1, [pc, #204]	; (80043f0 <All_OUT_OFF_When_Power_OFF+0xd8>)
 8004322:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004326:	d25d      	bcs.n	80043e4 <All_OUT_OFF_When_Power_OFF+0xcc>
 8004328:	4b32      	ldr	r3, [pc, #200]	; (80043f4 <All_OUT_OFF_When_Power_OFF+0xdc>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b06      	cmp	r3, #6
 800432e:	d959      	bls.n	80043e4 <All_OUT_OFF_When_Power_OFF+0xcc>
		if ((GPIOB->IDR & 0x01)==1)//if Out on
 8004330:	4b31      	ldr	r3, [pc, #196]	; (80043f8 <All_OUT_OFF_When_Power_OFF+0xe0>)
 8004332:	4c32      	ldr	r4, [pc, #200]	; (80043fc <All_OUT_OFF_When_Power_OFF+0xe4>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f013 0301 	ands.w	r3, r3, #1
			SaveDataWhenPowerOff.OutState = 1;
 800433a:	bf18      	it	ne
 800433c:	2301      	movne	r3, #1
			SaveDataWhenPowerOff.OutState = 0;
 800433e:	61a3      	str	r3, [r4, #24]
		OFF();
 8004340:	f7ff f864 	bl	800340c <OFF>
		if (EEpromWrite_status == 0)
 8004344:	780b      	ldrb	r3, [r1, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d14a      	bne.n	80043e0 <All_OUT_OFF_When_Power_OFF+0xc8>
			EEpromWrite_status = 1;
 800434a:	2301      	movs	r3, #1
			SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = BatteryCapacityDischargeCurrent;
 800434c:	4e2c      	ldr	r6, [pc, #176]	; (8004400 <All_OUT_OFF_When_Power_OFF+0xe8>)
			EEpromWrite_status = 1;
 800434e:	700b      	strb	r3, [r1, #0]
			SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = BatteryCapacityDischargeCurrent;
 8004350:	6833      	ldr	r3, [r6, #0]
 8004352:	6123      	str	r3, [r4, #16]
			DataWhenPowerOffWriteToFlash_CRC();
 8004354:	f7fc fbcc 	bl	8000af0 <DataWhenPowerOffWriteToFlash_CRC>
			logDebugD("dc: ",SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent,2);
 8004358:	482a      	ldr	r0, [pc, #168]	; (8004404 <All_OUT_OFF_When_Power_OFF+0xec>)
 800435a:	f001 f8f1 	bl	8005540 <printToBufferWithoutEndUART1>
 800435e:	2202      	movs	r2, #2
 8004360:	6921      	ldr	r1, [r4, #16]
 8004362:	4829      	ldr	r0, [pc, #164]	; (8004408 <All_OUT_OFF_When_Power_OFF+0xf0>)
 8004364:	f001 f930 	bl	80055c8 <printToBufferUART1D>
			if (BatteryCapacityDischargeCurrent/3600>10)
 8004368:	f649 23af 	movw	r3, #39599	; 0x9aaf
 800436c:	6832      	ldr	r2, [r6, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d915      	bls.n	800439e <All_OUT_OFF_When_Power_OFF+0x86>
				ClockStringNoSec(DischargeTimeSec,s_clock);
 8004372:	4b26      	ldr	r3, [pc, #152]	; (800440c <All_OUT_OFF_When_Power_OFF+0xf4>)
 8004374:	a90b      	add	r1, sp, #44	; 0x2c
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	f7fd f9bc 	bl	80016f4 <ClockStringNoSec>
				Merge3Strings(itoaP(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent/3600,str),"mAh",s_clock,strout);
 800437c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004380:	6920      	ldr	r0, [r4, #16]
 8004382:	a901      	add	r1, sp, #4
 8004384:	fbb0 f0f3 	udiv	r0, r0, r3
 8004388:	f7fc fff8 	bl	800137c <itoaP>
 800438c:	4920      	ldr	r1, [pc, #128]	; (8004410 <All_OUT_OFF_When_Power_OFF+0xf8>)
 800438e:	ab06      	add	r3, sp, #24
 8004390:	aa0b      	add	r2, sp, #44	; 0x2c
 8004392:	f7fd f921 	bl	80015d8 <Merge3Strings>
				WriteInLOGc(strout,DISCHARGE_l);
 8004396:	2102      	movs	r1, #2
 8004398:	a806      	add	r0, sp, #24
 800439a:	f7fc fdb1 	bl	8000f00 <WriteInLOGc>
			WriteInLOG(Merge2Strings("PowerOFF ",itoa_komaP(U_IN/10,str,1),strout));
 800439e:	230a      	movs	r3, #10
 80043a0:	8828      	ldrh	r0, [r5, #0]
 80043a2:	2201      	movs	r2, #1
 80043a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80043a8:	a901      	add	r1, sp, #4
 80043aa:	f7fd f889 	bl	80014c0 <itoa_komaP>
 80043ae:	aa06      	add	r2, sp, #24
 80043b0:	4601      	mov	r1, r0
 80043b2:	4818      	ldr	r0, [pc, #96]	; (8004414 <All_OUT_OFF_When_Power_OFF+0xfc>)
 80043b4:	f7fd f8fb 	bl	80015ae <Merge2Strings>
 80043b8:	f7fc fcf0 	bl	8000d9c <WriteInLOG>
 80043bc:	2405      	movs	r4, #5
				logDebugD("U off: ",U_IN,2);
 80043be:	4f11      	ldr	r7, [pc, #68]	; (8004404 <All_OUT_OFF_When_Power_OFF+0xec>)
 80043c0:	4e15      	ldr	r6, [pc, #84]	; (8004418 <All_OUT_OFF_When_Power_OFF+0x100>)
 80043c2:	4638      	mov	r0, r7
 80043c4:	f001 f8bc 	bl	8005540 <printToBufferWithoutEndUART1>
 80043c8:	8829      	ldrh	r1, [r5, #0]
 80043ca:	2202      	movs	r2, #2
 80043cc:	4630      	mov	r0, r6
 80043ce:	f001 f8fb 	bl	80055c8 <printToBufferUART1D>
 80043d2:	3c01      	subs	r4, #1
				delay_ms(50);
 80043d4:	2032      	movs	r0, #50	; 0x32
 80043d6:	f7fc fe7b 	bl	80010d0 <delay_ms>
			for (i = 0; i<5; i++)
 80043da:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80043de:	d1f0      	bne.n	80043c2 <All_OUT_OFF_When_Power_OFF+0xaa>
}
 80043e0:	b011      	add	sp, #68	; 0x44
 80043e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EEpromWrite_status = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	700b      	strb	r3, [r1, #0]
}
 80043e8:	e7fa      	b.n	80043e0 <All_OUT_OFF_When_Power_OFF+0xc8>
 80043ea:	bf00      	nop
 80043ec:	20000868 	.word	0x20000868
 80043f0:	20000271 	.word	0x20000271
 80043f4:	200007f8 	.word	0x200007f8
 80043f8:	40010c00 	.word	0x40010c00
 80043fc:	200000f4 	.word	0x200000f4
 8004400:	20000788 	.word	0x20000788
 8004404:	08006059 	.word	0x08006059
 8004408:	080062d8 	.word	0x080062d8
 800440c:	200007a0 	.word	0x200007a0
 8004410:	08006401 	.word	0x08006401
 8004414:	080062dd 	.word	0x080062dd
 8004418:	080062e7 	.word	0x080062e7

0800441c <MenuDIAGNOSTIC>:
	EnterInMenu_Status=1;
 800441c:	2201      	movs	r2, #1
{
 800441e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status=1;
 8004422:	4ba1      	ldr	r3, [pc, #644]	; (80046a8 <MenuDIAGNOSTIC+0x28c>)
 8004424:	4ca1      	ldr	r4, [pc, #644]	; (80046ac <MenuDIAGNOSTIC+0x290>)
	if (key == KEY_NEXT)
 8004426:	2802      	cmp	r0, #2
	EnterInMenu_Status=1;
 8004428:	701a      	strb	r2, [r3, #0]
{
 800442a:	b086      	sub	sp, #24
 800442c:	f994 3000 	ldrsb.w	r3, [r4]
	if (key == KEY_NEXT)
 8004430:	f040 8130 	bne.w	8004694 <MenuDIAGNOSTIC+0x278>
		CountShow1++;
 8004434:	4413      	add	r3, r2
 8004436:	b25b      	sxtb	r3, r3
		if (CountShow1==MAXITEM) CountShow1=0;
 8004438:	2b08      	cmp	r3, #8
 800443a:	bf08      	it	eq
 800443c:	2300      	moveq	r3, #0
		if (CountShow1<0) CountShow1=MAXITEM-1;
 800443e:	7023      	strb	r3, [r4, #0]
	if(CountShow1 == 0)
 8004440:	f994 1000 	ldrsb.w	r1, [r4]
 8004444:	b9f1      	cbnz	r1, 8004484 <MenuDIAGNOSTIC+0x68>
		OFF();
 8004446:	f7fe ffe1 	bl	800340c <OFF>
		lcd_set_xy(0,0);
 800444a:	4608      	mov	r0, r1
 800444c:	f7fd fb66 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("Uin=");
 8004450:	4897      	ldr	r0, [pc, #604]	; (80046b0 <MenuDIAGNOSTIC+0x294>)
 8004452:	f7fd fbe3 	bl	8001c1c <PrintToLCD>
		PrintToLCD(		itoa_koma(U_IN/10,1));
 8004456:	4b97      	ldr	r3, [pc, #604]	; (80046b4 <MenuDIAGNOSTIC+0x298>)
 8004458:	2101      	movs	r1, #1
 800445a:	8818      	ldrh	r0, [r3, #0]
 800445c:	230a      	movs	r3, #10
 800445e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004462:	f7fc ffc5 	bl	80013f0 <itoa_koma>
 8004466:	f7fd fbd9 	bl	8001c1c <PrintToLCD>
		PrintToLCD(" Uc=");
 800446a:	4893      	ldr	r0, [pc, #588]	; (80046b8 <MenuDIAGNOSTIC+0x29c>)
 800446c:	f7fd fbd6 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa_koma(U_Controller,2));
 8004470:	4b92      	ldr	r3, [pc, #584]	; (80046bc <MenuDIAGNOSTIC+0x2a0>)
 8004472:	2102      	movs	r1, #2
 8004474:	8818      	ldrh	r0, [r3, #0]
 8004476:	f7fc ffbb 	bl	80013f0 <itoa_koma>
 800447a:	f7fd fbcf 	bl	8001c1c <PrintToLCD>
		PrintToLCD("    ");
 800447e:	4890      	ldr	r0, [pc, #576]	; (80046c0 <MenuDIAGNOSTIC+0x2a4>)
 8004480:	f7fd fbcc 	bl	8001c1c <PrintToLCD>
	if(CountShow1 == 1)
 8004484:	f994 3000 	ldrsb.w	r3, [r4]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d11b      	bne.n	80044c4 <MenuDIAGNOSTIC+0xa8>
		OFF();
 800448c:	f7fe ffbe 	bl	800340c <OFF>
		lcd_set_xy(0,0);
 8004490:	2100      	movs	r1, #0
 8004492:	4608      	mov	r0, r1
 8004494:	f7fd fb42 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("Ups ");
 8004498:	488a      	ldr	r0, [pc, #552]	; (80046c4 <MenuDIAGNOSTIC+0x2a8>)
 800449a:	f7fd fbbf 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa_koma(U_PS,2));
 800449e:	4b8a      	ldr	r3, [pc, #552]	; (80046c8 <MenuDIAGNOSTIC+0x2ac>)
 80044a0:	2102      	movs	r1, #2
 80044a2:	8818      	ldrh	r0, [r3, #0]
 80044a4:	f7fc ffa4 	bl	80013f0 <itoa_koma>
 80044a8:	f7fd fbb8 	bl	8001c1c <PrintToLCD>
		PrintToLCD("V ");
 80044ac:	4887      	ldr	r0, [pc, #540]	; (80046cc <MenuDIAGNOSTIC+0x2b0>)
 80044ae:	f7fd fbb5 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[3])));
 80044b2:	4b87      	ldr	r3, [pc, #540]	; (80046d0 <MenuDIAGNOSTIC+0x2b4>)
 80044b4:	88d8      	ldrh	r0, [r3, #6]
 80044b6:	f7fc ff27 	bl	8001308 <itoa>
 80044ba:	f7fd fbaf 	bl	8001c1c <PrintToLCD>
		PrintToLCD("      ");
 80044be:	4885      	ldr	r0, [pc, #532]	; (80046d4 <MenuDIAGNOSTIC+0x2b8>)
 80044c0:	f7fd fbac 	bl	8001c1c <PrintToLCD>
	if(CountShow1 == 2)
 80044c4:	f994 5000 	ldrsb.w	r5, [r4]
 80044c8:	2d02      	cmp	r5, #2
 80044ca:	d11b      	bne.n	8004504 <MenuDIAGNOSTIC+0xe8>
		OUT_ON();
 80044cc:	f7fe f8ec 	bl	80026a8 <OUT_ON>
		lcd_set_xy(0,0);
 80044d0:	2100      	movs	r1, #0
 80044d2:	4608      	mov	r0, r1
 80044d4:	f7fd fb22 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("Uout ");
 80044d8:	487f      	ldr	r0, [pc, #508]	; (80046d8 <MenuDIAGNOSTIC+0x2bc>)
 80044da:	f7fd fb9f 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa_koma(U_OUT,2));
 80044de:	4b7f      	ldr	r3, [pc, #508]	; (80046dc <MenuDIAGNOSTIC+0x2c0>)
 80044e0:	4629      	mov	r1, r5
 80044e2:	8818      	ldrh	r0, [r3, #0]
 80044e4:	f7fc ff84 	bl	80013f0 <itoa_koma>
 80044e8:	f7fd fb98 	bl	8001c1c <PrintToLCD>
		PrintToLCD("V ");
 80044ec:	4877      	ldr	r0, [pc, #476]	; (80046cc <MenuDIAGNOSTIC+0x2b0>)
 80044ee:	f7fd fb95 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[2])));
 80044f2:	4b77      	ldr	r3, [pc, #476]	; (80046d0 <MenuDIAGNOSTIC+0x2b4>)
 80044f4:	8898      	ldrh	r0, [r3, #4]
 80044f6:	f7fc ff07 	bl	8001308 <itoa>
 80044fa:	f7fd fb8f 	bl	8001c1c <PrintToLCD>
		PrintToLCD("      ");
 80044fe:	4875      	ldr	r0, [pc, #468]	; (80046d4 <MenuDIAGNOSTIC+0x2b8>)
 8004500:	f7fd fb8c 	bl	8001c1c <PrintToLCD>
	if(CountShow1 == 3)
 8004504:	f994 3000 	ldrsb.w	r3, [r4]
 8004508:	2b03      	cmp	r3, #3
 800450a:	d11d      	bne.n	8004548 <MenuDIAGNOSTIC+0x12c>
		LOAD_OFF();
 800450c:	f7fe fb26 	bl	8002b5c <LOAD_OFF>
		OUT_ON();
 8004510:	f7fe f8ca 	bl	80026a8 <OUT_ON>
		lcd_set_xy(0,0);
 8004514:	2100      	movs	r1, #0
 8004516:	4608      	mov	r0, r1
 8004518:	f7fd fb00 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("Iout ");
 800451c:	4870      	ldr	r0, [pc, #448]	; (80046e0 <MenuDIAGNOSTIC+0x2c4>)
 800451e:	f7fd fb7d 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa(Current));
 8004522:	4b70      	ldr	r3, [pc, #448]	; (80046e4 <MenuDIAGNOSTIC+0x2c8>)
 8004524:	8818      	ldrh	r0, [r3, #0]
 8004526:	b200      	sxth	r0, r0
 8004528:	f7fc feee 	bl	8001308 <itoa>
 800452c:	f7fd fb76 	bl	8001c1c <PrintToLCD>
		PrintToLCD("mA ");
 8004530:	486d      	ldr	r0, [pc, #436]	; (80046e8 <MenuDIAGNOSTIC+0x2cc>)
 8004532:	f7fd fb73 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[1])));
 8004536:	4b66      	ldr	r3, [pc, #408]	; (80046d0 <MenuDIAGNOSTIC+0x2b4>)
 8004538:	8858      	ldrh	r0, [r3, #2]
 800453a:	f7fc fee5 	bl	8001308 <itoa>
 800453e:	f7fd fb6d 	bl	8001c1c <PrintToLCD>
		PrintToLCD("      ");
 8004542:	4864      	ldr	r0, [pc, #400]	; (80046d4 <MenuDIAGNOSTIC+0x2b8>)
 8004544:	f7fd fb6a 	bl	8001c1c <PrintToLCD>
	if(CountShow1 == 4)
 8004548:	f994 3000 	ldrsb.w	r3, [r4]
 800454c:	2b04      	cmp	r3, #4
 800454e:	d11d      	bne.n	800458c <MenuDIAGNOSTIC+0x170>
		OUT_OFF();
 8004550:	f7fe f894 	bl	800267c <OUT_OFF>
		LOAD_ON();
 8004554:	f7fe fa86 	bl	8002a64 <LOAD_ON>
		lcd_set_xy(0,0);
 8004558:	2100      	movs	r1, #0
 800455a:	4608      	mov	r0, r1
 800455c:	f7fd fade 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("I(l) ");
 8004560:	4862      	ldr	r0, [pc, #392]	; (80046ec <MenuDIAGNOSTIC+0x2d0>)
 8004562:	f7fd fb5b 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa(Current_load));
 8004566:	4b62      	ldr	r3, [pc, #392]	; (80046f0 <MenuDIAGNOSTIC+0x2d4>)
 8004568:	8818      	ldrh	r0, [r3, #0]
 800456a:	b200      	sxth	r0, r0
 800456c:	f7fc fecc 	bl	8001308 <itoa>
 8004570:	f7fd fb54 	bl	8001c1c <PrintToLCD>
		PrintToLCD("mA ");
 8004574:	485c      	ldr	r0, [pc, #368]	; (80046e8 <MenuDIAGNOSTIC+0x2cc>)
 8004576:	f7fd fb51 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa(RegularConvData[0]));
 800457a:	4b55      	ldr	r3, [pc, #340]	; (80046d0 <MenuDIAGNOSTIC+0x2b4>)
 800457c:	8818      	ldrh	r0, [r3, #0]
 800457e:	f7fc fec3 	bl	8001308 <itoa>
 8004582:	f7fd fb4b 	bl	8001c1c <PrintToLCD>
		PrintToLCD("       ");
 8004586:	485b      	ldr	r0, [pc, #364]	; (80046f4 <MenuDIAGNOSTIC+0x2d8>)
 8004588:	f7fd fb48 	bl	8001c1c <PrintToLCD>
	if(CountShow1 == 5)
 800458c:	f994 3000 	ldrsb.w	r3, [r4]
 8004590:	2b05      	cmp	r3, #5
 8004592:	d145      	bne.n	8004620 <MenuDIAGNOSTIC+0x204>
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 8004594:	4f4c      	ldr	r7, [pc, #304]	; (80046c8 <MenuDIAGNOSTIC+0x2ac>)
 8004596:	4e58      	ldr	r6, [pc, #352]	; (80046f8 <MenuDIAGNOSTIC+0x2dc>)
		LOAD_OFF();
 8004598:	f7fe fae0 	bl	8002b5c <LOAD_OFF>
		OUT_ON();
 800459c:	f7fe f884 	bl	80026a8 <OUT_ON>
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 80045a0:	883b      	ldrh	r3, [r7, #0]
 80045a2:	8831      	ldrh	r1, [r6, #0]
 80045a4:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80046e4 <MenuDIAGNOSTIC+0x2c8>
 80045a8:	1a59      	subs	r1, r3, r1
 80045aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80045ae:	434b      	muls	r3, r1
 80045b0:	f8b8 2000 	ldrh.w	r2, [r8]
		lcd_set_xy(0,0);
 80045b4:	2100      	movs	r1, #0
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 80045b6:	b212      	sxth	r2, r2
 80045b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80045bc:	4d4f      	ldr	r5, [pc, #316]	; (80046fc <MenuDIAGNOSTIC+0x2e0>)
		lcd_set_xy(0,0);
 80045be:	4608      	mov	r0, r1
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 80045c0:	64ab      	str	r3, [r5, #72]	; 0x48
		lcd_set_xy(0,0);
 80045c2:	f7fd faab 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("R=");
 80045c6:	484e      	ldr	r0, [pc, #312]	; (8004700 <MenuDIAGNOSTIC+0x2e4>)
 80045c8:	f7fd fb28 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa(CalibrationData.ResistanceComp_Ishunt_Wires));
 80045cc:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80045ce:	f7fc fe9b 	bl	8001308 <itoa>
 80045d2:	f7fd fb23 	bl	8001c1c <PrintToLCD>
		PrintToLCD("mOm ");
 80045d6:	484b      	ldr	r0, [pc, #300]	; (8004704 <MenuDIAGNOSTIC+0x2e8>)
 80045d8:	f7fd fb20 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa(CalibrationData.ResistanceComp_MOSFET));
 80045dc:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80045de:	f7fc fe93 	bl	8001308 <itoa>
 80045e2:	f7fd fb1b 	bl	8001c1c <PrintToLCD>
		PrintToLCD("mOm    ");
 80045e6:	4848      	ldr	r0, [pc, #288]	; (8004708 <MenuDIAGNOSTIC+0x2ec>)
 80045e8:	f7fd fb18 	bl	8001c1c <PrintToLCD>
		logDebugD("I: ",Current,0);
 80045ec:	4847      	ldr	r0, [pc, #284]	; (800470c <MenuDIAGNOSTIC+0x2f0>)
 80045ee:	f000 ffa7 	bl	8005540 <printToBufferWithoutEndUART1>
 80045f2:	f8b8 1000 	ldrh.w	r1, [r8]
 80045f6:	2200      	movs	r2, #0
 80045f8:	b209      	sxth	r1, r1
 80045fa:	4845      	ldr	r0, [pc, #276]	; (8004710 <MenuDIAGNOSTIC+0x2f4>)
 80045fc:	f000 ffe4 	bl	80055c8 <printToBufferUART1D>
		logDebugD("U_PS: ",U_PS,2);
 8004600:	4842      	ldr	r0, [pc, #264]	; (800470c <MenuDIAGNOSTIC+0x2f0>)
 8004602:	f000 ff9d 	bl	8005540 <printToBufferWithoutEndUART1>
 8004606:	8839      	ldrh	r1, [r7, #0]
 8004608:	2202      	movs	r2, #2
 800460a:	4842      	ldr	r0, [pc, #264]	; (8004714 <MenuDIAGNOSTIC+0x2f8>)
 800460c:	f000 ffdc 	bl	80055c8 <printToBufferUART1D>
		logDebugD("U out: ",U_OUT_ForSetResistance,2);
 8004610:	483e      	ldr	r0, [pc, #248]	; (800470c <MenuDIAGNOSTIC+0x2f0>)
 8004612:	f000 ff95 	bl	8005540 <printToBufferWithoutEndUART1>
 8004616:	8831      	ldrh	r1, [r6, #0]
 8004618:	2202      	movs	r2, #2
 800461a:	483f      	ldr	r0, [pc, #252]	; (8004718 <MenuDIAGNOSTIC+0x2fc>)
 800461c:	f000 ffd4 	bl	80055c8 <printToBufferUART1D>
	if(CountShow1 == 6)
 8004620:	f994 3000 	ldrsb.w	r3, [r4]
 8004624:	2b06      	cmp	r3, #6
 8004626:	d10f      	bne.n	8004648 <MenuDIAGNOSTIC+0x22c>
		OFF();
 8004628:	f7fe fef0 	bl	800340c <OFF>
		lcd_set_xy(0,0);
 800462c:	2100      	movs	r1, #0
 800462e:	4608      	mov	r0, r1
 8004630:	f7fd fa74 	bl	8001b1c <lcd_set_xy>
		PrintToLCD(ClockStringWithSec(time_sec,s));
 8004634:	4b39      	ldr	r3, [pc, #228]	; (800471c <MenuDIAGNOSTIC+0x300>)
 8004636:	a901      	add	r1, sp, #4
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	f7fc ffec 	bl	8001616 <ClockStringWithSec>
 800463e:	f7fd faed 	bl	8001c1c <PrintToLCD>
		PrintToLCD("        ");
 8004642:	4837      	ldr	r0, [pc, #220]	; (8004720 <MenuDIAGNOSTIC+0x304>)
 8004644:	f7fd faea 	bl	8001c1c <PrintToLCD>
	if(CountShow1 == 7)
 8004648:	f994 3000 	ldrsb.w	r3, [r4]
 800464c:	2b07      	cmp	r3, #7
 800464e:	d11e      	bne.n	800468e <MenuDIAGNOSTIC+0x272>
		LOAD_OFF();
 8004650:	f7fe fa84 	bl	8002b5c <LOAD_OFF>
		OUT_ON();
 8004654:	f7fe f828 	bl	80026a8 <OUT_ON>
		lcd_set_xy(0,0);
 8004658:	2100      	movs	r1, #0
 800465a:	4608      	mov	r0, r1
 800465c:	f7fd fa5e 	bl	8001b1c <lcd_set_xy>
		PrintToLCD("T=");
 8004660:	4830      	ldr	r0, [pc, #192]	; (8004724 <MenuDIAGNOSTIC+0x308>)
 8004662:	f7fd fadb 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa(GetTemperature(Rt)));
 8004666:	4b30      	ldr	r3, [pc, #192]	; (8004728 <MenuDIAGNOSTIC+0x30c>)
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	f7fc fb73 	bl	8000d54 <GetTemperature>
 800466e:	f7fc fe4b 	bl	8001308 <itoa>
 8004672:	f7fd fad3 	bl	8001c1c <PrintToLCD>
		PrintToLCD("C   ");
 8004676:	482d      	ldr	r0, [pc, #180]	; (800472c <MenuDIAGNOSTIC+0x310>)
 8004678:	f7fd fad0 	bl	8001c1c <PrintToLCD>
		PrintToLCD(itoa(RegularConvData[5]));
 800467c:	4b14      	ldr	r3, [pc, #80]	; (80046d0 <MenuDIAGNOSTIC+0x2b4>)
 800467e:	8958      	ldrh	r0, [r3, #10]
 8004680:	f7fc fe42 	bl	8001308 <itoa>
 8004684:	f7fd faca 	bl	8001c1c <PrintToLCD>
		PrintToLCD("    ");
 8004688:	480d      	ldr	r0, [pc, #52]	; (80046c0 <MenuDIAGNOSTIC+0x2a4>)
 800468a:	f7fd fac7 	bl	8001c1c <PrintToLCD>
}
 800468e:	b006      	add	sp, #24
 8004690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (key == KEY_BACK)
 8004694:	2801      	cmp	r0, #1
 8004696:	f47f aed3 	bne.w	8004440 <MenuDIAGNOSTIC+0x24>
		CountShow1--;
 800469a:	3b01      	subs	r3, #1
 800469c:	b25b      	sxtb	r3, r3
		if (CountShow1<0) CountShow1=MAXITEM-1;
 800469e:	2b00      	cmp	r3, #0
 80046a0:	bfb8      	it	lt
 80046a2:	2307      	movlt	r3, #7
 80046a4:	e6cb      	b.n	800443e <MenuDIAGNOSTIC+0x22>
 80046a6:	bf00      	nop
 80046a8:	200007a8 	.word	0x200007a8
 80046ac:	2000079a 	.word	0x2000079a
 80046b0:	080063a5 	.word	0x080063a5
 80046b4:	20000868 	.word	0x20000868
 80046b8:	080063aa 	.word	0x080063aa
 80046bc:	2000087c 	.word	0x2000087c
 80046c0:	0800653d 	.word	0x0800653d
 80046c4:	080063af 	.word	0x080063af
 80046c8:	20000884 	.word	0x20000884
 80046cc:	08006518 	.word	0x08006518
 80046d0:	2000086c 	.word	0x2000086c
 80046d4:	0800653b 	.word	0x0800653b
 80046d8:	080063b4 	.word	0x080063b4
 80046dc:	2000087e 	.word	0x2000087e
 80046e0:	080063ba 	.word	0x080063ba
 80046e4:	2000086a 	.word	0x2000086a
 80046e8:	080063c0 	.word	0x080063c0
 80046ec:	080063c4 	.word	0x080063c4
 80046f0:	200002bc 	.word	0x200002bc
 80046f4:	0800653a 	.word	0x0800653a
 80046f8:	200002be 	.word	0x200002be
 80046fc:	20000004 	.word	0x20000004
 8004700:	080063ca 	.word	0x080063ca
 8004704:	080063cd 	.word	0x080063cd
 8004708:	080063d2 	.word	0x080063d2
 800470c:	08006059 	.word	0x08006059
 8004710:	080063da 	.word	0x080063da
 8004714:	080063de 	.word	0x080063de
 8004718:	080063e5 	.word	0x080063e5
 800471c:	200007f8 	.word	0x200007f8
 8004720:	08006539 	.word	0x08006539
 8004724:	080063ed 	.word	0x080063ed
 8004728:	20000880 	.word	0x20000880
 800472c:	080063f0 	.word	0x080063f0

08004730 <adc_func>:
	Count1000mSecond++;
}


void adc_func()
{
 8004730:	b5f0      	push	{r4, r5, r6, r7, lr}
	//5 T
	//6 temp
	//7 vref


	volatile int32_t Ut = 0;
 8004732:	2600      	movs	r6, #0
	volatile int32_t It_m = 0;
	#define NUM_READ 32
	//LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);


	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 8004734:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
{
 8004738:	b085      	sub	sp, #20
	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 800473a:	4c7c      	ldr	r4, [pc, #496]	; (800492c <adc_func+0x1fc>)
	volatile int32_t Ut = 0;
 800473c:	9600      	str	r6, [sp, #0]
	volatile int32_t It = 0;
 800473e:	9601      	str	r6, [sp, #4]
	volatile int32_t Ut_m = 0;
 8004740:	9602      	str	r6, [sp, #8]
	volatile int32_t It_m = 0;
 8004742:	9603      	str	r6, [sp, #12]
	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 8004744:	89e2      	ldrh	r2, [r4, #14]
	//Rt= (RegularConvData[5] *2050 )/ RegularConvData[7];
	Ut= (RegularConvData[3] * CalibrationData.CalibrationValueForVoltage) / RegularConvData[7];
 8004746:	4d7a      	ldr	r5, [pc, #488]	; (8004930 <adc_func+0x200>)
	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 8004748:	fb93 f3f2 	sdiv	r3, r3, r2
 800474c:	4a79      	ldr	r2, [pc, #484]	; (8004934 <adc_func+0x204>)
 800474e:	b29b      	uxth	r3, r3
 8004750:	8013      	strh	r3, [r2, #0]
	Ut= (RegularConvData[3] * CalibrationData.CalibrationValueForVoltage) / RegularConvData[7];
 8004752:	88e1      	ldrh	r1, [r4, #6]
 8004754:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004756:	89e2      	ldrh	r2, [r4, #14]
 8004758:	434b      	muls	r3, r1
 800475a:	fbb3 f3f2 	udiv	r3, r3, r2
 800475e:	9300      	str	r3, [sp, #0]
	Ut_m = middle_of_3Umax1(Ut);
 8004760:	9800      	ldr	r0, [sp, #0]
 8004762:	f7fd f84f 	bl	8001804 <middle_of_3Umax1>
 8004766:	9002      	str	r0, [sp, #8]
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 8004768:	9802      	ldr	r0, [sp, #8]
 800476a:	f7fd f8a7 	bl	80018bc <RunningAverageU1>
 800476e:	4a72      	ldr	r2, [pc, #456]	; (8004938 <adc_func+0x208>)
	SumU1Counter ++;
 8004770:	4972      	ldr	r1, [pc, #456]	; (800493c <adc_func+0x20c>)
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 8004772:	6813      	ldr	r3, [r2, #0]
 8004774:	4418      	add	r0, r3
 8004776:	6010      	str	r0, [r2, #0]
	SumU1Counter ++;
 8004778:	880b      	ldrh	r3, [r1, #0]
 800477a:	3301      	adds	r3, #1
 800477c:	b21b      	sxth	r3, r3
 800477e:	800b      	strh	r3, [r1, #0]
	if (SumU1Counter >= NUM_READ)
 8004780:	880b      	ldrh	r3, [r1, #0]
 8004782:	b21b      	sxth	r3, r3
 8004784:	2b1f      	cmp	r3, #31
 8004786:	dd0c      	ble.n	80047a2 <adc_func+0x72>
	{
		U_PS = SumU1/NUM_READ;
 8004788:	2020      	movs	r0, #32
 800478a:	6813      	ldr	r3, [r2, #0]
 800478c:	fb93 f3f0 	sdiv	r3, r3, r0
 8004790:	486b      	ldr	r0, [pc, #428]	; (8004940 <adc_func+0x210>)
 8004792:	b29b      	uxth	r3, r3
 8004794:	8003      	strh	r3, [r0, #0]
		SumU1Counter = 0;
 8004796:	800e      	strh	r6, [r1, #0]
		SumU1 = 0;
 8004798:	6016      	str	r6, [r2, #0]
		if (U_PS < 3) U_PS = 0;
 800479a:	8803      	ldrh	r3, [r0, #0]
 800479c:	2b02      	cmp	r3, #2
 800479e:	bf98      	it	ls
 80047a0:	8006      	strhls	r6, [r0, #0]
	}


	Ut = (RegularConvData[2] * CalibrationData.CalibrationValueForVoltage1) / RegularConvData[7];
 80047a2:	88a1      	ldrh	r1, [r4, #4]
 80047a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80047a6:	89e2      	ldrh	r2, [r4, #14]
 80047a8:	434b      	muls	r3, r1
 80047aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80047ae:	9300      	str	r3, [sp, #0]
	Ut_m = middle_of_3Umax2(Ut);
 80047b0:	9800      	ldr	r0, [sp, #0]
 80047b2:	f7fd f845 	bl	8001840 <middle_of_3Umax2>
 80047b6:	9002      	str	r0, [sp, #8]
	SumU2 = SumU2 + RunningAverageU2(Ut_m);
 80047b8:	9802      	ldr	r0, [sp, #8]
 80047ba:	f7fd f880 	bl	80018be <RunningAverageU2>
 80047be:	4f61      	ldr	r7, [pc, #388]	; (8004944 <adc_func+0x214>)
	SumU2Counter ++;
 80047c0:	4e61      	ldr	r6, [pc, #388]	; (8004948 <adc_func+0x218>)
	SumU2 = SumU2 + RunningAverageU2(Ut_m);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	4418      	add	r0, r3
 80047c6:	6038      	str	r0, [r7, #0]
	SumU2Counter ++;
 80047c8:	8833      	ldrh	r3, [r6, #0]
 80047ca:	3301      	adds	r3, #1
 80047cc:	b21b      	sxth	r3, r3
 80047ce:	8033      	strh	r3, [r6, #0]




	Ut = (RegularConvData[4] * CalibrationData.CalibrationValueForVoltage2) / RegularConvData[7];
 80047d0:	8921      	ldrh	r1, [r4, #8]
 80047d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80047d4:	89e2      	ldrh	r2, [r4, #14]
 80047d6:	434b      	muls	r3, r1
 80047d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80047dc:	9300      	str	r3, [sp, #0]
	Ut_m = middle_of_3Umax3(Ut);
 80047de:	9800      	ldr	r0, [sp, #0]
 80047e0:	f7fd f84c 	bl	800187c <middle_of_3Umax3>
 80047e4:	9002      	str	r0, [sp, #8]
	SumU3 =SumU3 + RunningAverageU3(Ut_m);
 80047e6:	9802      	ldr	r0, [sp, #8]
 80047e8:	f7fd f86a 	bl	80018c0 <RunningAverageU3>
 80047ec:	4a57      	ldr	r2, [pc, #348]	; (800494c <adc_func+0x21c>)
	SumU3Counter ++;
 80047ee:	4958      	ldr	r1, [pc, #352]	; (8004950 <adc_func+0x220>)
	SumU3 =SumU3 + RunningAverageU3(Ut_m);
 80047f0:	6813      	ldr	r3, [r2, #0]
 80047f2:	4418      	add	r0, r3
 80047f4:	6010      	str	r0, [r2, #0]
	SumU3Counter ++;
 80047f6:	880b      	ldrh	r3, [r1, #0]
 80047f8:	3301      	adds	r3, #1
 80047fa:	b21b      	sxth	r3, r3
 80047fc:	800b      	strh	r3, [r1, #0]
	if (SumU3Counter >=NUM_READ)
 80047fe:	880b      	ldrh	r3, [r1, #0]
 8004800:	b21b      	sxth	r3, r3
 8004802:	2b1f      	cmp	r3, #31
 8004804:	dd09      	ble.n	800481a <adc_func+0xea>
	{
		U_IN = SumU3/NUM_READ;
 8004806:	2020      	movs	r0, #32
 8004808:	6813      	ldr	r3, [r2, #0]
 800480a:	fb93 f3f0 	sdiv	r3, r3, r0
 800480e:	4851      	ldr	r0, [pc, #324]	; (8004954 <adc_func+0x224>)
 8004810:	b29b      	uxth	r3, r3
 8004812:	8003      	strh	r3, [r0, #0]
		SumU3Counter = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	800b      	strh	r3, [r1, #0]
		SumU3 = 0;
 8004818:	6013      	str	r3, [r2, #0]
	}

	It = (RegularConvData[1] * CalibrationData.CalibrationValueForCurrent*10) / RegularConvData[7] ;//  Current A/10
 800481a:	230a      	movs	r3, #10
 800481c:	69a8      	ldr	r0, [r5, #24]
 800481e:	8861      	ldrh	r1, [r4, #2]
 8004820:	4343      	muls	r3, r0
 8004822:	434b      	muls	r3, r1
 8004824:	89e2      	ldrh	r2, [r4, #14]
 8004826:	fbb3 f3f2 	udiv	r3, r3, r2
 800482a:	9301      	str	r3, [sp, #4]
	It_m = middle_of_3Imax1(It);
 800482c:	9801      	ldr	r0, [sp, #4]
 800482e:	f7fc ffad 	bl	800178c <middle_of_3Imax1>
 8004832:	9003      	str	r0, [sp, #12]
	SumI1 =SumI1 + RunningAverageI1(It_m);
 8004834:	9803      	ldr	r0, [sp, #12]
 8004836:	f7fd f83f 	bl	80018b8 <RunningAverageI1>
 800483a:	4a47      	ldr	r2, [pc, #284]	; (8004958 <adc_func+0x228>)
	SumI1Counter ++;
 800483c:	4947      	ldr	r1, [pc, #284]	; (800495c <adc_func+0x22c>)
	SumI1 =SumI1 + RunningAverageI1(It_m);
 800483e:	6813      	ldr	r3, [r2, #0]
 8004840:	4418      	add	r0, r3
 8004842:	6010      	str	r0, [r2, #0]
	SumI1Counter ++;
 8004844:	880b      	ldrh	r3, [r1, #0]
 8004846:	3301      	adds	r3, #1
 8004848:	b21b      	sxth	r3, r3
 800484a:	800b      	strh	r3, [r1, #0]
	if (SumI1Counter >= NUM_READ)
 800484c:	880b      	ldrh	r3, [r1, #0]
 800484e:	b21b      	sxth	r3, r3
 8004850:	2b1f      	cmp	r3, #31
 8004852:	dd09      	ble.n	8004868 <adc_func+0x138>
	{
		Current_Out = SumI1/NUM_READ;
 8004854:	2020      	movs	r0, #32
 8004856:	6813      	ldr	r3, [r2, #0]
 8004858:	fb93 f3f0 	sdiv	r3, r3, r0
 800485c:	4840      	ldr	r0, [pc, #256]	; (8004960 <adc_func+0x230>)
 800485e:	b21b      	sxth	r3, r3
 8004860:	8003      	strh	r3, [r0, #0]
		SumI1Counter = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	800b      	strh	r3, [r1, #0]
		SumI1 = 0;
 8004866:	6013      	str	r3, [r2, #0]
	}

	It= (RegularConvData[0] * CalibrationData.CalibrationValueForCurrent1*10) / RegularConvData[7] ;//  Current A/10
 8004868:	230a      	movs	r3, #10
 800486a:	6a28      	ldr	r0, [r5, #32]
 800486c:	8821      	ldrh	r1, [r4, #0]
 800486e:	4343      	muls	r3, r0
 8004870:	434b      	muls	r3, r1
 8004872:	89e2      	ldrh	r2, [r4, #14]
 8004874:	fbb3 f3f2 	udiv	r3, r3, r2
 8004878:	9301      	str	r3, [sp, #4]
	It_m = middle_of_3Imax2(It);
 800487a:	9801      	ldr	r0, [sp, #4]
 800487c:	f7fc ffa4 	bl	80017c8 <middle_of_3Imax2>
 8004880:	9003      	str	r0, [sp, #12]
	SumI2 =SumI2 + RunningAverageI2(It_m);
 8004882:	9803      	ldr	r0, [sp, #12]
 8004884:	f7fd f819 	bl	80018ba <RunningAverageI2>
 8004888:	4a36      	ldr	r2, [pc, #216]	; (8004964 <adc_func+0x234>)
	SumI2Counter ++;
 800488a:	4937      	ldr	r1, [pc, #220]	; (8004968 <adc_func+0x238>)
	SumI2 =SumI2 + RunningAverageI2(It_m);
 800488c:	6813      	ldr	r3, [r2, #0]
 800488e:	4418      	add	r0, r3
 8004890:	6010      	str	r0, [r2, #0]
	SumI2Counter ++;
 8004892:	880b      	ldrh	r3, [r1, #0]
 8004894:	3301      	adds	r3, #1
 8004896:	b21b      	sxth	r3, r3
 8004898:	800b      	strh	r3, [r1, #0]
	if (SumI2Counter >= NUM_READ)
 800489a:	880b      	ldrh	r3, [r1, #0]
 800489c:	b21b      	sxth	r3, r3
 800489e:	2b1f      	cmp	r3, #31
 80048a0:	dd09      	ble.n	80048b6 <adc_func+0x186>
	{
		Current_load = SumI2/NUM_READ;
 80048a2:	2020      	movs	r0, #32
 80048a4:	6813      	ldr	r3, [r2, #0]
 80048a6:	fb93 f3f0 	sdiv	r3, r3, r0
 80048aa:	4830      	ldr	r0, [pc, #192]	; (800496c <adc_func+0x23c>)
 80048ac:	b21b      	sxth	r3, r3
 80048ae:	8003      	strh	r3, [r0, #0]
		SumI2Counter = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	800b      	strh	r3, [r1, #0]
		SumI2 = 0;
 80048b4:	6013      	str	r3, [r2, #0]
	}
	//if ( (GPIOA->IDR & 112) == 0 )
	//Print_to_USART1_d(CalibrationData.Calibration0ValueForCurrent1,"cal1 ",0);
	//Print_to_USART1_d(CalibrationData.Calibration0ValueForCurrent,"cal ",0);
	if ((GPIOB->IDR & 0x02)==0x02)//if load on
 80048b6:	4b2e      	ldr	r3, [pc, #184]	; (8004970 <adc_func+0x240>)
 80048b8:	492e      	ldr	r1, [pc, #184]	; (8004974 <adc_func+0x244>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f013 0f02 	tst.w	r3, #2
	{
		Current =(int32_t)(Current_load-CalibrationData.Calibration0ValueForCurrent1)*(-1) ;//2745;
 80048c0:	bf15      	itete	ne
 80048c2:	4b2a      	ldrne	r3, [pc, #168]	; (800496c <adc_func+0x23c>)
	}else
	{
		Current = (Current_Out-CalibrationData.Calibration0ValueForCurrent)/1 ;//2745;
 80048c4:	4b26      	ldreq	r3, [pc, #152]	; (8004960 <adc_func+0x230>)
		Current =(int32_t)(Current_load-CalibrationData.Calibration0ValueForCurrent1)*(-1) ;//2745;
 80048c6:	881a      	ldrhne	r2, [r3, #0]
		Current = (Current_Out-CalibrationData.Calibration0ValueForCurrent)/1 ;//2745;
 80048c8:	881b      	ldrheq	r3, [r3, #0]
		Current =(int32_t)(Current_load-CalibrationData.Calibration0ValueForCurrent1)*(-1) ;//2745;
 80048ca:	bf14      	ite	ne
 80048cc:	692b      	ldrne	r3, [r5, #16]
		Current = (Current_Out-CalibrationData.Calibration0ValueForCurrent)/1 ;//2745;
 80048ce:	68aa      	ldreq	r2, [r5, #8]
 80048d0:	1a9b      	subs	r3, r3, r2
 80048d2:	b21b      	sxth	r3, r3
 80048d4:	800b      	strh	r3, [r1, #0]
	}

	//Print_to_USART1_d(Current,"I: ",0);

	if (SumU2Counter >= 10)
 80048d6:	8833      	ldrh	r3, [r6, #0]
 80048d8:	b21b      	sxth	r3, r3
 80048da:	2b09      	cmp	r3, #9
 80048dc:	dd24      	ble.n	8004928 <adc_func+0x1f8>
	{

		U_OUTtmp = SumU2/10;
 80048de:	220a      	movs	r2, #10
 80048e0:	683b      	ldr	r3, [r7, #0]
		SumU2 = 0;
		SumU2Counter = 0;

		U_OUT_ForSetResistance = U_OUTtmp;
 80048e2:	4c25      	ldr	r4, [pc, #148]	; (8004978 <adc_func+0x248>)
		U_OUTtmp = SumU2/10;
 80048e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80048e8:	4a24      	ldr	r2, [pc, #144]	; (800497c <adc_func+0x24c>)
 80048ea:	6013      	str	r3, [r2, #0]
		SumU2 = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	603b      	str	r3, [r7, #0]
		SumU2Counter = 0;
 80048f0:	8033      	strh	r3, [r6, #0]
		U_OUT_ForSetResistance = U_OUTtmp;
 80048f2:	6810      	ldr	r0, [r2, #0]
 80048f4:	b280      	uxth	r0, r0
 80048f6:	8020      	strh	r0, [r4, #0]
		if (U_OUTtmp<3) U_OUTtmp = 0;
 80048f8:	6810      	ldr	r0, [r2, #0]
 80048fa:	2802      	cmp	r0, #2
 80048fc:	bfd8      	it	le
 80048fe:	6013      	strle	r3, [r2, #0]

		if (Current>=0)
 8004900:	8808      	ldrh	r0, [r1, #0]
		{
			U_OUTtmp = U_OUTtmp - (int32_t)CalibrationData.ResistanceComp_Ishunt_Wires*Current/10000;
 8004902:	8809      	ldrh	r1, [r1, #0]
 8004904:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004906:	b209      	sxth	r1, r1
 8004908:	434b      	muls	r3, r1
 800490a:	481d      	ldr	r0, [pc, #116]	; (8004980 <adc_func+0x250>)
 800490c:	6814      	ldr	r4, [r2, #0]
 800490e:	fb93 f3f0 	sdiv	r3, r3, r0
 8004912:	4423      	add	r3, r4
 8004914:	6013      	str	r3, [r2, #0]
			U_OUTtmp = U_OUTtmp - (int32_t)CalibrationData.ResistanceComp_Ishunt_Wires*Current/10000;
			//Print_to_USART1_d(Current,"I: ",0);
			//P/rint_to_USART1_d(CalibrationData.ResistanceComp_Ishunt_Wires*(-1)*Current/10000,"ResC: ",0);
		}

		if (U_OUTtmp<3)
 8004916:	6813      	ldr	r3, [r2, #0]
 8004918:	2b02      	cmp	r3, #2
			U_OUTtmp=0;
 800491a:	bfdc      	itt	le
 800491c:	2300      	movle	r3, #0
 800491e:	6013      	strle	r3, [r2, #0]

		U_OUT = U_OUTtmp;
 8004920:	6813      	ldr	r3, [r2, #0]
 8004922:	4a18      	ldr	r2, [pc, #96]	; (8004984 <adc_func+0x254>)
 8004924:	b29b      	uxth	r3, r3
 8004926:	8013      	strh	r3, [r2, #0]
	}



	 //LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
}
 8004928:	b005      	add	sp, #20
 800492a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800492c:	2000086c 	.word	0x2000086c
 8004930:	20000004 	.word	0x20000004
 8004934:	2000087c 	.word	0x2000087c
 8004938:	200007c4 	.word	0x200007c4
 800493c:	200007c8 	.word	0x200007c8
 8004940:	20000884 	.word	0x20000884
 8004944:	200007cc 	.word	0x200007cc
 8004948:	200007d0 	.word	0x200007d0
 800494c:	200007d4 	.word	0x200007d4
 8004950:	200007d8 	.word	0x200007d8
 8004954:	20000868 	.word	0x20000868
 8004958:	200007b4 	.word	0x200007b4
 800495c:	200007b8 	.word	0x200007b8
 8004960:	200002ba 	.word	0x200002ba
 8004964:	200007bc 	.word	0x200007bc
 8004968:	200007c0 	.word	0x200007c0
 800496c:	200002bc 	.word	0x200002bc
 8004970:	40010c00 	.word	0x40010c00
 8004974:	2000086a 	.word	0x2000086a
 8004978:	200002be 	.word	0x200002be
 800497c:	200007ec 	.word	0x200007ec
 8004980:	ffffd8f0 	.word	0xffffd8f0
 8004984:	2000087e 	.word	0x2000087e

08004988 <SysTick_Callback>:
{
 8004988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BUT_Debrief();
 800498a:	f7fd fdf5 	bl	8002578 <BUT_Debrief>
	All_OUT_OFF_When_Power_OFF();
 800498e:	f7ff fcc3 	bl	8004318 <All_OUT_OFF_When_Power_OFF>
	TimerForReadyMeasurement_ms++;
 8004992:	4a32      	ldr	r2, [pc, #200]	; (8004a5c <SysTick_Callback+0xd4>)
	if (Count10mSecond >= 5)
 8004994:	4e32      	ldr	r6, [pc, #200]	; (8004a60 <SysTick_Callback+0xd8>)
	TimerForReadyMeasurement_ms++;
 8004996:	6813      	ldr	r3, [r2, #0]
 8004998:	3301      	adds	r3, #1
 800499a:	6013      	str	r3, [r2, #0]
	if (Count10mSecond >= 5)
 800499c:	8833      	ldrh	r3, [r6, #0]
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d903      	bls.n	80049aa <SysTick_Callback+0x22>
		Count10mSecond = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	8033      	strh	r3, [r6, #0]
		adc_func();
 80049a6:	f7ff fec3 	bl	8004730 <adc_func>
	if (Count100mSecond >= 100)
 80049aa:	4d2e      	ldr	r5, [pc, #184]	; (8004a64 <SysTick_Callback+0xdc>)
	if (Count1000mSecond >= 1000)
 80049ac:	4c2e      	ldr	r4, [pc, #184]	; (8004a68 <SysTick_Callback+0xe0>)
	if (Count100mSecond >= 100)
 80049ae:	882b      	ldrh	r3, [r5, #0]
 80049b0:	2b63      	cmp	r3, #99	; 0x63
		Count100mSecond = 0;
 80049b2:	bf84      	itt	hi
 80049b4:	2300      	movhi	r3, #0
 80049b6:	802b      	strhhi	r3, [r5, #0]
	if (Count1000mSecond >= 1000)
 80049b8:	8823      	ldrh	r3, [r4, #0]
 80049ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049be:	d340      	bcc.n	8004a42 <SysTick_Callback+0xba>
		Count1000mSecond = 0;
 80049c0:	2300      	movs	r3, #0
		if (Current < 2)
 80049c2:	4f2a      	ldr	r7, [pc, #168]	; (8004a6c <SysTick_Callback+0xe4>)
		Count1000mSecond = 0;
 80049c4:	8023      	strh	r3, [r4, #0]
		if (Current < 2)
 80049c6:	883b      	ldrh	r3, [r7, #0]
 80049c8:	b21b      	sxth	r3, r3
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	dc07      	bgt.n	80049de <SysTick_Callback+0x56>
			BatteryCapacityDischargeCurrent = BatteryCapacityDischargeCurrent + Module16(Current);
 80049ce:	8838      	ldrh	r0, [r7, #0]
 80049d0:	b200      	sxth	r0, r0
 80049d2:	f7fc fdde 	bl	8001592 <Module16>
 80049d6:	4a26      	ldr	r2, [pc, #152]	; (8004a70 <SysTick_Callback+0xe8>)
 80049d8:	6813      	ldr	r3, [r2, #0]
 80049da:	4418      	add	r0, r3
 80049dc:	6010      	str	r0, [r2, #0]
		if (Current > 2)
 80049de:	883b      	ldrh	r3, [r7, #0]
 80049e0:	b21b      	sxth	r3, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	dd07      	ble.n	80049f6 <SysTick_Callback+0x6e>
			BatteryCapacityCharge = BatteryCapacityCharge + Module16(Current);
 80049e6:	8838      	ldrh	r0, [r7, #0]
 80049e8:	b200      	sxth	r0, r0
 80049ea:	f7fc fdd2 	bl	8001592 <Module16>
 80049ee:	4a21      	ldr	r2, [pc, #132]	; (8004a74 <SysTick_Callback+0xec>)
 80049f0:	6813      	ldr	r3, [r2, #0]
 80049f2:	4418      	add	r0, r3
 80049f4:	6010      	str	r0, [r2, #0]
		if (ChargeStatusForTimer == 1)
 80049f6:	4b20      	ldr	r3, [pc, #128]	; (8004a78 <SysTick_Callback+0xf0>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b01      	cmp	r3, #1
			ChargeTimeSec++;
 80049fc:	bf01      	itttt	eq
 80049fe:	4a1f      	ldreq	r2, [pc, #124]	; (8004a7c <SysTick_Callback+0xf4>)
 8004a00:	6813      	ldreq	r3, [r2, #0]
 8004a02:	3301      	addeq	r3, #1
 8004a04:	6013      	streq	r3, [r2, #0]
		if (DisChargeStatusForTimer == 1)
 8004a06:	4b1e      	ldr	r3, [pc, #120]	; (8004a80 <SysTick_Callback+0xf8>)
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b01      	cmp	r3, #1
			DischargeTimeSec++;
 8004a0c:	bf01      	itttt	eq
 8004a0e:	4a1d      	ldreq	r2, [pc, #116]	; (8004a84 <SysTick_Callback+0xfc>)
 8004a10:	6813      	ldreq	r3, [r2, #0]
 8004a12:	3301      	addeq	r3, #1
 8004a14:	6013      	streq	r3, [r2, #0]
		if (Status_Timer_Sec == 1)
 8004a16:	4b1c      	ldr	r3, [pc, #112]	; (8004a88 <SysTick_Callback+0x100>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b01      	cmp	r3, #1
			Timer_Sec++;
 8004a1c:	bf01      	itttt	eq
 8004a1e:	4a1b      	ldreq	r2, [pc, #108]	; (8004a8c <SysTick_Callback+0x104>)
 8004a20:	6813      	ldreq	r3, [r2, #0]
 8004a22:	3301      	addeq	r3, #1
 8004a24:	6013      	streq	r3, [r2, #0]
		time_sec++;
 8004a26:	4b1a      	ldr	r3, [pc, #104]	; (8004a90 <SysTick_Callback+0x108>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	3201      	adds	r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
		if (time_sec%2==0) GPIOA->BSRR =  GPIO_BSRR_BS15;
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f013 0f01 	tst.w	r3, #1
 8004a34:	bf0c      	ite	eq
 8004a36:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
		else GPIOA->BSRR =  GPIO_BSRR_BR15;
 8004a3a:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
 8004a3e:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <SysTick_Callback+0x10c>)
 8004a40:	611a      	str	r2, [r3, #16]
	Count10mSecond++;
 8004a42:	8833      	ldrh	r3, [r6, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	8033      	strh	r3, [r6, #0]
	Count100mSecond++;
 8004a4a:	882b      	ldrh	r3, [r5, #0]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	802b      	strh	r3, [r5, #0]
	Count1000mSecond++;
 8004a52:	8823      	ldrh	r3, [r4, #0]
 8004a54:	3301      	adds	r3, #1
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	8023      	strh	r3, [r4, #0]
}
 8004a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a5c:	200007dc 	.word	0x200007dc
 8004a60:	200002b8 	.word	0x200002b8
 8004a64:	200002b6 	.word	0x200002b6
 8004a68:	200002b4 	.word	0x200002b4
 8004a6c:	2000086a 	.word	0x2000086a
 8004a70:	20000788 	.word	0x20000788
 8004a74:	20000784 	.word	0x20000784
 8004a78:	20000793 	.word	0x20000793
 8004a7c:	20000794 	.word	0x20000794
 8004a80:	2000079c 	.word	0x2000079c
 8004a84:	200007a0 	.word	0x200007a0
 8004a88:	200007b2 	.word	0x200007b2
 8004a8c:	200007e0 	.word	0x200007e0
 8004a90:	200007f8 	.word	0x200007f8
 8004a94:	40010800 	.word	0x40010800

08004a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a98:	b510      	push	{r4, lr}
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004a9a:	4c1d      	ldr	r4, [pc, #116]	; (8004b10 <SystemClock_Config+0x78>)
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa2:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004aa4:	6823      	ldr	r3, [r4, #0]
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8004aa6:	039a      	lsls	r2, r3, #14
 8004aa8:	d5fc      	bpl.n	8004aa4 <SystemClock_Config+0xc>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8004aaa:	6863      	ldr	r3, [r4, #4]
 8004aac:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004ab0:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8004ab4:	6063      	str	r3, [r4, #4]
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
 8004ab6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ab8:	f023 030f 	bic.w	r3, r3, #15
 8004abc:	62e3      	str	r3, [r4, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac4:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004ac6:	6823      	ldr	r3, [r4, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_3);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8004ac8:	019b      	lsls	r3, r3, #6
 8004aca:	d5fc      	bpl.n	8004ac6 <SystemClock_Config+0x2e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004acc:	6863      	ldr	r3, [r4, #4]
 8004ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ad2:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004ad4:	6863      	ldr	r3, [r4, #4]
 8004ad6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004ada:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004adc:	6863      	ldr	r3, [r4, #4]
 8004ade:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004ae2:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004ae4:	6863      	ldr	r3, [r4, #4]
 8004ae6:	f023 0303 	bic.w	r3, r3, #3
 8004aea:	f043 0302 	orr.w	r3, r3, #2
 8004aee:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004af0:	6863      	ldr	r3, [r4, #4]
 8004af2:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d1fa      	bne.n	8004af0 <SystemClock_Config+0x58>
  {

  }
  LL_SetSystemCoreClock(24000000);
 8004afa:	4806      	ldr	r0, [pc, #24]	; (8004b14 <SystemClock_Config+0x7c>)
 8004afc:	f001 f84c 	bl	8005b98 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8004b00:	2000      	movs	r0, #0
 8004b02:	f000 fe2b 	bl	800575c <HAL_InitTick>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8004b06:	6863      	ldr	r3, [r4, #4]
 8004b08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004b0c:	6063      	str	r3, [r4, #4]
  {
    Error_Handler();
  }
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_2);
}
 8004b0e:	bd10      	pop	{r4, pc}
 8004b10:	40021000 	.word	0x40021000
 8004b14:	016e3600 	.word	0x016e3600

08004b18 <main>:
{
 8004b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b1c:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 8004b1e:	f000 fe41 	bl	80057a4 <HAL_Init>
  SystemClock_Config();
 8004b22:	f7ff ffb9 	bl	8004a98 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b26:	2214      	movs	r2, #20
 8004b28:	2100      	movs	r1, #0
 8004b2a:	a809      	add	r0, sp, #36	; 0x24
 8004b2c:	f001 f869 	bl	8005c02 <memset>

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8004b30:	2020      	movs	r0, #32
 8004b32:	f7fd f88d 	bl	8001c50 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004b36:	2004      	movs	r0, #4
 8004b38:	f7fd f88a 	bl	8001c50 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8004b3c:	2008      	movs	r0, #8
 8004b3e:	f7fd f887 	bl	8001c50 <LL_APB2_GRP1_EnableClock>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004b42:	f64f 4303 	movw	r3, #64515	; 0xfc03
 8004b46:	4dc7      	ldr	r5, [pc, #796]	; (8004e64 <main+0x34c>)
 8004b48:	4ec7      	ldr	r6, [pc, #796]	; (8004e68 <main+0x350>)
 8004b4a:	616b      	str	r3, [r5, #20]
 8004b4c:	f44f 4309 	mov.w	r3, #35072	; 0x8900

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b50:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b52:	f04f 0901 	mov.w	r9, #1
 8004b56:	6173      	str	r3, [r6, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b58:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b5a:	f240 3303 	movw	r3, #771	; 0x303
  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004b5e:	f04f 0804 	mov.w	r8, #4
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b62:	a909      	add	r1, sp, #36	; 0x24
 8004b64:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b66:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b6a:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b6e:	f000 fec4 	bl	80058fa <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
 8004b72:	4bbe      	ldr	r3, [pc, #760]	; (8004e6c <main+0x354>)
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b74:	a909      	add	r1, sp, #36	; 0x24
 8004b76:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b78:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004b7c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004b80:	970b      	str	r7, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b82:	f000 feba 	bl	80058fa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_15;
 8004b86:	4bba      	ldr	r3, [pc, #744]	; (8004e70 <main+0x358>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b88:	a909      	add	r1, sp, #36	; 0x24
 8004b8a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b8c:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b90:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b94:	f000 feb1 	bl	80058fa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004b98:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8004b9c:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b9e:	a909      	add	r1, sp, #36	; 0x24
 8004ba0:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004ba2:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004ba6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004baa:	f000 fea6 	bl	80058fa <LL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004bae:	4bb1      	ldr	r3, [pc, #708]	; (8004e74 <main+0x35c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb0:	4db1      	ldr	r5, [pc, #708]	; (8004e78 <main+0x360>)
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	ea42 0209 	orr.w	r2, r2, r9
 8004bb8:	615a      	str	r2, [r3, #20]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	ea03 0309 	and.w	r3, r3, r9
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bc0:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 8004ebc <main+0x3a4>
 8004bc4:	9301      	str	r3, [sp, #4]
 8004bc6:	9b01      	ldr	r3, [sp, #4]
 8004bc8:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004bcc:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004bd0:	f7fd f9cc 	bl	8001f6c <NVIC_EncodePriority.constprop.34>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd8:	fa00 f008 	lsl.w	r0, r0, r8
 8004bdc:	b2c0      	uxtb	r0, r0
 8004bde:	f885 030b 	strb.w	r0, [r5, #779]	; 0x30b
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004be2:	221c      	movs	r2, #28
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004be4:	602b      	str	r3, [r5, #0]
 8004be6:	4621      	mov	r1, r4
 8004be8:	a809      	add	r0, sp, #36	; 0x24
 8004bea:	f001 f80a 	bl	8005c02 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bee:	2214      	movs	r2, #20
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	a804      	add	r0, sp, #16
 8004bf4:	f001 f805 	bl	8005c02 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8004bf8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004bfc:	f7fd f828 	bl	8001c50 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004c00:	4640      	mov	r0, r8
 8004c02:	f7fd f825 	bl	8001c50 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004c06:	2309      	movs	r3, #9
 8004c08:	499c      	ldr	r1, [pc, #624]	; (8004e7c <main+0x364>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c0a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004c0c:	e9cd 1304 	strd	r1, r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004c10:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c12:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004c14:	e9cd 3406 	strd	r3, r4, [sp, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c18:	f000 fe6f 	bl	80058fa <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8004c1c:	4b98      	ldr	r3, [pc, #608]	; (8004e80 <main+0x368>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c1e:	a904      	add	r1, sp, #16
 8004c20:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8004c22:	e9cd 3804 	strd	r3, r8, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c26:	f000 fe68 	bl	80058fa <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c2a:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004c2e:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004c32:	f7fd f99b 	bl	8001f6c <NVIC_EncodePriority.constprop.34>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c36:	2320      	movs	r3, #32
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c38:	fa00 f008 	lsl.w	r0, r0, r8
 8004c3c:	b2c0      	uxtb	r0, r0
 8004c3e:	f885 0325 	strb.w	r0, [r5, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c42:	606b      	str	r3, [r5, #4]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8004c44:	4d8f      	ldr	r5, [pc, #572]	; (8004e84 <main+0x36c>)
  LL_USART_Init(USART1, &USART_InitStruct);
 8004c46:	a909      	add	r1, sp, #36	; 0x24
 8004c48:	68eb      	ldr	r3, [r5, #12]
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c50:	60eb      	str	r3, [r5, #12]
  USART_InitStruct.BaudRate = 38400;
 8004c52:	f44f 4316 	mov.w	r3, #38400	; 0x9600
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004c56:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004c5a:	230c      	movs	r3, #12
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004c5c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004c60:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004c64:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART1, &USART_InitStruct);
 8004c66:	f000 ff29 	bl	8005abc <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c6a:	692b      	ldr	r3, [r5, #16]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004c6c:	2214      	movs	r2, #20
 8004c6e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004c72:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004c74:	696b      	ldr	r3, [r5, #20]
 8004c76:	4621      	mov	r1, r4
 8004c78:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004c7c:	616b      	str	r3, [r5, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004c7e:	68eb      	ldr	r3, [r5, #12]
 8004c80:	a804      	add	r0, sp, #16
 8004c82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c86:	60eb      	str	r3, [r5, #12]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004c88:	e9cd 4402 	strd	r4, r4, [sp, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004c8c:	f000 ffb9 	bl	8005c02 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c90:	2214      	movs	r2, #20
 8004c92:	4621      	mov	r1, r4
 8004c94:	a809      	add	r0, sp, #36	; 0x24
 8004c96:	f000 ffb4 	bl	8005c02 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8004c9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004c9e:	f7fc ffd7 	bl	8001c50 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004ca2:	4640      	mov	r0, r8
 8004ca4:	f7fc ffd4 	bl	8001c50 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 8004ca8:	f647 637e 	movw	r3, #32382	; 0x7e7e
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cac:	a909      	add	r1, sp, #36	; 0x24
 8004cae:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004cb0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cb4:	f000 fe21 	bl	80058fa <LL_GPIO_Init>
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8004cb8:	4b73      	ldr	r3, [pc, #460]	; (8004e88 <main+0x370>)
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8004cba:	f44f 7880 	mov.w	r8, #256	; 0x100
 8004cbe:	681a      	ldr	r2, [r3, #0]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004cc0:	f5a5 55a0 	sub.w	r5, r5, #5120	; 0x1400
 8004cc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cc8:	f022 0210 	bic.w	r2, r2, #16
 8004ccc:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	a902      	add	r1, sp, #8
 8004cd2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004cd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cda:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f042 0220 	orr.w	r2, r2, #32
 8004ce4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cec:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cf4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d00:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d0c:	601a      	str	r2, [r3, #0]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8004d0e:	4a5f      	ldr	r2, [pc, #380]	; (8004e8c <main+0x374>)
 8004d10:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8004d12:	4a5f      	ldr	r2, [pc, #380]	; (8004e90 <main+0x378>)
 8004d14:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	0c12      	lsrs	r2, r2, #16
 8004d1a:	0412      	lsls	r2, r2, #16
 8004d1c:	f042 0208 	orr.w	r2, r2, #8
 8004d20:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	f042 0201 	orr.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8004d2a:	9402      	str	r4, [sp, #8]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8004d2c:	f8cd 800c 	str.w	r8, [sp, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004d30:	f000 fdac 	bl	800588c <LL_ADC_Init>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8004d34:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8004d38:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004d3c:	a904      	add	r1, sp, #16
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8004d3e:	e9cd 0304 	strd	r0, r3, [sp, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004d42:	4628      	mov	r0, r5
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8004d44:	e9cd 4706 	strd	r4, r7, [sp, #24]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8004d48:	f8cd 8020 	str.w	r8, [sp, #32]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004d4c:	f000 fdb3 	bl	80058b6 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8004d50:	4950      	ldr	r1, [pc, #320]	; (8004e94 <main+0x37c>)
 8004d52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004d56:	f7fd f8ed 	bl	8001f34 <LL_ADC_REG_SetSequencerRanks.constprop.33>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004d5a:	484e      	ldr	r0, [pc, #312]	; (8004e94 <main+0x37c>)
 8004d5c:	f7fd f8c0 	bl	8001ee0 <LL_ADC_SetChannelSamplingTime.constprop.32>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8004d60:	494d      	ldr	r1, [pc, #308]	; (8004e98 <main+0x380>)
 8004d62:	f240 2005 	movw	r0, #517	; 0x205
 8004d66:	f7fd f8e5 	bl	8001f34 <LL_ADC_REG_SetSequencerRanks.constprop.33>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004d6a:	484b      	ldr	r0, [pc, #300]	; (8004e98 <main+0x380>)
 8004d6c:	f7fd f8b8 	bl	8001ee0 <LL_ADC_SetChannelSamplingTime.constprop.32>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_3);
 8004d70:	494a      	ldr	r1, [pc, #296]	; (8004e9c <main+0x384>)
 8004d72:	f240 200a 	movw	r0, #522	; 0x20a
 8004d76:	f7fd f8dd 	bl	8001f34 <LL_ADC_REG_SetSequencerRanks.constprop.33>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004d7a:	4848      	ldr	r0, [pc, #288]	; (8004e9c <main+0x384>)
 8004d7c:	f7fd f8b0 	bl	8001ee0 <LL_ADC_SetChannelSamplingTime.constprop.32>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_4);
 8004d80:	4947      	ldr	r1, [pc, #284]	; (8004ea0 <main+0x388>)
 8004d82:	f240 200f 	movw	r0, #527	; 0x20f
 8004d86:	f7fd f8d5 	bl	8001f34 <LL_ADC_REG_SetSequencerRanks.constprop.33>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004d8a:	4845      	ldr	r0, [pc, #276]	; (8004ea0 <main+0x388>)
 8004d8c:	f7fd f8a8 	bl	8001ee0 <LL_ADC_SetChannelSamplingTime.constprop.32>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_5);
 8004d90:	4944      	ldr	r1, [pc, #272]	; (8004ea4 <main+0x38c>)
 8004d92:	f44f 7005 	mov.w	r0, #532	; 0x214
 8004d96:	f7fd f8cd 	bl	8001f34 <LL_ADC_REG_SetSequencerRanks.constprop.33>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004d9a:	4842      	ldr	r0, [pc, #264]	; (8004ea4 <main+0x38c>)
 8004d9c:	f7fd f8a0 	bl	8001ee0 <LL_ADC_SetChannelSamplingTime.constprop.32>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_6);
 8004da0:	4941      	ldr	r1, [pc, #260]	; (8004ea8 <main+0x390>)
 8004da2:	f240 2019 	movw	r0, #537	; 0x219
 8004da6:	f7fd f8c5 	bl	8001f34 <LL_ADC_REG_SetSequencerRanks.constprop.33>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004daa:	483f      	ldr	r0, [pc, #252]	; (8004ea8 <main+0x390>)
 8004dac:	f7fd f898 	bl	8001ee0 <LL_ADC_SetChannelSamplingTime.constprop.32>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_TEMPSENSOR);
 8004db0:	493e      	ldr	r1, [pc, #248]	; (8004eac <main+0x394>)
 8004db2:	4640      	mov	r0, r8
 8004db4:	f7fd f8be 	bl	8001f34 <LL_ADC_REG_SetSequencerRanks.constprop.33>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_TEMPSENSOR, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004db8:	483c      	ldr	r0, [pc, #240]	; (8004eac <main+0x394>)
 8004dba:	f7fd f891 	bl	8001ee0 <LL_ADC_SetChannelSamplingTime.constprop.32>
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 8004dbe:	68ab      	ldr	r3, [r5, #8]
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_VREFINT);
 8004dc0:	493b      	ldr	r1, [pc, #236]	; (8004eb0 <main+0x398>)
 8004dc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dc6:	60ab      	str	r3, [r5, #8]
 8004dc8:	f240 1005 	movw	r0, #261	; 0x105
 8004dcc:	f7fd f8b2 	bl	8001f34 <LL_ADC_REG_SetSequencerRanks.constprop.33>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004dd0:	4837      	ldr	r0, [pc, #220]	; (8004eb0 <main+0x398>)
 8004dd2:	f7fd f885 	bl	8001ee0 <LL_ADC_SetChannelSamplingTime.constprop.32>
 8004dd6:	68ab      	ldr	r3, [r5, #8]
	  delay_ms(100);
 8004dd8:	2064      	movs	r0, #100	; 0x64
 8004dda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dde:	60ab      	str	r3, [r5, #8]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004de0:	68ab      	ldr	r3, [r5, #8]
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	60ab      	str	r3, [r5, #8]
 8004de8:	f7fc f972 	bl	80010d0 <delay_ms>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8004dec:	68ab      	ldr	r3, [r5, #8]
 8004dee:	f043 0304 	orr.w	r3, r3, #4
 8004df2:	60ab      	str	r3, [r5, #8]
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8004df4:	68ac      	ldr	r4, [r5, #8]
	  while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0) {}
 8004df6:	f014 0404 	ands.w	r4, r4, #4
 8004dfa:	d1fb      	bne.n	8004df4 <main+0x2dc>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004dfc:	68ab      	ldr	r3, [r5, #8]
 8004dfe:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8004e02:	60ab      	str	r3, [r5, #8]
  InitLCD();
 8004e04:	f7fc ff19 	bl	8001c3a <InitLCD>
  SystemCoreClockUpdate();
 8004e08:	f000 fb00 	bl	800540c <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock/1000);//SystemCoreClock/1000 - 1mc
 8004e0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e10:	4b28      	ldr	r3, [pc, #160]	; (8004eb4 <main+0x39c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e1e:	d208      	bcs.n	8004e32 <main+0x31a>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e20:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e22:	4a25      	ldr	r2, [pc, #148]	; (8004eb8 <main+0x3a0>)
 8004e24:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e26:	4b25      	ldr	r3, [pc, #148]	; (8004ebc <main+0x3a4>)
 8004e28:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e2c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e2e:	6094      	str	r4, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e30:	6013      	str	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS15;//Led on Board ON
 8004e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	LoggingData.RecordsQuantity= 0;
 8004e36:	2400      	movs	r4, #0
	GPIOA->BSRR =  GPIO_BSRR_BS15;//Led on Board ON
 8004e38:	6133      	str	r3, [r6, #16]
	LoggingData.RecordsQuantity= 0;
 8004e3a:	4d21      	ldr	r5, [pc, #132]	; (8004ec0 <main+0x3a8>)
	OFF();
 8004e3c:	f7fe fae6 	bl	800340c <OFF>
	PrintToLCD(Version);
 8004e40:	4820      	ldr	r0, [pc, #128]	; (8004ec4 <main+0x3ac>)
	LoggingData.RecordsQuantity= 0;
 8004e42:	602c      	str	r4, [r5, #0]
	PrintToLCD(Version);
 8004e44:	f7fc feea 	bl	8001c1c <PrintToLCD>
	InfoToUARTBeforeStart();
 8004e48:	f7fc f952 	bl	80010f0 <InfoToUARTBeforeStart>
	logInfo(Version);
 8004e4c:	481e      	ldr	r0, [pc, #120]	; (8004ec8 <main+0x3b0>)
 8004e4e:	f000 fb77 	bl	8005540 <printToBufferWithoutEndUART1>
 8004e52:	481c      	ldr	r0, [pc, #112]	; (8004ec4 <main+0x3ac>)
 8004e54:	f000 fb0a 	bl	800546c <printToBufferUART1>
	SetSymbols();
 8004e58:	f7fc fe08 	bl	8001a6c <SetSymbols>
	lcd_set_xy(0,0);
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	4620      	mov	r0, r4
 8004e60:	e034      	b.n	8004ecc <main+0x3b4>
 8004e62:	bf00      	nop
 8004e64:	40010c00 	.word	0x40010c00
 8004e68:	40010800 	.word	0x40010800
 8004e6c:	04fc00fc 	.word	0x04fc00fc
 8004e70:	04890089 	.word	0x04890089
 8004e74:	40021000 	.word	0x40021000
 8004e78:	e000e100 	.word	0xe000e100
 8004e7c:	04020002 	.word	0x04020002
 8004e80:	04040004 	.word	0x04040004
 8004e84:	40013800 	.word	0x40013800
 8004e88:	40020008 	.word	0x40020008
 8004e8c:	4001244c 	.word	0x4001244c
 8004e90:	2000086c 	.word	0x2000086c
 8004e94:	02300001 	.word	0x02300001
 8004e98:	02600002 	.word	0x02600002
 8004e9c:	02900003 	.word	0x02900003
 8004ea0:	02c00004 	.word	0x02c00004
 8004ea4:	02f00005 	.word	0x02f00005
 8004ea8:	03200006 	.word	0x03200006
 8004eac:	81200010 	.word	0x81200010
 8004eb0:	81500011 	.word	0x81500011
 8004eb4:	2000028c 	.word	0x2000028c
 8004eb8:	e000e010 	.word	0xe000e010
 8004ebc:	e000ed00 	.word	0xe000ed00
 8004ec0:	20000888 	.word	0x20000888
 8004ec4:	2000027a 	.word	0x2000027a
 8004ec8:	0800606e 	.word	0x0800606e
 8004ecc:	f7fc fe26 	bl	8001b1c <lcd_set_xy>
	delay_ms(1000);
 8004ed0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ed4:	f7fc f8fc 	bl	80010d0 <delay_ms>
	flash_read_block();
 8004ed8:	f7fb fa2a 	bl	8000330 <flash_read_block>
	if (LoggingData.RecordsQuantity>=MAX_LOG_ITEMS) LoggingData.RecordsQuantity = 0;
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	2b17      	cmp	r3, #23
 8004ee0:	bf88      	it	hi
 8004ee2:	602c      	strhi	r4, [r5, #0]
	EEpromReadStatus = ReadFromFlash();
 8004ee4:	f7fb fd30 	bl	8000948 <ReadFromFlash>
	if (EEpromReadStatus==0)
 8004ee8:	4604      	mov	r4, r0
 8004eea:	2800      	cmp	r0, #0
 8004eec:	d167      	bne.n	8004fbe <main+0x4a6>
		delay_ms(1000);
 8004eee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ef2:	f7fc f8ed 	bl	80010d0 <delay_ms>
		EEpromReadStatus = ReadFromFlash();
 8004ef6:	f7fb fd27 	bl	8000948 <ReadFromFlash>
 8004efa:	4604      	mov	r4, r0
		logInfo("Read from EEprom - FAIL");
 8004efc:	48b1      	ldr	r0, [pc, #708]	; (80051c4 <main+0x6ac>)
 8004efe:	f000 fb1f 	bl	8005540 <printToBufferWithoutEndUART1>
 8004f02:	48b1      	ldr	r0, [pc, #708]	; (80051c8 <main+0x6b0>)
 8004f04:	f000 fab2 	bl	800546c <printToBufferUART1>
	if (EEpromReadStatus == 0)
 8004f08:	2c00      	cmp	r4, #0
 8004f0a:	d158      	bne.n	8004fbe <main+0x4a6>
		PrintToLCD("EEprom Read FAIL");
 8004f0c:	48af      	ldr	r0, [pc, #700]	; (80051cc <main+0x6b4>)
 8004f0e:	f7fc fe85 	bl	8001c1c <PrintToLCD>
		delay_ms(4000);
 8004f12:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004f16:	f7fc f8db 	bl	80010d0 <delay_ms>
		WriteInLOG("EEprmReadFAIL");
 8004f1a:	48ad      	ldr	r0, [pc, #692]	; (80051d0 <main+0x6b8>)
 8004f1c:	f7fb ff3e 	bl	8000d9c <WriteInLOG>
		logInfo("Read from EEprom - FAIL");
 8004f20:	48a8      	ldr	r0, [pc, #672]	; (80051c4 <main+0x6ac>)
 8004f22:	f000 fb0d 	bl	8005540 <printToBufferWithoutEndUART1>
 8004f26:	48a8      	ldr	r0, [pc, #672]	; (80051c8 <main+0x6b0>)
		logInfo("Read from EEprom - SUCCESS");
 8004f28:	f000 faa0 	bl	800546c <printToBufferUART1>
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 8004f2c:	4da9      	ldr	r5, [pc, #676]	; (80051d4 <main+0x6bc>)
 8004f2e:	4baa      	ldr	r3, [pc, #680]	; (80051d8 <main+0x6c0>)
 8004f30:	692a      	ldr	r2, [r5, #16]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004f32:	4caa      	ldr	r4, [pc, #680]	; (80051dc <main+0x6c4>)
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 8004f34:	601a      	str	r2, [r3, #0]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004f36:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004f3a:	6922      	ldr	r2, [r4, #16]
  OutStateAfterPowerUp = SettingsData.Option2;
 8004f3c:	4ea8      	ldr	r6, [pc, #672]	; (80051e0 <main+0x6c8>)
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004f3e:	4353      	muls	r3, r2
 8004f40:	4aa8      	ldr	r2, [pc, #672]	; (80051e4 <main+0x6cc>)
 8004f42:	6013      	str	r3, [r2, #0]
  SelectedOptionValue = SettingsData.Option1;
 8004f44:	68a2      	ldr	r2, [r4, #8]
 8004f46:	4ba8      	ldr	r3, [pc, #672]	; (80051e8 <main+0x6d0>)
 8004f48:	601a      	str	r2, [r3, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 8004f4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f4c:	4aa7      	ldr	r2, [pc, #668]	; (80051ec <main+0x6d4>)
  OutStateAfterPowerUp = SettingsData.Option2;
 8004f4e:	6033      	str	r3, [r6, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 8004f50:	6013      	str	r3, [r2, #0]
	Generation_Coefficients_R_A_B();
 8004f52:	f7fb fecb 	bl	8000cec <Generation_Coefficients_R_A_B>
	delay_ms(1000);
 8004f56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f5a:	f7fc f8b9 	bl	80010d0 <delay_ms>
  lcd_clear();
 8004f5e:	f7fc fe4b 	bl	8001bf8 <lcd_clear>
	Menu_SetGenericWriteCallback(Generic_Write);
 8004f62:	48a3      	ldr	r0, [pc, #652]	; (80051f0 <main+0x6d8>)
 8004f64:	f7fc fcce 	bl	8001904 <Menu_SetGenericWriteCallback>
	if (SettingsData.Option1 == 1)
 8004f68:	68a3      	ldr	r3, [r4, #8]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d12e      	bne.n	8004fcc <main+0x4b4>
		Menu_Navigate(&Menu_2_1);
 8004f6e:	48a1      	ldr	r0, [pc, #644]	; (80051f4 <main+0x6dc>)
		Menu_Navigate(&Menu_3_1);
 8004f70:	f7fc fcae 	bl	80018d0 <Menu_Navigate>
	  logDebugD("U out ",U_OUT,0);
 8004f74:	f04f 0900 	mov.w	r9, #0
 8004f78:	4f9f      	ldr	r7, [pc, #636]	; (80051f8 <main+0x6e0>)
 8004f7a:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8005274 <main+0x75c>
 8004f7e:	4638      	mov	r0, r7
 8004f80:	f000 fade 	bl	8005540 <printToBufferWithoutEndUART1>
 8004f84:	f8b8 1000 	ldrh.w	r1, [r8]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	489c      	ldr	r0, [pc, #624]	; (80051fc <main+0x6e4>)
 8004f8c:	f000 fb1c 	bl	80055c8 <printToBufferUART1D>
	  logDebugD("U ps ",U_PS,0);
 8004f90:	4638      	mov	r0, r7
 8004f92:	f000 fad5 	bl	8005540 <printToBufferWithoutEndUART1>
 8004f96:	4b9a      	ldr	r3, [pc, #616]	; (8005200 <main+0x6e8>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	8819      	ldrh	r1, [r3, #0]
 8004f9c:	4899      	ldr	r0, [pc, #612]	; (8005204 <main+0x6ec>)
 8004f9e:	f000 fb13 	bl	80055c8 <printToBufferUART1D>
  	Blink_message_counter++;
 8004fa2:	4a99      	ldr	r2, [pc, #612]	; (8005208 <main+0x6f0>)
 8004fa4:	7813      	ldrb	r3, [r2, #0]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	7013      	strb	r3, [r2, #0]
  	Button=BUT_GetKey();
 8004faa:	f7fd fb17 	bl	80025dc <BUT_GetKey>
		switch (Button)
 8004fae:	1e43      	subs	r3, r0, #1
  	Button=BUT_GetKey();
 8004fb0:	4604      	mov	r4, r0
		switch (Button)
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d827      	bhi.n	8005006 <main+0x4ee>
 8004fb6:	e8df f003 	tbb	[pc, r3]
 8004fba:	4a21      	.short	0x4a21
 8004fbc:	554e      	.short	0x554e
	if (EEpromReadStatus == 1)
 8004fbe:	2c01      	cmp	r4, #1
 8004fc0:	d1b4      	bne.n	8004f2c <main+0x414>
		logInfo("Read from EEprom - SUCCESS");
 8004fc2:	4880      	ldr	r0, [pc, #512]	; (80051c4 <main+0x6ac>)
 8004fc4:	f000 fabc 	bl	8005540 <printToBufferWithoutEndUART1>
 8004fc8:	4890      	ldr	r0, [pc, #576]	; (800520c <main+0x6f4>)
 8004fca:	e7ad      	b.n	8004f28 <main+0x410>
	else if (SettingsData.Option1 == 2)
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d101      	bne.n	8004fd4 <main+0x4bc>
		Menu_Navigate(&Menu_3_1);
 8004fd0:	488f      	ldr	r0, [pc, #572]	; (8005210 <main+0x6f8>)
 8004fd2:	e7cd      	b.n	8004f70 <main+0x458>
	else if (SettingsData.Option1 == 3)
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d101      	bne.n	8004fdc <main+0x4c4>
		Menu_Navigate(&Menu_4_1);
 8004fd8:	488e      	ldr	r0, [pc, #568]	; (8005214 <main+0x6fc>)
 8004fda:	e7c9      	b.n	8004f70 <main+0x458>
	else if (SettingsData.Option1 == 4)
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d101      	bne.n	8004fe4 <main+0x4cc>
		Menu_Navigate(&Menu_5_1);
 8004fe0:	488d      	ldr	r0, [pc, #564]	; (8005218 <main+0x700>)
 8004fe2:	e7c5      	b.n	8004f70 <main+0x458>
	else if (SettingsData.Option1 == 5)
 8004fe4:	2b05      	cmp	r3, #5
 8004fe6:	d101      	bne.n	8004fec <main+0x4d4>
		Menu_Navigate(&Menu_6_1);
 8004fe8:	488c      	ldr	r0, [pc, #560]	; (800521c <main+0x704>)
 8004fea:	e7c1      	b.n	8004f70 <main+0x458>
	else if (SettingsData.Option1 == 6)
 8004fec:	2b06      	cmp	r3, #6
 8004fee:	d101      	bne.n	8004ff4 <main+0x4dc>
		Menu_Navigate(&Menu_7_1);
 8004ff0:	488b      	ldr	r0, [pc, #556]	; (8005220 <main+0x708>)
 8004ff2:	e7bd      	b.n	8004f70 <main+0x458>
	else if (SettingsData.Option1 == 7)
 8004ff4:	2b07      	cmp	r3, #7
 8004ff6:	d1ba      	bne.n	8004f6e <main+0x456>
		Menu_Navigate(&Menu_8_1);
 8004ff8:	488a      	ldr	r0, [pc, #552]	; (8005224 <main+0x70c>)
 8004ffa:	e7b9      	b.n	8004f70 <main+0x458>
				Menu_Navigate(MENU_PREVIOUS);
 8004ffc:	f7fc fc62 	bl	80018c4 <Menu_GetCurrentMenu>
 8005000:	6840      	ldr	r0, [r0, #4]
				Menu_Navigate(MENU_PARENT);
 8005002:	f7fc fc65 	bl	80018d0 <Menu_Navigate>
		if (Menu_GetCurrentMenu() == &Menu_2_1)
 8005006:	f7fc fc5d 	bl	80018c4 <Menu_GetCurrentMenu>
 800500a:	4b7a      	ldr	r3, [pc, #488]	; (80051f4 <main+0x6dc>)
 800500c:	f8df a268 	ldr.w	sl, [pc, #616]	; 8005278 <main+0x760>
 8005010:	4283      	cmp	r3, r0
 8005012:	d12b      	bne.n	800506c <main+0x554>
			MenuPowerSupply(Button);
 8005014:	4620      	mov	r0, r4
 8005016:	f7fd fb73 	bl	8002700 <MenuPowerSupply>
		if (EnterInMenu_Status == 0)
 800501a:	f89a 3000 	ldrb.w	r3, [sl]
 800501e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8005022:	b983      	cbnz	r3, 8005046 <main+0x52e>
			OFF();
 8005024:	f7fe f9f2 	bl	800340c <OFF>
			InitiStatus = 0;
 8005028:	4b7f      	ldr	r3, [pc, #508]	; (8005228 <main+0x710>)
 800502a:	7019      	strb	r1, [r3, #0]
			CountShow = 0;
 800502c:	4b7f      	ldr	r3, [pc, #508]	; (800522c <main+0x714>)
 800502e:	7019      	strb	r1, [r3, #0]
			SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 8005030:	4b7f      	ldr	r3, [pc, #508]	; (8005230 <main+0x718>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60ab      	str	r3, [r5, #8]
			DischargeTimeSec_Previous = DischargeTimeSec;
 8005036:	4b7f      	ldr	r3, [pc, #508]	; (8005234 <main+0x71c>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4b7f      	ldr	r3, [pc, #508]	; (8005238 <main+0x720>)
 800503c:	601a      	str	r2, [r3, #0]
			ChargeDischargeState = 0;
 800503e:	4b7f      	ldr	r3, [pc, #508]	; (800523c <main+0x724>)
 8005040:	7019      	strb	r1, [r3, #0]
			OutStateAfterPowerUp = 1;
 8005042:	2301      	movs	r3, #1
 8005044:	6033      	str	r3, [r6, #0]
      delay_ms(100);
 8005046:	2064      	movs	r0, #100	; 0x64
 8005048:	f7fc f842 	bl	80010d0 <delay_ms>
  {
 800504c:	e797      	b.n	8004f7e <main+0x466>
				Menu_Navigate(MENU_NEXT);
 800504e:	f7fc fc39 	bl	80018c4 <Menu_GetCurrentMenu>
 8005052:	6800      	ldr	r0, [r0, #0]
 8005054:	e7d5      	b.n	8005002 <main+0x4ea>
				Menu_SelectItem(KEY_NEXT);
 8005056:	2002      	movs	r0, #2
 8005058:	f7fc fc5e 	bl	8001918 <Menu_SelectItem>
				Menu_Navigate(MENU_CHILD);
 800505c:	f7fc fc32 	bl	80018c4 <Menu_GetCurrentMenu>
 8005060:	68c0      	ldr	r0, [r0, #12]
 8005062:	e7ce      	b.n	8005002 <main+0x4ea>
				Menu_Navigate(MENU_PARENT);
 8005064:	f7fc fc2e 	bl	80018c4 <Menu_GetCurrentMenu>
 8005068:	6880      	ldr	r0, [r0, #8]
 800506a:	e7ca      	b.n	8005002 <main+0x4ea>
		else if (Menu_GetCurrentMenu() == &Menu_3_1)
 800506c:	f7fc fc2a 	bl	80018c4 <Menu_GetCurrentMenu>
 8005070:	4b67      	ldr	r3, [pc, #412]	; (8005210 <main+0x6f8>)
 8005072:	4283      	cmp	r3, r0
 8005074:	d103      	bne.n	800507e <main+0x566>
			MenuLoad(Button);
 8005076:	4620      	mov	r0, r4
 8005078:	f7fd fd88 	bl	8002b8c <MenuLoad>
 800507c:	e7cd      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_4_1)
 800507e:	f7fc fc21 	bl	80018c4 <Menu_GetCurrentMenu>
 8005082:	4b64      	ldr	r3, [pc, #400]	; (8005214 <main+0x6fc>)
 8005084:	4283      	cmp	r3, r0
 8005086:	d103      	bne.n	8005090 <main+0x578>
			MenuChargeCC_CV(Button);
 8005088:	4620      	mov	r0, r4
 800508a:	f7fe f9c7 	bl	800341c <MenuChargeCC_CV>
 800508e:	e7c4      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_5_1)
 8005090:	f7fc fc18 	bl	80018c4 <Menu_GetCurrentMenu>
 8005094:	4b60      	ldr	r3, [pc, #384]	; (8005218 <main+0x700>)
 8005096:	4283      	cmp	r3, r0
 8005098:	d103      	bne.n	80050a2 <main+0x58a>
			MenuChargeAdapt(Button);
 800509a:	4620      	mov	r0, r4
 800509c:	f7fe fb2e 	bl	80036fc <MenuChargeAdapt>
 80050a0:	e7bb      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_6_1)
 80050a2:	f7fc fc0f 	bl	80018c4 <Menu_GetCurrentMenu>
 80050a6:	4b5d      	ldr	r3, [pc, #372]	; (800521c <main+0x704>)
 80050a8:	4283      	cmp	r3, r0
 80050aa:	d103      	bne.n	80050b4 <main+0x59c>
			MenuDisCharge(Button);
 80050ac:	4620      	mov	r0, r4
 80050ae:	f7fe fcdd 	bl	8003a6c <MenuDisCharge>
 80050b2:	e7b2      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_6_1a)
 80050b4:	f7fc fc06 	bl	80018c4 <Menu_GetCurrentMenu>
 80050b8:	4b61      	ldr	r3, [pc, #388]	; (8005240 <main+0x728>)
 80050ba:	4283      	cmp	r3, r0
 80050bc:	d103      	bne.n	80050c6 <main+0x5ae>
			MenuCheckingCapacity(Button);
 80050be:	4620      	mov	r0, r4
 80050c0:	f7fe fe30 	bl	8003d24 <MenuCheckingCapacity>
 80050c4:	e7a9      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_7_1)
 80050c6:	f7fc fbfd 	bl	80018c4 <Menu_GetCurrentMenu>
 80050ca:	4b55      	ldr	r3, [pc, #340]	; (8005220 <main+0x708>)
 80050cc:	4283      	cmp	r3, r0
 80050ce:	d103      	bne.n	80050d8 <main+0x5c0>
			MenuTraining_new(Button);
 80050d0:	4620      	mov	r0, r4
 80050d2:	f7fd fe51 	bl	8002d78 <MenuTraining_new>
 80050d6:	e7a0      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_8_1)
 80050d8:	f7fc fbf4 	bl	80018c4 <Menu_GetCurrentMenu>
 80050dc:	4b51      	ldr	r3, [pc, #324]	; (8005224 <main+0x70c>)
 80050de:	4283      	cmp	r3, r0
 80050e0:	d103      	bne.n	80050ea <main+0x5d2>
			MenuSwing(Button);
 80050e2:	4620      	mov	r0, r4
 80050e4:	f7fe f89e 	bl	8003224 <MenuSwing>
 80050e8:	e797      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_8a_1)
 80050ea:	f7fc fbeb 	bl	80018c4 <Menu_GetCurrentMenu>
 80050ee:	4b55      	ldr	r3, [pc, #340]	; (8005244 <main+0x72c>)
 80050f0:	4283      	cmp	r3, r0
 80050f2:	d103      	bne.n	80050fc <main+0x5e4>
					MenuBatterySimilation(Button);
 80050f4:	4620      	mov	r0, r4
 80050f6:	f7fd fd9f 	bl	8002c38 <MenuBatterySimilation>
 80050fa:	e78e      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_9_1)
 80050fc:	f7fc fbe2 	bl	80018c4 <Menu_GetCurrentMenu>
 8005100:	4b51      	ldr	r3, [pc, #324]	; (8005248 <main+0x730>)
 8005102:	4283      	cmp	r3, r0
 8005104:	d103      	bne.n	800510e <main+0x5f6>
			MenuDIAGNOSTIC(Button);
 8005106:	4620      	mov	r0, r4
 8005108:	f7ff f988 	bl	800441c <MenuDIAGNOSTIC>
 800510c:	e785      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_11_1)
 800510e:	f7fc fbd9 	bl	80018c4 <Menu_GetCurrentMenu>
 8005112:	4b4e      	ldr	r3, [pc, #312]	; (800524c <main+0x734>)
 8005114:	4283      	cmp	r3, r0
 8005116:	d103      	bne.n	8005120 <main+0x608>
			MenuLog(Button);
 8005118:	4620      	mov	r0, r4
 800511a:	f7fc ff4f 	bl	8001fbc <MenuLog>
 800511e:	e77c      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_10_2_1)
 8005120:	f7fc fbd0 	bl	80018c4 <Menu_GetCurrentMenu>
 8005124:	4b4a      	ldr	r3, [pc, #296]	; (8005250 <main+0x738>)
 8005126:	4283      	cmp	r3, r0
 8005128:	d103      	bne.n	8005132 <main+0x61a>
			MenuCalibration_CURRENT_Load_to_0(Button);
 800512a:	4620      	mov	r0, r4
 800512c:	f7fc ffb6 	bl	800209c <MenuCalibration_CURRENT_Load_to_0>
 8005130:	e773      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_10_1_1)
 8005132:	f7fc fbc7 	bl	80018c4 <Menu_GetCurrentMenu>
 8005136:	4b47      	ldr	r3, [pc, #284]	; (8005254 <main+0x73c>)
 8005138:	4283      	cmp	r3, r0
 800513a:	d103      	bne.n	8005144 <main+0x62c>
			MenuCalibration_CURRENT_Out_to_0(Button);
 800513c:	4620      	mov	r0, r4
 800513e:	f7fc ff89 	bl	8002054 <MenuCalibration_CURRENT_Out_to_0>
 8005142:	e76a      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_10_4_1)
 8005144:	f7fc fbbe 	bl	80018c4 <Menu_GetCurrentMenu>
 8005148:	4b43      	ldr	r3, [pc, #268]	; (8005258 <main+0x740>)
 800514a:	4283      	cmp	r3, r0
 800514c:	d103      	bne.n	8005156 <main+0x63e>
			MenuCalibration_CURRENT_Load(Button);
 800514e:	4620      	mov	r0, r4
 8005150:	f7fd fca8 	bl	8002aa4 <MenuCalibration_CURRENT_Load>
 8005154:	e761      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_10_3_1)
 8005156:	f7fc fbb5 	bl	80018c4 <Menu_GetCurrentMenu>
 800515a:	4b40      	ldr	r3, [pc, #256]	; (800525c <main+0x744>)
 800515c:	4283      	cmp	r3, r0
 800515e:	d103      	bne.n	8005168 <main+0x650>
			MenuCalibration_CURRENT_Out(Button);
 8005160:	4620      	mov	r0, r4
 8005162:	f7fd fb39 	bl	80027d8 <MenuCalibration_CURRENT_Out>
 8005166:	e758      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_10_7_1)
 8005168:	f7fc fbac 	bl	80018c4 <Menu_GetCurrentMenu>
 800516c:	4b3c      	ldr	r3, [pc, #240]	; (8005260 <main+0x748>)
 800516e:	4283      	cmp	r3, r0
 8005170:	d103      	bne.n	800517a <main+0x662>
			MenuCalibration_VoltageIn(Button);
 8005172:	4620      	mov	r0, r4
 8005174:	f7fd fbd8 	bl	8002928 <MenuCalibration_VoltageIn>
 8005178:	e74f      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_10_6_1)
 800517a:	f7fc fba3 	bl	80018c4 <Menu_GetCurrentMenu>
 800517e:	4b39      	ldr	r3, [pc, #228]	; (8005264 <main+0x74c>)
 8005180:	4283      	cmp	r3, r0
 8005182:	d103      	bne.n	800518c <main+0x674>
			MenuCalibration_VoltageOut(Button);
 8005184:	4620      	mov	r0, r4
 8005186:	f7fd fb97 	bl	80028b8 <MenuCalibration_VoltageOut>
 800518a:	e746      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_10_5_1)
 800518c:	f7fc fb9a 	bl	80018c4 <Menu_GetCurrentMenu>
 8005190:	4b35      	ldr	r3, [pc, #212]	; (8005268 <main+0x750>)
 8005192:	4283      	cmp	r3, r0
 8005194:	d103      	bne.n	800519e <main+0x686>
			MenuCalibration_VoltagePS(Button);
 8005196:	4620      	mov	r0, r4
 8005198:	f7fd fb56 	bl	8002848 <MenuCalibration_VoltagePS>
 800519c:	e73d      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_10_8_1)
 800519e:	f7fc fb91 	bl	80018c4 <Menu_GetCurrentMenu>
 80051a2:	4b32      	ldr	r3, [pc, #200]	; (800526c <main+0x754>)
 80051a4:	4283      	cmp	r3, r0
 80051a6:	d103      	bne.n	80051b0 <main+0x698>
			MenuCalibration_Resist_Comp_5V1A(Button);
 80051a8:	4620      	mov	r0, r4
 80051aa:	f7fd fbf5 	bl	8002998 <MenuCalibration_Resist_Comp_5V1A>
 80051ae:	e734      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_10_9_1)
 80051b0:	f7fc fb88 	bl	80018c4 <Menu_GetCurrentMenu>
 80051b4:	4b2e      	ldr	r3, [pc, #184]	; (8005270 <main+0x758>)
 80051b6:	4283      	cmp	r3, r0
 80051b8:	d160      	bne.n	800527c <main+0x764>
			MenuCalibration_BackToFactory(Button);
 80051ba:	4620      	mov	r0, r4
 80051bc:	f7fc ff92 	bl	80020e4 <MenuCalibration_BackToFactory>
 80051c0:	e72b      	b.n	800501a <main+0x502>
 80051c2:	bf00      	nop
 80051c4:	0800606e 	.word	0x0800606e
 80051c8:	0800715b 	.word	0x0800715b
 80051cc:	08007173 	.word	0x08007173
 80051d0:	08007184 	.word	0x08007184
 80051d4:	200000f4 	.word	0x200000f4
 80051d8:	2000078c 	.word	0x2000078c
 80051dc:	20000154 	.word	0x20000154
 80051e0:	20000274 	.word	0x20000274
 80051e4:	20000a28 	.word	0x20000a28
 80051e8:	20000a2c 	.word	0x20000a2c
 80051ec:	20000a24 	.word	0x20000a24
 80051f0:	08001e01 	.word	0x08001e01
 80051f4:	08006e10 	.word	0x08006e10
 80051f8:	08006059 	.word	0x08006059
 80051fc:	08007192 	.word	0x08007192
 8005200:	20000884 	.word	0x20000884
 8005204:	08007199 	.word	0x08007199
 8005208:	20000791 	.word	0x20000791
 800520c:	08005f94 	.word	0x08005f94
 8005210:	08006e68 	.word	0x08006e68
 8005214:	08006ec0 	.word	0x08006ec0
 8005218:	08006f18 	.word	0x08006f18
 800521c:	08006f70 	.word	0x08006f70
 8005220:	08007020 	.word	0x08007020
 8005224:	08007078 	.word	0x08007078
 8005228:	200007a9 	.word	0x200007a9
 800522c:	20000799 	.word	0x20000799
 8005230:	20000788 	.word	0x20000788
 8005234:	200007a0 	.word	0x200007a0
 8005238:	200007a4 	.word	0x200007a4
 800523c:	20000792 	.word	0x20000792
 8005240:	08006f9c 	.word	0x08006f9c
 8005244:	080070d0 	.word	0x080070d0
 8005248:	08007128 	.word	0x08007128
 800524c:	08006a74 	.word	0x08006a74
 8005250:	080067e4 	.word	0x080067e4
 8005254:	0800678c 	.word	0x0800678c
 8005258:	08006894 	.word	0x08006894
 800525c:	0800683c 	.word	0x0800683c
 8005260:	0800699c 	.word	0x0800699c
 8005264:	08006944 	.word	0x08006944
 8005268:	080068ec 	.word	0x080068ec
 800526c:	080069e4 	.word	0x080069e4
 8005270:	08006a2c 	.word	0x08006a2c
 8005274:	2000087e 	.word	0x2000087e
 8005278:	200007a8 	.word	0x200007a8
		else if (Menu_GetCurrentMenu() == &Menu_1_1_1)
 800527c:	f7fc fb22 	bl	80018c4 <Menu_GetCurrentMenu>
 8005280:	4b28      	ldr	r3, [pc, #160]	; (8005324 <main+0x80c>)
 8005282:	4283      	cmp	r3, r0
 8005284:	d103      	bne.n	800528e <main+0x776>
			MenuSettingsChargeTime(Button);
 8005286:	4620      	mov	r0, r4
 8005288:	f7fc ff88 	bl	800219c <MenuSettingsChargeTime>
 800528c:	e6c5      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_1_1_1a)
 800528e:	f7fc fb19 	bl	80018c4 <Menu_GetCurrentMenu>
 8005292:	4b25      	ldr	r3, [pc, #148]	; (8005328 <main+0x810>)
 8005294:	4283      	cmp	r3, r0
 8005296:	d103      	bne.n	80052a0 <main+0x788>
			MenuSettingsBatteryType(Button);
 8005298:	4620      	mov	r0, r4
 800529a:	f7fc ffa5 	bl	80021e8 <MenuSettingsBatteryType>
 800529e:	e6bc      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_1_2_1)
 80052a0:	f7fc fb10 	bl	80018c4 <Menu_GetCurrentMenu>
 80052a4:	4b21      	ldr	r3, [pc, #132]	; (800532c <main+0x814>)
 80052a6:	4283      	cmp	r3, r0
 80052a8:	d103      	bne.n	80052b2 <main+0x79a>
			MenuSettingsLowVolt(Button);
 80052aa:	4620      	mov	r0, r4
 80052ac:	f7fd f80e 	bl	80022cc <MenuSettingsLowVolt>
 80052b0:	e6b3      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_1_3_1)
 80052b2:	f7fc fb07 	bl	80018c4 <Menu_GetCurrentMenu>
 80052b6:	4b1e      	ldr	r3, [pc, #120]	; (8005330 <main+0x818>)
 80052b8:	4283      	cmp	r3, r0
 80052ba:	d103      	bne.n	80052c4 <main+0x7ac>
			MenuSettingsMaxVolt(Button);
 80052bc:	4620      	mov	r0, r4
 80052be:	f7fd f827 	bl	8002310 <MenuSettingsMaxVolt>
 80052c2:	e6aa      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_1_4_1)
 80052c4:	f7fc fafe 	bl	80018c4 <Menu_GetCurrentMenu>
 80052c8:	4b1a      	ldr	r3, [pc, #104]	; (8005334 <main+0x81c>)
 80052ca:	4283      	cmp	r3, r0
 80052cc:	d103      	bne.n	80052d6 <main+0x7be>
			MenuSettingsSwngChrgTime(Button);
 80052ce:	4620      	mov	r0, r4
 80052d0:	f7fd f840 	bl	8002354 <MenuSettingsSwngChrgTime>
 80052d4:	e6a1      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_1_5_1)
 80052d6:	f7fc faf5 	bl	80018c4 <Menu_GetCurrentMenu>
 80052da:	4b17      	ldr	r3, [pc, #92]	; (8005338 <main+0x820>)
 80052dc:	4283      	cmp	r3, r0
 80052de:	d103      	bne.n	80052e8 <main+0x7d0>
			MenuSettingsSwngDChrgTime(Button);
 80052e0:	4620      	mov	r0, r4
 80052e2:	f7fd f855 	bl	8002390 <MenuSettingsSwngDChrgTime>
 80052e6:	e698      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_1_6_1)
 80052e8:	f7fc faec 	bl	80018c4 <Menu_GetCurrentMenu>
 80052ec:	4b13      	ldr	r3, [pc, #76]	; (800533c <main+0x824>)
 80052ee:	4283      	cmp	r3, r0
 80052f0:	d103      	bne.n	80052fa <main+0x7e2>
			MenuSettingsChargeAddapt(Button);
 80052f2:	4620      	mov	r0, r4
 80052f4:	f7fd f86a 	bl	80023cc <MenuSettingsChargeAddapt>
 80052f8:	e68f      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_1_S_1)
 80052fa:	f7fc fae3 	bl	80018c4 <Menu_GetCurrentMenu>
 80052fe:	4b10      	ldr	r3, [pc, #64]	; (8005340 <main+0x828>)
 8005300:	4283      	cmp	r3, r0
 8005302:	d103      	bne.n	800530c <main+0x7f4>
			MenuSettingsSaveMenuPosWhenOFF(Button);
 8005304:	4620      	mov	r0, r4
 8005306:	f7fd f8bd 	bl	8002484 <MenuSettingsSaveMenuPosWhenOFF>
 800530a:	e686      	b.n	800501a <main+0x502>
		else if (Menu_GetCurrentMenu() == &Menu_1_SO_1)
 800530c:	f7fc fada 	bl	80018c4 <Menu_GetCurrentMenu>
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <main+0x82c>)
 8005312:	4283      	cmp	r3, r0
 8005314:	d103      	bne.n	800531e <main+0x806>
			MenuSettingsOutAfterPowerUp(Button);
 8005316:	4620      	mov	r0, r4
 8005318:	f7fd f8fa 	bl	8002510 <MenuSettingsOutAfterPowerUp>
 800531c:	e67d      	b.n	800501a <main+0x502>
		else EnterInMenu_Status = 0;
 800531e:	f88a 9000 	strb.w	r9, [sl]
 8005322:	e67a      	b.n	800501a <main+0x502>
 8005324:	08006acc 	.word	0x08006acc
 8005328:	08006af8 	.word	0x08006af8
 800532c:	08006b7c 	.word	0x08006b7c
 8005330:	08006bd4 	.word	0x08006bd4
 8005334:	08006c2c 	.word	0x08006c2c
 8005338:	08006c84 	.word	0x08006c84
 800533c:	08006cdc 	.word	0x08006cdc
 8005340:	08006db8 	.word	0x08006db8
 8005344:	08006d8c 	.word	0x08006d8c

08005348 <HAL_MspInit>:
 8005348:	4b0e      	ldr	r3, [pc, #56]	; (8005384 <HAL_MspInit+0x3c>)
 800534a:	b082      	sub	sp, #8
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	619a      	str	r2, [r3, #24]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	f002 0201 	and.w	r2, r2, #1
 800535a:	9200      	str	r2, [sp, #0]
 800535c:	9a00      	ldr	r2, [sp, #0]
 800535e:	69da      	ldr	r2, [r3, #28]
 8005360:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005364:	61da      	str	r2, [r3, #28]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	4a07      	ldr	r2, [pc, #28]	; (8005388 <HAL_MspInit+0x40>)
 800536a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536e:	9301      	str	r3, [sp, #4]
 8005370:	9b01      	ldr	r3, [sp, #4]
 8005372:	6853      	ldr	r3, [r2, #4]
 8005374:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005378:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800537c:	6053      	str	r3, [r2, #4]
 800537e:	b002      	add	sp, #8
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40021000 	.word	0x40021000
 8005388:	40010000 	.word	0x40010000

0800538c <NMI_Handler>:
 800538c:	4770      	bx	lr

0800538e <HardFault_Handler>:
 800538e:	e7fe      	b.n	800538e <HardFault_Handler>

08005390 <MemManage_Handler>:
 8005390:	e7fe      	b.n	8005390 <MemManage_Handler>

08005392 <BusFault_Handler>:
 8005392:	e7fe      	b.n	8005392 <BusFault_Handler>

08005394 <UsageFault_Handler>:
 8005394:	e7fe      	b.n	8005394 <UsageFault_Handler>

08005396 <SVC_Handler>:
 8005396:	4770      	bx	lr

08005398 <DebugMon_Handler>:
 8005398:	4770      	bx	lr

0800539a <PendSV_Handler>:
 800539a:	4770      	bx	lr

0800539c <SysTick_Handler>:
 800539c:	b508      	push	{r3, lr}
 800539e:	f7ff faf3 	bl	8004988 <SysTick_Callback>
 80053a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80053a6:	f000 ba09 	b.w	80057bc <HAL_IncTick>

080053aa <DMA1_Channel1_IRQHandler>:
 80053aa:	4770      	bx	lr

080053ac <USART1_IRQHandler>:
 80053ac:	4914      	ldr	r1, [pc, #80]	; (8005400 <USART1_IRQHandler+0x54>)
 80053ae:	680b      	ldr	r3, [r1, #0]
 80053b0:	061b      	lsls	r3, r3, #24
 80053b2:	d524      	bpl.n	80053fe <USART1_IRQHandler+0x52>
 80053b4:	4b13      	ldr	r3, [pc, #76]	; (8005404 <USART1_IRQHandler+0x58>)
 80053b6:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80053ba:	b292      	uxth	r2, r2
 80053bc:	b1da      	cbz	r2, 80053f6 <USART1_IRQHandler+0x4a>
 80053be:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80053c2:	3a01      	subs	r2, #1
 80053c4:	b292      	uxth	r2, r2
 80053c6:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
 80053ca:	f8b3 2456 	ldrh.w	r2, [r3, #1110]	; 0x456
 80053ce:	b292      	uxth	r2, r2
 80053d0:	1c50      	adds	r0, r2, #1
 80053d2:	b280      	uxth	r0, r0
 80053d4:	f8a3 0456 	strh.w	r0, [r3, #1110]	; 0x456
 80053d8:	441a      	add	r2, r3
 80053da:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	604a      	str	r2, [r1, #4]
 80053e2:	f8b3 2456 	ldrh.w	r2, [r3, #1110]	; 0x456
 80053e6:	b292      	uxth	r2, r2
 80053e8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80053ec:	d107      	bne.n	80053fe <USART1_IRQHandler+0x52>
 80053ee:	2200      	movs	r2, #0
 80053f0:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
 80053f4:	4770      	bx	lr
 80053f6:	68cb      	ldr	r3, [r1, #12]
 80053f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053fc:	60cb      	str	r3, [r1, #12]
 80053fe:	4770      	bx	lr
 8005400:	40013800 	.word	0x40013800
 8005404:	200002c0 	.word	0x200002c0

08005408 <SystemInit>:
 8005408:	4770      	bx	lr
	...

0800540c <SystemCoreClockUpdate>:
 800540c:	4a12      	ldr	r2, [pc, #72]	; (8005458 <SystemCoreClockUpdate+0x4c>)
 800540e:	b510      	push	{r4, lr}
 8005410:	6853      	ldr	r3, [r2, #4]
 8005412:	4912      	ldr	r1, [pc, #72]	; (800545c <SystemCoreClockUpdate+0x50>)
 8005414:	f003 030c 	and.w	r3, r3, #12
 8005418:	2b08      	cmp	r3, #8
 800541a:	d00a      	beq.n	8005432 <SystemCoreClockUpdate+0x26>
 800541c:	4b10      	ldr	r3, [pc, #64]	; (8005460 <SystemCoreClockUpdate+0x54>)
 800541e:	600b      	str	r3, [r1, #0]
 8005420:	6853      	ldr	r3, [r2, #4]
 8005422:	4a10      	ldr	r2, [pc, #64]	; (8005464 <SystemCoreClockUpdate+0x58>)
 8005424:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005428:	5cd2      	ldrb	r2, [r2, r3]
 800542a:	680b      	ldr	r3, [r1, #0]
 800542c:	40d3      	lsrs	r3, r2
 800542e:	600b      	str	r3, [r1, #0]
 8005430:	bd10      	pop	{r4, pc}
 8005432:	6853      	ldr	r3, [r2, #4]
 8005434:	6850      	ldr	r0, [r2, #4]
 8005436:	f3c3 4383 	ubfx	r3, r3, #18, #4
 800543a:	03c0      	lsls	r0, r0, #15
 800543c:	bf41      	itttt	mi
 800543e:	6ad0      	ldrmi	r0, [r2, #44]	; 0x2c
 8005440:	4c07      	ldrmi	r4, [pc, #28]	; (8005460 <SystemCoreClockUpdate+0x54>)
 8005442:	f000 000f 	andmi.w	r0, r0, #15
 8005446:	3001      	addmi	r0, #1
 8005448:	bf4c      	ite	mi
 800544a:	fbb4 f0f0 	udivmi	r0, r4, r0
 800544e:	4806      	ldrpl	r0, [pc, #24]	; (8005468 <SystemCoreClockUpdate+0x5c>)
 8005450:	3302      	adds	r3, #2
 8005452:	4343      	muls	r3, r0
 8005454:	e7e3      	b.n	800541e <SystemCoreClockUpdate+0x12>
 8005456:	bf00      	nop
 8005458:	40021000 	.word	0x40021000
 800545c:	2000028c 	.word	0x2000028c
 8005460:	007a1200 	.word	0x007a1200
 8005464:	0800719f 	.word	0x0800719f
 8005468:	003d0900 	.word	0x003d0900

0800546c <printToBufferUART1>:
 800546c:	4a32      	ldr	r2, [pc, #200]	; (8005538 <printToBufferUART1+0xcc>)
 800546e:	b530      	push	{r4, r5, lr}
 8005470:	4613      	mov	r3, r2
 8005472:	f240 34c9 	movw	r4, #969	; 0x3c9
 8005476:	f8b2 1458 	ldrh.w	r1, [r2, #1112]	; 0x458
 800547a:	428c      	cmp	r4, r1
 800547c:	d3fb      	bcc.n	8005476 <printToBufferUART1+0xa>
 800547e:	492f      	ldr	r1, [pc, #188]	; (800553c <printToBufferUART1+0xd0>)
 8005480:	68ca      	ldr	r2, [r1, #12]
 8005482:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005486:	60ca      	str	r2, [r1, #12]
 8005488:	2100      	movs	r1, #0
 800548a:	7802      	ldrb	r2, [r0, #0]
 800548c:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8005490:	bb4a      	cbnz	r2, 80054e6 <printToBufferUART1+0x7a>
 8005492:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005496:	b292      	uxth	r2, r2
 8005498:	1c51      	adds	r1, r2, #1
 800549a:	b289      	uxth	r1, r1
 800549c:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 80054a0:	210a      	movs	r1, #10
 80054a2:	441a      	add	r2, r3
 80054a4:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
 80054a8:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80054ac:	b292      	uxth	r2, r2
 80054ae:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80054b2:	bf08      	it	eq
 80054b4:	f8a3 4454 	strheq.w	r4, [r3, #1108]	; 0x454
 80054b8:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80054bc:	3201      	adds	r2, #1
 80054be:	b292      	uxth	r2, r2
 80054c0:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
 80054c4:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 80054c8:	f8b3 1458 	ldrh.w	r1, [r3, #1112]	; 0x458
 80054cc:	4291      	cmp	r1, r2
 80054ce:	bf82      	ittt	hi
 80054d0:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
 80054d4:	b292      	uxthhi	r2, r2
 80054d6:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 80054da:	4a18      	ldr	r2, [pc, #96]	; (800553c <printToBufferUART1+0xd0>)
 80054dc:	68d3      	ldr	r3, [r2, #12]
 80054de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e2:	60d3      	str	r3, [r2, #12]
 80054e4:	bd30      	pop	{r4, r5, pc}
 80054e6:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80054ea:	1c44      	adds	r4, r0, #1
 80054ec:	b292      	uxth	r2, r2
 80054ee:	1c55      	adds	r5, r2, #1
 80054f0:	b2ad      	uxth	r5, r5
 80054f2:	f8a3 5454 	strh.w	r5, [r3, #1108]	; 0x454
 80054f6:	7800      	ldrb	r0, [r0, #0]
 80054f8:	441a      	add	r2, r3
 80054fa:	b2c0      	uxtb	r0, r0
 80054fc:	f882 006c 	strb.w	r0, [r2, #108]	; 0x6c
 8005500:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005504:	b292      	uxth	r2, r2
 8005506:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800550a:	bf08      	it	eq
 800550c:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
 8005510:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005514:	3201      	adds	r2, #1
 8005516:	b292      	uxth	r2, r2
 8005518:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
 800551c:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 8005520:	f8b3 0458 	ldrh.w	r0, [r3, #1112]	; 0x458
 8005524:	4290      	cmp	r0, r2
 8005526:	bf88      	it	hi
 8005528:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
 800552c:	4620      	mov	r0, r4
 800552e:	bf84      	itt	hi
 8005530:	b292      	uxthhi	r2, r2
 8005532:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 8005536:	e7a8      	b.n	800548a <printToBufferUART1+0x1e>
 8005538:	200002c0 	.word	0x200002c0
 800553c:	40013800 	.word	0x40013800

08005540 <printToBufferWithoutEndUART1>:
 8005540:	4a1f      	ldr	r2, [pc, #124]	; (80055c0 <printToBufferWithoutEndUART1+0x80>)
 8005542:	b530      	push	{r4, r5, lr}
 8005544:	4613      	mov	r3, r2
 8005546:	f240 34c9 	movw	r4, #969	; 0x3c9
 800554a:	f8b2 1458 	ldrh.w	r1, [r2, #1112]	; 0x458
 800554e:	428c      	cmp	r4, r1
 8005550:	d3fb      	bcc.n	800554a <printToBufferWithoutEndUART1+0xa>
 8005552:	491c      	ldr	r1, [pc, #112]	; (80055c4 <printToBufferWithoutEndUART1+0x84>)
 8005554:	68ca      	ldr	r2, [r1, #12]
 8005556:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800555a:	60ca      	str	r2, [r1, #12]
 800555c:	2100      	movs	r1, #0
 800555e:	7802      	ldrb	r2, [r0, #0]
 8005560:	b92a      	cbnz	r2, 800556e <printToBufferWithoutEndUART1+0x2e>
 8005562:	4a18      	ldr	r2, [pc, #96]	; (80055c4 <printToBufferWithoutEndUART1+0x84>)
 8005564:	68d3      	ldr	r3, [r2, #12]
 8005566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556a:	60d3      	str	r3, [r2, #12]
 800556c:	bd30      	pop	{r4, r5, pc}
 800556e:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005572:	1c44      	adds	r4, r0, #1
 8005574:	b292      	uxth	r2, r2
 8005576:	1c55      	adds	r5, r2, #1
 8005578:	b2ad      	uxth	r5, r5
 800557a:	f8a3 5454 	strh.w	r5, [r3, #1108]	; 0x454
 800557e:	7800      	ldrb	r0, [r0, #0]
 8005580:	441a      	add	r2, r3
 8005582:	b2c0      	uxtb	r0, r0
 8005584:	f882 006c 	strb.w	r0, [r2, #108]	; 0x6c
 8005588:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800558c:	b292      	uxth	r2, r2
 800558e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005592:	bf08      	it	eq
 8005594:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
 8005598:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800559c:	3201      	adds	r2, #1
 800559e:	b292      	uxth	r2, r2
 80055a0:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
 80055a4:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 80055a8:	f8b3 0458 	ldrh.w	r0, [r3, #1112]	; 0x458
 80055ac:	4290      	cmp	r0, r2
 80055ae:	bf88      	it	hi
 80055b0:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
 80055b4:	4620      	mov	r0, r4
 80055b6:	bf84      	itt	hi
 80055b8:	b292      	uxthhi	r2, r2
 80055ba:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 80055be:	e7ce      	b.n	800555e <printToBufferWithoutEndUART1+0x1e>
 80055c0:	200002c0 	.word	0x200002c0
 80055c4:	40013800 	.word	0x40013800

080055c8 <printToBufferUART1D>:
 80055c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055ca:	9101      	str	r1, [sp, #4]
 80055cc:	f88d 2003 	strb.w	r2, [sp, #3]
 80055d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80055d4:	4604      	mov	r4, r0
 80055d6:	9801      	ldr	r0, [sp, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d144      	bne.n	8005666 <printToBufferUART1D+0x9e>
 80055dc:	f7fb fe94 	bl	8001308 <itoa>
 80055e0:	4a49      	ldr	r2, [pc, #292]	; (8005708 <printToBufferUART1D+0x140>)
 80055e2:	f240 35c9 	movw	r5, #969	; 0x3c9
 80055e6:	4613      	mov	r3, r2
 80055e8:	f8b2 1458 	ldrh.w	r1, [r2, #1112]	; 0x458
 80055ec:	428d      	cmp	r5, r1
 80055ee:	d3fb      	bcc.n	80055e8 <printToBufferUART1D+0x20>
 80055f0:	2500      	movs	r5, #0
 80055f2:	4946      	ldr	r1, [pc, #280]	; (800570c <printToBufferUART1D+0x144>)
 80055f4:	68ca      	ldr	r2, [r1, #12]
 80055f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055fa:	60ca      	str	r2, [r1, #12]
 80055fc:	7822      	ldrb	r2, [r4, #0]
 80055fe:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005602:	2a00      	cmp	r2, #0
 8005604:	d134      	bne.n	8005670 <printToBufferUART1D+0xa8>
 8005606:	3801      	subs	r0, #1
 8005608:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800560c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8005610:	b292      	uxth	r2, r2
 8005612:	2c00      	cmp	r4, #0
 8005614:	d155      	bne.n	80056c2 <printToBufferUART1D+0xfa>
 8005616:	1c51      	adds	r1, r2, #1
 8005618:	b289      	uxth	r1, r1
 800561a:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 800561e:	210a      	movs	r1, #10
 8005620:	441a      	add	r2, r3
 8005622:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
 8005626:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800562a:	b292      	uxth	r2, r2
 800562c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005630:	bf08      	it	eq
 8005632:	f8a3 4454 	strheq.w	r4, [r3, #1108]	; 0x454
 8005636:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800563a:	3201      	adds	r2, #1
 800563c:	b292      	uxth	r2, r2
 800563e:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
 8005642:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 8005646:	f8b3 1458 	ldrh.w	r1, [r3, #1112]	; 0x458
 800564a:	4291      	cmp	r1, r2
 800564c:	bf82      	ittt	hi
 800564e:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
 8005652:	b292      	uxthhi	r2, r2
 8005654:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 8005658:	4a2c      	ldr	r2, [pc, #176]	; (800570c <printToBufferUART1D+0x144>)
 800565a:	68d3      	ldr	r3, [r2, #12]
 800565c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005660:	60d3      	str	r3, [r2, #12]
 8005662:	b002      	add	sp, #8
 8005664:	bd70      	pop	{r4, r5, r6, pc}
 8005666:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800566a:	f7fb fec1 	bl	80013f0 <itoa_koma>
 800566e:	e7b7      	b.n	80055e0 <printToBufferUART1D+0x18>
 8005670:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005674:	1c61      	adds	r1, r4, #1
 8005676:	b292      	uxth	r2, r2
 8005678:	1c56      	adds	r6, r2, #1
 800567a:	b2b6      	uxth	r6, r6
 800567c:	f8a3 6454 	strh.w	r6, [r3, #1108]	; 0x454
 8005680:	7824      	ldrb	r4, [r4, #0]
 8005682:	441a      	add	r2, r3
 8005684:	b2e4      	uxtb	r4, r4
 8005686:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
 800568a:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800568e:	b292      	uxth	r2, r2
 8005690:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005694:	bf08      	it	eq
 8005696:	f8a3 5454 	strheq.w	r5, [r3, #1108]	; 0x454
 800569a:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800569e:	3201      	adds	r2, #1
 80056a0:	b292      	uxth	r2, r2
 80056a2:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
 80056a6:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 80056aa:	f8b3 4458 	ldrh.w	r4, [r3, #1112]	; 0x458
 80056ae:	4294      	cmp	r4, r2
 80056b0:	bf88      	it	hi
 80056b2:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
 80056b6:	460c      	mov	r4, r1
 80056b8:	bf84      	itt	hi
 80056ba:	b292      	uxthhi	r2, r2
 80056bc:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 80056c0:	e79c      	b.n	80055fc <printToBufferUART1D+0x34>
 80056c2:	1c54      	adds	r4, r2, #1
 80056c4:	b2a4      	uxth	r4, r4
 80056c6:	f8a3 4454 	strh.w	r4, [r3, #1108]	; 0x454
 80056ca:	7804      	ldrb	r4, [r0, #0]
 80056cc:	441a      	add	r2, r3
 80056ce:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
 80056d2:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80056d6:	b292      	uxth	r2, r2
 80056d8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80056dc:	bf08      	it	eq
 80056de:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
 80056e2:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80056e6:	3201      	adds	r2, #1
 80056e8:	b292      	uxth	r2, r2
 80056ea:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
 80056ee:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 80056f2:	f8b3 4458 	ldrh.w	r4, [r3, #1112]	; 0x458
 80056f6:	4294      	cmp	r4, r2
 80056f8:	bf82      	ittt	hi
 80056fa:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
 80056fe:	b292      	uxthhi	r2, r2
 8005700:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 8005704:	e780      	b.n	8005608 <printToBufferUART1D+0x40>
 8005706:	bf00      	nop
 8005708:	200002c0 	.word	0x200002c0
 800570c:	40013800 	.word	0x40013800

08005710 <Reset_Handler>:
 8005710:	2100      	movs	r1, #0
 8005712:	e003      	b.n	800571c <LoopCopyDataInit>

08005714 <CopyDataInit>:
 8005714:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <LoopFillZerobss+0x14>)
 8005716:	585b      	ldr	r3, [r3, r1]
 8005718:	5043      	str	r3, [r0, r1]
 800571a:	3104      	adds	r1, #4

0800571c <LoopCopyDataInit>:
 800571c:	480a      	ldr	r0, [pc, #40]	; (8005748 <LoopFillZerobss+0x18>)
 800571e:	4b0b      	ldr	r3, [pc, #44]	; (800574c <LoopFillZerobss+0x1c>)
 8005720:	1842      	adds	r2, r0, r1
 8005722:	429a      	cmp	r2, r3
 8005724:	d3f6      	bcc.n	8005714 <CopyDataInit>
 8005726:	4a0a      	ldr	r2, [pc, #40]	; (8005750 <LoopFillZerobss+0x20>)
 8005728:	e002      	b.n	8005730 <LoopFillZerobss>

0800572a <FillZerobss>:
 800572a:	2300      	movs	r3, #0
 800572c:	f842 3b04 	str.w	r3, [r2], #4

08005730 <LoopFillZerobss>:
 8005730:	4b08      	ldr	r3, [pc, #32]	; (8005754 <LoopFillZerobss+0x24>)
 8005732:	429a      	cmp	r2, r3
 8005734:	d3f9      	bcc.n	800572a <FillZerobss>
 8005736:	f7ff fe67 	bl	8005408 <SystemInit>
 800573a:	f000 fa33 	bl	8005ba4 <__libc_init_array>
 800573e:	f7ff f9eb 	bl	8004b18 <main>
 8005742:	4770      	bx	lr
 8005744:	080071c0 	.word	0x080071c0
 8005748:	20000000 	.word	0x20000000
 800574c:	20000298 	.word	0x20000298
 8005750:	20000298 	.word	0x20000298
 8005754:	20000a34 	.word	0x20000a34

08005758 <ADC1_IRQHandler>:
 8005758:	e7fe      	b.n	8005758 <ADC1_IRQHandler>
	...

0800575c <HAL_InitTick>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4b0e      	ldr	r3, [pc, #56]	; (8005798 <HAL_InitTick+0x3c>)
 8005760:	4605      	mov	r5, r0
 8005762:	7818      	ldrb	r0, [r3, #0]
 8005764:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005768:	fbb3 f3f0 	udiv	r3, r3, r0
 800576c:	4a0b      	ldr	r2, [pc, #44]	; (800579c <HAL_InitTick+0x40>)
 800576e:	6810      	ldr	r0, [r2, #0]
 8005770:	fbb0 f0f3 	udiv	r0, r0, r3
 8005774:	f000 f874 	bl	8005860 <HAL_SYSTICK_Config>
 8005778:	4604      	mov	r4, r0
 800577a:	b958      	cbnz	r0, 8005794 <HAL_InitTick+0x38>
 800577c:	2d0f      	cmp	r5, #15
 800577e:	d809      	bhi.n	8005794 <HAL_InitTick+0x38>
 8005780:	4602      	mov	r2, r0
 8005782:	4629      	mov	r1, r5
 8005784:	f04f 30ff 	mov.w	r0, #4294967295
 8005788:	f000 f836 	bl	80057f8 <HAL_NVIC_SetPriority>
 800578c:	4620      	mov	r0, r4
 800578e:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <HAL_InitTick+0x44>)
 8005790:	601d      	str	r5, [r3, #0]
 8005792:	bd38      	pop	{r3, r4, r5, pc}
 8005794:	2001      	movs	r0, #1
 8005796:	e7fc      	b.n	8005792 <HAL_InitTick+0x36>
 8005798:	20000290 	.word	0x20000290
 800579c:	2000028c 	.word	0x2000028c
 80057a0:	20000294 	.word	0x20000294

080057a4 <HAL_Init>:
 80057a4:	b508      	push	{r3, lr}
 80057a6:	2003      	movs	r0, #3
 80057a8:	f000 f814 	bl	80057d4 <HAL_NVIC_SetPriorityGrouping>
 80057ac:	2000      	movs	r0, #0
 80057ae:	f7ff ffd5 	bl	800575c <HAL_InitTick>
 80057b2:	f7ff fdc9 	bl	8005348 <HAL_MspInit>
 80057b6:	2000      	movs	r0, #0
 80057b8:	bd08      	pop	{r3, pc}
	...

080057bc <HAL_IncTick>:
 80057bc:	4a03      	ldr	r2, [pc, #12]	; (80057cc <HAL_IncTick+0x10>)
 80057be:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <HAL_IncTick+0x14>)
 80057c0:	6811      	ldr	r1, [r2, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	440b      	add	r3, r1
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	20000a30 	.word	0x20000a30
 80057d0:	20000290 	.word	0x20000290

080057d4 <HAL_NVIC_SetPriorityGrouping>:
 80057d4:	4a07      	ldr	r2, [pc, #28]	; (80057f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80057d6:	0200      	lsls	r0, r0, #8
 80057d8:	68d3      	ldr	r3, [r2, #12]
 80057da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80057de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	0c1b      	lsrs	r3, r3, #16
 80057e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ee:	4303      	orrs	r3, r0
 80057f0:	60d3      	str	r3, [r2, #12]
 80057f2:	4770      	bx	lr
 80057f4:	e000ed00 	.word	0xe000ed00

080057f8 <HAL_NVIC_SetPriority>:
 80057f8:	4b17      	ldr	r3, [pc, #92]	; (8005858 <HAL_NVIC_SetPriority+0x60>)
 80057fa:	b570      	push	{r4, r5, r6, lr}
 80057fc:	68dc      	ldr	r4, [r3, #12]
 80057fe:	f04f 36ff 	mov.w	r6, #4294967295
 8005802:	f3c4 2402 	ubfx	r4, r4, #8, #3
 8005806:	f1c4 0507 	rsb	r5, r4, #7
 800580a:	2d04      	cmp	r5, #4
 800580c:	f104 0304 	add.w	r3, r4, #4
 8005810:	bf28      	it	cs
 8005812:	2504      	movcs	r5, #4
 8005814:	2b06      	cmp	r3, #6
 8005816:	bf98      	it	ls
 8005818:	2400      	movls	r4, #0
 800581a:	fa06 f305 	lsl.w	r3, r6, r5
 800581e:	bf88      	it	hi
 8005820:	3c03      	subhi	r4, #3
 8005822:	ea21 0303 	bic.w	r3, r1, r3
 8005826:	40a3      	lsls	r3, r4
 8005828:	fa06 f404 	lsl.w	r4, r6, r4
 800582c:	ea22 0404 	bic.w	r4, r2, r4
 8005830:	2800      	cmp	r0, #0
 8005832:	ea43 0304 	orr.w	r3, r3, r4
 8005836:	bfa8      	it	ge
 8005838:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800583c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005840:	bfb8      	it	lt
 8005842:	4a06      	ldrlt	r2, [pc, #24]	; (800585c <HAL_NVIC_SetPriority+0x64>)
 8005844:	b2db      	uxtb	r3, r3
 8005846:	bfab      	itete	ge
 8005848:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800584c:	f000 000f 	andlt.w	r0, r0, #15
 8005850:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
 8005854:	5413      	strblt	r3, [r2, r0]
 8005856:	bd70      	pop	{r4, r5, r6, pc}
 8005858:	e000ed00 	.word	0xe000ed00
 800585c:	e000ed14 	.word	0xe000ed14

08005860 <HAL_SYSTICK_Config>:
 8005860:	3801      	subs	r0, #1
 8005862:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005866:	d20a      	bcs.n	800587e <HAL_SYSTICK_Config+0x1e>
 8005868:	21f0      	movs	r1, #240	; 0xf0
 800586a:	4b06      	ldr	r3, [pc, #24]	; (8005884 <HAL_SYSTICK_Config+0x24>)
 800586c:	4a06      	ldr	r2, [pc, #24]	; (8005888 <HAL_SYSTICK_Config+0x28>)
 800586e:	6058      	str	r0, [r3, #4]
 8005870:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
 8005874:	2000      	movs	r0, #0
 8005876:	2207      	movs	r2, #7
 8005878:	6098      	str	r0, [r3, #8]
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	4770      	bx	lr
 800587e:	2001      	movs	r0, #1
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	e000e010 	.word	0xe000e010
 8005888:	e000ed00 	.word	0xe000ed00

0800588c <LL_ADC_Init>:
 800588c:	6883      	ldr	r3, [r0, #8]
 800588e:	b510      	push	{r4, lr}
 8005890:	f013 0301 	ands.w	r3, r3, #1
 8005894:	d10d      	bne.n	80058b2 <LL_ADC_Init+0x26>
 8005896:	6842      	ldr	r2, [r0, #4]
 8005898:	684c      	ldr	r4, [r1, #4]
 800589a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800589e:	4322      	orrs	r2, r4
 80058a0:	6042      	str	r2, [r0, #4]
 80058a2:	6882      	ldr	r2, [r0, #8]
 80058a4:	6809      	ldr	r1, [r1, #0]
 80058a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058aa:	430a      	orrs	r2, r1
 80058ac:	6082      	str	r2, [r0, #8]
 80058ae:	4618      	mov	r0, r3
 80058b0:	bd10      	pop	{r4, pc}
 80058b2:	2001      	movs	r0, #1
 80058b4:	e7fc      	b.n	80058b0 <LL_ADC_Init+0x24>

080058b6 <LL_ADC_REG_Init>:
 80058b6:	6883      	ldr	r3, [r0, #8]
 80058b8:	b510      	push	{r4, lr}
 80058ba:	07db      	lsls	r3, r3, #31
 80058bc:	d41b      	bmi.n	80058f6 <LL_ADC_REG_Init+0x40>
 80058be:	6843      	ldr	r3, [r0, #4]
 80058c0:	684a      	ldr	r2, [r1, #4]
 80058c2:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
 80058c6:	b112      	cbz	r2, 80058ce <LL_ADC_REG_Init+0x18>
 80058c8:	688c      	ldr	r4, [r1, #8]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	4323      	orrs	r3, r4
 80058ce:	6043      	str	r3, [r0, #4]
 80058d0:	6883      	ldr	r3, [r0, #8]
 80058d2:	680c      	ldr	r4, [r1, #0]
 80058d4:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80058d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80058dc:	4323      	orrs	r3, r4
 80058de:	68cc      	ldr	r4, [r1, #12]
 80058e0:	6909      	ldr	r1, [r1, #16]
 80058e2:	4323      	orrs	r3, r4
 80058e4:	430b      	orrs	r3, r1
 80058e6:	6083      	str	r3, [r0, #8]
 80058e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80058ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058ee:	4313      	orrs	r3, r2
 80058f0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80058f2:	2000      	movs	r0, #0
 80058f4:	bd10      	pop	{r4, pc}
 80058f6:	2001      	movs	r0, #1
 80058f8:	e7fc      	b.n	80058f4 <LL_ADC_REG_Init+0x3e>

080058fa <LL_GPIO_Init>:
 80058fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fe:	680c      	ldr	r4, [r1, #0]
 8005900:	4602      	mov	r2, r0
 8005902:	f3c4 240f 	ubfx	r4, r4, #8, #16
 8005906:	fa94 f3a4 	rbit	r3, r4
 800590a:	f04f 090f 	mov.w	r9, #15
 800590e:	fab3 f383 	clz	r3, r3
 8005912:	f04f 0803 	mov.w	r8, #3
 8005916:	f04f 0c04 	mov.w	ip, #4
 800591a:	f240 1701 	movw	r7, #257	; 0x101
 800591e:	fa34 f003 	lsrs.w	r0, r4, r3
 8005922:	d101      	bne.n	8005928 <LL_GPIO_Init+0x2e>
 8005924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005928:	2001      	movs	r0, #1
 800592a:	4098      	lsls	r0, r3
 800592c:	4220      	tst	r0, r4
 800592e:	d066      	beq.n	80059fe <LL_GPIO_Init+0x104>
 8005930:	2b07      	cmp	r3, #7
 8005932:	bf88      	it	hi
 8005934:	f04f 1001 	movhi.w	r0, #65537	; 0x10001
 8005938:	684d      	ldr	r5, [r1, #4]
 800593a:	bf84      	itt	hi
 800593c:	f1a3 0e08 	subhi.w	lr, r3, #8
 8005940:	fa00 fe0e 	lslhi.w	lr, r0, lr
 8005944:	f025 0508 	bic.w	r5, r5, #8
 8005948:	bf94      	ite	ls
 800594a:	fa07 fe03 	lslls.w	lr, r7, r3
 800594e:	f04e 6e80 	orrhi.w	lr, lr, #67108864	; 0x4000000
 8005952:	2d01      	cmp	r5, #1
 8005954:	ea4f 601e 	mov.w	r0, lr, lsr #24
 8005958:	d12b      	bne.n	80059b2 <LL_GPIO_Init+0xb8>
 800595a:	fa9e f5ae 	rbit	r5, lr
 800595e:	fab5 f585 	clz	r5, r5
 8005962:	fa9e fbae 	rbit	fp, lr
 8005966:	fabb fb8b 	clz	fp, fp
 800596a:	5816      	ldr	r6, [r2, r0]
 800596c:	00ad      	lsls	r5, r5, #2
 800596e:	fa08 f505 	lsl.w	r5, r8, r5
 8005972:	ea26 0a05 	bic.w	sl, r6, r5
 8005976:	688d      	ldr	r5, [r1, #8]
 8005978:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800597c:	fa05 f50b 	lsl.w	r5, r5, fp
 8005980:	ea4a 0505 	orr.w	r5, sl, r5
 8005984:	5015      	str	r5, [r2, r0]
 8005986:	fa9e faae 	rbit	sl, lr
 800598a:	faba fa8a 	clz	sl, sl
 800598e:	fa9e fbae 	rbit	fp, lr
 8005992:	fabb fb8b 	clz	fp, fp
 8005996:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800599a:	fa0c fa0a 	lsl.w	sl, ip, sl
 800599e:	ea25 0a0a 	bic.w	sl, r5, sl
 80059a2:	68cd      	ldr	r5, [r1, #12]
 80059a4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80059a8:	fa05 f50b 	lsl.w	r5, r5, fp
 80059ac:	ea4a 0505 	orr.w	r5, sl, r5
 80059b0:	5015      	str	r5, [r2, r0]
 80059b2:	68d5      	ldr	r5, [r2, #12]
 80059b4:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 80059b8:	fa9a fbaa 	rbit	fp, sl
 80059bc:	fabb fb8b 	clz	fp, fp
 80059c0:	ea25 0a0a 	bic.w	sl, r5, sl
 80059c4:	690d      	ldr	r5, [r1, #16]
 80059c6:	fa05 f50b 	lsl.w	r5, r5, fp
 80059ca:	ea4a 0505 	orr.w	r5, sl, r5
 80059ce:	60d5      	str	r5, [r2, #12]
 80059d0:	fa9e faae 	rbit	sl, lr
 80059d4:	faba fa8a 	clz	sl, sl
 80059d8:	fa9e feae 	rbit	lr, lr
 80059dc:	fabe fe8e 	clz	lr, lr
 80059e0:	5815      	ldr	r5, [r2, r0]
 80059e2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80059e6:	fa09 fa0a 	lsl.w	sl, r9, sl
 80059ea:	ea25 0a0a 	bic.w	sl, r5, sl
 80059ee:	684d      	ldr	r5, [r1, #4]
 80059f0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80059f4:	fa05 f50e 	lsl.w	r5, r5, lr
 80059f8:	ea4a 0505 	orr.w	r5, sl, r5
 80059fc:	5015      	str	r5, [r2, r0]
 80059fe:	3301      	adds	r3, #1
 8005a00:	e78d      	b.n	800591e <LL_GPIO_Init+0x24>
	...

08005a04 <RCC_GetHCLKClockFreq>:
 8005a04:	4b03      	ldr	r3, [pc, #12]	; (8005a14 <RCC_GetHCLKClockFreq+0x10>)
 8005a06:	4a04      	ldr	r2, [pc, #16]	; (8005a18 <RCC_GetHCLKClockFreq+0x14>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005a0e:	5cd3      	ldrb	r3, [r2, r3]
 8005a10:	40d8      	lsrs	r0, r3
 8005a12:	4770      	bx	lr
 8005a14:	40021000 	.word	0x40021000
 8005a18:	0800719f 	.word	0x0800719f

08005a1c <RCC_GetPCLK1ClockFreq>:
 8005a1c:	4b03      	ldr	r3, [pc, #12]	; (8005a2c <RCC_GetPCLK1ClockFreq+0x10>)
 8005a1e:	4a04      	ldr	r2, [pc, #16]	; (8005a30 <RCC_GetPCLK1ClockFreq+0x14>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005a26:	5cd3      	ldrb	r3, [r2, r3]
 8005a28:	40d8      	lsrs	r0, r3
 8005a2a:	4770      	bx	lr
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	080071af 	.word	0x080071af

08005a34 <RCC_GetPCLK2ClockFreq>:
 8005a34:	4b03      	ldr	r3, [pc, #12]	; (8005a44 <RCC_GetPCLK2ClockFreq+0x10>)
 8005a36:	4a04      	ldr	r2, [pc, #16]	; (8005a48 <RCC_GetPCLK2ClockFreq+0x14>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005a3e:	5cd3      	ldrb	r3, [r2, r3]
 8005a40:	40d8      	lsrs	r0, r3
 8005a42:	4770      	bx	lr
 8005a44:	40021000 	.word	0x40021000
 8005a48:	080071af 	.word	0x080071af

08005a4c <RCC_PLL_GetFreqDomain_SYS>:
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <RCC_PLL_GetFreqDomain_SYS+0x28>)
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8005a54:	b162      	cbz	r2, 8005a70 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8005a56:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005a58:	4a07      	ldr	r2, [pc, #28]	; (8005a78 <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 8005a5a:	f000 000f 	and.w	r0, r0, #15
 8005a5e:	3001      	adds	r0, #1
 8005a60:	fbb2 f0f0 	udiv	r0, r2, r0
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8005a6a:	3302      	adds	r3, #2
 8005a6c:	4358      	muls	r0, r3
 8005a6e:	4770      	bx	lr
 8005a70:	4802      	ldr	r0, [pc, #8]	; (8005a7c <RCC_PLL_GetFreqDomain_SYS+0x30>)
 8005a72:	e7f7      	b.n	8005a64 <RCC_PLL_GetFreqDomain_SYS+0x18>
 8005a74:	40021000 	.word	0x40021000
 8005a78:	007a1200 	.word	0x007a1200
 8005a7c:	003d0900 	.word	0x003d0900

08005a80 <RCC_GetSystemClockFreq>:
 8005a80:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <RCC_GetSystemClockFreq+0x14>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f003 030c 	and.w	r3, r3, #12
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d101      	bne.n	8005a90 <RCC_GetSystemClockFreq+0x10>
 8005a8c:	f7ff bfde 	b.w	8005a4c <RCC_PLL_GetFreqDomain_SYS>
 8005a90:	4801      	ldr	r0, [pc, #4]	; (8005a98 <RCC_GetSystemClockFreq+0x18>)
 8005a92:	4770      	bx	lr
 8005a94:	40021000 	.word	0x40021000
 8005a98:	007a1200 	.word	0x007a1200

08005a9c <LL_RCC_GetSystemClocksFreq>:
 8005a9c:	b508      	push	{r3, lr}
 8005a9e:	4601      	mov	r1, r0
 8005aa0:	f7ff ffee 	bl	8005a80 <RCC_GetSystemClockFreq>
 8005aa4:	6008      	str	r0, [r1, #0]
 8005aa6:	f7ff ffad 	bl	8005a04 <RCC_GetHCLKClockFreq>
 8005aaa:	6048      	str	r0, [r1, #4]
 8005aac:	f7ff ffb6 	bl	8005a1c <RCC_GetPCLK1ClockFreq>
 8005ab0:	6088      	str	r0, [r1, #8]
 8005ab2:	6848      	ldr	r0, [r1, #4]
 8005ab4:	f7ff ffbe 	bl	8005a34 <RCC_GetPCLK2ClockFreq>
 8005ab8:	60c8      	str	r0, [r1, #12]
 8005aba:	bd08      	pop	{r3, pc}

08005abc <LL_USART_Init>:
 8005abc:	b530      	push	{r4, r5, lr}
 8005abe:	68c3      	ldr	r3, [r0, #12]
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	049b      	lsls	r3, r3, #18
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	460d      	mov	r5, r1
 8005ac8:	d502      	bpl.n	8005ad0 <LL_USART_Init+0x14>
 8005aca:	2001      	movs	r0, #1
 8005acc:	b005      	add	sp, #20
 8005ace:	bd30      	pop	{r4, r5, pc}
 8005ad0:	684b      	ldr	r3, [r1, #4]
 8005ad2:	68c9      	ldr	r1, [r1, #12]
 8005ad4:	68c2      	ldr	r2, [r0, #12]
 8005ad6:	430b      	orrs	r3, r1
 8005ad8:	6929      	ldr	r1, [r5, #16]
 8005ada:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	69a9      	ldr	r1, [r5, #24]
 8005ae2:	f022 020c 	bic.w	r2, r2, #12
 8005ae6:	430b      	orrs	r3, r1
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60c3      	str	r3, [r0, #12]
 8005aec:	6903      	ldr	r3, [r0, #16]
 8005aee:	68aa      	ldr	r2, [r5, #8]
 8005af0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005af4:	4313      	orrs	r3, r2
 8005af6:	6103      	str	r3, [r0, #16]
 8005af8:	6943      	ldr	r3, [r0, #20]
 8005afa:	696a      	ldr	r2, [r5, #20]
 8005afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b00:	4313      	orrs	r3, r2
 8005b02:	6143      	str	r3, [r0, #20]
 8005b04:	4668      	mov	r0, sp
 8005b06:	f7ff ffc9 	bl	8005a9c <LL_RCC_GetSystemClocksFreq>
 8005b0a:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <LL_USART_Init+0xd0>)
 8005b0c:	429c      	cmp	r4, r3
 8005b0e:	d125      	bne.n	8005b5c <LL_USART_Init+0xa0>
 8005b10:	9903      	ldr	r1, [sp, #12]
 8005b12:	2900      	cmp	r1, #0
 8005b14:	d0d9      	beq.n	8005aca <LL_USART_Init+0xe>
 8005b16:	682a      	ldr	r2, [r5, #0]
 8005b18:	2a00      	cmp	r2, #0
 8005b1a:	d0d6      	beq.n	8005aca <LL_USART_Init+0xe>
 8005b1c:	2319      	movs	r3, #25
 8005b1e:	434b      	muls	r3, r1
 8005b20:	69a9      	ldr	r1, [r5, #24]
 8005b22:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005b26:	f04f 0164 	mov.w	r1, #100	; 0x64
 8005b2a:	d120      	bne.n	8005b6e <LL_USART_Init+0xb2>
 8005b2c:	0052      	lsls	r2, r2, #1
 8005b2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b32:	fbb3 f0f1 	udiv	r0, r3, r1
 8005b36:	fb01 3310 	mls	r3, r1, r0, r3
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	3332      	adds	r3, #50	; 0x32
 8005b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f003 0207 	and.w	r2, r3, #7
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8005b4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b52:	4413      	add	r3, r2
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	60a3      	str	r3, [r4, #8]
 8005b58:	2000      	movs	r0, #0
 8005b5a:	e7b7      	b.n	8005acc <LL_USART_Init+0x10>
 8005b5c:	4b0c      	ldr	r3, [pc, #48]	; (8005b90 <LL_USART_Init+0xd4>)
 8005b5e:	429c      	cmp	r4, r3
 8005b60:	d101      	bne.n	8005b66 <LL_USART_Init+0xaa>
 8005b62:	9902      	ldr	r1, [sp, #8]
 8005b64:	e7d5      	b.n	8005b12 <LL_USART_Init+0x56>
 8005b66:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <LL_USART_Init+0xd8>)
 8005b68:	429c      	cmp	r4, r3
 8005b6a:	d1ae      	bne.n	8005aca <LL_USART_Init+0xe>
 8005b6c:	e7f9      	b.n	8005b62 <LL_USART_Init+0xa6>
 8005b6e:	0092      	lsls	r2, r2, #2
 8005b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b74:	fbb3 f2f1 	udiv	r2, r3, r1
 8005b78:	fb01 3312 	mls	r3, r1, r2, r3
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	3332      	adds	r3, #50	; 0x32
 8005b80:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b84:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005b88:	e7e4      	b.n	8005b54 <LL_USART_Init+0x98>
 8005b8a:	bf00      	nop
 8005b8c:	40013800 	.word	0x40013800
 8005b90:	40004400 	.word	0x40004400
 8005b94:	40004800 	.word	0x40004800

08005b98 <LL_SetSystemCoreClock>:
 8005b98:	4b01      	ldr	r3, [pc, #4]	; (8005ba0 <LL_SetSystemCoreClock+0x8>)
 8005b9a:	6018      	str	r0, [r3, #0]
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	2000028c 	.word	0x2000028c

08005ba4 <__libc_init_array>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	2500      	movs	r5, #0
 8005ba8:	4e0c      	ldr	r6, [pc, #48]	; (8005bdc <__libc_init_array+0x38>)
 8005baa:	4c0d      	ldr	r4, [pc, #52]	; (8005be0 <__libc_init_array+0x3c>)
 8005bac:	1ba4      	subs	r4, r4, r6
 8005bae:	10a4      	asrs	r4, r4, #2
 8005bb0:	42a5      	cmp	r5, r4
 8005bb2:	d109      	bne.n	8005bc8 <__libc_init_array+0x24>
 8005bb4:	f000 f82e 	bl	8005c14 <_init>
 8005bb8:	2500      	movs	r5, #0
 8005bba:	4e0a      	ldr	r6, [pc, #40]	; (8005be4 <__libc_init_array+0x40>)
 8005bbc:	4c0a      	ldr	r4, [pc, #40]	; (8005be8 <__libc_init_array+0x44>)
 8005bbe:	1ba4      	subs	r4, r4, r6
 8005bc0:	10a4      	asrs	r4, r4, #2
 8005bc2:	42a5      	cmp	r5, r4
 8005bc4:	d105      	bne.n	8005bd2 <__libc_init_array+0x2e>
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bcc:	4798      	blx	r3
 8005bce:	3501      	adds	r5, #1
 8005bd0:	e7ee      	b.n	8005bb0 <__libc_init_array+0xc>
 8005bd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bd6:	4798      	blx	r3
 8005bd8:	3501      	adds	r5, #1
 8005bda:	e7f2      	b.n	8005bc2 <__libc_init_array+0x1e>
 8005bdc:	080071b8 	.word	0x080071b8
 8005be0:	080071b8 	.word	0x080071b8
 8005be4:	080071b8 	.word	0x080071b8
 8005be8:	080071bc 	.word	0x080071bc

08005bec <memcpy>:
 8005bec:	b510      	push	{r4, lr}
 8005bee:	1e43      	subs	r3, r0, #1
 8005bf0:	440a      	add	r2, r1
 8005bf2:	4291      	cmp	r1, r2
 8005bf4:	d100      	bne.n	8005bf8 <memcpy+0xc>
 8005bf6:	bd10      	pop	{r4, pc}
 8005bf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c00:	e7f7      	b.n	8005bf2 <memcpy+0x6>

08005c02 <memset>:
 8005c02:	4603      	mov	r3, r0
 8005c04:	4402      	add	r2, r0
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d100      	bne.n	8005c0c <memset+0xa>
 8005c0a:	4770      	bx	lr
 8005c0c:	f803 1b01 	strb.w	r1, [r3], #1
 8005c10:	e7f9      	b.n	8005c06 <memset+0x4>
	...

08005c14 <_init>:
 8005c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c16:	bf00      	nop
 8005c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1a:	bc08      	pop	{r3}
 8005c1c:	469e      	mov	lr, r3
 8005c1e:	4770      	bx	lr

08005c20 <_fini>:
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c22:	bf00      	nop
 8005c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c26:	bc08      	pop	{r3}
 8005c28:	469e      	mov	lr, r3
 8005c2a:	4770      	bx	lr
