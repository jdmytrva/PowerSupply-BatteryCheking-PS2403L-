
PS2403L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058b4  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001588  08005a84  08005a84  00015a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800700c  0800700c  00020290  2**0
                  CONTENTS
  4 .ARM          00000000  0800700c  0800700c  00020290  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800700c  0800700c  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800700c  0800700c  0001700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007010  08007010  00017010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08007014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000790  20000290  080072a4  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  080072a4  00020a20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105c1  00000000  00000000  000202b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023c1  00000000  00000000  0003087a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004219  00000000  00000000  00032c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000007a0  00000000  00000000  00036e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b88  00000000  00000000  000375f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000c338  00000000  00000000  00038180  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000694e  00000000  00000000  000444b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00043de8  00000000  00000000  0004ae06  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0008ebee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001654  00000000  00000000  0008ec6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000290 	.word	0x20000290
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a6c 	.word	0x08005a6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000294 	.word	0x20000294
 800020c:	08005a6c 	.word	0x08005a6c

08000210 <flash_erase_page>:
	return !(FLASH->SR & FLASH_SR_EOP);
}

void flash_erase_page(uint32_t address)
{
	while (FLASH->SR & FLASH_SR_BSY);
 8000210:	4a0e      	ldr	r2, [pc, #56]	; (800024c <flash_erase_page+0x3c>)
 8000212:	4613      	mov	r3, r2
 8000214:	68d1      	ldr	r1, [r2, #12]
 8000216:	07c9      	lsls	r1, r1, #31
 8000218:	d4fc      	bmi.n	8000214 <flash_erase_page+0x4>

		if (FLASH->SR & FLASH_SR_EOP) {
 800021a:	68d1      	ldr	r1, [r2, #12]
 800021c:	0689      	lsls	r1, r1, #26
			FLASH->SR = FLASH_SR_EOP;
 800021e:	bf44      	itt	mi
 8000220:	2120      	movmi	r1, #32
 8000222:	60d1      	strmi	r1, [r2, #12]
		}

		FLASH->CR |= FLASH_CR_PER;
 8000224:	691a      	ldr	r2, [r3, #16]
 8000226:	f042 0202 	orr.w	r2, r2, #2
 800022a:	611a      	str	r2, [r3, #16]
		FLASH->AR = address;
 800022c:	6158      	str	r0, [r3, #20]
		FLASH->CR |= FLASH_CR_STRT;
 800022e:	691a      	ldr	r2, [r3, #16]
 8000230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000234:	611a      	str	r2, [r3, #16]
		while (!(FLASH->SR & FLASH_SR_EOP));
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <flash_erase_page+0x3c>)
 8000238:	68da      	ldr	r2, [r3, #12]
 800023a:	0692      	lsls	r2, r2, #26
 800023c:	d5fc      	bpl.n	8000238 <flash_erase_page+0x28>
		FLASH->SR = FLASH_SR_EOP;
 800023e:	2220      	movs	r2, #32
 8000240:	60da      	str	r2, [r3, #12]
		FLASH->CR &= ~FLASH_CR_PER;
 8000242:	691a      	ldr	r2, [r3, #16]
 8000244:	f022 0202 	bic.w	r2, r2, #2
 8000248:	611a      	str	r2, [r3, #16]
}
 800024a:	4770      	bx	lr
 800024c:	40022000 	.word	0x40022000

08000250 <flash_unlock>:


void flash_unlock(void)
{
	  FLASH->KEYR = FLASH_KEY1;
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <flash_unlock+0x10>)
 8000252:	4a04      	ldr	r2, [pc, #16]	; (8000264 <flash_unlock+0x14>)
 8000254:	605a      	str	r2, [r3, #4]
	  FLASH->KEYR = FLASH_KEY2;
 8000256:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800025a:	605a      	str	r2, [r3, #4]
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40022000 	.word	0x40022000
 8000264:	45670123 	.word	0x45670123

08000268 <flash_lock>:

void flash_lock()
{
	FLASH->CR |= FLASH_CR_LOCK;
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <flash_lock+0xc>)
 800026a:	6913      	ldr	r3, [r2, #16]
 800026c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000270:	6113      	str	r3, [r2, #16]
}
 8000272:	4770      	bx	lr
 8000274:	40022000 	.word	0x40022000

08000278 <flash_write>:

void flash_write(uint32_t address,uint32_t data)
{


	while (FLASH->SR & FLASH_SR_BSY);
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <flash_write+0x48>)
{
 800027a:	b510      	push	{r4, lr}
 800027c:	461a      	mov	r2, r3
	while (FLASH->SR & FLASH_SR_BSY);
 800027e:	68dc      	ldr	r4, [r3, #12]
 8000280:	07e4      	lsls	r4, r4, #31
 8000282:	d4fc      	bmi.n	800027e <flash_write+0x6>
	if (FLASH->SR & FLASH_SR_EOP) {
 8000284:	68dc      	ldr	r4, [r3, #12]
 8000286:	06a4      	lsls	r4, r4, #26
		FLASH->SR = FLASH_SR_EOP;
 8000288:	bf44      	itt	mi
 800028a:	2420      	movmi	r4, #32
 800028c:	60dc      	strmi	r4, [r3, #12]
	}

	FLASH->CR |= FLASH_CR_PG;
 800028e:	6913      	ldr	r3, [r2, #16]
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6113      	str	r3, [r2, #16]


    *(__IO uint16_t*)address = (uint16_t)data;
    while (!(FLASH->SR & FLASH_SR_EOP));
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <flash_write+0x48>)
    *(__IO uint16_t*)address = (uint16_t)data;
 8000298:	b28b      	uxth	r3, r1
 800029a:	8003      	strh	r3, [r0, #0]
 800029c:	4613      	mov	r3, r2
    while (!(FLASH->SR & FLASH_SR_EOP));
 800029e:	68d4      	ldr	r4, [r2, #12]
 80002a0:	06a4      	lsls	r4, r4, #26
 80002a2:	d5fc      	bpl.n	800029e <flash_write+0x26>
    		FLASH->SR = FLASH_SR_EOP;
 80002a4:	2420      	movs	r4, #32


	address+=2;
	data>>=16;
    *(__IO uint16_t*)address = (uint16_t)data;
 80002a6:	0c09      	lsrs	r1, r1, #16
    		FLASH->SR = FLASH_SR_EOP;
 80002a8:	60d4      	str	r4, [r2, #12]
    *(__IO uint16_t*)address = (uint16_t)data;
 80002aa:	8041      	strh	r1, [r0, #2]
    while (!(FLASH->SR & FLASH_SR_EOP));
 80002ac:	68da      	ldr	r2, [r3, #12]
 80002ae:	0692      	lsls	r2, r2, #26
 80002b0:	d5fc      	bpl.n	80002ac <flash_write+0x34>
    		FLASH->SR = FLASH_SR_EOP;
 80002b2:	2220      	movs	r2, #32
 80002b4:	60da      	str	r2, [r3, #12]

    FLASH->CR &= ~(FLASH_CR_PG);
 80002b6:	691a      	ldr	r2, [r3, #16]
 80002b8:	f022 0201 	bic.w	r2, r2, #1
 80002bc:	611a      	str	r2, [r3, #16]

}
 80002be:	bd10      	pop	{r4, pc}
 80002c0:	40022000 	.word	0x40022000

080002c4 <flash_write_block>:
#define ADDRESS_FLASH_LOG          FLASH_BASE+1024*121
void flash_write_block()
{
 80002c4:	b570      	push	{r4, r5, r6, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c6:	b672      	cpsid	i
	__disable_irq();
	flash_unlock();
 80002c8:	f7ff ffc2 	bl	8000250 <flash_unlock>
	uint32_t pageAdr;
	pageAdr = ADDRESS_FLASH_LOG;
	uint32_t size =  (uint32_t)sizeof(LoggingData);
	uint32_t *source_adr = (void *)&LoggingData;

	logDebugD("size: ",size,0);
 80002cc:	4812      	ldr	r0, [pc, #72]	; (8000318 <flash_write_block+0x54>)
 80002ce:	f005 f8f5 	bl	80054bc <printToBufferWithoutEndUART1>
	logDebugD("val: ",*(source_adr + 0),0);
 80002d2:	4d12      	ldr	r5, [pc, #72]	; (800031c <flash_write_block+0x58>)
	logDebugD("size: ",size,0);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80002da:	4811      	ldr	r0, [pc, #68]	; (8000320 <flash_write_block+0x5c>)
 80002dc:	f005 f932 	bl	8005544 <printToBufferUART1D>
	logDebugD("val: ",*(source_adr + 0),0);
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <flash_write_block+0x54>)
 80002e2:	f005 f8eb 	bl	80054bc <printToBufferWithoutEndUART1>
 80002e6:	2200      	movs	r2, #0
 80002e8:	6829      	ldr	r1, [r5, #0]
 80002ea:	480e      	ldr	r0, [pc, #56]	; (8000324 <flash_write_block+0x60>)
 80002ec:	f005 f92a 	bl	8005544 <printToBufferUART1D>


	flash_erase_page(pageAdr );
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <flash_write_block+0x64>)
 80002f2:	f7ff ff8d 	bl	8000210 <flash_erase_page>
 80002f6:	4c0c      	ldr	r4, [pc, #48]	; (8000328 <flash_write_block+0x64>)
	for (i = 0; i < size/4; ++i)
 80002f8:	4e0c      	ldr	r6, [pc, #48]	; (800032c <flash_write_block+0x68>)
	{
		flash_write((uint32_t)(pageAdr + i*4), *(source_adr + i));        // ������� ����� �������� ������
 80002fa:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 80002fe:	f5a3 33f2 	sub.w	r3, r3, #123904	; 0x1e400
 8000302:	4620      	mov	r0, r4
 8000304:	58e9      	ldr	r1, [r5, r3]
 8000306:	3404      	adds	r4, #4
 8000308:	f7ff ffb6 	bl	8000278 <flash_write>
	for (i = 0; i < size/4; ++i)
 800030c:	42b4      	cmp	r4, r6
 800030e:	d1f4      	bne.n	80002fa <flash_write_block+0x36>
    }

	flash_lock();
 8000310:	f7ff ffaa 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000314:	b662      	cpsie	i
	__enable_irq();
	return 1;
}
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	08005eb1 	.word	0x08005eb1
 800031c:	20000878 	.word	0x20000878
 8000320:	08005eb9 	.word	0x08005eb9
 8000324:	08005ec0 	.word	0x08005ec0
 8000328:	0801e400 	.word	0x0801e400
 800032c:	0801e59c 	.word	0x0801e59c

08000330 <flash_read_block>:
uint8_t flash_read_block()
{
 8000330:	b510      	push	{r4, lr}
 8000332:	4b07      	ldr	r3, [pc, #28]	; (8000350 <flash_read_block+0x20>)
	uint32_t *source_adr = ADDRESS_FLASH_LOG;
	uint32_t *dest_adr = (void *)&LoggingData;

	for (i=0; i < size/4; ++i)
	{
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 8000334:	4807      	ldr	r0, [pc, #28]	; (8000354 <flash_read_block+0x24>)
	for (i=0; i < size/4; ++i)
 8000336:	4908      	ldr	r1, [pc, #32]	; (8000358 <flash_read_block+0x28>)
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 8000338:	681c      	ldr	r4, [r3, #0]
 800033a:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800033e:	3304      	adds	r3, #4
 8000340:	f5a2 32f2 	sub.w	r2, r2, #123904	; 0x1e400
	for (i=0; i < size/4; ++i)
 8000344:	428b      	cmp	r3, r1
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 8000346:	5014      	str	r4, [r2, r0]
	for (i=0; i < size/4; ++i)
 8000348:	d1f6      	bne.n	8000338 <flash_read_block+0x8>
	}

	return 1;

}
 800034a:	2001      	movs	r0, #1
 800034c:	bd10      	pop	{r4, pc}
 800034e:	bf00      	nop
 8000350:	0801e400 	.word	0x0801e400
 8000354:	20000878 	.word	0x20000878
 8000358:	0801e59c 	.word	0x0801e59c

0800035c <flash_read>:

uint32_t flash_read(uint32_t address, uint32_t MinValue, uint32_t MaxValue)
{
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t EEpromValue;
	EEpromValue = (*(__IO uint32_t*) address);
 800035e:	6804      	ldr	r4, [r0, #0]
{
 8000360:	4607      	mov	r7, r0
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000362:	428c      	cmp	r4, r1
{
 8000364:	460e      	mov	r6, r1
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000366:	d301      	bcc.n	800036c <flash_read+0x10>
 8000368:	4294      	cmp	r4, r2
 800036a:	d91b      	bls.n	80003a4 <flash_read+0x48>
	{
		return EEpromValue;
	}
	else // fail to read
	{
		EEpromReadStatus = 0;
 800036c:	2500      	movs	r5, #0
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <flash_read+0x4c>)
		logDebugD("Fail to read address: ",address,0);
 8000370:	480e      	ldr	r0, [pc, #56]	; (80003ac <flash_read+0x50>)
		EEpromReadStatus = 0;
 8000372:	701d      	strb	r5, [r3, #0]
		logDebugD("Fail to read address: ",address,0);
 8000374:	f005 f8a2 	bl	80054bc <printToBufferWithoutEndUART1>
 8000378:	462a      	mov	r2, r5
 800037a:	4639      	mov	r1, r7
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <flash_read+0x54>)
 800037e:	f005 f8e1 	bl	8005544 <printToBufferUART1D>
		logDebugD("EEpromValue is : ",EEpromValue,0);
 8000382:	480a      	ldr	r0, [pc, #40]	; (80003ac <flash_read+0x50>)
 8000384:	f005 f89a 	bl	80054bc <printToBufferWithoutEndUART1>
 8000388:	4621      	mov	r1, r4
 800038a:	462a      	mov	r2, r5
 800038c:	4809      	ldr	r0, [pc, #36]	; (80003b4 <flash_read+0x58>)
 800038e:	f005 f8d9 	bl	8005544 <printToBufferUART1D>
		logDebugD("FLASH_BASE+1024*123 : ",FLASH_BASE+1024*123,0);
 8000392:	4806      	ldr	r0, [pc, #24]	; (80003ac <flash_read+0x50>)
 8000394:	f005 f892 	bl	80054bc <printToBufferWithoutEndUART1>
 8000398:	462a      	mov	r2, r5
 800039a:	4907      	ldr	r1, [pc, #28]	; (80003b8 <flash_read+0x5c>)
 800039c:	4807      	ldr	r0, [pc, #28]	; (80003bc <flash_read+0x60>)
 800039e:	f005 f8d1 	bl	8005544 <printToBufferUART1D>
		return MinValue;
 80003a2:	4634      	mov	r4, r6
	}
}
 80003a4:	4620      	mov	r0, r4
 80003a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003a8:	20000000 	.word	0x20000000
 80003ac:	08005eb1 	.word	0x08005eb1
 80003b0:	08005e71 	.word	0x08005e71
 80003b4:	08005e88 	.word	0x08005e88
 80003b8:	0801ec00 	.word	0x0801ec00
 80003bc:	08005e9a 	.word	0x08005e9a

080003c0 <CalibrationWriteToFlash>:
	__enable_irq();

}

uint8_t CalibrationWriteToFlash(void)
{
 80003c0:	b510      	push	{r4, lr}
	flash_erase_page( CalibrationData.CRC_AddresInEEprom);
 80003c2:	4c19      	ldr	r4, [pc, #100]	; (8000428 <CalibrationWriteToFlash+0x68>)
 80003c4:	6860      	ldr	r0, [r4, #4]
 80003c6:	f7ff ff23 	bl	8000210 <flash_erase_page>
	flash_write( CalibrationData.CRC_AddresInEEprom, CalibrationData.CRC_data);
 80003ca:	e9d4 1000 	ldrd	r1, r0, [r4]
 80003ce:	f7ff ff53 	bl	8000278 <flash_write>
	flash_write( CalibrationData.Calibration0ValueForCurrent_AddresInEEprom, CalibrationData.Calibration0ValueForCurrent);
 80003d2:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80003d6:	f7ff ff4f 	bl	8000278 <flash_write>
	flash_write( CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom, CalibrationData.Calibration0ValueForCurrent1);
 80003da:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 80003de:	f7ff ff4b 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForCurrent_AddresInEEprom, CalibrationData.CalibrationValueForCurrent);
 80003e2:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 80003e6:	f7ff ff47 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForCurrent1_AddresInEEprom, CalibrationData.CalibrationValueForCurrent1);
 80003ea:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 80003ee:	f7ff ff43 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage_AddresInEEprom, CalibrationData.CalibrationValueForVoltage);
 80003f2:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 80003f6:	f7ff ff3f 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage1_AddresInEEprom, CalibrationData.CalibrationValueForVoltage1);
 80003fa:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 80003fe:	f7ff ff3b 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage2_AddresInEEprom, CalibrationData.CalibrationValueForVoltage2);
 8000402:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 8000406:	f7ff ff37 	bl	8000278 <flash_write>
	flash_write( CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom, CalibrationData.ResistanceComp_Ishunt_Wires);
 800040a:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 800040e:	f7ff ff33 	bl	8000278 <flash_write>
	flash_write( CalibrationData.ResistanceComp_MOSFET_AddresInEEprom, CalibrationData.ResistanceComp_MOSFET);
 8000412:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
 8000416:	f7ff ff2f 	bl	8000278 <flash_write>
	logDebug("CalibrationWriteToFlash ");
 800041a:	4804      	ldr	r0, [pc, #16]	; (800042c <CalibrationWriteToFlash+0x6c>)
 800041c:	f005 f84e 	bl	80054bc <printToBufferWithoutEndUART1>
 8000420:	4803      	ldr	r0, [pc, #12]	; (8000430 <CalibrationWriteToFlash+0x70>)
 8000422:	f004 ffe1 	bl	80053e8 <printToBufferUART1>

}
 8000426:	bd10      	pop	{r4, pc}
 8000428:	20000004 	.word	0x20000004
 800042c:	08005eb1 	.word	0x08005eb1
 8000430:	08005be1 	.word	0x08005be1

08000434 <CalibrationFactoryWriteToFlash>:
uint8_t CalibrationFactoryWriteToFlash(void)
{
 8000434:	b510      	push	{r4, lr}
	flash_erase_page( CalibrationDataFactory.CRC_AddresInEEprom);
 8000436:	4c19      	ldr	r4, [pc, #100]	; (800049c <CalibrationFactoryWriteToFlash+0x68>)
 8000438:	6860      	ldr	r0, [r4, #4]
 800043a:	f7ff fee9 	bl	8000210 <flash_erase_page>
	flash_write( CalibrationDataFactory.CRC_AddresInEEprom, CalibrationDataFactory.CRC_data);
 800043e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000442:	f7ff ff19 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.Calibration0ValueForCurrent_AddresInEEprom, CalibrationDataFactory.Calibration0ValueForCurrent);
 8000446:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800044a:	f7ff ff15 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.Calibration0ValueForCurrent1_AddresInEEprom, CalibrationDataFactory.Calibration0ValueForCurrent1);
 800044e:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000452:	f7ff ff11 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForCurrent_AddresInEEprom, CalibrationDataFactory.CalibrationValueForCurrent);
 8000456:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 800045a:	f7ff ff0d 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForCurrent1_AddresInEEprom, CalibrationDataFactory.CalibrationValueForCurrent1);
 800045e:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 8000462:	f7ff ff09 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage);
 8000466:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 800046a:	f7ff ff05 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage1_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage1);
 800046e:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 8000472:	f7ff ff01 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage2_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage2);
 8000476:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 800047a:	f7ff fefd 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.ResistanceComp_Ishunt_Wires_AddresInEEprom, CalibrationDataFactory.ResistanceComp_Ishunt_Wires);
 800047e:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 8000482:	f7ff fef9 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.ResistanceComp_MOSFET_AddresInEEprom, CalibrationDataFactory.ResistanceComp_MOSFET);
 8000486:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
 800048a:	f7ff fef5 	bl	8000278 <flash_write>
	logDebug("CalibrationFactoryWriteToFlash ");
 800048e:	4804      	ldr	r0, [pc, #16]	; (80004a0 <CalibrationFactoryWriteToFlash+0x6c>)
 8000490:	f005 f814 	bl	80054bc <printToBufferWithoutEndUART1>
 8000494:	4803      	ldr	r0, [pc, #12]	; (80004a4 <CalibrationFactoryWriteToFlash+0x70>)
 8000496:	f004 ffa7 	bl	80053e8 <printToBufferUART1>
}
 800049a:	bd10      	pop	{r4, pc}
 800049c:	20000054 	.word	0x20000054
 80004a0:	08005eb1 	.word	0x08005eb1
 80004a4:	08005b84 	.word	0x08005b84

080004a8 <CalibrationReadFromFlash>:
uint8_t CalibrationReadFromFlash(void)
{
 80004a8:	b538      	push	{r3, r4, r5, lr}
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 80004aa:	4c24      	ldr	r4, [pc, #144]	; (800053c <CalibrationReadFromFlash+0x94>)
 80004ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004b0:	2100      	movs	r1, #0
 80004b2:	6860      	ldr	r0, [r4, #4]
 80004b4:	f7ff ff52 	bl	800035c <flash_read>
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 80004bc:	6020      	str	r0, [r4, #0]
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004be:	2100      	movs	r1, #0
 80004c0:	68e0      	ldr	r0, [r4, #12]
 80004c2:	f7ff ff4b 	bl	800035c <flash_read>
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004ca:	60a0      	str	r0, [r4, #8]
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004cc:	2100      	movs	r1, #0
 80004ce:	6960      	ldr	r0, [r4, #20]
 80004d0:	f7ff ff44 	bl	800035c <flash_read>
	CalibrationData.CalibrationValueForCurrent = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004d4:	4d1a      	ldr	r5, [pc, #104]	; (8000540 <CalibrationReadFromFlash+0x98>)
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004d6:	6120      	str	r0, [r4, #16]
	CalibrationData.CalibrationValueForCurrent = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004d8:	462a      	mov	r2, r5
 80004da:	210a      	movs	r1, #10
 80004dc:	69e0      	ldr	r0, [r4, #28]
 80004de:	f7ff ff3d 	bl	800035c <flash_read>
	CalibrationData.CalibrationValueForCurrent1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004e2:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForCurrent = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004e4:	61a0      	str	r0, [r4, #24]
	CalibrationData.CalibrationValueForCurrent1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004e6:	210a      	movs	r1, #10
 80004e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80004ea:	f7ff ff37 	bl	800035c <flash_read>
	CalibrationData.CalibrationValueForVoltage = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004ee:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForCurrent1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004f0:	6220      	str	r0, [r4, #32]
	CalibrationData.CalibrationValueForVoltage = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004f2:	210a      	movs	r1, #10
 80004f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80004f6:	f7ff ff31 	bl	800035c <flash_read>
	CalibrationData.CalibrationValueForVoltage1 = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004fa:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForVoltage = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004fc:	62a0      	str	r0, [r4, #40]	; 0x28
	CalibrationData.CalibrationValueForVoltage1 = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004fe:	210a      	movs	r1, #10
 8000500:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000502:	f7ff ff2b 	bl	800035c <flash_read>
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 8000506:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForVoltage1 = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 8000508:	6320      	str	r0, [r4, #48]	; 0x30
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 800050a:	210a      	movs	r1, #10
 800050c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800050e:	f7ff ff25 	bl	800035c <flash_read>
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 8000512:	22c8      	movs	r2, #200	; 0xc8
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 8000514:	63a0      	str	r0, [r4, #56]	; 0x38
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 8000516:	2146      	movs	r1, #70	; 0x46
 8000518:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800051a:	f7ff ff1f 	bl	800035c <flash_read>
	CalibrationData.ResistanceComp_MOSFET = flash_read(CalibrationData.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 800051e:	22c8      	movs	r2, #200	; 0xc8
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 8000520:	6420      	str	r0, [r4, #64]	; 0x40
	CalibrationData.ResistanceComp_MOSFET = flash_read(CalibrationData.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 8000522:	210a      	movs	r1, #10
 8000524:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000526:	f7ff ff19 	bl	800035c <flash_read>
 800052a:	64a0      	str	r0, [r4, #72]	; 0x48
	logDebug("CalibrationReadFromFlash ");
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <CalibrationReadFromFlash+0x9c>)
 800052e:	f004 ffc5 	bl	80054bc <printToBufferWithoutEndUART1>
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <CalibrationReadFromFlash+0xa0>)
 8000534:	f004 ff58 	bl	80053e8 <printToBufferUART1>
}
 8000538:	bd38      	pop	{r3, r4, r5, pc}
 800053a:	bf00      	nop
 800053c:	20000004 	.word	0x20000004
 8000540:	000186a0 	.word	0x000186a0
 8000544:	08005eb1 	.word	0x08005eb1
 8000548:	08005ba4 	.word	0x08005ba4

0800054c <CalibrationReadFromFlashForVerify>:
uint8_t CalibrationReadFromFlashForVerify(void)
{
 800054c:	b538      	push	{r3, r4, r5, lr}
	CalibrationDataForVerify.CRC_data = flash_read(CalibrationDataForVerify.CRC_AddresInEEprom,0,256);
 800054e:	4c24      	ldr	r4, [pc, #144]	; (80005e0 <CalibrationReadFromFlashForVerify+0x94>)
 8000550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000554:	2100      	movs	r1, #0
 8000556:	6860      	ldr	r0, [r4, #4]
 8000558:	f7ff ff00 	bl	800035c <flash_read>
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 800055c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationDataForVerify.CRC_data = flash_read(CalibrationDataForVerify.CRC_AddresInEEprom,0,256);
 8000560:	6020      	str	r0, [r4, #0]
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 8000562:	2100      	movs	r1, #0
 8000564:	68e0      	ldr	r0, [r4, #12]
 8000566:	f7ff fef9 	bl	800035c <flash_read>
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 800056a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 800056e:	60a0      	str	r0, [r4, #8]
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 8000570:	2100      	movs	r1, #0
 8000572:	6960      	ldr	r0, [r4, #20]
 8000574:	f7ff fef2 	bl	800035c <flash_read>
	CalibrationDataForVerify.CalibrationValueForCurrent = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 8000578:	4d1a      	ldr	r5, [pc, #104]	; (80005e4 <CalibrationReadFromFlashForVerify+0x98>)
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 800057a:	6120      	str	r0, [r4, #16]
	CalibrationDataForVerify.CalibrationValueForCurrent = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 800057c:	462a      	mov	r2, r5
 800057e:	210a      	movs	r1, #10
 8000580:	69e0      	ldr	r0, [r4, #28]
 8000582:	f7ff feeb 	bl	800035c <flash_read>
	CalibrationDataForVerify.CalibrationValueForCurrent1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 8000586:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForCurrent = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 8000588:	61a0      	str	r0, [r4, #24]
	CalibrationDataForVerify.CalibrationValueForCurrent1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 800058a:	210a      	movs	r1, #10
 800058c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800058e:	f7ff fee5 	bl	800035c <flash_read>
	CalibrationDataForVerify.CalibrationValueForVoltage = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000592:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForCurrent1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 8000594:	6220      	str	r0, [r4, #32]
	CalibrationDataForVerify.CalibrationValueForVoltage = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000596:	210a      	movs	r1, #10
 8000598:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800059a:	f7ff fedf 	bl	800035c <flash_read>
	CalibrationDataForVerify.CalibrationValueForVoltage1 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 800059e:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForVoltage = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80005a0:	62a0      	str	r0, [r4, #40]	; 0x28
	CalibrationDataForVerify.CalibrationValueForVoltage1 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80005a2:	210a      	movs	r1, #10
 80005a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80005a6:	f7ff fed9 	bl	800035c <flash_read>
	CalibrationDataForVerify.CalibrationValueForVoltage2 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80005aa:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForVoltage1 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80005ac:	6320      	str	r0, [r4, #48]	; 0x30
	CalibrationDataForVerify.CalibrationValueForVoltage2 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80005ae:	210a      	movs	r1, #10
 80005b0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80005b2:	f7ff fed3 	bl	800035c <flash_read>
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 80005b6:	22c8      	movs	r2, #200	; 0xc8
	CalibrationDataForVerify.CalibrationValueForVoltage2 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80005b8:	63a0      	str	r0, [r4, #56]	; 0x38
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 80005ba:	2146      	movs	r1, #70	; 0x46
 80005bc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80005be:	f7ff fecd 	bl	800035c <flash_read>
	CalibrationDataForVerify.ResistanceComp_MOSFET = flash_read(CalibrationDataForVerify.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 80005c2:	22c8      	movs	r2, #200	; 0xc8
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 80005c4:	6420      	str	r0, [r4, #64]	; 0x40
	CalibrationDataForVerify.ResistanceComp_MOSFET = flash_read(CalibrationDataForVerify.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 80005c6:	210a      	movs	r1, #10
 80005c8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80005ca:	f7ff fec7 	bl	800035c <flash_read>
 80005ce:	64a0      	str	r0, [r4, #72]	; 0x48
	logDebug("CalibrationReadFromFlashForVerify ");
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <CalibrationReadFromFlashForVerify+0x9c>)
 80005d2:	f004 ff73 	bl	80054bc <printToBufferWithoutEndUART1>
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <CalibrationReadFromFlashForVerify+0xa0>)
 80005d8:	f004 ff06 	bl	80053e8 <printToBufferUART1>
}
 80005dc:	bd38      	pop	{r3, r4, r5, pc}
 80005de:	bf00      	nop
 80005e0:	200000a4 	.word	0x200000a4
 80005e4:	000186a0 	.word	0x000186a0
 80005e8:	08005eb1 	.word	0x08005eb1
 80005ec:	08005bbe 	.word	0x08005bbe

080005f0 <SettingsWriteToFlash>:
//==============
uint8_t SettingsWriteToFlash(void)
{
 80005f0:	b510      	push	{r4, lr}
	flash_erase_page( SettingsData.CRC_AddresInEEprom);
 80005f2:	4c17      	ldr	r4, [pc, #92]	; (8000650 <SettingsWriteToFlash+0x60>)
 80005f4:	6860      	ldr	r0, [r4, #4]
 80005f6:	f7ff fe0b 	bl	8000210 <flash_erase_page>
	flash_write( SettingsData.CRC_AddresInEEprom, SettingsData.CRC_data);
 80005fa:	e9d4 1000 	ldrd	r1, r0, [r4]
 80005fe:	f7ff fe3b 	bl	8000278 <flash_write>
	flash_write( SettingsData.Option1_AddresInEEprom, SettingsData.Option1);
 8000602:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000606:	f7ff fe37 	bl	8000278 <flash_write>
	flash_write( SettingsData.ChargeTime_AddresInEEprom, SettingsData.ChargeTime);
 800060a:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 800060e:	f7ff fe33 	bl	8000278 <flash_write>
	flash_write( SettingsData.LowVoltage_AddresInEEprom, SettingsData.LowVoltage);
 8000612:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000616:	f7ff fe2f 	bl	8000278 <flash_write>
	flash_write( SettingsData.MaxVoltage_AddresInEEprom, SettingsData.MaxVoltage);
 800061a:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800061e:	f7ff fe2b 	bl	8000278 <flash_write>
	flash_write( SettingsData.Swing_Chrg_time_AddresInEEprom, SettingsData.Swing_Chrg_time);
 8000622:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 8000626:	f7ff fe27 	bl	8000278 <flash_write>
	flash_write( SettingsData.Swing_DChrg_time_AddresInEEprom, SettingsData.Swing_DChrg_time);
 800062a:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 800062e:	f7ff fe23 	bl	8000278 <flash_write>
	flash_write( SettingsData.ChargeAdapt_AddresInEEprom, SettingsData.ChargeAdapt);
 8000632:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 8000636:	f7ff fe1f 	bl	8000278 <flash_write>
	flash_write( SettingsData.Option2_AddresInEEprom, SettingsData.Option2);
 800063a:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 800063e:	f7ff fe1b 	bl	8000278 <flash_write>
	logDebug("SettingsWriteToFlash ");
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <SettingsWriteToFlash+0x64>)
 8000644:	f004 ff3a 	bl	80054bc <printToBufferWithoutEndUART1>
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <SettingsWriteToFlash+0x68>)
 800064a:	f004 fecd 	bl	80053e8 <printToBufferUART1>
}
 800064e:	bd10      	pop	{r4, pc}
 8000650:	20000154 	.word	0x20000154
 8000654:	08005eb1 	.word	0x08005eb1
 8000658:	08005e5b 	.word	0x08005e5b

0800065c <SettingsFactoryWriteToFlash>:
uint8_t SettingsFactoryWriteToFlash(void)
{
 800065c:	b510      	push	{r4, lr}
	flash_erase_page( SettingsDataFactory.CRC_AddresInEEprom);
 800065e:	4c17      	ldr	r4, [pc, #92]	; (80006bc <SettingsFactoryWriteToFlash+0x60>)
 8000660:	6860      	ldr	r0, [r4, #4]
 8000662:	f7ff fdd5 	bl	8000210 <flash_erase_page>
	flash_write( SettingsDataFactory.CRC_AddresInEEprom, SettingsDataFactory.CRC_data);
 8000666:	e9d4 1000 	ldrd	r1, r0, [r4]
 800066a:	f7ff fe05 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Option1_AddresInEEprom, SettingsDataFactory.Option1);
 800066e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000672:	f7ff fe01 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.ChargeTime_AddresInEEprom, SettingsDataFactory.ChargeTime);
 8000676:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 800067a:	f7ff fdfd 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.LowVoltage_AddresInEEprom, SettingsDataFactory.LowVoltage);
 800067e:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000682:	f7ff fdf9 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.MaxVoltage_AddresInEEprom, SettingsDataFactory.MaxVoltage);
 8000686:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800068a:	f7ff fdf5 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Swing_Chrg_time_AddresInEEprom, SettingsDataFactory.Swing_Chrg_time);
 800068e:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 8000692:	f7ff fdf1 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Swing_DChrg_time_AddresInEEprom, SettingsDataFactory.Swing_DChrg_time);
 8000696:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 800069a:	f7ff fded 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.ChargeAdapt_AddresInEEprom, SettingsDataFactory.ChargeAdapt);
 800069e:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 80006a2:	f7ff fde9 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Option2_AddresInEEprom, SettingsDataFactory.Option2);
 80006a6:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 80006aa:	f7ff fde5 	bl	8000278 <flash_write>
	logDebug("SettingsFactoryWriteToFlash ");
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <SettingsFactoryWriteToFlash+0x64>)
 80006b0:	f004 ff04 	bl	80054bc <printToBufferWithoutEndUART1>
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <SettingsFactoryWriteToFlash+0x68>)
 80006b6:	f004 fe97 	bl	80053e8 <printToBufferUART1>
}
 80006ba:	bd10      	pop	{r4, pc}
 80006bc:	2000019c 	.word	0x2000019c
 80006c0:	08005eb1 	.word	0x08005eb1
 80006c4:	08005e07 	.word	0x08005e07

080006c8 <SettingsReadFromFlash>:
uint8_t SettingsReadFromFlash(void)
{
 80006c8:	b510      	push	{r4, lr}
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80006ca:	4c22      	ldr	r4, [pc, #136]	; (8000754 <SettingsReadFromFlash+0x8c>)
 80006cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d0:	2100      	movs	r1, #0
 80006d2:	6860      	ldr	r0, [r4, #4]
 80006d4:	f7ff fe42 	bl	800035c <flash_read>
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006d8:	220a      	movs	r2, #10
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80006da:	6020      	str	r0, [r4, #0]
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006dc:	2101      	movs	r1, #1
 80006de:	68e0      	ldr	r0, [r4, #12]
 80006e0:	f7ff fe3c 	bl	800035c <flash_read>
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006e8:	60a0      	str	r0, [r4, #8]
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006ea:	2101      	movs	r1, #1
 80006ec:	6960      	ldr	r0, [r4, #20]
 80006ee:	f7ff fe35 	bl	800035c <flash_read>
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006f2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006f6:	6120      	str	r0, [r4, #16]
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006f8:	2101      	movs	r1, #1
 80006fa:	69e0      	ldr	r0, [r4, #28]
 80006fc:	f7ff fe2e 	bl	800035c <flash_read>
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 8000700:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 8000704:	61a0      	str	r0, [r4, #24]
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 8000706:	2101      	movs	r1, #1
 8000708:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800070a:	f7ff fe27 	bl	800035c <flash_read>
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 800070e:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 8000712:	6220      	str	r0, [r4, #32]
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000714:	2100      	movs	r1, #0
 8000716:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000718:	f7ff fe20 	bl	800035c <flash_read>
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 800071c:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000720:	62a0      	str	r0, [r4, #40]	; 0x28
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 8000722:	2100      	movs	r1, #0
 8000724:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000726:	f7ff fe19 	bl	800035c <flash_read>
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 800072a:	2264      	movs	r2, #100	; 0x64
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 800072c:	6320      	str	r0, [r4, #48]	; 0x30
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 800072e:	2100      	movs	r1, #0
 8000730:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000732:	f7ff fe13 	bl	800035c <flash_read>
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 8000736:	2203      	movs	r2, #3
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 8000738:	63a0      	str	r0, [r4, #56]	; 0x38
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 800073a:	2101      	movs	r1, #1
 800073c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800073e:	f7ff fe0d 	bl	800035c <flash_read>
 8000742:	6420      	str	r0, [r4, #64]	; 0x40
	logDebug("SettingsReadFromFlash ");
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <SettingsReadFromFlash+0x90>)
 8000746:	f004 feb9 	bl	80054bc <printToBufferWithoutEndUART1>
 800074a:	4804      	ldr	r0, [pc, #16]	; (800075c <SettingsReadFromFlash+0x94>)
 800074c:	f004 fe4c 	bl	80053e8 <printToBufferUART1>
}
 8000750:	bd10      	pop	{r4, pc}
 8000752:	bf00      	nop
 8000754:	20000154 	.word	0x20000154
 8000758:	08005eb1 	.word	0x08005eb1
 800075c:	08005e24 	.word	0x08005e24

08000760 <SettingsReadFromFlashForVerify>:
uint8_t SettingsReadFromFlashForVerify(void)
{
 8000760:	b510      	push	{r4, lr}
	SettingsDataForVerify.CRC_data = flash_read(SettingsDataForVerify.CRC_AddresInEEprom,0,256);
 8000762:	4c22      	ldr	r4, [pc, #136]	; (80007ec <SettingsReadFromFlashForVerify+0x8c>)
 8000764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000768:	2100      	movs	r1, #0
 800076a:	6860      	ldr	r0, [r4, #4]
 800076c:	f7ff fdf6 	bl	800035c <flash_read>
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000770:	220a      	movs	r2, #10
	SettingsDataForVerify.CRC_data = flash_read(SettingsDataForVerify.CRC_AddresInEEprom,0,256);
 8000772:	6020      	str	r0, [r4, #0]
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000774:	2101      	movs	r1, #1
 8000776:	68e0      	ldr	r0, [r4, #12]
 8000778:	f7ff fdf0 	bl	800035c <flash_read>
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 800077c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000780:	60a0      	str	r0, [r4, #8]
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 8000782:	2101      	movs	r1, #1
 8000784:	6960      	ldr	r0, [r4, #20]
 8000786:	f7ff fde9 	bl	800035c <flash_read>
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 800078a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 800078e:	6120      	str	r0, [r4, #16]
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 8000790:	2101      	movs	r1, #1
 8000792:	69e0      	ldr	r0, [r4, #28]
 8000794:	f7ff fde2 	bl	800035c <flash_read>
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 8000798:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 800079c:	61a0      	str	r0, [r4, #24]
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 800079e:	2101      	movs	r1, #1
 80007a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80007a2:	f7ff fddb 	bl	800035c <flash_read>
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 80007a6:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 80007aa:	6220      	str	r0, [r4, #32]
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 80007ac:	2100      	movs	r1, #0
 80007ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80007b0:	f7ff fdd4 	bl	800035c <flash_read>
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007b4:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 80007b8:	62a0      	str	r0, [r4, #40]	; 0x28
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007ba:	2100      	movs	r1, #0
 80007bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80007be:	f7ff fdcd 	bl	800035c <flash_read>
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007c2:	2264      	movs	r2, #100	; 0x64
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007c4:	6320      	str	r0, [r4, #48]	; 0x30
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007c6:	2100      	movs	r1, #0
 80007c8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80007ca:	f7ff fdc7 	bl	800035c <flash_read>
	SettingsDataForVerify.Option2 =  flash_read(SettingsDataForVerify.Option2_AddresInEEprom,1,3);
 80007ce:	2203      	movs	r2, #3
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007d0:	63a0      	str	r0, [r4, #56]	; 0x38
	SettingsDataForVerify.Option2 =  flash_read(SettingsDataForVerify.Option2_AddresInEEprom,1,3);
 80007d2:	2101      	movs	r1, #1
 80007d4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80007d6:	f7ff fdc1 	bl	800035c <flash_read>
 80007da:	6420      	str	r0, [r4, #64]	; 0x40
	logDebug("SettingsReadFromFlashForVerify ");
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <SettingsReadFromFlashForVerify+0x90>)
 80007de:	f004 fe6d 	bl	80054bc <printToBufferWithoutEndUART1>
 80007e2:	4804      	ldr	r0, [pc, #16]	; (80007f4 <SettingsReadFromFlashForVerify+0x94>)
 80007e4:	f004 fe00 	bl	80053e8 <printToBufferUART1>
}
 80007e8:	bd10      	pop	{r4, pc}
 80007ea:	bf00      	nop
 80007ec:	200001e4 	.word	0x200001e4
 80007f0:	08005eb1 	.word	0x08005eb1
 80007f4:	08005e3b 	.word	0x08005e3b

080007f8 <DataWhenPowerOffWriteToFlash>:
//===============
uint8_t DataWhenPowerOffWriteToFlash(void)
{
 80007f8:	b538      	push	{r3, r4, r5, lr}
	logDebugD("Write C maH : ",SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue,0);
 80007fa:	4d12      	ldr	r5, [pc, #72]	; (8000844 <DataWhenPowerOffWriteToFlash+0x4c>)
 80007fc:	4c12      	ldr	r4, [pc, #72]	; (8000848 <DataWhenPowerOffWriteToFlash+0x50>)
 80007fe:	4628      	mov	r0, r5
 8000800:	f004 fe5c 	bl	80054bc <printToBufferWithoutEndUART1>
 8000804:	2200      	movs	r2, #0
 8000806:	68a1      	ldr	r1, [r4, #8]
 8000808:	4810      	ldr	r0, [pc, #64]	; (800084c <DataWhenPowerOffWriteToFlash+0x54>)
 800080a:	f004 fe9b 	bl	8005544 <printToBufferUART1D>
	flash_erase_page( SaveDataWhenPowerOff.CRC_AddresInEEprom);
 800080e:	6860      	ldr	r0, [r4, #4]
 8000810:	f7ff fcfe 	bl	8000210 <flash_erase_page>
	flash_write( SaveDataWhenPowerOff.CRC_AddresInEEprom, SaveDataWhenPowerOff.CRC_data);
 8000814:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000818:	f7ff fd2e 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom, SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue);
 800081c:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000820:	f7ff fd2a 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent);
 8000824:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000828:	f7ff fd26 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOff.OutState_AddresInEEprom, SaveDataWhenPowerOff.OutState);
 800082c:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000830:	f7ff fd22 	bl	8000278 <flash_write>
	logDebug("DataWhenPowerOffWriteToFlash ");
 8000834:	4628      	mov	r0, r5
 8000836:	f004 fe41 	bl	80054bc <printToBufferWithoutEndUART1>
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <DataWhenPowerOffWriteToFlash+0x58>)
 800083c:	f004 fdd4 	bl	80053e8 <printToBufferUART1>
}
 8000840:	bd38      	pop	{r3, r4, r5, pc}
 8000842:	bf00      	nop
 8000844:	08005eb1 	.word	0x08005eb1
 8000848:	200000f4 	.word	0x200000f4
 800084c:	08005c41 	.word	0x08005c41
 8000850:	08005c50 	.word	0x08005c50

08000854 <DataWhenPowerOff_Factory_WriteToFlash>:
uint8_t DataWhenPowerOff_Factory_WriteToFlash(void)
{
 8000854:	b510      	push	{r4, lr}
	flash_erase_page( SaveDataWhenPowerOffFactory.CRC_AddresInEEprom);
 8000856:	4c0d      	ldr	r4, [pc, #52]	; (800088c <DataWhenPowerOff_Factory_WriteToFlash+0x38>)
 8000858:	6860      	ldr	r0, [r4, #4]
 800085a:	f7ff fcd9 	bl	8000210 <flash_erase_page>
	flash_write( SaveDataWhenPowerOffFactory.CRC_AddresInEEprom, SaveDataWhenPowerOffFactory.CRC_data);
 800085e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000862:	f7ff fd09 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargePrevious_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargePreviousValue);
 8000866:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800086a:	f7ff fd05 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent);
 800086e:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000872:	f7ff fd01 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.OutState_AddresInEEprom, SaveDataWhenPowerOffFactory.OutState);
 8000876:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 800087a:	f7ff fcfd 	bl	8000278 <flash_write>
	logDebug("DataWhenPowerOff_Factory_WriteToFlash ");
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <DataWhenPowerOff_Factory_WriteToFlash+0x3c>)
 8000880:	f004 fe1c 	bl	80054bc <printToBufferWithoutEndUART1>
 8000884:	4803      	ldr	r0, [pc, #12]	; (8000894 <DataWhenPowerOff_Factory_WriteToFlash+0x40>)
 8000886:	f004 fdaf 	bl	80053e8 <printToBufferUART1>
}
 800088a:	bd10      	pop	{r4, pc}
 800088c:	20000114 	.word	0x20000114
 8000890:	08005eb1 	.word	0x08005eb1
 8000894:	08005c7a 	.word	0x08005c7a

08000898 <DataWhenPowerOffReadFromFlash>:
uint8_t DataWhenPowerOffReadFromFlash(void)
{
 8000898:	b538      	push	{r3, r4, r5, lr}
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 800089a:	4c11      	ldr	r4, [pc, #68]	; (80008e0 <DataWhenPowerOffReadFromFlash+0x48>)
 800089c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a0:	2100      	movs	r1, #0
 80008a2:	6860      	ldr	r0, [r4, #4]
 80008a4:	f7ff fd5a 	bl	800035c <flash_read>
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80008a8:	4d0e      	ldr	r5, [pc, #56]	; (80008e4 <DataWhenPowerOffReadFromFlash+0x4c>)
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 80008aa:	6020      	str	r0, [r4, #0]
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80008ac:	462a      	mov	r2, r5
 80008ae:	2100      	movs	r1, #0
 80008b0:	68e0      	ldr	r0, [r4, #12]
 80008b2:	f7ff fd53 	bl	800035c <flash_read>
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008b6:	462a      	mov	r2, r5
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80008b8:	60a0      	str	r0, [r4, #8]
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008ba:	2100      	movs	r1, #0
 80008bc:	6960      	ldr	r0, [r4, #20]
 80008be:	f7ff fd4d 	bl	800035c <flash_read>
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 80008c2:	2201      	movs	r2, #1
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008c4:	6120      	str	r0, [r4, #16]
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 80008c6:	2100      	movs	r1, #0
 80008c8:	69e0      	ldr	r0, [r4, #28]
 80008ca:	f7ff fd47 	bl	800035c <flash_read>
 80008ce:	61a0      	str	r0, [r4, #24]
	logDebug("DataWhenPowerOffReadFromFlash ");
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <DataWhenPowerOffReadFromFlash+0x50>)
 80008d2:	f004 fdf3 	bl	80054bc <printToBufferWithoutEndUART1>
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <DataWhenPowerOffReadFromFlash+0x54>)
 80008d8:	f004 fd86 	bl	80053e8 <printToBufferUART1>
}
 80008dc:	bd38      	pop	{r3, r4, r5, pc}
 80008de:	bf00      	nop
 80008e0:	200000f4 	.word	0x200000f4
 80008e4:	ee6b2800 	.word	0xee6b2800
 80008e8:	08005eb1 	.word	0x08005eb1
 80008ec:	08005bfa 	.word	0x08005bfa

080008f0 <DataWhenPowerOffReadFromFlashForVerify>:
uint8_t DataWhenPowerOffReadFromFlashForVerify(void)
{
 80008f0:	b538      	push	{r3, r4, r5, lr}
	SaveDataWhenPowerOffForVerify.CRC_data = flash_read(SaveDataWhenPowerOffForVerify.CRC_AddresInEEprom,0,256);
 80008f2:	4c11      	ldr	r4, [pc, #68]	; (8000938 <DataWhenPowerOffReadFromFlashForVerify+0x48>)
 80008f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008f8:	2100      	movs	r1, #0
 80008fa:	6860      	ldr	r0, [r4, #4]
 80008fc:	f7ff fd2e 	bl	800035c <flash_read>
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000900:	4d0e      	ldr	r5, [pc, #56]	; (800093c <DataWhenPowerOffReadFromFlashForVerify+0x4c>)
	SaveDataWhenPowerOffForVerify.CRC_data = flash_read(SaveDataWhenPowerOffForVerify.CRC_AddresInEEprom,0,256);
 8000902:	6020      	str	r0, [r4, #0]
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000904:	462a      	mov	r2, r5
 8000906:	2100      	movs	r1, #0
 8000908:	68e0      	ldr	r0, [r4, #12]
 800090a:	f7ff fd27 	bl	800035c <flash_read>
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 800090e:	462a      	mov	r2, r5
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000910:	60a0      	str	r0, [r4, #8]
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 8000912:	2100      	movs	r1, #0
 8000914:	6960      	ldr	r0, [r4, #20]
 8000916:	f7ff fd21 	bl	800035c <flash_read>
	SaveDataWhenPowerOffForVerify.OutState = flash_read(SaveDataWhenPowerOffForVerify.OutState_AddresInEEprom,0,1);
 800091a:	2201      	movs	r2, #1
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 800091c:	6120      	str	r0, [r4, #16]
	SaveDataWhenPowerOffForVerify.OutState = flash_read(SaveDataWhenPowerOffForVerify.OutState_AddresInEEprom,0,1);
 800091e:	2100      	movs	r1, #0
 8000920:	69e0      	ldr	r0, [r4, #28]
 8000922:	f7ff fd1b 	bl	800035c <flash_read>
 8000926:	61a0      	str	r0, [r4, #24]
	logDebug("DataWhenPowerOffReadFromFlashForVerify ");
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <DataWhenPowerOffReadFromFlashForVerify+0x50>)
 800092a:	f004 fdc7 	bl	80054bc <printToBufferWithoutEndUART1>
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <DataWhenPowerOffReadFromFlashForVerify+0x54>)
 8000930:	f004 fd5a 	bl	80053e8 <printToBufferUART1>
}
 8000934:	bd38      	pop	{r3, r4, r5, pc}
 8000936:	bf00      	nop
 8000938:	20000134 	.word	0x20000134
 800093c:	ee6b2800 	.word	0xee6b2800
 8000940:	08005eb1 	.word	0x08005eb1
 8000944:	08005c19 	.word	0x08005c19

08000948 <ReadFromFlash>:




uint8_t ReadFromFlash(void)
{
 8000948:	b570      	push	{r4, r5, r6, lr}
		EEpromReadStatus = 1;
 800094a:	2401      	movs	r4, #1
 800094c:	4d0e      	ldr	r5, [pc, #56]	; (8000988 <ReadFromFlash+0x40>)
 800094e:	702c      	strb	r4, [r5, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
	    __disable_irq();

	    DataWhenPowerOffReadFromFlash();
 8000952:	f7ff ffa1 	bl	8000898 <DataWhenPowerOffReadFromFlash>
	    SettingsReadFromFlash();
 8000956:	f7ff feb7 	bl	80006c8 <SettingsReadFromFlash>
	    CalibrationReadFromFlash();
 800095a:	f7ff fda5 	bl	80004a8 <CalibrationReadFromFlash>
  __ASM volatile ("cpsie i" : : : "memory");
 800095e:	b662      	cpsie	i


		__enable_irq();
		if (EEpromReadStatus == 0)
 8000960:	782e      	ldrb	r6, [r5, #0]
		{
			logDebug("Read from EEprom - FAIL ");
 8000962:	480a      	ldr	r0, [pc, #40]	; (800098c <ReadFromFlash+0x44>)
		if (EEpromReadStatus == 0)
 8000964:	b93e      	cbnz	r6, 8000976 <ReadFromFlash+0x2e>
			logDebug("Read from EEprom - FAIL ");
 8000966:	f004 fda9 	bl	80054bc <printToBufferWithoutEndUART1>
 800096a:	4809      	ldr	r0, [pc, #36]	; (8000990 <ReadFromFlash+0x48>)
 800096c:	f004 fd3c 	bl	80053e8 <printToBufferUART1>
			EEpromReadStatus = 1;
 8000970:	702c      	strb	r4, [r5, #0]
		{
			logDebug("Read from EEprom - SUCCESS");
			EEpromReadStatus = 1;
			return 1;
		}
}
 8000972:	4630      	mov	r0, r6
 8000974:	bd70      	pop	{r4, r5, r6, pc}
			logDebug("Read from EEprom - SUCCESS");
 8000976:	f004 fda1 	bl	80054bc <printToBufferWithoutEndUART1>
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <ReadFromFlash+0x4c>)
 800097c:	f004 fd34 	bl	80053e8 <printToBufferUART1>
			return 1;
 8000980:	4626      	mov	r6, r4
			EEpromReadStatus = 1;
 8000982:	702c      	strb	r4, [r5, #0]
			return 1;
 8000984:	e7f5      	b.n	8000972 <ReadFromFlash+0x2a>
 8000986:	bf00      	nop
 8000988:	20000000 	.word	0x20000000
 800098c:	08005eb1 	.word	0x08005eb1
 8000990:	08005dd3 	.word	0x08005dd3
 8000994:	08005dec 	.word	0x08005dec

08000998 <CalcCRC8>:



char CalcCRC8(char *Ptr, char Num, char CRC1)
{
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	4615      	mov	r5, r2
 800099c:	460c      	mov	r4, r1
 800099e:	b0c0      	sub	sp, #256	; 0x100
 80009a0:	4606      	mov	r6, r0
   const char CrcTable[256] = {
 80009a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a6:	4909      	ldr	r1, [pc, #36]	; (80009cc <CalcCRC8+0x34>)
 80009a8:	4668      	mov	r0, sp
 80009aa:	f005 f84b 	bl	8005a44 <memcpy>
 80009ae:	4628      	mov	r0, r5
 80009b0:	3c01      	subs	r4, #1
 80009b2:	b2e4      	uxtb	r4, r4
 80009b4:	3401      	adds	r4, #1
 80009b6:	4434      	add	r4, r6
    0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, // e0
    0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83, // e8
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, // f0
    0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3 // f8
  };
  do  CRC1 = CrcTable[CRC1 ^ *Ptr++]; while (--Num);
 80009b8:	f816 3b01 	ldrb.w	r3, [r6], #1
 80009bc:	4058      	eors	r0, r3
 80009be:	42a6      	cmp	r6, r4
 80009c0:	f81d 0000 	ldrb.w	r0, [sp, r0]
 80009c4:	d1f8      	bne.n	80009b8 <CalcCRC8+0x20>
  return CRC1;
}
 80009c6:	b040      	add	sp, #256	; 0x100
 80009c8:	bd70      	pop	{r4, r5, r6, pc}
 80009ca:	bf00      	nop
 80009cc:	08005a84 	.word	0x08005a84

080009d0 <CalibrationWriteToFlash_CRC>:
{
 80009d0:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80009d2:	b672      	cpsid	i
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationData)+4,((unsigned char)sizeof(CalibrationData))-4,0);
 80009d4:	4d14      	ldr	r5, [pc, #80]	; (8000a28 <CalibrationWriteToFlash_CRC+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	214c      	movs	r1, #76	; 0x4c
 80009da:	4628      	mov	r0, r5
 80009dc:	f7ff ffdc 	bl	8000998 <CalcCRC8>
 80009e0:	4604      	mov	r4, r0
	CalibrationData.CRC_data = CRC_Calibration;
 80009e2:	f845 0c04 	str.w	r0, [r5, #-4]
	flash_unlock();
 80009e6:	f7ff fc33 	bl	8000250 <flash_unlock>
	CalibrationWriteToFlash();
 80009ea:	f7ff fce9 	bl	80003c0 <CalibrationWriteToFlash>
	CalibrationReadFromFlashForVerify();
 80009ee:	f7ff fdad 	bl	800054c <CalibrationReadFromFlashForVerify>
	CRC_CalibrationVerify = CalcCRC8(((unsigned char *) &CalibrationDataForVerify)+4,((unsigned char)sizeof(CalibrationDataForVerify))-4,0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	214c      	movs	r1, #76	; 0x4c
 80009f6:	480d      	ldr	r0, [pc, #52]	; (8000a2c <CalibrationWriteToFlash_CRC+0x5c>)
 80009f8:	f7ff ffce 	bl	8000998 <CalcCRC8>
	if (CRC_Calibration == CRC_CalibrationVerify )
 80009fc:	4284      	cmp	r4, r0
		logDebug("Calibration write to Flash success ");
 80009fe:	480c      	ldr	r0, [pc, #48]	; (8000a30 <CalibrationWriteToFlash_CRC+0x60>)
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000a00:	d109      	bne.n	8000a16 <CalibrationWriteToFlash_CRC+0x46>
		logDebug("Calibration write to Flash success ");
 8000a02:	f004 fd5b 	bl	80054bc <printToBufferWithoutEndUART1>
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <CalibrationWriteToFlash_CRC+0x64>)
 8000a08:	f004 fcee 	bl	80053e8 <printToBufferUART1>
	flash_lock();
 8000a0c:	f7ff fc2c 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a10:	b662      	cpsie	i
}
 8000a12:	2001      	movs	r0, #1
 8000a14:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("Calibration write to Flash Fail, try again... ");
 8000a16:	f004 fd51 	bl	80054bc <printToBufferWithoutEndUART1>
 8000a1a:	4807      	ldr	r0, [pc, #28]	; (8000a38 <CalibrationWriteToFlash_CRC+0x68>)
 8000a1c:	f004 fce4 	bl	80053e8 <printToBufferUART1>
		CalibrationWriteToFlash();
 8000a20:	f7ff fcce 	bl	80003c0 <CalibrationWriteToFlash>
 8000a24:	e7f2      	b.n	8000a0c <CalibrationWriteToFlash_CRC+0x3c>
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	200000a8 	.word	0x200000a8
 8000a30:	08005eb1 	.word	0x08005eb1
 8000a34:	08005cba 	.word	0x08005cba
 8000a38:	08005cdf 	.word	0x08005cdf

08000a3c <SettingsWriteToFlash_CRC>:
{
 8000a3c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3e:	b672      	cpsid	i
	CRC_Settings = CalcCRC8(((unsigned char *) &SettingsData)+4,((unsigned char)sizeof(SettingsData))-4,0);
 8000a40:	4d24      	ldr	r5, [pc, #144]	; (8000ad4 <SettingsWriteToFlash_CRC+0x98>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	2144      	movs	r1, #68	; 0x44
 8000a46:	4628      	mov	r0, r5
 8000a48:	f7ff ffa6 	bl	8000998 <CalcCRC8>
 8000a4c:	4604      	mov	r4, r0
	logDebugD("CRC is : ",CRC_Settings,0);
 8000a4e:	4822      	ldr	r0, [pc, #136]	; (8000ad8 <SettingsWriteToFlash_CRC+0x9c>)
 8000a50:	f004 fd34 	bl	80054bc <printToBufferWithoutEndUART1>
 8000a54:	2200      	movs	r2, #0
 8000a56:	4621      	mov	r1, r4
 8000a58:	4820      	ldr	r0, [pc, #128]	; (8000adc <SettingsWriteToFlash_CRC+0xa0>)
 8000a5a:	f004 fd73 	bl	8005544 <printToBufferUART1D>
	logDebugD("Size is : ",((unsigned char)sizeof(SettingsData))-4,0);
 8000a5e:	481e      	ldr	r0, [pc, #120]	; (8000ad8 <SettingsWriteToFlash_CRC+0x9c>)
 8000a60:	f004 fd2c 	bl	80054bc <printToBufferWithoutEndUART1>
 8000a64:	2200      	movs	r2, #0
 8000a66:	2144      	movs	r1, #68	; 0x44
 8000a68:	481d      	ldr	r0, [pc, #116]	; (8000ae0 <SettingsWriteToFlash_CRC+0xa4>)
 8000a6a:	f004 fd6b 	bl	8005544 <printToBufferUART1D>
	SettingsData.CRC_data = CRC_Settings;
 8000a6e:	f845 4c04 	str.w	r4, [r5, #-4]
	flash_unlock();
 8000a72:	f7ff fbed 	bl	8000250 <flash_unlock>
	SettingsWriteToFlash();
 8000a76:	f7ff fdbb 	bl	80005f0 <SettingsWriteToFlash>
	SettingsReadFromFlashForVerify();
 8000a7a:	f7ff fe71 	bl	8000760 <SettingsReadFromFlashForVerify>
	CRC_SettingsVerify = CalcCRC8(((unsigned char *) &SettingsDataForVerify)+4,((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2144      	movs	r1, #68	; 0x44
 8000a82:	4818      	ldr	r0, [pc, #96]	; (8000ae4 <SettingsWriteToFlash_CRC+0xa8>)
 8000a84:	f7ff ff88 	bl	8000998 <CalcCRC8>
 8000a88:	4605      	mov	r5, r0
	logDebugD("CRC is : ",CRC_SettingsVerify,0);
 8000a8a:	4813      	ldr	r0, [pc, #76]	; (8000ad8 <SettingsWriteToFlash_CRC+0x9c>)
 8000a8c:	f004 fd16 	bl	80054bc <printToBufferWithoutEndUART1>
 8000a90:	2200      	movs	r2, #0
 8000a92:	4629      	mov	r1, r5
 8000a94:	4811      	ldr	r0, [pc, #68]	; (8000adc <SettingsWriteToFlash_CRC+0xa0>)
 8000a96:	f004 fd55 	bl	8005544 <printToBufferUART1D>
	logDebugD("Size is : ",((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000a9a:	480f      	ldr	r0, [pc, #60]	; (8000ad8 <SettingsWriteToFlash_CRC+0x9c>)
 8000a9c:	f004 fd0e 	bl	80054bc <printToBufferWithoutEndUART1>
 8000aa0:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <SettingsWriteToFlash_CRC+0xa4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2144      	movs	r1, #68	; 0x44
 8000aa6:	f004 fd4d 	bl	8005544 <printToBufferUART1D>
	if (CRC_Settings == CRC_SettingsVerify )
 8000aaa:	42ac      	cmp	r4, r5
		logDebug("Settings write to Flash success ");
 8000aac:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <SettingsWriteToFlash_CRC+0x9c>)
	if (CRC_Settings == CRC_SettingsVerify )
 8000aae:	d109      	bne.n	8000ac4 <SettingsWriteToFlash_CRC+0x88>
		logDebug("Settings write to Flash success ");
 8000ab0:	f004 fd04 	bl	80054bc <printToBufferWithoutEndUART1>
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <SettingsWriteToFlash_CRC+0xac>)
 8000ab6:	f004 fc97 	bl	80053e8 <printToBufferUART1>
	flash_lock();
 8000aba:	f7ff fbd5 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000abe:	b662      	cpsie	i
}
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("Settings write to Flash Fail, try again... ");
 8000ac4:	f004 fcfa 	bl	80054bc <printToBufferWithoutEndUART1>
 8000ac8:	4808      	ldr	r0, [pc, #32]	; (8000aec <SettingsWriteToFlash_CRC+0xb0>)
 8000aca:	f004 fc8d 	bl	80053e8 <printToBufferUART1>
		SettingsWriteToFlash();
 8000ace:	f7ff fd8f 	bl	80005f0 <SettingsWriteToFlash>
 8000ad2:	e7f2      	b.n	8000aba <SettingsWriteToFlash_CRC+0x7e>
 8000ad4:	20000158 	.word	0x20000158
 8000ad8:	08005eb1 	.word	0x08005eb1
 8000adc:	08005d0f 	.word	0x08005d0f
 8000ae0:	08005d1a 	.word	0x08005d1a
 8000ae4:	200001e8 	.word	0x200001e8
 8000ae8:	08005d26 	.word	0x08005d26
 8000aec:	08005d48 	.word	0x08005d48

08000af0 <DataWhenPowerOffWriteToFlash_CRC>:
{
 8000af0:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8000af2:	b672      	cpsid	i
	CRC_DataWhenPowerOff = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOff)+4,((unsigned char)sizeof(SaveDataWhenPowerOff))-4,0);
 8000af4:	4c1c      	ldr	r4, [pc, #112]	; (8000b68 <DataWhenPowerOffWriteToFlash_CRC+0x78>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	211c      	movs	r1, #28
 8000afa:	4620      	mov	r0, r4
 8000afc:	f7ff ff4c 	bl	8000998 <CalcCRC8>
 8000b00:	4605      	mov	r5, r0
	SaveDataWhenPowerOff.CRC_data = CRC_DataWhenPowerOff;
 8000b02:	f844 0c04 	str.w	r0, [r4, #-4]
	flash_unlock();
 8000b06:	f7ff fba3 	bl	8000250 <flash_unlock>
	DataWhenPowerOffWriteToFlash();
 8000b0a:	f7ff fe75 	bl	80007f8 <DataWhenPowerOffWriteToFlash>
	DataWhenPowerOffReadFromFlashForVerify();
 8000b0e:	f7ff feef 	bl	80008f0 <DataWhenPowerOffReadFromFlashForVerify>
	logDebugD("stateoutE: ",SaveDataWhenPowerOff.OutState,0);
 8000b12:	4816      	ldr	r0, [pc, #88]	; (8000b6c <DataWhenPowerOffWriteToFlash_CRC+0x7c>)
 8000b14:	f004 fcd2 	bl	80054bc <printToBufferWithoutEndUART1>
 8000b18:	6961      	ldr	r1, [r4, #20]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	4814      	ldr	r0, [pc, #80]	; (8000b70 <DataWhenPowerOffWriteToFlash_CRC+0x80>)
	logDebugD("stateoutE: ",SaveDataWhenPowerOffForVerify.OutState,0);
 8000b1e:	4c15      	ldr	r4, [pc, #84]	; (8000b74 <DataWhenPowerOffWriteToFlash_CRC+0x84>)
	logDebugD("stateoutE: ",SaveDataWhenPowerOff.OutState,0);
 8000b20:	f004 fd10 	bl	8005544 <printToBufferUART1D>
	logDebugD("stateoutE: ",SaveDataWhenPowerOffForVerify.OutState,0);
 8000b24:	4811      	ldr	r0, [pc, #68]	; (8000b6c <DataWhenPowerOffWriteToFlash_CRC+0x7c>)
 8000b26:	f004 fcc9 	bl	80054bc <printToBufferWithoutEndUART1>
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	69a1      	ldr	r1, [r4, #24]
 8000b2e:	4810      	ldr	r0, [pc, #64]	; (8000b70 <DataWhenPowerOffWriteToFlash_CRC+0x80>)
 8000b30:	f004 fd08 	bl	8005544 <printToBufferUART1D>
	CRC_DataWhenPowerOffVerify = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffForVerify)+4,((unsigned char)sizeof(SaveDataWhenPowerOffForVerify))-4,0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	211c      	movs	r1, #28
 8000b38:	1d20      	adds	r0, r4, #4
 8000b3a:	f7ff ff2d 	bl	8000998 <CalcCRC8>
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000b3e:	4285      	cmp	r5, r0
		logDebug("DataWhenPowerOff write to Flash success ");
 8000b40:	480a      	ldr	r0, [pc, #40]	; (8000b6c <DataWhenPowerOffWriteToFlash_CRC+0x7c>)
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000b42:	d109      	bne.n	8000b58 <DataWhenPowerOffWriteToFlash_CRC+0x68>
		logDebug("DataWhenPowerOff write to Flash success ");
 8000b44:	f004 fcba 	bl	80054bc <printToBufferWithoutEndUART1>
 8000b48:	480b      	ldr	r0, [pc, #44]	; (8000b78 <DataWhenPowerOffWriteToFlash_CRC+0x88>)
 8000b4a:	f004 fc4d 	bl	80053e8 <printToBufferUART1>
	flash_lock();
 8000b4e:	f7ff fb8b 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b52:	b662      	cpsie	i
}
 8000b54:	2001      	movs	r0, #1
 8000b56:	bd70      	pop	{r4, r5, r6, pc}
		logDebug("DataWhenPowerOff write to Flash Fail, try again... ");
 8000b58:	f004 fcb0 	bl	80054bc <printToBufferWithoutEndUART1>
 8000b5c:	4807      	ldr	r0, [pc, #28]	; (8000b7c <DataWhenPowerOffWriteToFlash_CRC+0x8c>)
 8000b5e:	f004 fc43 	bl	80053e8 <printToBufferUART1>
		DataWhenPowerOffWriteToFlash();
 8000b62:	f7ff fe49 	bl	80007f8 <DataWhenPowerOffWriteToFlash>
 8000b66:	e7f2      	b.n	8000b4e <DataWhenPowerOffWriteToFlash_CRC+0x5e>
 8000b68:	200000f8 	.word	0x200000f8
 8000b6c:	08005eb1 	.word	0x08005eb1
 8000b70:	08005c6e 	.word	0x08005c6e
 8000b74:	20000134 	.word	0x20000134
 8000b78:	08005d75 	.word	0x08005d75
 8000b7c:	08005d9f 	.word	0x08005d9f

08000b80 <FactoryWriteToFlash_CRC>:
{
 8000b80:	b538      	push	{r3, r4, r5, lr}
	logDebug("FactoryWriteToFlash_CRC");
 8000b82:	484a      	ldr	r0, [pc, #296]	; (8000cac <FactoryWriteToFlash_CRC+0x12c>)
 8000b84:	f004 fc9a 	bl	80054bc <printToBufferWithoutEndUART1>
 8000b88:	4849      	ldr	r0, [pc, #292]	; (8000cb0 <FactoryWriteToFlash_CRC+0x130>)
 8000b8a:	f004 fc2d 	bl	80053e8 <printToBufferUART1>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8e:	b672      	cpsid	i
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationDataFactory)+4,((unsigned char)sizeof(CalibrationDataFactory))-4,0);
 8000b90:	4d48      	ldr	r5, [pc, #288]	; (8000cb4 <FactoryWriteToFlash_CRC+0x134>)
	flash_unlock();
 8000b92:	f7ff fb5d 	bl	8000250 <flash_unlock>
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationDataFactory)+4,((unsigned char)sizeof(CalibrationDataFactory))-4,0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	214c      	movs	r1, #76	; 0x4c
 8000b9a:	4628      	mov	r0, r5
 8000b9c:	f7ff fefc 	bl	8000998 <CalcCRC8>
 8000ba0:	4604      	mov	r4, r0
	CalibrationDataFactory.CRC_data = CRC_Calibration;
 8000ba2:	f845 0c04 	str.w	r0, [r5, #-4]
	CalibrationFactoryWriteToFlash();
 8000ba6:	f7ff fc45 	bl	8000434 <CalibrationFactoryWriteToFlash>
	CalibrationReadFromFlashForVerify();
 8000baa:	f7ff fccf 	bl	800054c <CalibrationReadFromFlashForVerify>
	CRC_CalibrationVerify = CalcCRC8(((unsigned char *) &CalibrationDataForVerify)+4,((unsigned char)sizeof(CalibrationDataForVerify))-4,0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	214c      	movs	r1, #76	; 0x4c
 8000bb2:	4841      	ldr	r0, [pc, #260]	; (8000cb8 <FactoryWriteToFlash_CRC+0x138>)
 8000bb4:	f7ff fef0 	bl	8000998 <CalcCRC8>
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000bb8:	4284      	cmp	r4, r0
		logDebug("FCalibration write to Flash success ");
 8000bba:	483c      	ldr	r0, [pc, #240]	; (8000cac <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000bbc:	d15d      	bne.n	8000c7a <FactoryWriteToFlash_CRC+0xfa>
		logDebug("FCalibration write to Flash success ");
 8000bbe:	f004 fc7d 	bl	80054bc <printToBufferWithoutEndUART1>
 8000bc2:	483e      	ldr	r0, [pc, #248]	; (8000cbc <FactoryWriteToFlash_CRC+0x13c>)
 8000bc4:	f004 fc10 	bl	80053e8 <printToBufferUART1>
	CRC_Settings = CalcCRC8(((unsigned char *) &SettingsDataFactory)+4,((unsigned char)sizeof(SettingsDataFactory))-4,0);
 8000bc8:	4d3d      	ldr	r5, [pc, #244]	; (8000cc0 <FactoryWriteToFlash_CRC+0x140>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2144      	movs	r1, #68	; 0x44
 8000bce:	4628      	mov	r0, r5
 8000bd0:	f7ff fee2 	bl	8000998 <CalcCRC8>
 8000bd4:	4604      	mov	r4, r0
	logDebugD("FCRC is : ",CRC_Settings,0);
 8000bd6:	4835      	ldr	r0, [pc, #212]	; (8000cac <FactoryWriteToFlash_CRC+0x12c>)
 8000bd8:	f004 fc70 	bl	80054bc <printToBufferWithoutEndUART1>
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4621      	mov	r1, r4
 8000be0:	4838      	ldr	r0, [pc, #224]	; (8000cc4 <FactoryWriteToFlash_CRC+0x144>)
 8000be2:	f004 fcaf 	bl	8005544 <printToBufferUART1D>
	logDebugD("FSize is : ",((unsigned char)sizeof(SettingsDataFactory))-4,0);
 8000be6:	4831      	ldr	r0, [pc, #196]	; (8000cac <FactoryWriteToFlash_CRC+0x12c>)
 8000be8:	f004 fc68 	bl	80054bc <printToBufferWithoutEndUART1>
 8000bec:	2200      	movs	r2, #0
 8000bee:	2144      	movs	r1, #68	; 0x44
 8000bf0:	4835      	ldr	r0, [pc, #212]	; (8000cc8 <FactoryWriteToFlash_CRC+0x148>)
 8000bf2:	f004 fca7 	bl	8005544 <printToBufferUART1D>
	SettingsDataFactory.CRC_data = CRC_Settings;
 8000bf6:	f845 4c04 	str.w	r4, [r5, #-4]
	SettingsFactoryWriteToFlash();
 8000bfa:	f7ff fd2f 	bl	800065c <SettingsFactoryWriteToFlash>
	SettingsReadFromFlashForVerify();
 8000bfe:	f7ff fdaf 	bl	8000760 <SettingsReadFromFlashForVerify>
	CRC_SettingsVerify = CalcCRC8(((unsigned char *) &SettingsDataForVerify)+4,((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2144      	movs	r1, #68	; 0x44
 8000c06:	4831      	ldr	r0, [pc, #196]	; (8000ccc <FactoryWriteToFlash_CRC+0x14c>)
 8000c08:	f7ff fec6 	bl	8000998 <CalcCRC8>
 8000c0c:	4605      	mov	r5, r0
	logDebugD("FCRC is : ",CRC_SettingsVerify,0);
 8000c0e:	4827      	ldr	r0, [pc, #156]	; (8000cac <FactoryWriteToFlash_CRC+0x12c>)
 8000c10:	f004 fc54 	bl	80054bc <printToBufferWithoutEndUART1>
 8000c14:	2200      	movs	r2, #0
 8000c16:	4629      	mov	r1, r5
 8000c18:	482a      	ldr	r0, [pc, #168]	; (8000cc4 <FactoryWriteToFlash_CRC+0x144>)
 8000c1a:	f004 fc93 	bl	8005544 <printToBufferUART1D>
	logDebugD("FSize is : ",((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000c1e:	4823      	ldr	r0, [pc, #140]	; (8000cac <FactoryWriteToFlash_CRC+0x12c>)
 8000c20:	f004 fc4c 	bl	80054bc <printToBufferWithoutEndUART1>
 8000c24:	4828      	ldr	r0, [pc, #160]	; (8000cc8 <FactoryWriteToFlash_CRC+0x148>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	2144      	movs	r1, #68	; 0x44
 8000c2a:	f004 fc8b 	bl	8005544 <printToBufferUART1D>
	if (CRC_Settings == CRC_SettingsVerify )
 8000c2e:	42ac      	cmp	r4, r5
		logDebug("FSettings write to Flash success ");
 8000c30:	481e      	ldr	r0, [pc, #120]	; (8000cac <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_Settings == CRC_SettingsVerify )
 8000c32:	d12a      	bne.n	8000c8a <FactoryWriteToFlash_CRC+0x10a>
		logDebug("FSettings write to Flash success ");
 8000c34:	f004 fc42 	bl	80054bc <printToBufferWithoutEndUART1>
 8000c38:	4825      	ldr	r0, [pc, #148]	; (8000cd0 <FactoryWriteToFlash_CRC+0x150>)
 8000c3a:	f004 fbd5 	bl	80053e8 <printToBufferUART1>
	CRC_DataWhenPowerOff = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffFactory)+4,((unsigned char)sizeof(SaveDataWhenPowerOffFactory))-4,0);
 8000c3e:	4d25      	ldr	r5, [pc, #148]	; (8000cd4 <FactoryWriteToFlash_CRC+0x154>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	211c      	movs	r1, #28
 8000c44:	4628      	mov	r0, r5
 8000c46:	f7ff fea7 	bl	8000998 <CalcCRC8>
 8000c4a:	4604      	mov	r4, r0
	SaveDataWhenPowerOffFactory.CRC_data = CRC_DataWhenPowerOff;
 8000c4c:	f845 0c04 	str.w	r0, [r5, #-4]
	DataWhenPowerOff_Factory_WriteToFlash();
 8000c50:	f7ff fe00 	bl	8000854 <DataWhenPowerOff_Factory_WriteToFlash>
	DataWhenPowerOffReadFromFlashForVerify();
 8000c54:	f7ff fe4c 	bl	80008f0 <DataWhenPowerOffReadFromFlashForVerify>
	CRC_DataWhenPowerOffVerify = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffForVerify)+4,((unsigned char)sizeof(SaveDataWhenPowerOffForVerify))-4,0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	211c      	movs	r1, #28
 8000c5c:	481e      	ldr	r0, [pc, #120]	; (8000cd8 <FactoryWriteToFlash_CRC+0x158>)
 8000c5e:	f7ff fe9b 	bl	8000998 <CalcCRC8>
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000c62:	4284      	cmp	r4, r0
		logDebug("FDataWhenPowerOff write to Flash success ");
 8000c64:	4811      	ldr	r0, [pc, #68]	; (8000cac <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000c66:	d118      	bne.n	8000c9a <FactoryWriteToFlash_CRC+0x11a>
		logDebug("FDataWhenPowerOff write to Flash success ");
 8000c68:	f004 fc28 	bl	80054bc <printToBufferWithoutEndUART1>
 8000c6c:	481b      	ldr	r0, [pc, #108]	; (8000cdc <FactoryWriteToFlash_CRC+0x15c>)
 8000c6e:	f004 fbbb 	bl	80053e8 <printToBufferUART1>
	flash_lock();
 8000c72:	f7ff faf9 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c76:	b662      	cpsie	i
}
 8000c78:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("FCalibration write to Flash Fail, try again... ");
 8000c7a:	f004 fc1f 	bl	80054bc <printToBufferWithoutEndUART1>
 8000c7e:	4818      	ldr	r0, [pc, #96]	; (8000ce0 <FactoryWriteToFlash_CRC+0x160>)
 8000c80:	f004 fbb2 	bl	80053e8 <printToBufferUART1>
		CalibrationFactoryWriteToFlash();
 8000c84:	f7ff fbd6 	bl	8000434 <CalibrationFactoryWriteToFlash>
 8000c88:	e79e      	b.n	8000bc8 <FactoryWriteToFlash_CRC+0x48>
		logDebug("FSettings write to Flash Fail, try again... ");
 8000c8a:	f004 fc17 	bl	80054bc <printToBufferWithoutEndUART1>
 8000c8e:	4815      	ldr	r0, [pc, #84]	; (8000ce4 <FactoryWriteToFlash_CRC+0x164>)
 8000c90:	f004 fbaa 	bl	80053e8 <printToBufferUART1>
		SettingsFactoryWriteToFlash();
 8000c94:	f7ff fce2 	bl	800065c <SettingsFactoryWriteToFlash>
 8000c98:	e7d1      	b.n	8000c3e <FactoryWriteToFlash_CRC+0xbe>
		logDebug("FDataWhenPowerOff write to Flash Fail, try again... ");
 8000c9a:	f004 fc0f 	bl	80054bc <printToBufferWithoutEndUART1>
 8000c9e:	4812      	ldr	r0, [pc, #72]	; (8000ce8 <FactoryWriteToFlash_CRC+0x168>)
 8000ca0:	f004 fba2 	bl	80053e8 <printToBufferUART1>
		DataWhenPowerOff_Factory_WriteToFlash();
 8000ca4:	f7ff fdd6 	bl	8000854 <DataWhenPowerOff_Factory_WriteToFlash>
 8000ca8:	e7e3      	b.n	8000c72 <FactoryWriteToFlash_CRC+0xf2>
 8000caa:	bf00      	nop
 8000cac:	08005eb1 	.word	0x08005eb1
 8000cb0:	08005ca1 	.word	0x08005ca1
 8000cb4:	20000058 	.word	0x20000058
 8000cb8:	200000a8 	.word	0x200000a8
 8000cbc:	08005cb9 	.word	0x08005cb9
 8000cc0:	200001a0 	.word	0x200001a0
 8000cc4:	08005d0e 	.word	0x08005d0e
 8000cc8:	08005d19 	.word	0x08005d19
 8000ccc:	200001e8 	.word	0x200001e8
 8000cd0:	08005d25 	.word	0x08005d25
 8000cd4:	20000118 	.word	0x20000118
 8000cd8:	20000138 	.word	0x20000138
 8000cdc:	08005d74 	.word	0x08005d74
 8000ce0:	08005cde 	.word	0x08005cde
 8000ce4:	08005d47 	.word	0x08005d47
 8000ce8:	08005d9e 	.word	0x08005d9e

08000cec <Generation_Coefficients_R_A_B>:
		{80,1950},
		{100,900},
		{150,500}
};
void Generation_Coefficients_R_A_B()
{
 8000cec:	4916      	ldr	r1, [pc, #88]	; (8000d48 <Generation_Coefficients_R_A_B+0x5c>)
 8000cee:	4817      	ldr	r0, [pc, #92]	; (8000d4c <Generation_Coefficients_R_A_B+0x60>)
 8000cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int8_t i;
	for (i=0;i<(TLT-1);i++)
	{
		Temp_R_A_B[i].R = T_Table[i].R;
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000cf4:	f242 7c10 	movw	ip, #10000	; 0x2710
 8000cf8:	460d      	mov	r5, r1
 8000cfa:	4604      	mov	r4, r0
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000cfc:	4f14      	ldr	r7, [pc, #80]	; (8000d50 <Generation_Coefficients_R_A_B+0x64>)
 8000cfe:	f101 061c 	add.w	r6, r1, #28
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000d02:	f9b1 e000 	ldrsh.w	lr, [r1]
 8000d06:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
		Temp_R_A_B[i].R = T_Table[i].R;
 8000d0a:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000d0e:	eba2 020e 	sub.w	r2, r2, lr
 8000d12:	fb0c f202 	mul.w	r2, ip, r2
 8000d16:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8000d1a:	3104      	adds	r1, #4
 8000d1c:	eba3 0308 	sub.w	r3, r3, r8
 8000d20:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d24:	6043      	str	r3, [r0, #4]
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000d26:	fb03 f308 	mul.w	r3, r3, r8
 8000d2a:	fb93 f3f7 	sdiv	r3, r3, r7
	for (i=0;i<(TLT-1);i++)
 8000d2e:	428e      	cmp	r6, r1
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000d30:	4473      	add	r3, lr
		Temp_R_A_B[i].R = T_Table[i].R;
 8000d32:	f8c0 8000 	str.w	r8, [r0]
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000d36:	6083      	str	r3, [r0, #8]
 8000d38:	f100 000c 	add.w	r0, r0, #12
	for (i=0;i<(TLT-1);i++)
 8000d3c:	d1e1      	bne.n	8000d02 <Generation_Coefficients_R_A_B+0x16>
	}
	Temp_R_A_B[i].R = T_Table[i].R;
 8000d3e:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
 8000d42:	6563      	str	r3, [r4, #84]	; 0x54
	    c=(Temp_R_A_B[i].R-Temp_R_A_B[i+1].R)/2+Temp_R_A_B[i+1].R;
	    Print_to_USART1_d(c,"c= ",0);
	    Print_to_USART1_d(Temp_R_A_B[i].A10000*c/10000+Temp_R_A_B[i].B,"T:",0);
	}
*/
}
 8000d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d48:	2000022c 	.word	0x2000022c
 8000d4c:	200007f8 	.word	0x200007f8
 8000d50:	ffffd8f0 	.word	0xffffd8f0

08000d54 <GetTemperature>:
int32_t GetTemperature(int32_t Rtemp)
{
	if (Rtemp>Temp_R_A_B[0].R) return -10;
 8000d54:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <GetTemperature+0x44>)
{
 8000d56:	b530      	push	{r4, r5, lr}
	if (Rtemp>Temp_R_A_B[0].R) return -10;
 8000d58:	6813      	ldr	r3, [r2, #0]
 8000d5a:	4283      	cmp	r3, r0
 8000d5c:	db18      	blt.n	8000d90 <GetTemperature+0x3c>
 8000d5e:	2100      	movs	r1, #0
 8000d60:	250c      	movs	r5, #12
 8000d62:	fb05 f301 	mul.w	r3, r5, r1

	int8_t i;
	for (i=0; i<(TLT-1);i++)
	{
		if (Rtemp <= Temp_R_A_B[i].R  && Rtemp > Temp_R_A_B[i+1].R)
 8000d66:	18d4      	adds	r4, r2, r3
 8000d68:	58d3      	ldr	r3, [r2, r3]
 8000d6a:	4283      	cmp	r3, r0
 8000d6c:	db0b      	blt.n	8000d86 <GetTemperature+0x32>
 8000d6e:	68e3      	ldr	r3, [r4, #12]
 8000d70:	4283      	cmp	r3, r0
 8000d72:	da08      	bge.n	8000d86 <GetTemperature+0x32>
		{
			return Rtemp*Temp_R_A_B[i].A10000/10000+Temp_R_A_B[i].B;
 8000d74:	6863      	ldr	r3, [r4, #4]
 8000d76:	4358      	muls	r0, r3
 8000d78:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d7c:	fb90 f0f3 	sdiv	r0, r0, r3
 8000d80:	68a3      	ldr	r3, [r4, #8]
 8000d82:	4418      	add	r0, r3

		}
	}
	return 200;
}
 8000d84:	bd30      	pop	{r4, r5, pc}
 8000d86:	3101      	adds	r1, #1
	for (i=0; i<(TLT-1);i++)
 8000d88:	2907      	cmp	r1, #7
 8000d8a:	d1ea      	bne.n	8000d62 <GetTemperature+0xe>
	return 200;
 8000d8c:	20c8      	movs	r0, #200	; 0xc8
 8000d8e:	e7f9      	b.n	8000d84 <GetTemperature+0x30>
	if (Rtemp>Temp_R_A_B[0].R) return -10;
 8000d90:	f06f 0009 	mvn.w	r0, #9
 8000d94:	e7f6      	b.n	8000d84 <GetTemperature+0x30>
 8000d96:	bf00      	nop
 8000d98:	200007f8 	.word	0x200007f8

08000d9c <WriteInLOG>:

void WriteInLOG(char  str [17])
{
 8000d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint16_t i_log=0;
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 8000da0:	4c53      	ldr	r4, [pc, #332]	; (8000ef0 <WriteInLOG+0x154>)
{
 8000da2:	4607      	mov	r7, r0
	number = itoa(LoggingData.RecordsQuantity);
 8000da4:	6820      	ldr	r0, [r4, #0]
 8000da6:	f000 faaf 	bl	8001308 <itoa>


	for(i=0;number[i]!='\0';i++)
 8000daa:	2300      	movs	r3, #0
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000dac:	6826      	ldr	r6, [r4, #0]
 8000dae:	0131      	lsls	r1, r6, #4
 8000db0:	198a      	adds	r2, r1, r6
 8000db2:	4422      	add	r2, r4
	for(i=0;number[i]!='\0';i++)
 8000db4:	f810 c003 	ldrb.w	ip, [r0, r3]
 8000db8:	461d      	mov	r5, r3
 8000dba:	3301      	adds	r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	f1bc 0f00 	cmp.w	ip, #0
 8000dc2:	d116      	bne.n	8000df2 <WriteInLOG+0x56>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = ':';
 8000dc4:	198a      	adds	r2, r1, r6
 8000dc6:	18a0      	adds	r0, r4, r2
 8000dc8:	4405      	add	r5, r0
 8000dca:	203a      	movs	r0, #58	; 0x3a
	i++;

	for(j=0;str[j]!='\0';i++,j++)
 8000dcc:	1aff      	subs	r7, r7, r3
	LoggingData.Records[LoggingData.RecordsQuantity][i] = ':';
 8000dce:	7128      	strb	r0, [r5, #4]
	for(j=0;str[j]!='\0';i++,j++)
 8000dd0:	f817 c003 	ldrb.w	ip, [r7, r3]
 8000dd4:	b2dd      	uxtb	r5, r3
 8000dd6:	f1bc 0f00 	cmp.w	ip, #0
 8000dda:	d10e      	bne.n	8000dfa <WriteInLOG+0x5e>
			break;
		}
	}
	for (;i<16;i++)
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000ddc:	2320      	movs	r3, #32
 8000dde:	442a      	add	r2, r5
 8000de0:	3203      	adds	r2, #3
 8000de2:	4422      	add	r2, r4
	for (;i<16;i++)
 8000de4:	2d0f      	cmp	r5, #15
 8000de6:	d815      	bhi.n	8000e14 <WriteInLOG+0x78>
 8000de8:	3501      	adds	r5, #1
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000dea:	f802 3f01 	strb.w	r3, [r2, #1]!
	for (;i<16;i++)
 8000dee:	b2ed      	uxtb	r5, r5
 8000df0:	e7f8      	b.n	8000de4 <WriteInLOG+0x48>
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000df2:	4415      	add	r5, r2
 8000df4:	f885 c004 	strb.w	ip, [r5, #4]
 8000df8:	e7dc      	b.n	8000db4 <WriteInLOG+0x18>
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000dfa:	2d0f      	cmp	r5, #15
 8000dfc:	d805      	bhi.n	8000e0a <WriteInLOG+0x6e>
 8000dfe:	1898      	adds	r0, r3, r2
 8000e00:	4420      	add	r0, r4
 8000e02:	f880 c004 	strb.w	ip, [r0, #4]
 8000e06:	3301      	adds	r3, #1
 8000e08:	e7e2      	b.n	8000dd0 <WriteInLOG+0x34>
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4431      	add	r1, r6
 8000e0e:	4421      	add	r1, r4
 8000e10:	440b      	add	r3, r1
 8000e12:	711a      	strb	r2, [r3, #4]
	}
	logDebugD("ii: ",i,0);
 8000e14:	4837      	ldr	r0, [pc, #220]	; (8000ef4 <WriteInLOG+0x158>)
 8000e16:	f004 fb51 	bl	80054bc <printToBufferWithoutEndUART1>
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4836      	ldr	r0, [pc, #216]	; (8000ef8 <WriteInLOG+0x15c>)
 8000e20:	f004 fb90 	bl	8005544 <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8000e2a:	4422      	add	r2, r4
 8000e2c:	442a      	add	r2, r5
 8000e2e:	2500      	movs	r5, #0

	LoggingData.RecordsQuantity++;
 8000e30:	3301      	adds	r3, #1
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000e32:	2b17      	cmp	r3, #23
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000e34:	7115      	strb	r5, [r2, #4]
	LoggingData.RecordsQuantity++;
 8000e36:	6023      	str	r3, [r4, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000e38:	d937      	bls.n	8000eaa <WriteInLOG+0x10e>
 8000e3a:	260a      	movs	r6, #10
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
		{
			number = itoa(i);
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000e3c:	46a8      	mov	r8, r5
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
			}
			j--;
			for (;j<16;j++)
			{
				LoggingData.Records[i][j] = ' ';
 8000e3e:	f04f 0920 	mov.w	r9, #32
 8000e42:	4f2b      	ldr	r7, [pc, #172]	; (8000ef0 <WriteInLOG+0x154>)
			number = itoa(i);
 8000e44:	4628      	mov	r0, r5
 8000e46:	f000 fa5f 	bl	8001308 <itoa>
			for(k=0;number[k]!='\0';k++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	012a      	lsls	r2, r5, #4
				LoggingData.Records[i][k] = number[k];
 8000e4e:	eb02 0c05 	add.w	ip, r2, r5
 8000e52:	44a4      	add	ip, r4
			for(k=0;number[k]!='\0';k++)
 8000e54:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f1be 0f00 	cmp.w	lr, #0
 8000e62:	d12e      	bne.n	8000ec2 <WriteInLOG+0x126>
			LoggingData.Records[i][k] = ':';
 8000e64:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
 8000e68:	1950      	adds	r0, r2, r5
 8000e6a:	4420      	add	r0, r4
 8000e6c:	4401      	add	r1, r0
 8000e6e:	f881 c004 	strb.w	ip, [r1, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000e72:	eb06 1106 	add.w	r1, r6, r6, lsl #4
 8000e76:	4421      	add	r1, r4
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000e78:	eb00 0c03 	add.w	ip, r0, r3
 8000e7c:	f89c e004 	ldrb.w	lr, [ip, #4]
 8000e80:	f1be 0f00 	cmp.w	lr, #0
 8000e84:	d121      	bne.n	8000eca <WriteInLOG+0x12e>
			j--;
 8000e86:	3b01      	subs	r3, #1
 8000e88:	b2db      	uxtb	r3, r3
			for (;j<16;j++)
 8000e8a:	b2d9      	uxtb	r1, r3
 8000e8c:	290f      	cmp	r1, #15
 8000e8e:	d929      	bls.n	8000ee4 <WriteInLOG+0x148>
			}
			LoggingData.Records[i][j] = '\0';
 8000e90:	442a      	add	r2, r5
 8000e92:	4422      	add	r2, r4
 8000e94:	3501      	adds	r5, #1
 8000e96:	4413      	add	r3, r2
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000e98:	2d0e      	cmp	r5, #14
			LoggingData.Records[i][j] = '\0';
 8000e9a:	f883 8004 	strb.w	r8, [r3, #4]
 8000e9e:	f107 0711 	add.w	r7, r7, #17
 8000ea2:	f106 0601 	add.w	r6, r6, #1
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000ea6:	d1cd      	bne.n	8000e44 <WriteInLOG+0xa8>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 8000ea8:	6025      	str	r5, [r4, #0]
	}
	flash_write_block();
 8000eaa:	f7ff fa0b 	bl	80002c4 <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000eae:	4811      	ldr	r0, [pc, #68]	; (8000ef4 <WriteInLOG+0x158>)
 8000eb0:	f004 fb04 	bl	80054bc <printToBufferWithoutEndUART1>
 8000eb4:	6821      	ldr	r1, [r4, #0]
 8000eb6:	2200      	movs	r2, #0
}
 8000eb8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000ebc:	480f      	ldr	r0, [pc, #60]	; (8000efc <WriteInLOG+0x160>)
 8000ebe:	f004 bb41 	b.w	8005544 <printToBufferUART1D>
				LoggingData.Records[i][k] = number[k];
 8000ec2:	4461      	add	r1, ip
 8000ec4:	f881 e004 	strb.w	lr, [r1, #4]
 8000ec8:	e7c4      	b.n	8000e54 <WriteInLOG+0xb8>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000eca:	eb01 0e03 	add.w	lr, r1, r3
				if (i>=10)
 8000ece:	2d09      	cmp	r5, #9
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000ed0:	bf8c      	ite	hi
 8000ed2:	f89e e004 	ldrbhi.w	lr, [lr, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000ed6:	f89e e005 	ldrbls.w	lr, [lr, #5]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000eda:	3301      	adds	r3, #1
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000edc:	f88c e004 	strb.w	lr, [ip, #4]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	e7c9      	b.n	8000e78 <WriteInLOG+0xdc>
				LoggingData.Records[i][j] = ' ';
 8000ee4:	18f9      	adds	r1, r7, r3
 8000ee6:	f881 9004 	strb.w	r9, [r1, #4]
 8000eea:	3301      	adds	r3, #1
 8000eec:	e7cd      	b.n	8000e8a <WriteInLOG+0xee>
 8000eee:	bf00      	nop
 8000ef0:	20000878 	.word	0x20000878
 8000ef4:	08005eb1 	.word	0x08005eb1
 8000ef8:	0800610f 	.word	0x0800610f
 8000efc:	08006114 	.word	0x08006114

08000f00 <WriteInLOGc>:

void WriteInLOGc(char  str [17],char c)
{
 8000f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	static uint16_t i_log=0;
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 8000f04:	4c53      	ldr	r4, [pc, #332]	; (8001054 <WriteInLOGc+0x154>)
{
 8000f06:	4680      	mov	r8, r0
	number = itoa(LoggingData.RecordsQuantity);
 8000f08:	6820      	ldr	r0, [r4, #0]
{
 8000f0a:	460e      	mov	r6, r1
	number = itoa(LoggingData.RecordsQuantity);
 8000f0c:	f000 f9fc 	bl	8001308 <itoa>


	for(i=0;number[i]!='\0';i++)
 8000f10:	2300      	movs	r3, #0
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000f12:	6827      	ldr	r7, [r4, #0]
 8000f14:	0139      	lsls	r1, r7, #4
 8000f16:	19ca      	adds	r2, r1, r7
 8000f18:	4422      	add	r2, r4
	for(i=0;number[i]!='\0';i++)
 8000f1a:	f810 c003 	ldrb.w	ip, [r0, r3]
 8000f1e:	461d      	mov	r5, r3
 8000f20:	3301      	adds	r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f1bc 0f00 	cmp.w	ip, #0
 8000f28:	d116      	bne.n	8000f58 <WriteInLOGc+0x58>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = c;
 8000f2a:	19ca      	adds	r2, r1, r7
 8000f2c:	18a0      	adds	r0, r4, r2
 8000f2e:	4405      	add	r5, r0
 8000f30:	712e      	strb	r6, [r5, #4]
	i++;

	for(j=0;str[j]!='\0';i++,j++)
 8000f32:	eba8 0803 	sub.w	r8, r8, r3
 8000f36:	f818 c003 	ldrb.w	ip, [r8, r3]
 8000f3a:	b2dd      	uxtb	r5, r3
 8000f3c:	f1bc 0f00 	cmp.w	ip, #0
 8000f40:	d10e      	bne.n	8000f60 <WriteInLOGc+0x60>
			break;
		}
	}
	for (;i<16;i++)
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000f42:	2320      	movs	r3, #32
 8000f44:	442a      	add	r2, r5
 8000f46:	3203      	adds	r2, #3
 8000f48:	4422      	add	r2, r4
	for (;i<16;i++)
 8000f4a:	2d0f      	cmp	r5, #15
 8000f4c:	d815      	bhi.n	8000f7a <WriteInLOGc+0x7a>
 8000f4e:	3501      	adds	r5, #1
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000f50:	f802 3f01 	strb.w	r3, [r2, #1]!
	for (;i<16;i++)
 8000f54:	b2ed      	uxtb	r5, r5
 8000f56:	e7f8      	b.n	8000f4a <WriteInLOGc+0x4a>
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000f58:	4415      	add	r5, r2
 8000f5a:	f885 c004 	strb.w	ip, [r5, #4]
 8000f5e:	e7dc      	b.n	8000f1a <WriteInLOGc+0x1a>
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000f60:	2d0f      	cmp	r5, #15
 8000f62:	d805      	bhi.n	8000f70 <WriteInLOGc+0x70>
 8000f64:	1898      	adds	r0, r3, r2
 8000f66:	4420      	add	r0, r4
 8000f68:	f880 c004 	strb.w	ip, [r0, #4]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	e7e2      	b.n	8000f36 <WriteInLOGc+0x36>
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000f70:	2200      	movs	r2, #0
 8000f72:	4439      	add	r1, r7
 8000f74:	4421      	add	r1, r4
 8000f76:	440b      	add	r3, r1
 8000f78:	711a      	strb	r2, [r3, #4]
	}
	logDebugD("ii: ",i,0);
 8000f7a:	4837      	ldr	r0, [pc, #220]	; (8001058 <WriteInLOGc+0x158>)
 8000f7c:	f004 fa9e 	bl	80054bc <printToBufferWithoutEndUART1>
 8000f80:	2200      	movs	r2, #0
 8000f82:	4629      	mov	r1, r5
 8000f84:	4835      	ldr	r0, [pc, #212]	; (800105c <WriteInLOGc+0x15c>)
 8000f86:	f004 fadd 	bl	8005544 <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8000f90:	4422      	add	r2, r4
 8000f92:	442a      	add	r2, r5
 8000f94:	2500      	movs	r5, #0

	LoggingData.RecordsQuantity++;
 8000f96:	3301      	adds	r3, #1
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000f98:	2b17      	cmp	r3, #23
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000f9a:	7115      	strb	r5, [r2, #4]
	LoggingData.RecordsQuantity++;
 8000f9c:	6023      	str	r3, [r4, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000f9e:	d935      	bls.n	800100c <WriteInLOGc+0x10c>
 8000fa0:	270a      	movs	r7, #10
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
		{
			number = itoa(i);
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000fa2:	46a9      	mov	r9, r5
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
			}
			j--;
			for (;j<16;j++)
			{
				LoggingData.Records[i][j] = ' ';
 8000fa4:	f04f 0a20 	mov.w	sl, #32
 8000fa8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001054 <WriteInLOGc+0x154>
			number = itoa(i);
 8000fac:	4628      	mov	r0, r5
 8000fae:	f000 f9ab 	bl	8001308 <itoa>
			for(k=0;number[k]!='\0';k++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	012a      	lsls	r2, r5, #4
				LoggingData.Records[i][k] = number[k];
 8000fb6:	eb02 0c05 	add.w	ip, r2, r5
 8000fba:	44a4      	add	ip, r4
			for(k=0;number[k]!='\0';k++)
 8000fbc:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	f1be 0f00 	cmp.w	lr, #0
 8000fca:	d12b      	bne.n	8001024 <WriteInLOGc+0x124>
			LoggingData.Records[i][k] = c;
 8000fcc:	1950      	adds	r0, r2, r5
 8000fce:	4420      	add	r0, r4
 8000fd0:	4401      	add	r1, r0
 8000fd2:	710e      	strb	r6, [r1, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000fd4:	eb07 1107 	add.w	r1, r7, r7, lsl #4
 8000fd8:	4421      	add	r1, r4
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000fda:	eb00 0c03 	add.w	ip, r0, r3
 8000fde:	f89c e004 	ldrb.w	lr, [ip, #4]
 8000fe2:	f1be 0f00 	cmp.w	lr, #0
 8000fe6:	d121      	bne.n	800102c <WriteInLOGc+0x12c>
			j--;
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	b2db      	uxtb	r3, r3
			for (;j<16;j++)
 8000fec:	b2d9      	uxtb	r1, r3
 8000fee:	290f      	cmp	r1, #15
 8000ff0:	d929      	bls.n	8001046 <WriteInLOGc+0x146>
			}
			LoggingData.Records[i][j] = '\0';
 8000ff2:	442a      	add	r2, r5
 8000ff4:	4422      	add	r2, r4
 8000ff6:	3501      	adds	r5, #1
 8000ff8:	4413      	add	r3, r2
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000ffa:	2d0e      	cmp	r5, #14
			LoggingData.Records[i][j] = '\0';
 8000ffc:	f883 9004 	strb.w	r9, [r3, #4]
 8001000:	f108 0811 	add.w	r8, r8, #17
 8001004:	f107 0701 	add.w	r7, r7, #1
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8001008:	d1d0      	bne.n	8000fac <WriteInLOGc+0xac>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 800100a:	6025      	str	r5, [r4, #0]
	}
	flash_write_block();
 800100c:	f7ff f95a 	bl	80002c4 <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8001010:	4811      	ldr	r0, [pc, #68]	; (8001058 <WriteInLOGc+0x158>)
 8001012:	f004 fa53 	bl	80054bc <printToBufferWithoutEndUART1>
 8001016:	6821      	ldr	r1, [r4, #0]
 8001018:	2200      	movs	r2, #0
}
 800101a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 800101e:	4810      	ldr	r0, [pc, #64]	; (8001060 <WriteInLOGc+0x160>)
 8001020:	f004 ba90 	b.w	8005544 <printToBufferUART1D>
				LoggingData.Records[i][k] = number[k];
 8001024:	4461      	add	r1, ip
 8001026:	f881 e004 	strb.w	lr, [r1, #4]
 800102a:	e7c7      	b.n	8000fbc <WriteInLOGc+0xbc>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 800102c:	eb01 0e03 	add.w	lr, r1, r3
				if (i>=10)
 8001030:	2d09      	cmp	r5, #9
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8001032:	bf8c      	ite	hi
 8001034:	f89e e004 	ldrbhi.w	lr, [lr, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8001038:	f89e e005 	ldrbls.w	lr, [lr, #5]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 800103c:	3301      	adds	r3, #1
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 800103e:	f88c e004 	strb.w	lr, [ip, #4]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8001042:	b2db      	uxtb	r3, r3
 8001044:	e7c9      	b.n	8000fda <WriteInLOGc+0xda>
				LoggingData.Records[i][j] = ' ';
 8001046:	eb08 0103 	add.w	r1, r8, r3
 800104a:	f881 a004 	strb.w	sl, [r1, #4]
 800104e:	3301      	adds	r3, #1
 8001050:	e7cc      	b.n	8000fec <WriteInLOGc+0xec>
 8001052:	bf00      	nop
 8001054:	20000878 	.word	0x20000878
 8001058:	08005eb1 	.word	0x08005eb1
 800105c:	0800610f 	.word	0x0800610f
 8001060:	08006114 	.word	0x08006114

08001064 <delay_us>:
	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
	delay_ms(50);
}
void delay_us(uint32_t us)
{
	volatile uint32_t n = 0;
 8001064:	2300      	movs	r3, #0
{
 8001066:	b084      	sub	sp, #16
	if (us==1) n=1;//в тактах процесора
 8001068:	2801      	cmp	r0, #1
	volatile uint32_t n = 0;
 800106a:	9300      	str	r3, [sp, #0]
	if (us==1) n=1;//в тактах процесора
 800106c:	d101      	bne.n	8001072 <delay_us+0xe>
	if (us==2) n=2;//в тактах процесора
	if (us==3) n=18;//в тактах процесора
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 800106e:	9000      	str	r0, [sp, #0]
 8001070:	e005      	b.n	800107e <delay_us+0x1a>
	if (us==2) n=2;//в тактах процесора
 8001072:	2802      	cmp	r0, #2
 8001074:	d0fb      	beq.n	800106e <delay_us+0xa>
	if (us==3) n=18;//в тактах процесора
 8001076:	2803      	cmp	r0, #3
 8001078:	d11b      	bne.n	80010b2 <delay_us+0x4e>
 800107a:	2312      	movs	r3, #18
 800107c:	9300      	str	r3, [sp, #0]
	//uint32_t n=(SystemCoreClock/1000000)*us;//в тактах процесора
    volatile  uint32_t n0=SysTick->VAL;// Начальное значение счётчика SysTick.
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <delay_us+0x60>)
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	9201      	str	r2, [sp, #4]
    volatile uint32_t np=n0;  // Предыдущее значение счётчика.
 8001084:	9a01      	ldr	r2, [sp, #4]
 8001086:	9202      	str	r2, [sp, #8]
    volatile int32_t nc;// Текущее значение счётчика SysTick.

    // Выполняем цикл до тех пор, пока не пройдёт заданное количество тактов процессора.
    do{
    	nc=SysTick->VAL;
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	9203      	str	r2, [sp, #12]
        // Проверка на переполнение, корректировка на модуль пересчёта в случае переполнения.
        if(nc>=np)
 800108c:	9903      	ldr	r1, [sp, #12]
 800108e:	9a02      	ldr	r2, [sp, #8]
 8001090:	4291      	cmp	r1, r2
 8001092:	d304      	bcc.n	800109e <delay_us+0x3a>
            n0+=SysTick->LOAD+1;
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	9901      	ldr	r1, [sp, #4]
 8001098:	440a      	add	r2, r1
 800109a:	3201      	adds	r2, #1
 800109c:	9201      	str	r2, [sp, #4]
        np=nc;
 800109e:	9a03      	ldr	r2, [sp, #12]
 80010a0:	9202      	str	r2, [sp, #8]
    }while(n0-nc<n);
 80010a2:	9a01      	ldr	r2, [sp, #4]
 80010a4:	9803      	ldr	r0, [sp, #12]
 80010a6:	9900      	ldr	r1, [sp, #0]
 80010a8:	1a12      	subs	r2, r2, r0
 80010aa:	428a      	cmp	r2, r1
 80010ac:	d3ec      	bcc.n	8001088 <delay_us+0x24>
}
 80010ae:	b004      	add	sp, #16
 80010b0:	4770      	bx	lr
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 80010b2:	d9e4      	bls.n	800107e <delay_us+0x1a>
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <delay_us+0x64>)
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <delay_us+0x68>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3803      	subs	r0, #3
 80010bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80010c0:	4358      	muls	r0, r3
 80010c2:	e7d4      	b.n	800106e <delay_us+0xa>
 80010c4:	e000e010 	.word	0xe000e010
 80010c8:	2000028c 	.word	0x2000028c
 80010cc:	000f4240 	.word	0x000f4240

080010d0 <delay_ms>:
// t1=SysTick->VAL;
// t2=SysTick->VAL;

void delay_ms(volatile uint32_t value)
{
 80010d0:	b507      	push	{r0, r1, r2, lr}
 80010d2:	9001      	str	r0, [sp, #4]
	while(value>0)
 80010d4:	9b01      	ldr	r3, [sp, #4]
 80010d6:	b913      	cbnz	r3, 80010de <delay_ms+0xe>
	{
		delay_us(1000);
		value--;
	}
}
 80010d8:	b003      	add	sp, #12
 80010da:	f85d fb04 	ldr.w	pc, [sp], #4
		delay_us(1000);
 80010de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e2:	f7ff ffbf 	bl	8001064 <delay_us>
		value--;
 80010e6:	9b01      	ldr	r3, [sp, #4]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	e7f2      	b.n	80010d4 <delay_ms+0x4>
	...

080010f0 <InfoToUARTBeforeStart>:
{
 80010f0:	b538      	push	{r3, r4, r5, lr}
	logInfoD("CRC(Calibration) =",CalibrationData.CRC_data,0);
 80010f2:	4c68      	ldr	r4, [pc, #416]	; (8001294 <InfoToUARTBeforeStart+0x1a4>)
 80010f4:	4d68      	ldr	r5, [pc, #416]	; (8001298 <InfoToUARTBeforeStart+0x1a8>)
 80010f6:	4620      	mov	r0, r4
 80010f8:	f004 f9e0 	bl	80054bc <printToBufferWithoutEndUART1>
 80010fc:	6829      	ldr	r1, [r5, #0]
 80010fe:	2200      	movs	r2, #0
 8001100:	4866      	ldr	r0, [pc, #408]	; (800129c <InfoToUARTBeforeStart+0x1ac>)
 8001102:	f004 fa1f 	bl	8005544 <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent =",CalibrationData.Calibration0ValueForCurrent ,0);
 8001106:	4620      	mov	r0, r4
 8001108:	f004 f9d8 	bl	80054bc <printToBufferWithoutEndUART1>
 800110c:	68a9      	ldr	r1, [r5, #8]
 800110e:	2200      	movs	r2, #0
 8001110:	4863      	ldr	r0, [pc, #396]	; (80012a0 <InfoToUARTBeforeStart+0x1b0>)
 8001112:	f004 fa17 	bl	8005544 <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent1 =",CalibrationData.Calibration0ValueForCurrent1 ,0);
 8001116:	4620      	mov	r0, r4
 8001118:	f004 f9d0 	bl	80054bc <printToBufferWithoutEndUART1>
 800111c:	6929      	ldr	r1, [r5, #16]
 800111e:	2200      	movs	r2, #0
 8001120:	4860      	ldr	r0, [pc, #384]	; (80012a4 <InfoToUARTBeforeStart+0x1b4>)
 8001122:	f004 fa0f 	bl	8005544 <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent =",CalibrationData.CalibrationValueForCurrent ,0);
 8001126:	4620      	mov	r0, r4
 8001128:	f004 f9c8 	bl	80054bc <printToBufferWithoutEndUART1>
 800112c:	69a9      	ldr	r1, [r5, #24]
 800112e:	2200      	movs	r2, #0
 8001130:	485d      	ldr	r0, [pc, #372]	; (80012a8 <InfoToUARTBeforeStart+0x1b8>)
 8001132:	f004 fa07 	bl	8005544 <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent1 =",CalibrationData.CalibrationValueForCurrent1 ,0);
 8001136:	4620      	mov	r0, r4
 8001138:	f004 f9c0 	bl	80054bc <printToBufferWithoutEndUART1>
 800113c:	6a29      	ldr	r1, [r5, #32]
 800113e:	2200      	movs	r2, #0
 8001140:	485a      	ldr	r0, [pc, #360]	; (80012ac <InfoToUARTBeforeStart+0x1bc>)
 8001142:	f004 f9ff 	bl	8005544 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage =",CalibrationData.CalibrationValueForVoltage ,0);
 8001146:	4620      	mov	r0, r4
 8001148:	f004 f9b8 	bl	80054bc <printToBufferWithoutEndUART1>
 800114c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800114e:	2200      	movs	r2, #0
 8001150:	4857      	ldr	r0, [pc, #348]	; (80012b0 <InfoToUARTBeforeStart+0x1c0>)
 8001152:	f004 f9f7 	bl	8005544 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage1 =",CalibrationData.CalibrationValueForVoltage1 ,0);
 8001156:	4620      	mov	r0, r4
 8001158:	f004 f9b0 	bl	80054bc <printToBufferWithoutEndUART1>
 800115c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800115e:	2200      	movs	r2, #0
 8001160:	4854      	ldr	r0, [pc, #336]	; (80012b4 <InfoToUARTBeforeStart+0x1c4>)
 8001162:	f004 f9ef 	bl	8005544 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage2 =",CalibrationData.CalibrationValueForVoltage2 ,0);
 8001166:	4620      	mov	r0, r4
 8001168:	f004 f9a8 	bl	80054bc <printToBufferWithoutEndUART1>
 800116c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800116e:	2200      	movs	r2, #0
 8001170:	4851      	ldr	r0, [pc, #324]	; (80012b8 <InfoToUARTBeforeStart+0x1c8>)
 8001172:	f004 f9e7 	bl	8005544 <printToBufferUART1D>
	logInfoD("ResistanceComp_Ishunt_Wires =",CalibrationData.ResistanceComp_Ishunt_Wires ,0) ;
 8001176:	4620      	mov	r0, r4
 8001178:	f004 f9a0 	bl	80054bc <printToBufferWithoutEndUART1>
 800117c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800117e:	2200      	movs	r2, #0
 8001180:	484e      	ldr	r0, [pc, #312]	; (80012bc <InfoToUARTBeforeStart+0x1cc>)
 8001182:	f004 f9df 	bl	8005544 <printToBufferUART1D>
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.ResistanceComp_MOSFET ,0) ;
 8001186:	4620      	mov	r0, r4
 8001188:	f004 f998 	bl	80054bc <printToBufferWithoutEndUART1>
 800118c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800118e:	2200      	movs	r2, #0
 8001190:	484b      	ldr	r0, [pc, #300]	; (80012c0 <InfoToUARTBeforeStart+0x1d0>)
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 8001192:	4d4c      	ldr	r5, [pc, #304]	; (80012c4 <InfoToUARTBeforeStart+0x1d4>)
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.ResistanceComp_MOSFET ,0) ;
 8001194:	f004 f9d6 	bl	8005544 <printToBufferUART1D>
	delay_ms(50);
 8001198:	2032      	movs	r0, #50	; 0x32
 800119a:	f7ff ff99 	bl	80010d0 <delay_ms>
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 800119e:	4620      	mov	r0, r4
 80011a0:	f004 f98c 	bl	80054bc <printToBufferWithoutEndUART1>
 80011a4:	6829      	ldr	r1, [r5, #0]
 80011a6:	2200      	movs	r2, #0
 80011a8:	4847      	ldr	r0, [pc, #284]	; (80012c8 <InfoToUARTBeforeStart+0x1d8>)
 80011aa:	f004 f9cb 	bl	8005544 <printToBufferUART1D>
	logInfoD("Option1(menu position) =",SettingsData.Option1 ,0);
 80011ae:	4620      	mov	r0, r4
 80011b0:	f004 f984 	bl	80054bc <printToBufferWithoutEndUART1>
 80011b4:	68a9      	ldr	r1, [r5, #8]
 80011b6:	2200      	movs	r2, #0
 80011b8:	4844      	ldr	r0, [pc, #272]	; (80012cc <InfoToUARTBeforeStart+0x1dc>)
 80011ba:	f004 f9c3 	bl	8005544 <printToBufferUART1D>
	logInfoD("ChargeTime =",SettingsData.ChargeTime ,0);
 80011be:	4620      	mov	r0, r4
 80011c0:	f004 f97c 	bl	80054bc <printToBufferWithoutEndUART1>
 80011c4:	6929      	ldr	r1, [r5, #16]
 80011c6:	2200      	movs	r2, #0
 80011c8:	4841      	ldr	r0, [pc, #260]	; (80012d0 <InfoToUARTBeforeStart+0x1e0>)
 80011ca:	f004 f9bb 	bl	8005544 <printToBufferUART1D>
	logInfoD("LowVoltage =",SettingsData.LowVoltage ,0);
 80011ce:	4620      	mov	r0, r4
 80011d0:	f004 f974 	bl	80054bc <printToBufferWithoutEndUART1>
 80011d4:	69a9      	ldr	r1, [r5, #24]
 80011d6:	2200      	movs	r2, #0
 80011d8:	483e      	ldr	r0, [pc, #248]	; (80012d4 <InfoToUARTBeforeStart+0x1e4>)
 80011da:	f004 f9b3 	bl	8005544 <printToBufferUART1D>
	logInfoD("MaxVoltage =",SettingsData.MaxVoltage ,0);
 80011de:	4620      	mov	r0, r4
 80011e0:	f004 f96c 	bl	80054bc <printToBufferWithoutEndUART1>
 80011e4:	6a29      	ldr	r1, [r5, #32]
 80011e6:	2200      	movs	r2, #0
 80011e8:	483b      	ldr	r0, [pc, #236]	; (80012d8 <InfoToUARTBeforeStart+0x1e8>)
 80011ea:	f004 f9ab 	bl	8005544 <printToBufferUART1D>
	logInfoD("ChargeAdapt =",SettingsData.ChargeAdapt ,0);
 80011ee:	4620      	mov	r0, r4
 80011f0:	f004 f964 	bl	80054bc <printToBufferWithoutEndUART1>
 80011f4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80011f6:	2200      	movs	r2, #0
 80011f8:	4838      	ldr	r0, [pc, #224]	; (80012dc <InfoToUARTBeforeStart+0x1ec>)
 80011fa:	f004 f9a3 	bl	8005544 <printToBufferUART1D>
	logInfoD("Swing_Chrg_time =",SettingsData.Swing_Chrg_time ,0);
 80011fe:	4620      	mov	r0, r4
 8001200:	f004 f95c 	bl	80054bc <printToBufferWithoutEndUART1>
 8001204:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001206:	2200      	movs	r2, #0
 8001208:	4835      	ldr	r0, [pc, #212]	; (80012e0 <InfoToUARTBeforeStart+0x1f0>)
 800120a:	f004 f99b 	bl	8005544 <printToBufferUART1D>
	logInfoD("Swing_DChrg_time =",SettingsData.Swing_DChrg_time ,0);
 800120e:	4620      	mov	r0, r4
 8001210:	f004 f954 	bl	80054bc <printToBufferWithoutEndUART1>
 8001214:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001216:	2200      	movs	r2, #0
 8001218:	4832      	ldr	r0, [pc, #200]	; (80012e4 <InfoToUARTBeforeStart+0x1f4>)
 800121a:	f004 f993 	bl	8005544 <printToBufferUART1D>
	logInfoD("Option2(OUT after powerUp) =",SettingsData.Option2 ,0);
 800121e:	4620      	mov	r0, r4
 8001220:	f004 f94c 	bl	80054bc <printToBufferWithoutEndUART1>
 8001224:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001226:	2200      	movs	r2, #0
 8001228:	482f      	ldr	r0, [pc, #188]	; (80012e8 <InfoToUARTBeforeStart+0x1f8>)
 800122a:	f004 f98b 	bl	8005544 <printToBufferUART1D>
	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 800122e:	4d2f      	ldr	r5, [pc, #188]	; (80012ec <InfoToUARTBeforeStart+0x1fc>)
	delay_ms(50);
 8001230:	2032      	movs	r0, #50	; 0x32
 8001232:	f7ff ff4d 	bl	80010d0 <delay_ms>
	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 8001236:	4620      	mov	r0, r4
 8001238:	f004 f940 	bl	80054bc <printToBufferWithoutEndUART1>
 800123c:	6829      	ldr	r1, [r5, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	482b      	ldr	r0, [pc, #172]	; (80012f0 <InfoToUARTBeforeStart+0x200>)
 8001242:	f004 f97f 	bl	8005544 <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargePreviousValue =",SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue ,0);
 8001246:	4620      	mov	r0, r4
 8001248:	f004 f938 	bl	80054bc <printToBufferWithoutEndUART1>
 800124c:	68a9      	ldr	r1, [r5, #8]
 800124e:	2200      	movs	r2, #0
 8001250:	4828      	ldr	r0, [pc, #160]	; (80012f4 <InfoToUARTBeforeStart+0x204>)
 8001252:	f004 f977 	bl	8005544 <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargeCurrent =",SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent ,0);
 8001256:	4620      	mov	r0, r4
 8001258:	f004 f930 	bl	80054bc <printToBufferWithoutEndUART1>
 800125c:	6929      	ldr	r1, [r5, #16]
 800125e:	2200      	movs	r2, #0
 8001260:	4825      	ldr	r0, [pc, #148]	; (80012f8 <InfoToUARTBeforeStart+0x208>)
 8001262:	f004 f96f 	bl	8005544 <printToBufferUART1D>
	logInfoD("OutState = ",SaveDataWhenPowerOff.OutState ,0);
 8001266:	4620      	mov	r0, r4
 8001268:	f004 f928 	bl	80054bc <printToBufferWithoutEndUART1>
 800126c:	69a9      	ldr	r1, [r5, #24]
 800126e:	2200      	movs	r2, #0
 8001270:	4822      	ldr	r0, [pc, #136]	; (80012fc <InfoToUARTBeforeStart+0x20c>)
 8001272:	f004 f967 	bl	8005544 <printToBufferUART1D>
	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
 8001276:	4620      	mov	r0, r4
 8001278:	f004 f920 	bl	80054bc <printToBufferWithoutEndUART1>
 800127c:	4b20      	ldr	r3, [pc, #128]	; (8001300 <InfoToUARTBeforeStart+0x210>)
 800127e:	4821      	ldr	r0, [pc, #132]	; (8001304 <InfoToUARTBeforeStart+0x214>)
 8001280:	6819      	ldr	r1, [r3, #0]
 8001282:	2200      	movs	r2, #0
 8001284:	f004 f95e 	bl	8005544 <printToBufferUART1D>
}
 8001288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delay_ms(50);
 800128c:	2032      	movs	r0, #50	; 0x32
 800128e:	f7ff bf1f 	b.w	80010d0 <delay_ms>
 8001292:	bf00      	nop
 8001294:	08005ec6 	.word	0x08005ec6
 8001298:	20000004 	.word	0x20000004
 800129c:	08005ecd 	.word	0x08005ecd
 80012a0:	08005ee0 	.word	0x08005ee0
 80012a4:	08005efe 	.word	0x08005efe
 80012a8:	08005f1d 	.word	0x08005f1d
 80012ac:	08005f3a 	.word	0x08005f3a
 80012b0:	08005f58 	.word	0x08005f58
 80012b4:	08005f75 	.word	0x08005f75
 80012b8:	08005f93 	.word	0x08005f93
 80012bc:	08005fb1 	.word	0x08005fb1
 80012c0:	08005fcf 	.word	0x08005fcf
 80012c4:	20000154 	.word	0x20000154
 80012c8:	08005fe7 	.word	0x08005fe7
 80012cc:	08005ffb 	.word	0x08005ffb
 80012d0:	08006014 	.word	0x08006014
 80012d4:	08006021 	.word	0x08006021
 80012d8:	0800602e 	.word	0x0800602e
 80012dc:	0800603b 	.word	0x0800603b
 80012e0:	08006049 	.word	0x08006049
 80012e4:	0800605b 	.word	0x0800605b
 80012e8:	0800606e 	.word	0x0800606e
 80012ec:	200000f4 	.word	0x200000f4
 80012f0:	0800608b 	.word	0x0800608b
 80012f4:	080060a7 	.word	0x080060a7
 80012f8:	080060cf 	.word	0x080060cf
 80012fc:	080060f1 	.word	0x080060f1
 8001300:	2000028c 	.word	0x2000028c
 8001304:	080060fd 	.word	0x080060fd

08001308 <itoa>:
#include "Lib.h"
char * itoa(int32_t n)
{
 8001308:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800130a:	2200      	movs	r2, #0
	static char s1[16];
     if ((sign = n) < 0)
         n = -n;
     i = 0;
     do {
         s[i++] = n % 10 + '0';
 800130c:	260a      	movs	r6, #10
 800130e:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 8001312:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 8001316:	ad04      	add	r5, sp, #16
 8001318:	b2d4      	uxtb	r4, r2
 800131a:	442a      	add	r2, r5
 800131c:	fb91 f5f6 	sdiv	r5, r1, r6
 8001320:	fb06 1115 	mls	r1, r6, r5, r1
 8001324:	1c63      	adds	r3, r4, #1
 8001326:	3130      	adds	r1, #48	; 0x30
 8001328:	f802 1c10 	strb.w	r1, [r2, #-16]
 800132c:	b25b      	sxtb	r3, r3
     } while ((n /= 10) > 0);
 800132e:	1e29      	subs	r1, r5, #0
 8001330:	461a      	mov	r2, r3
 8001332:	dcf0      	bgt.n	8001316 <itoa+0xe>
     if (sign < 0)
 8001334:	2800      	cmp	r0, #0
 8001336:	da06      	bge.n	8001346 <itoa+0x3e>
         s[i++] = '-';
 8001338:	a904      	add	r1, sp, #16
 800133a:	440a      	add	r2, r1
 800133c:	212d      	movs	r1, #45	; 0x2d
 800133e:	1ca3      	adds	r3, r4, #2
 8001340:	f802 1c10 	strb.w	r1, [r2, #-16]
 8001344:	b25b      	sxtb	r3, r3
     s[i] = '\0';
 8001346:	2200      	movs	r2, #0
 8001348:	a904      	add	r1, sp, #16
 800134a:	4419      	add	r1, r3
 800134c:	4c0a      	ldr	r4, [pc, #40]	; (8001378 <itoa+0x70>)
 800134e:	f801 2c10 	strb.w	r2, [r1, #-16]
 8001352:	b2d0      	uxtb	r0, r2
 8001354:	1a19      	subs	r1, r3, r0

     k=0;
     while (i)
 8001356:	4293      	cmp	r3, r2
 8001358:	b249      	sxtb	r1, r1
 800135a:	d104      	bne.n	8001366 <itoa+0x5e>
     {
    	s1[k]=s[i-1];
    	i--;
    	k++;
     }
     s1[k] = '\0';
 800135c:	2200      	movs	r2, #0
     return s1;
}
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <itoa+0x70>)
     s1[k] = '\0';
 8001360:	54e2      	strb	r2, [r4, r3]
}
 8001362:	b004      	add	sp, #16
 8001364:	bd70      	pop	{r4, r5, r6, pc}
    	s1[k]=s[i-1];
 8001366:	ad04      	add	r5, sp, #16
 8001368:	4429      	add	r1, r5
 800136a:	f811 1c11 	ldrb.w	r1, [r1, #-17]
 800136e:	54a1      	strb	r1, [r4, r2]
    	k++;
 8001370:	1c42      	adds	r2, r0, #1
 8001372:	b252      	sxtb	r2, r2
 8001374:	e7ed      	b.n	8001352 <itoa+0x4a>
 8001376:	bf00      	nop
 8001378:	20000750 	.word	0x20000750

0800137c <itoaP>:

char * itoaP(int32_t n,char *s1)
{
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137e:	2300      	movs	r3, #0

     if ((sign = n) < 0)
         n = -n;
     i = 0;
     do {
         s[i++] = n % 10 + '0';
 8001380:	270a      	movs	r7, #10
 8001382:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
{
 8001386:	b085      	sub	sp, #20
 8001388:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
         s[i++] = n % 10 + '0';
 800138c:	ae04      	add	r6, sp, #16
 800138e:	b2dd      	uxtb	r5, r3
 8001390:	4433      	add	r3, r6
 8001392:	fb94 f6f7 	sdiv	r6, r4, r7
 8001396:	fb07 4416 	mls	r4, r7, r6, r4
 800139a:	1c6a      	adds	r2, r5, #1
 800139c:	3430      	adds	r4, #48	; 0x30
 800139e:	f803 4c10 	strb.w	r4, [r3, #-16]
 80013a2:	b252      	sxtb	r2, r2
     } while ((n /= 10) > 0);
 80013a4:	1e34      	subs	r4, r6, #0
 80013a6:	4613      	mov	r3, r2
 80013a8:	dcf0      	bgt.n	800138c <itoaP+0x10>
     if (sign < 0)
 80013aa:	2800      	cmp	r0, #0
 80013ac:	da06      	bge.n	80013bc <itoaP+0x40>
         s[i++] = '-';
 80013ae:	a804      	add	r0, sp, #16
 80013b0:	4403      	add	r3, r0
 80013b2:	202d      	movs	r0, #45	; 0x2d
 80013b4:	1caa      	adds	r2, r5, #2
 80013b6:	f803 0c10 	strb.w	r0, [r3, #-16]
 80013ba:	b252      	sxtb	r2, r2
     s[i] = '\0';
 80013bc:	2300      	movs	r3, #0
 80013be:	a804      	add	r0, sp, #16
 80013c0:	4410      	add	r0, r2
 80013c2:	f800 3c10 	strb.w	r3, [r0, #-16]
 80013c6:	b2dd      	uxtb	r5, r3
 80013c8:	1b54      	subs	r4, r2, r5

     k=0;
     while (i)
 80013ca:	429a      	cmp	r2, r3
 80013cc:	b264      	sxtb	r4, r4
 80013ce:	eb01 0003 	add.w	r0, r1, r3
 80013d2:	d104      	bne.n	80013de <itoaP+0x62>
     {
    	s1[k]=s[i-1];
    	i--;
    	k++;
     }
     s1[k] = '\0';
 80013d4:	2300      	movs	r3, #0
 80013d6:	7003      	strb	r3, [r0, #0]
     return s1;
}
 80013d8:	4608      	mov	r0, r1
 80013da:	b005      	add	sp, #20
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	s1[k]=s[i-1];
 80013de:	a804      	add	r0, sp, #16
 80013e0:	4404      	add	r4, r0
 80013e2:	f814 0c11 	ldrb.w	r0, [r4, #-17]
 80013e6:	54c8      	strb	r0, [r1, r3]
    	k++;
 80013e8:	1c6b      	adds	r3, r5, #1
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	e7eb      	b.n	80013c6 <itoaP+0x4a>
	...

080013f0 <itoa_koma>:

char * itoa_koma(int32_t n,uint8_t koma)
{
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	2300      	movs	r3, #0
    if ((sign = n) < 0)
    	n = -n;
     i = 0;
     do
     {
         s[i++] = n % 10 + '0';
 80013f4:	270a      	movs	r7, #10
 80013f6:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
{
 80013fa:	b08b      	sub	sp, #44	; 0x2c
 80013fc:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
         s[i++] = n % 10 + '0';
 8001400:	ae0a      	add	r6, sp, #40	; 0x28
 8001402:	b2dd      	uxtb	r5, r3
 8001404:	4433      	add	r3, r6
 8001406:	fb94 f6f7 	sdiv	r6, r4, r7
 800140a:	fb07 4416 	mls	r4, r7, r6, r4
 800140e:	1c6a      	adds	r2, r5, #1
 8001410:	3430      	adds	r4, #48	; 0x30
 8001412:	f803 4c28 	strb.w	r4, [r3, #-40]
 8001416:	b252      	sxtb	r2, r2
     } while ((n /= 10) > 0);
 8001418:	1e34      	subs	r4, r6, #0
 800141a:	4613      	mov	r3, r2
 800141c:	dcf0      	bgt.n	8001400 <itoa_koma+0x10>
     s[i] = '\0';
     if (i<=1)
 800141e:	2a01      	cmp	r2, #1
     {
       	 s[i] = '0';
 8001420:	bfd8      	it	le
 8001422:	2230      	movle	r2, #48	; 0x30
 8001424:	ac0a      	add	r4, sp, #40	; 0x28
 8001426:	4423      	add	r3, r4
     s[i] = '\0';
 8001428:	bfcf      	iteee	gt
 800142a:	2400      	movgt	r4, #0
       	 s[i] = '0';
 800142c:	f803 2c28 	strble.w	r2, [r3, #-40]
       	 i++;
 8001430:	1caa      	addle	r2, r5, #2
 8001432:	b252      	sxtble	r2, r2
     s[i] = '\0';
 8001434:	bfc8      	it	gt
 8001436:	f803 4c28 	strbgt.w	r4, [r3, #-40]
     }
     if (i<=2&&koma>1)
 800143a:	2a02      	cmp	r2, #2
 800143c:	dc08      	bgt.n	8001450 <itoa_koma+0x60>
 800143e:	2901      	cmp	r1, #1
 8001440:	d906      	bls.n	8001450 <itoa_koma+0x60>
     {
    	 s[i] = '0';
 8001442:	2430      	movs	r4, #48	; 0x30
 8001444:	ab0a      	add	r3, sp, #40	; 0x28
 8001446:	4413      	add	r3, r2
    	 i++;
 8001448:	3201      	adds	r2, #1
    	 s[i] = '0';
 800144a:	f803 4c28 	strb.w	r4, [r3, #-40]
    	 i++;
 800144e:	b252      	sxtb	r2, r2
     }
     k=0;
     j=0;
     while (j<i)
 8001450:	2400      	movs	r4, #0
     {
    	 if (k==koma)
         {
         	 sKoma[k]='.';
 8001452:	262e      	movs	r6, #46	; 0x2e
     k=0;
 8001454:	4623      	mov	r3, r4
     while (j<i)
 8001456:	b265      	sxtb	r5, r4
 8001458:	42aa      	cmp	r2, r5
 800145a:	dc0b      	bgt.n	8001474 <itoa_koma+0x84>
         }
    	 sKoma[k]=s[j];
         j++;
         k++;
      }
     if (sign < 0) sKoma[k++] = '-';
 800145c:	2800      	cmp	r0, #0
 800145e:	da06      	bge.n	800146e <itoa_koma+0x7e>
 8001460:	a90a      	add	r1, sp, #40	; 0x28
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	440b      	add	r3, r1
 8001466:	212d      	movs	r1, #45	; 0x2d
 8001468:	f803 1c14 	strb.w	r1, [r3, #-20]
 800146c:	b253      	sxtb	r3, r2
 800146e:	2200      	movs	r2, #0
 8001470:	4c12      	ldr	r4, [pc, #72]	; (80014bc <itoa_koma+0xcc>)
 8001472:	e019      	b.n	80014a8 <itoa_koma+0xb8>
    	 if (k==koma)
 8001474:	428b      	cmp	r3, r1
 8001476:	461d      	mov	r5, r3
 8001478:	d105      	bne.n	8001486 <itoa_koma+0x96>
         	 sKoma[k]='.';
 800147a:	af0a      	add	r7, sp, #40	; 0x28
 800147c:	3301      	adds	r3, #1
 800147e:	443d      	add	r5, r7
 8001480:	b25b      	sxtb	r3, r3
 8001482:	f805 6c14 	strb.w	r6, [r5, #-20]
    	 sKoma[k]=s[j];
 8001486:	f81d 7004 	ldrb.w	r7, [sp, r4]
 800148a:	ad0a      	add	r5, sp, #40	; 0x28
 800148c:	441d      	add	r5, r3
         k++;
 800148e:	3301      	adds	r3, #1
    	 sKoma[k]=s[j];
 8001490:	f805 7c14 	strb.w	r7, [r5, #-20]
         k++;
 8001494:	b25b      	sxtb	r3, r3
 8001496:	3401      	adds	r4, #1
 8001498:	e7dd      	b.n	8001456 <itoa_koma+0x66>
     i=0;
     while (k)
     {
    	s1[i]=sKoma[k-1];
 800149a:	ad0a      	add	r5, sp, #40	; 0x28
 800149c:	4429      	add	r1, r5
 800149e:	f811 1c15 	ldrb.w	r1, [r1, #-21]
 80014a2:	54a1      	strb	r1, [r4, r2]
    	k--;
    	i++;
 80014a4:	1c42      	adds	r2, r0, #1
 80014a6:	b252      	sxtb	r2, r2
 80014a8:	b2d0      	uxtb	r0, r2
 80014aa:	1a19      	subs	r1, r3, r0
     while (k)
 80014ac:	429a      	cmp	r2, r3
 80014ae:	b249      	sxtb	r1, r1
 80014b0:	d1f3      	bne.n	800149a <itoa_koma+0xaa>
     }
     s1[i] = '\0';
 80014b2:	2300      	movs	r3, #0
     return s1;
}
 80014b4:	4801      	ldr	r0, [pc, #4]	; (80014bc <itoa_koma+0xcc>)
     s1[i] = '\0';
 80014b6:	54a3      	strb	r3, [r4, r2]
}
 80014b8:	b00b      	add	sp, #44	; 0x2c
 80014ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014bc:	20000760 	.word	0x20000760

080014c0 <itoa_komaP>:

char * itoa_komaP(int32_t n,char *s1, uint8_t koma)
{
 80014c0:	2300      	movs	r3, #0
    if ((sign = n) < 0)
    	n = -n;
     i = 0;
     do
     {
         s[i++] = n % 10 + '0';
 80014c2:	f04f 0c0a 	mov.w	ip, #10
{
 80014c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c8:	ea80 75e0 	eor.w	r5, r0, r0, asr #31
 80014cc:	b08b      	sub	sp, #44	; 0x2c
 80014ce:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
         s[i++] = n % 10 + '0';
 80014d2:	af0a      	add	r7, sp, #40	; 0x28
 80014d4:	b2de      	uxtb	r6, r3
 80014d6:	443b      	add	r3, r7
 80014d8:	fb95 f7fc 	sdiv	r7, r5, ip
 80014dc:	fb0c 5517 	mls	r5, ip, r7, r5
 80014e0:	1c74      	adds	r4, r6, #1
 80014e2:	3530      	adds	r5, #48	; 0x30
 80014e4:	f803 5c28 	strb.w	r5, [r3, #-40]
 80014e8:	b264      	sxtb	r4, r4
     } while ((n /= 10) > 0);
 80014ea:	1e3d      	subs	r5, r7, #0
 80014ec:	4623      	mov	r3, r4
 80014ee:	dcf0      	bgt.n	80014d2 <itoa_komaP+0x12>
     s[i] = '\0';
     if (i<=1)
 80014f0:	2c01      	cmp	r4, #1
     {
       	 s[i] = '0';
 80014f2:	bfd8      	it	le
 80014f4:	2430      	movle	r4, #48	; 0x30
 80014f6:	ad0a      	add	r5, sp, #40	; 0x28
 80014f8:	442b      	add	r3, r5
     s[i] = '\0';
 80014fa:	bfcf      	iteee	gt
 80014fc:	2500      	movgt	r5, #0
       	 s[i] = '0';
 80014fe:	f803 4c28 	strble.w	r4, [r3, #-40]
       	 i++;
 8001502:	1cb4      	addle	r4, r6, #2
 8001504:	b264      	sxtble	r4, r4
     s[i] = '\0';
 8001506:	bfc8      	it	gt
 8001508:	f803 5c28 	strbgt.w	r5, [r3, #-40]
     }
     if (i<=2&&koma>1)
 800150c:	2c02      	cmp	r4, #2
 800150e:	dc08      	bgt.n	8001522 <itoa_komaP+0x62>
 8001510:	2a01      	cmp	r2, #1
 8001512:	d906      	bls.n	8001522 <itoa_komaP+0x62>
     {
    	 s[i] = '0';
 8001514:	2530      	movs	r5, #48	; 0x30
 8001516:	ab0a      	add	r3, sp, #40	; 0x28
 8001518:	4423      	add	r3, r4
    	 i++;
 800151a:	3401      	adds	r4, #1
    	 s[i] = '0';
 800151c:	f803 5c28 	strb.w	r5, [r3, #-40]
    	 i++;
 8001520:	b264      	sxtb	r4, r4
     }
     k=0;
     j=0;
     while (j<i)
 8001522:	2500      	movs	r5, #0
     {
    	 if (k==koma)
         {
         	 sKoma[k]='.';
 8001524:	272e      	movs	r7, #46	; 0x2e
     k=0;
 8001526:	462b      	mov	r3, r5
     while (j<i)
 8001528:	b26e      	sxtb	r6, r5
 800152a:	42a6      	cmp	r6, r4
 800152c:	db0a      	blt.n	8001544 <itoa_komaP+0x84>
         }
    	 sKoma[k]=s[j];
         j++;
         k++;
      }
     if (sign < 0) sKoma[k++] = '-';
 800152e:	2800      	cmp	r0, #0
 8001530:	da06      	bge.n	8001540 <itoa_komaP+0x80>
 8001532:	a80a      	add	r0, sp, #40	; 0x28
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	4403      	add	r3, r0
 8001538:	202d      	movs	r0, #45	; 0x2d
 800153a:	f803 0c14 	strb.w	r0, [r3, #-20]
 800153e:	b253      	sxtb	r3, r2
 8001540:	2200      	movs	r2, #0
 8001542:	e01a      	b.n	800157a <itoa_komaP+0xba>
    	 if (k==koma)
 8001544:	4293      	cmp	r3, r2
 8001546:	461e      	mov	r6, r3
 8001548:	d106      	bne.n	8001558 <itoa_komaP+0x98>
         	 sKoma[k]='.';
 800154a:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800154e:	3301      	adds	r3, #1
 8001550:	4466      	add	r6, ip
 8001552:	b25b      	sxtb	r3, r3
 8001554:	f806 7c14 	strb.w	r7, [r6, #-20]
    	 sKoma[k]=s[j];
 8001558:	f81d c005 	ldrb.w	ip, [sp, r5]
 800155c:	ae0a      	add	r6, sp, #40	; 0x28
 800155e:	441e      	add	r6, r3
         k++;
 8001560:	3301      	adds	r3, #1
    	 sKoma[k]=s[j];
 8001562:	f806 cc14 	strb.w	ip, [r6, #-20]
         k++;
 8001566:	b25b      	sxtb	r3, r3
 8001568:	3501      	adds	r5, #1
 800156a:	e7dd      	b.n	8001528 <itoa_komaP+0x68>
     i=0;
     while (k)
     {
    	s1[i]=sKoma[k-1];
 800156c:	ad0a      	add	r5, sp, #40	; 0x28
 800156e:	442c      	add	r4, r5
 8001570:	f814 4c15 	ldrb.w	r4, [r4, #-21]
 8001574:	548c      	strb	r4, [r1, r2]
    	k--;
    	i++;
 8001576:	1c42      	adds	r2, r0, #1
 8001578:	b252      	sxtb	r2, r2
 800157a:	b2d0      	uxtb	r0, r2
 800157c:	1a1c      	subs	r4, r3, r0
     while (k)
 800157e:	429a      	cmp	r2, r3
 8001580:	b264      	sxtb	r4, r4
 8001582:	eb01 0502 	add.w	r5, r1, r2
 8001586:	d1f1      	bne.n	800156c <itoa_komaP+0xac>
     }
     s1[i] = '\0';
 8001588:	2300      	movs	r3, #0
     return s1;
}
 800158a:	4608      	mov	r0, r1
     s1[i] = '\0';
 800158c:	702b      	strb	r3, [r5, #0]
}
 800158e:	b00b      	add	sp, #44	; 0x2c
 8001590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001592 <Module16>:
int16_t Module16 (int16_t value)
{
	if (value == 0) return 0;
 8001592:	2800      	cmp	r0, #0
 8001594:	d002      	beq.n	800159c <Module16+0xa>
	if (value > 0) return value;
	if (value < 0) return (-1)*value;
 8001596:	bfdc      	itt	le
 8001598:	4240      	negle	r0, r0
 800159a:	b200      	sxthle	r0, r0
}
 800159c:	4770      	bx	lr

0800159e <strlen1>:
}

uint8_t strlen1(char string[])
{
	uint8_t i=0;
	while(string[i]!='\0')
 800159e:	2300      	movs	r3, #0
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	5c81      	ldrb	r1, [r0, r2]
 80015a4:	3301      	adds	r3, #1
 80015a6:	2900      	cmp	r1, #0
 80015a8:	d1fa      	bne.n	80015a0 <strlen1+0x2>
		i++;
	return i;
}
 80015aa:	4610      	mov	r0, r2
 80015ac:	4770      	bx	lr

080015ae <Merge2Strings>:

char * Merge2Strings(char * str1in, char * str2in, char * strout)
{
 80015ae:	b570      	push	{r4, r5, r6, lr}
	int8_t i, j;
	for (i=0; str1in[i]!='\0'; i++)
 80015b0:	2400      	movs	r4, #0
 80015b2:	b265      	sxtb	r5, r4
 80015b4:	5d43      	ldrb	r3, [r0, r5]
 80015b6:	1c66      	adds	r6, r4, #1
 80015b8:	b94b      	cbnz	r3, 80015ce <Merge2Strings+0x20>
	{
		strout[i] = str1in[i];
	}
	for (j=0; str2in[j]!='\0'; j++,i++)
 80015ba:	b258      	sxtb	r0, r3
 80015bc:	5c0d      	ldrb	r5, [r1, r0]
 80015be:	1918      	adds	r0, r3, r4
 80015c0:	b240      	sxtb	r0, r0
 80015c2:	1816      	adds	r6, r2, r0
 80015c4:	3301      	adds	r3, #1
 80015c6:	b92d      	cbnz	r5, 80015d4 <Merge2Strings+0x26>
	{
		strout[i] = str2in[j];
	}
	strout[i] = '\0';
 80015c8:	7035      	strb	r5, [r6, #0]
	return strout;
}
 80015ca:	4610      	mov	r0, r2
 80015cc:	bd70      	pop	{r4, r5, r6, pc}
		strout[i] = str1in[i];
 80015ce:	5553      	strb	r3, [r2, r5]
 80015d0:	4634      	mov	r4, r6
 80015d2:	e7ee      	b.n	80015b2 <Merge2Strings+0x4>
		strout[i] = str2in[j];
 80015d4:	5415      	strb	r5, [r2, r0]
 80015d6:	e7f0      	b.n	80015ba <Merge2Strings+0xc>

080015d8 <Merge3Strings>:
char * Merge3Strings(char * str1in, char * str2in,char * str3in, char * strout)
{
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int8_t i, j,k;
	for (i=0; str1in[i]!='\0'; i++)
 80015da:	2700      	movs	r7, #0
 80015dc:	b27c      	sxtb	r4, r7
 80015de:	5d05      	ldrb	r5, [r0, r4]
 80015e0:	1c7e      	adds	r6, r7, #1
 80015e2:	b98d      	cbnz	r5, 8001608 <Merge3Strings+0x30>
	{
		strout[i] = str1in[i];
	}
	for (j=0; str2in[j]!='\0'; j++,i++)
 80015e4:	b268      	sxtb	r0, r5
 80015e6:	197e      	adds	r6, r7, r5
 80015e8:	5c0c      	ldrb	r4, [r1, r0]
 80015ea:	b2f6      	uxtb	r6, r6
 80015ec:	b270      	sxtb	r0, r6
 80015ee:	3501      	adds	r5, #1
 80015f0:	b96c      	cbnz	r4, 800160e <Merge3Strings+0x36>
 80015f2:	4621      	mov	r1, r4
	{
		strout[i] = str2in[j];
	}
	for (k=0; str3in[k]!='\0'; k++,i++)
 80015f4:	b248      	sxtb	r0, r1
 80015f6:	5c14      	ldrb	r4, [r2, r0]
 80015f8:	1870      	adds	r0, r6, r1
 80015fa:	b240      	sxtb	r0, r0
 80015fc:	181d      	adds	r5, r3, r0
 80015fe:	3101      	adds	r1, #1
 8001600:	b93c      	cbnz	r4, 8001612 <Merge3Strings+0x3a>
	{
		strout[i] = str3in[k];
	}
	strout[i] = '\0';
 8001602:	702c      	strb	r4, [r5, #0]
	return strout;
}
 8001604:	4618      	mov	r0, r3
 8001606:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strout[i] = str1in[i];
 8001608:	551d      	strb	r5, [r3, r4]
 800160a:	4637      	mov	r7, r6
 800160c:	e7e6      	b.n	80015dc <Merge3Strings+0x4>
		strout[i] = str2in[j];
 800160e:	541c      	strb	r4, [r3, r0]
 8001610:	e7e8      	b.n	80015e4 <Merge3Strings+0xc>
		strout[i] = str3in[k];
 8001612:	541c      	strb	r4, [r3, r0]
 8001614:	e7ee      	b.n	80015f4 <Merge3Strings+0x1c>

08001616 <ClockStringWithSec>:

char *ClockStringWithSec(uint32_t time, char *OutStr)
{
 8001616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800161a:	4680      	mov	r8, r0
	int8_t i, j,k;
	char s[17];
	itoaP(time/3600,s);
 800161c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
{
 8001620:	b086      	sub	sp, #24
 8001622:	460d      	mov	r5, r1
	itoaP(time/3600,s);
 8001624:	fbb8 f0f0 	udiv	r0, r8, r0
 8001628:	a901      	add	r1, sp, #4
 800162a:	f7ff fea7 	bl	800137c <itoaP>
	i=0;
	if (strlen1(s)<2)
 800162e:	a801      	add	r0, sp, #4
 8001630:	f7ff ffb5 	bl	800159e <strlen1>
 8001634:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
		i++;
 8001636:	bf96      	itet	ls
 8001638:	2201      	movls	r2, #1
	i=0;
 800163a:	2200      	movhi	r2, #0
		OutStr[i] = '0';
 800163c:	2330      	movls	r3, #48	; 0x30
	i=0;
 800163e:	4614      	mov	r4, r2
		OutStr[i] = '0';
 8001640:	bf98      	it	ls
 8001642:	702b      	strbls	r3, [r5, #0]
 8001644:	b2e6      	uxtb	r6, r4
	}

	for (k=0; s[k]!='\0';k++, i++)
 8001646:	1ab3      	subs	r3, r6, r2
 8001648:	a906      	add	r1, sp, #24
 800164a:	b25b      	sxtb	r3, r3
 800164c:	440b      	add	r3, r1
 800164e:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8001652:	192b      	adds	r3, r5, r4
 8001654:	1c74      	adds	r4, r6, #1
 8001656:	b264      	sxtb	r4, r4
 8001658:	2900      	cmp	r1, #0
 800165a:	d145      	bne.n	80016e8 <ClockStringWithSec+0xd2>
	{
		OutStr[i] = s[k];
	}

	OutStr[i] = ':';
 800165c:	223a      	movs	r2, #58	; 0x3a
 800165e:	701a      	strb	r2, [r3, #0]
	i++;
	itoaP((time/60)%60,s);
 8001660:	233c      	movs	r3, #60	; 0x3c
 8001662:	fbb8 f2f3 	udiv	r2, r8, r3
 8001666:	fbb2 f0f3 	udiv	r0, r2, r3
 800166a:	a901      	add	r1, sp, #4
 800166c:	fb03 2010 	mls	r0, r3, r0, r2
 8001670:	f7ff fe84 	bl	800137c <itoaP>
	if (strlen1(s)<2)
 8001674:	a801      	add	r0, sp, #4
 8001676:	f7ff ff92 	bl	800159e <strlen1>
 800167a:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 800167c:	bf9f      	itttt	ls
 800167e:	2330      	movls	r3, #48	; 0x30
 8001680:	552b      	strbls	r3, [r5, r4]
		i++;
 8001682:	1cb4      	addls	r4, r6, #2
 8001684:	b264      	sxtbls	r4, r4
	i=0;
 8001686:	4626      	mov	r6, r4
 8001688:	b2f7      	uxtb	r7, r6
	}
	for (j=0; s[j]!='\0'; i++,j++)
 800168a:	1b3b      	subs	r3, r7, r4
 800168c:	aa06      	add	r2, sp, #24
 800168e:	b25b      	sxtb	r3, r3
 8001690:	4413      	add	r3, r2
 8001692:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001696:	19ab      	adds	r3, r5, r6
 8001698:	1c7e      	adds	r6, r7, #1
 800169a:	b276      	sxtb	r6, r6
 800169c:	bb32      	cbnz	r2, 80016ec <ClockStringWithSec+0xd6>
	{
		OutStr[i] = s[j];
	}

	OutStr[i] = ':';
 800169e:	223a      	movs	r2, #58	; 0x3a
 80016a0:	701a      	strb	r2, [r3, #0]
	i++;

	itoaP(time%60,s);
 80016a2:	233c      	movs	r3, #60	; 0x3c
 80016a4:	fbb8 f0f3 	udiv	r0, r8, r3
 80016a8:	a901      	add	r1, sp, #4
 80016aa:	fb03 8010 	mls	r0, r3, r0, r8
 80016ae:	f7ff fe65 	bl	800137c <itoaP>
	if (strlen1(s)<2)
 80016b2:	a801      	add	r0, sp, #4
 80016b4:	f7ff ff73 	bl	800159e <strlen1>
 80016b8:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 80016ba:	bf9c      	itt	ls
 80016bc:	2330      	movls	r3, #48	; 0x30
 80016be:	55ab      	strbls	r3, [r5, r6]
	i=0;
 80016c0:	f04f 0300 	mov.w	r3, #0
		i++;
 80016c4:	bf9c      	itt	ls
 80016c6:	1cbe      	addls	r6, r7, #2
 80016c8:	b276      	sxtbls	r6, r6
	}
	for (j=0; s[j]!='\0'; i++,j++)
 80016ca:	b25a      	sxtb	r2, r3
 80016cc:	a906      	add	r1, sp, #24
 80016ce:	440a      	add	r2, r1
 80016d0:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80016d4:	18f2      	adds	r2, r6, r3
 80016d6:	b252      	sxtb	r2, r2
 80016d8:	18a8      	adds	r0, r5, r2
 80016da:	3301      	adds	r3, #1
 80016dc:	b941      	cbnz	r1, 80016f0 <ClockStringWithSec+0xda>
	{
		OutStr[i] = s[j];
	}

	OutStr[i] = '\0';
 80016de:	7001      	strb	r1, [r0, #0]
	return OutStr;
}
 80016e0:	4628      	mov	r0, r5
 80016e2:	b006      	add	sp, #24
 80016e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		OutStr[i] = s[k];
 80016e8:	7019      	strb	r1, [r3, #0]
 80016ea:	e7ab      	b.n	8001644 <ClockStringWithSec+0x2e>
		OutStr[i] = s[j];
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	e7cb      	b.n	8001688 <ClockStringWithSec+0x72>
		OutStr[i] = s[j];
 80016f0:	54a9      	strb	r1, [r5, r2]
 80016f2:	e7ea      	b.n	80016ca <ClockStringWithSec+0xb4>

080016f4 <ClockStringNoSec>:

char *ClockStringNoSec(uint32_t time, char *OutStr)
{
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f6:	4607      	mov	r7, r0

	int8_t i, j,k;
	char s[17];
	itoaP(time/3600,s);
 80016f8:	f44f 6061 	mov.w	r0, #3600	; 0xe10
{
 80016fc:	b087      	sub	sp, #28
 80016fe:	460d      	mov	r5, r1
	itoaP(time/3600,s);
 8001700:	fbb7 f0f0 	udiv	r0, r7, r0
 8001704:	a901      	add	r1, sp, #4
 8001706:	f7ff fe39 	bl	800137c <itoaP>
	i=0;
	if (strlen1(s)<2)
 800170a:	a801      	add	r0, sp, #4
 800170c:	f7ff ff47 	bl	800159e <strlen1>
 8001710:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
		i++;
 8001712:	bf96      	itet	ls
 8001714:	2201      	movls	r2, #1
	i=0;
 8001716:	2200      	movhi	r2, #0
		OutStr[i] = '0';
 8001718:	2330      	movls	r3, #48	; 0x30
	i=0;
 800171a:	4614      	mov	r4, r2
		OutStr[i] = '0';
 800171c:	bf98      	it	ls
 800171e:	702b      	strbls	r3, [r5, #0]
 8001720:	b2e6      	uxtb	r6, r4
	}

	for (k=0; s[k]!='\0';k++, i++)
 8001722:	1ab3      	subs	r3, r6, r2
 8001724:	a906      	add	r1, sp, #24
 8001726:	b25b      	sxtb	r3, r3
 8001728:	440b      	add	r3, r1
 800172a:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 800172e:	192b      	adds	r3, r5, r4
 8001730:	1c74      	adds	r4, r6, #1
 8001732:	b264      	sxtb	r4, r4
 8001734:	bb29      	cbnz	r1, 8001782 <ClockStringNoSec+0x8e>
	{
		OutStr[i] = s[k];
	}

	OutStr[i] = ':';
 8001736:	223a      	movs	r2, #58	; 0x3a
 8001738:	701a      	strb	r2, [r3, #0]
	i++;
	itoaP((time/60)%60,s);
 800173a:	233c      	movs	r3, #60	; 0x3c
 800173c:	fbb7 f7f3 	udiv	r7, r7, r3
 8001740:	fbb7 f0f3 	udiv	r0, r7, r3
 8001744:	a901      	add	r1, sp, #4
 8001746:	fb03 7010 	mls	r0, r3, r0, r7
 800174a:	f7ff fe17 	bl	800137c <itoaP>
	if (strlen1(s)<2)
 800174e:	a801      	add	r0, sp, #4
 8001750:	f7ff ff25 	bl	800159e <strlen1>
 8001754:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 8001756:	bf9c      	itt	ls
 8001758:	2330      	movls	r3, #48	; 0x30
 800175a:	552b      	strbls	r3, [r5, r4]
	i=0;
 800175c:	f04f 0300 	mov.w	r3, #0
		i++;
 8001760:	bf9c      	itt	ls
 8001762:	1cb4      	addls	r4, r6, #2
 8001764:	b264      	sxtbls	r4, r4
	}
	for (j=0; s[j]!='\0'; i++,j++)
 8001766:	b25a      	sxtb	r2, r3
 8001768:	a906      	add	r1, sp, #24
 800176a:	440a      	add	r2, r1
 800176c:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8001770:	18e2      	adds	r2, r4, r3
 8001772:	b252      	sxtb	r2, r2
 8001774:	18a8      	adds	r0, r5, r2
 8001776:	3301      	adds	r3, #1
 8001778:	b929      	cbnz	r1, 8001786 <ClockStringNoSec+0x92>
	{
		OutStr[i] = s[j];
	}


	OutStr[i] = '\0';
 800177a:	7001      	strb	r1, [r0, #0]
	return OutStr;
}
 800177c:	4628      	mov	r0, r5
 800177e:	b007      	add	sp, #28
 8001780:	bdf0      	pop	{r4, r5, r6, r7, pc}
		OutStr[i] = s[k];
 8001782:	7019      	strb	r1, [r3, #0]
 8001784:	e7cc      	b.n	8001720 <ClockStringNoSec+0x2c>
		OutStr[i] = s[j];
 8001786:	54a9      	strb	r1, [r5, r2]
 8001788:	e7ed      	b.n	8001766 <ClockStringNoSec+0x72>
	...

0800178c <middle_of_3Imax1>:


int32_t middle_of_3Imax1(int32_t value)
{
 800178c:	4602      	mov	r2, r0
   static int32_t InputValueI1[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueI1[2] = InputValueI1[1];
 800178e:	490d      	ldr	r1, [pc, #52]	; (80017c4 <middle_of_3Imax1+0x38>)
 8001790:	684b      	ldr	r3, [r1, #4]
   InputValueI1[1] = InputValueI1[0];
 8001792:	6808      	ldr	r0, [r1, #0]
   InputValueI1[2] = InputValueI1[1];
 8001794:	608b      	str	r3, [r1, #8]
   InputValueI1[0] = value;
   a = InputValueI1[2];
   b = InputValueI1[1];
   c = InputValueI1[0];
   if ((a <= b) && (a <= c)){
 8001796:	4283      	cmp	r3, r0
   InputValueI1[0] = value;
 8001798:	e9c1 2000 	strd	r2, r0, [r1]
   if ((a <= b) && (a <= c)){
 800179c:	dc07      	bgt.n	80017ae <middle_of_3Imax1+0x22>
 800179e:	4293      	cmp	r3, r2
 80017a0:	dc03      	bgt.n	80017aa <middle_of_3Imax1+0x1e>
      middle = (b <= c) ? b : c;
 80017a2:	4290      	cmp	r0, r2
 80017a4:	bfa8      	it	ge
 80017a6:	4610      	movge	r0, r2
 80017a8:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 80017aa:	4283      	cmp	r3, r0
 80017ac:	db06      	blt.n	80017bc <middle_of_3Imax1+0x30>
 80017ae:	4290      	cmp	r0, r2
 80017b0:	dc04      	bgt.n	80017bc <middle_of_3Imax1+0x30>
         middle = (a <= c) ? a : c;
 80017b2:	4293      	cmp	r3, r2
 80017b4:	bfa8      	it	ge
 80017b6:	4613      	movge	r3, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 80017bc:	4298      	cmp	r0, r3
 80017be:	bfa8      	it	ge
 80017c0:	4618      	movge	r0, r3
      }
   }

   return middle;
}
 80017c2:	4770      	bx	lr
 80017c4:	20000714 	.word	0x20000714

080017c8 <middle_of_3Imax2>:

int32_t middle_of_3Imax2(int32_t value)
{
 80017c8:	4602      	mov	r2, r0
   static int32_t InputValueI2[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueI2[2] = InputValueI2[1];
 80017ca:	490d      	ldr	r1, [pc, #52]	; (8001800 <middle_of_3Imax2+0x38>)
 80017cc:	684b      	ldr	r3, [r1, #4]
   InputValueI2[1] = InputValueI2[0];
 80017ce:	6808      	ldr	r0, [r1, #0]
   InputValueI2[2] = InputValueI2[1];
 80017d0:	608b      	str	r3, [r1, #8]
   InputValueI2[0] = value;
   a = InputValueI2[2];
   b = InputValueI2[1];
   c = InputValueI2[0];
   if ((a <= b) && (a <= c)){
 80017d2:	4283      	cmp	r3, r0
   InputValueI2[0] = value;
 80017d4:	e9c1 2000 	strd	r2, r0, [r1]
   if ((a <= b) && (a <= c)){
 80017d8:	dc07      	bgt.n	80017ea <middle_of_3Imax2+0x22>
 80017da:	4293      	cmp	r3, r2
 80017dc:	dc03      	bgt.n	80017e6 <middle_of_3Imax2+0x1e>
      middle = (b <= c) ? b : c;
 80017de:	4290      	cmp	r0, r2
 80017e0:	bfa8      	it	ge
 80017e2:	4610      	movge	r0, r2
 80017e4:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 80017e6:	4283      	cmp	r3, r0
 80017e8:	db06      	blt.n	80017f8 <middle_of_3Imax2+0x30>
 80017ea:	4290      	cmp	r0, r2
 80017ec:	dc04      	bgt.n	80017f8 <middle_of_3Imax2+0x30>
         middle = (a <= c) ? a : c;
 80017ee:	4293      	cmp	r3, r2
 80017f0:	bfa8      	it	ge
 80017f2:	4613      	movge	r3, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 80017f8:	4298      	cmp	r0, r3
 80017fa:	bfa8      	it	ge
 80017fc:	4618      	movge	r0, r3
      }
   }

   return middle;
}
 80017fe:	4770      	bx	lr
 8001800:	20000720 	.word	0x20000720

08001804 <middle_of_3Umax1>:

int32_t middle_of_3Umax1(int32_t value)
{
 8001804:	4602      	mov	r2, r0
   static int32_t InputValueU1[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU1[2] = InputValueU1[1];
 8001806:	490d      	ldr	r1, [pc, #52]	; (800183c <middle_of_3Umax1+0x38>)
 8001808:	684b      	ldr	r3, [r1, #4]
   InputValueU1[1] = InputValueU1[0];
 800180a:	6808      	ldr	r0, [r1, #0]
   InputValueU1[2] = InputValueU1[1];
 800180c:	608b      	str	r3, [r1, #8]
   InputValueU1[0] = value;
   a = InputValueU1[2];
   b = InputValueU1[1];
   c = InputValueU1[0];
   if ((a <= b) && (a <= c)){
 800180e:	4283      	cmp	r3, r0
   InputValueU1[0] = value;
 8001810:	e9c1 2000 	strd	r2, r0, [r1]
   if ((a <= b) && (a <= c)){
 8001814:	dc07      	bgt.n	8001826 <middle_of_3Umax1+0x22>
 8001816:	4293      	cmp	r3, r2
 8001818:	dc03      	bgt.n	8001822 <middle_of_3Umax1+0x1e>
      middle = (b <= c) ? b : c;
 800181a:	4290      	cmp	r0, r2
 800181c:	bfa8      	it	ge
 800181e:	4610      	movge	r0, r2
 8001820:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 8001822:	4283      	cmp	r3, r0
 8001824:	db06      	blt.n	8001834 <middle_of_3Umax1+0x30>
 8001826:	4290      	cmp	r0, r2
 8001828:	dc04      	bgt.n	8001834 <middle_of_3Umax1+0x30>
         middle = (a <= c) ? a : c;
 800182a:	4293      	cmp	r3, r2
 800182c:	bfa8      	it	ge
 800182e:	4613      	movge	r3, r2
 8001830:	4618      	mov	r0, r3
 8001832:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 8001834:	4298      	cmp	r0, r3
 8001836:	bfa8      	it	ge
 8001838:	4618      	movge	r0, r3
      }
   }

   return middle;
}
 800183a:	4770      	bx	lr
 800183c:	2000072c 	.word	0x2000072c

08001840 <middle_of_3Umax2>:

int32_t middle_of_3Umax2(int32_t value)
{
 8001840:	4602      	mov	r2, r0
   static int32_t InputValueU2[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU2[2] = InputValueU2[1];
 8001842:	490d      	ldr	r1, [pc, #52]	; (8001878 <middle_of_3Umax2+0x38>)
 8001844:	684b      	ldr	r3, [r1, #4]
   InputValueU2[1] = InputValueU2[0];
 8001846:	6808      	ldr	r0, [r1, #0]
   InputValueU2[2] = InputValueU2[1];
 8001848:	608b      	str	r3, [r1, #8]
   InputValueU2[0] = value;
   a = InputValueU2[2];
   b = InputValueU2[1];
   c = InputValueU2[0];
   if ((a <= b) && (a <= c)){
 800184a:	4283      	cmp	r3, r0
   InputValueU2[0] = value;
 800184c:	e9c1 2000 	strd	r2, r0, [r1]
   if ((a <= b) && (a <= c)){
 8001850:	dc07      	bgt.n	8001862 <middle_of_3Umax2+0x22>
 8001852:	4293      	cmp	r3, r2
 8001854:	dc03      	bgt.n	800185e <middle_of_3Umax2+0x1e>
      middle = (b <= c) ? b : c;
 8001856:	4290      	cmp	r0, r2
 8001858:	bfa8      	it	ge
 800185a:	4610      	movge	r0, r2
 800185c:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 800185e:	4283      	cmp	r3, r0
 8001860:	db06      	blt.n	8001870 <middle_of_3Umax2+0x30>
 8001862:	4290      	cmp	r0, r2
 8001864:	dc04      	bgt.n	8001870 <middle_of_3Umax2+0x30>
         middle = (a <= c) ? a : c;
 8001866:	4293      	cmp	r3, r2
 8001868:	bfa8      	it	ge
 800186a:	4613      	movge	r3, r2
 800186c:	4618      	mov	r0, r3
 800186e:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 8001870:	4298      	cmp	r0, r3
 8001872:	bfa8      	it	ge
 8001874:	4618      	movge	r0, r3
      }
   }

   return middle;
}
 8001876:	4770      	bx	lr
 8001878:	20000738 	.word	0x20000738

0800187c <middle_of_3Umax3>:
int32_t middle_of_3Umax3(int32_t value)
{
 800187c:	4602      	mov	r2, r0
   static int32_t InputValueU3[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU3[2] = InputValueU3[1];
 800187e:	490d      	ldr	r1, [pc, #52]	; (80018b4 <middle_of_3Umax3+0x38>)
 8001880:	684b      	ldr	r3, [r1, #4]
   InputValueU3[1] = InputValueU3[0];
 8001882:	6808      	ldr	r0, [r1, #0]
   InputValueU3[2] = InputValueU3[1];
 8001884:	608b      	str	r3, [r1, #8]
   InputValueU3[0] = value;
   a = InputValueU3[2];
   b = InputValueU3[1];
   c = InputValueU3[0];
   if ((a <= b) && (a <= c)){
 8001886:	4283      	cmp	r3, r0
   InputValueU3[0] = value;
 8001888:	e9c1 2000 	strd	r2, r0, [r1]
   if ((a <= b) && (a <= c)){
 800188c:	dc07      	bgt.n	800189e <middle_of_3Umax3+0x22>
 800188e:	4293      	cmp	r3, r2
 8001890:	dc03      	bgt.n	800189a <middle_of_3Umax3+0x1e>
      middle = (b <= c) ? b : c;
 8001892:	4290      	cmp	r0, r2
 8001894:	bfa8      	it	ge
 8001896:	4610      	movge	r0, r2
 8001898:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 800189a:	4283      	cmp	r3, r0
 800189c:	db06      	blt.n	80018ac <middle_of_3Umax3+0x30>
 800189e:	4290      	cmp	r0, r2
 80018a0:	dc04      	bgt.n	80018ac <middle_of_3Umax3+0x30>
         middle = (a <= c) ? a : c;
 80018a2:	4293      	cmp	r3, r2
 80018a4:	bfa8      	it	ge
 80018a6:	4613      	movge	r3, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 80018ac:	4298      	cmp	r0, r3
 80018ae:	bfa8      	it	ge
 80018b0:	4618      	movge	r0, r3
      }
   }

   return middle;
}
 80018b2:	4770      	bx	lr
 80018b4:	20000744 	.word	0x20000744

080018b8 <RunningAverageI1>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueI1 = 0;
	filteredlValueI1 += (newValue - filteredlValueI1) * k;
	return filteredlValueI1/10;
}
 80018b8:	4770      	bx	lr

080018ba <RunningAverageI2>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueI2 = 0;
	filteredlValueI2 += (newValue - filteredlValueI2) * k;
	return filteredlValueI2/10;
}
 80018ba:	4770      	bx	lr

080018bc <RunningAverageU1>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueU1 = 0;
	filteredlValueU1 += (newValue - filteredlValueU1) * k;
	return filteredlValueU1/10;
}
 80018bc:	4770      	bx	lr

080018be <RunningAverageU2>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueU2 = 0;
	filteredlValueU2 += (newValue - filteredlValueU2) * k;
	return filteredlValueU2/10;
}
 80018be:	4770      	bx	lr

080018c0 <Menu_GetCurrentMenu>:


Menu_Item_t* Menu_GetCurrentMenu(void)
{
 return CurrentMenuItem;
}
 80018c0:	4b01      	ldr	r3, [pc, #4]	; (80018c8 <Menu_GetCurrentMenu+0x8>)
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	2000024c 	.word	0x2000024c

080018cc <Menu_Navigate>:

void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <Menu_Navigate+0x28>)
{
 80018ce:	b510      	push	{r4, lr}
 if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 80018d0:	4298      	cmp	r0, r3
 80018d2:	d00d      	beq.n	80018f0 <Menu_Navigate+0x24>
 80018d4:	b160      	cbz	r0, 80018f0 <Menu_Navigate+0x24>
  return;

 CurrentMenuItem = NewMenu;

 if (MenuWriteFunc)
 80018d6:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <Menu_Navigate+0x2c>)
 CurrentMenuItem = NewMenu;
 80018d8:	4c08      	ldr	r4, [pc, #32]	; (80018fc <Menu_Navigate+0x30>)
 if (MenuWriteFunc)
 80018da:	6812      	ldr	r2, [r2, #0]
 CurrentMenuItem = NewMenu;
 80018dc:	6020      	str	r0, [r4, #0]
 if (MenuWriteFunc)
 80018de:	b10a      	cbz	r2, 80018e4 <Menu_Navigate+0x18>
  MenuWriteFunc(CurrentMenuItem->Text);
 80018e0:	3018      	adds	r0, #24
 80018e2:	4790      	blx	r2

 void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	691b      	ldr	r3, [r3, #16]

 if (EnterCallback)
 80018e8:	b113      	cbz	r3, 80018f0 <Menu_Navigate+0x24>
  EnterCallback();
}
 80018ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  EnterCallback();
 80018ee:	4718      	bx	r3
}
 80018f0:	bd10      	pop	{r4, pc}
 80018f2:	bf00      	nop
 80018f4:	08006118 	.word	0x08006118
 80018f8:	20000774 	.word	0x20000774
 80018fc:	2000024c 	.word	0x2000024c

08001900 <Menu_SetGenericWriteCallback>:

void Menu_SetGenericWriteCallback(void (*WriteFunc)( char* Text))
{
 MenuWriteFunc = WriteFunc;
 8001900:	4b02      	ldr	r3, [pc, #8]	; (800190c <Menu_SetGenericWriteCallback+0xc>)
 8001902:	6018      	str	r0, [r3, #0]
 Menu_Navigate(CurrentMenuItem);
 8001904:	4b02      	ldr	r3, [pc, #8]	; (8001910 <Menu_SetGenericWriteCallback+0x10>)
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	f7ff bfe0 	b.w	80018cc <Menu_Navigate>
 800190c:	20000774 	.word	0x20000774
 8001910:	2000024c 	.word	0x2000024c

08001914 <Menu_SelectItem>:
}

void Menu_SelectItem(Key_Pressed_t key)
{
 if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <Menu_SelectItem+0x14>)
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <Menu_SelectItem+0x18>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4293      	cmp	r3, r2
 800191c:	d003      	beq.n	8001926 <Menu_SelectItem+0x12>
 800191e:	b113      	cbz	r3, 8001926 <Menu_SelectItem+0x12>
  return;

 void (*SelectCallback)(Key_Pressed_t) = CurrentMenuItem->SelectCallback;
 8001920:	695b      	ldr	r3, [r3, #20]

 if (SelectCallback)
 8001922:	b103      	cbz	r3, 8001926 <Menu_SelectItem+0x12>
  SelectCallback(key);
 8001924:	4718      	bx	r3
}
 8001926:	4770      	bx	lr
 8001928:	2000024c 	.word	0x2000024c
 800192c:	08006118 	.word	0x08006118

08001930 <strobe>:
uint8_t pos_x = 0;
uint8_t pos_y = 0;

void strobe(void)
{
	LCD_PORT->BSRR=LCD_EN_BS;
 8001930:	f44f 4380 	mov.w	r3, #16384	; 0x4000
{
 8001934:	b510      	push	{r4, lr}
	LCD_PORT->BSRR=LCD_EN_BS;
 8001936:	4c06      	ldr	r4, [pc, #24]	; (8001950 <strobe+0x20>)
	delay_us(2);
 8001938:	2002      	movs	r0, #2
	LCD_PORT->BSRR=LCD_EN_BS;
 800193a:	6123      	str	r3, [r4, #16]
	delay_us(2);
 800193c:	f7ff fb92 	bl	8001064 <delay_us>
	LCD_PORT->BSRR=LCD_EN_BC;
 8001940:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	delay_us(2);
 8001944:	2002      	movs	r0, #2
	LCD_PORT->BSRR=LCD_EN_BC;
 8001946:	6123      	str	r3, [r4, #16]
}
 8001948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(2);
 800194c:	f7ff bb8a 	b.w	8001064 <delay_us>
 8001950:	40010c00 	.word	0x40010c00

08001954 <lcd_set_4bit_mode>:
			}
		}
	}
}

void lcd_set_4bit_mode(void) {
 8001954:	b570      	push	{r4, r5, r6, lr}


	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8001956:	f04f 457c 	mov.w	r5, #4227858432	; 0xfc000000
	LCD_PORT->BSRR=(LCD_DB5_BS);
 800195a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 800195e:	4c0d      	ldr	r4, [pc, #52]	; (8001994 <lcd_set_4bit_mode+0x40>)
 8001960:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS);
 8001962:	6126      	str	r6, [r4, #16]

	//LCD_PORT->BSRR=LCD_EN_BS;
	//delay_ms(1);
	//LCD_PORT->BSRR=LCD_EN_BC;

	strobe();
 8001964:	f7ff ffe4 	bl	8001930 <strobe>
	delay_ms(1);
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff fbb1 	bl	80010d0 <delay_ms>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 800196e:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS);
 8001970:	6126      	str	r6, [r4, #16]

	strobe();
 8001972:	f7ff ffdd 	bl	8001930 <strobe>
	delay_ms(1);
 8001976:	2001      	movs	r0, #1
 8001978:	f7ff fbaa 	bl	80010d0 <delay_ms>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
	LCD_PORT->BSRR=(LCD_DB7_BS);
 800197c:	f44f 6380 	mov.w	r3, #1024	; 0x400
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8001980:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB7_BS);
 8001982:	6123      	str	r3, [r4, #16]

	strobe();
 8001984:	f7ff ffd4 	bl	8001930 <strobe>
	delay_ms(1);

}
 8001988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	delay_ms(1);
 800198c:	2001      	movs	r0, #1
 800198e:	f7ff bb9f 	b.w	80010d0 <delay_ms>
 8001992:	bf00      	nop
 8001994:	40010c00 	.word	0x40010c00

08001998 <lcd_send>:

void lcd_send(uint8_t byte, dat_or_comm dc)  {

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8001998:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 800199c:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <lcd_send+0x98>)
void lcd_send(uint8_t byte, dat_or_comm dc)  {
 800199e:	b570      	push	{r4, r5, r6, lr}
 80019a0:	4604      	mov	r4, r0
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80019a2:	611a      	str	r2, [r3, #16]

	if (dc) {
 80019a4:	460e      	mov	r6, r1
 80019a6:	b111      	cbz	r1, 80019ae <lcd_send+0x16>
		LCD_PORT->BSRR=LCD_CD_BS;
 80019a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019ac:	611a      	str	r2, [r3, #16]
	}

	if (byte & 0x10) {
 80019ae:	06e2      	lsls	r2, r4, #27
		LCD_PORT->BSRR=LCD_DB4_BS;
 80019b0:	bf44      	itt	mi
 80019b2:	f44f 5200 	movmi.w	r2, #8192	; 0x2000
 80019b6:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x20) {
 80019b8:	f014 0f20 	tst.w	r4, #32
		LCD_PORT->BSRR=LCD_DB5_BS;
 80019bc:	bf18      	it	ne
 80019be:	f44f 5280 	movne.w	r2, #4096	; 0x1000
 80019c2:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <lcd_send+0x98>)
 80019c4:	bf18      	it	ne
 80019c6:	611a      	strne	r2, [r3, #16]
	}
	if (byte & 0x40) {
 80019c8:	0665      	lsls	r5, r4, #25
		LCD_PORT->BSRR=LCD_DB6_BS;
 80019ca:	bf44      	itt	mi
 80019cc:	f44f 6200 	movmi.w	r2, #2048	; 0x800
 80019d0:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x80) {
 80019d2:	f014 0f80 	tst.w	r4, #128	; 0x80
		LCD_PORT->BSRR=LCD_DB7_BS;
 80019d6:	bf18      	it	ne
 80019d8:	f44f 6380 	movne.w	r3, #1024	; 0x400
 80019dc:	4d14      	ldr	r5, [pc, #80]	; (8001a30 <lcd_send+0x98>)
 80019de:	bf18      	it	ne
 80019e0:	612b      	strne	r3, [r5, #16]
	}

	strobe();
 80019e2:	f7ff ffa5 	bl	8001930 <strobe>


	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC );
 80019e6:	f04f 5370 	mov.w	r3, #1006632960	; 0x3c000000

	if (byte & 0x01) {
 80019ea:	07e0      	lsls	r0, r4, #31
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC );
 80019ec:	612b      	str	r3, [r5, #16]
		LCD_PORT->BSRR=LCD_DB4_BS;
 80019ee:	bf44      	itt	mi
 80019f0:	f44f 5300 	movmi.w	r3, #8192	; 0x2000
 80019f4:	612b      	strmi	r3, [r5, #16]
	}
	if (byte & 0x02) {
 80019f6:	07a1      	lsls	r1, r4, #30
		LCD_PORT->BSRR=LCD_DB5_BS;
 80019f8:	bf42      	ittt	mi
 80019fa:	f44f 5280 	movmi.w	r2, #4096	; 0x1000
 80019fe:	4b0c      	ldrmi	r3, [pc, #48]	; (8001a30 <lcd_send+0x98>)
 8001a00:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x04) {
 8001a02:	0762      	lsls	r2, r4, #29
		LCD_PORT->BSRR=LCD_DB6_BS;
 8001a04:	bf42      	ittt	mi
 8001a06:	f44f 6200 	movmi.w	r2, #2048	; 0x800
 8001a0a:	4b09      	ldrmi	r3, [pc, #36]	; (8001a30 <lcd_send+0x98>)
 8001a0c:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x08) {
 8001a0e:	0723      	lsls	r3, r4, #28
		LCD_PORT->BSRR=LCD_DB7_BS;
 8001a10:	bf42      	ittt	mi
 8001a12:	f44f 6280 	movmi.w	r2, #1024	; 0x400
 8001a16:	4b06      	ldrmi	r3, [pc, #24]	; (8001a30 <lcd_send+0x98>)
 8001a18:	611a      	strmi	r2, [r3, #16]
	}



	strobe();
 8001a1a:	f7ff ff89 	bl	8001930 <strobe>
	delay_ms(2);
 8001a1e:	2002      	movs	r0, #2
 8001a20:	f7ff fb56 	bl	80010d0 <delay_ms>
	if (dc) {
 8001a24:	b11e      	cbz	r6, 8001a2e <lcd_send+0x96>
			LCD_PORT->BSRR=LCD_CD_BC;
 8001a26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a2a:	4b01      	ldr	r3, [pc, #4]	; (8001a30 <lcd_send+0x98>)
 8001a2c:	611a      	str	r2, [r3, #16]
		}

}
 8001a2e:	bd70      	pop	{r4, r5, r6, pc}
 8001a30:	40010c00 	.word	0x40010c00

08001a34 <lcd_set_user_char>:
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 8001a34:	00c0      	lsls	r0, r0, #3
 8001a36:	f040 0040 	orr.w	r0, r0, #64	; 0x40
void lcd_set_user_char(uint8_t char_num, char * char_data) {
 8001a3a:	b538      	push	{r3, r4, r5, lr}
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 8001a3c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
void lcd_set_user_char(uint8_t char_num, char * char_data) {
 8001a40:	460c      	mov	r4, r1
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 8001a42:	2100      	movs	r1, #0
 8001a44:	f7ff ffa8 	bl	8001998 <lcd_send>
 8001a48:	1e65      	subs	r5, r4, #1
 8001a4a:	3407      	adds	r4, #7
		lcd_send(char_data[i],DATA);
 8001a4c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001a50:	2101      	movs	r1, #1
 8001a52:	f7ff ffa1 	bl	8001998 <lcd_send>
	for (i=0;i<=7;i++) {
 8001a56:	42a5      	cmp	r5, r4
 8001a58:	d1f8      	bne.n	8001a4c <lcd_set_user_char+0x18>
}
 8001a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_send((1<<7), COMMAND);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2080      	movs	r0, #128	; 0x80
 8001a62:	f7ff bf99 	b.w	8001998 <lcd_send>
	...

08001a68 <SetSymbols>:
{
 8001a68:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sym[3]=0b00100;
 8001a6a:	4c1f      	ldr	r4, [pc, #124]	; (8001ae8 <SetSymbols+0x80>)
 8001a6c:	4d1f      	ldr	r5, [pc, #124]	; (8001aec <SetSymbols+0x84>)
	lcd_set_user_char(0,sym);//charge
 8001a6e:	4669      	mov	r1, sp
 8001a70:	2000      	movs	r0, #0
	sym[3]=0b00100;
 8001a72:	e9cd 4500 	strd	r4, r5, [sp]
	sym[3]=0b00000;
 8001a76:	4e1e      	ldr	r6, [pc, #120]	; (8001af0 <SetSymbols+0x88>)
	lcd_set_user_char(0,sym);//charge
 8001a78:	f7ff ffdc 	bl	8001a34 <lcd_set_user_char>
	sym[3]=0b00000;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <SetSymbols+0x8c>)
	lcd_set_user_char(1,sym);//charge
 8001a7e:	4669      	mov	r1, sp
 8001a80:	2001      	movs	r0, #1
	sym[3]=0b00000;
 8001a82:	e9cd 3600 	strd	r3, r6, [sp]
	lcd_set_user_char(1,sym);//charge
 8001a86:	f7ff ffd5 	bl	8001a34 <lcd_set_user_char>
	sym[0]=0b00000;
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <SetSymbols+0x90>)
	lcd_set_user_char(2,sym);//discharge
 8001a8c:	4669      	mov	r1, sp
	sym[3]=0b10101;
 8001a8e:	e9cd 3500 	strd	r3, r5, [sp]
	lcd_set_user_char(2,sym);//discharge
 8001a92:	2002      	movs	r0, #2
	sym[0]=0b00100;
 8001a94:	4d19      	ldr	r5, [pc, #100]	; (8001afc <SetSymbols+0x94>)
	lcd_set_user_char(2,sym);//discharge
 8001a96:	f7ff ffcd 	bl	8001a34 <lcd_set_user_char>
	lcd_set_user_char(3,sym);//discharge
 8001a9a:	4669      	mov	r1, sp
 8001a9c:	2003      	movs	r0, #3
	sym[3]=0b00100;
 8001a9e:	e9cd 5600 	strd	r5, r6, [sp]
	lcd_set_user_char(3,sym);//discharge
 8001aa2:	f7ff ffc7 	bl	8001a34 <lcd_set_user_char>
	lcd_set_user_char(4,sym);//training
 8001aa6:	4669      	mov	r1, sp
 8001aa8:	2004      	movs	r0, #4
	sym[3]=0b00100;
 8001aaa:	e9cd 5400 	strd	r5, r4, [sp]
	lcd_set_user_char(4,sym);//training
 8001aae:	f7ff ffc1 	bl	8001a34 <lcd_set_user_char>
	sym[3]=0b01010;
 8001ab2:	4a13      	ldr	r2, [pc, #76]	; (8001b00 <SetSymbols+0x98>)
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <SetSymbols+0x9c>)
	lcd_set_user_char(5,sym);//swing
 8001ab6:	4669      	mov	r1, sp
 8001ab8:	2005      	movs	r0, #5
	sym[3]=0b01010;
 8001aba:	e9cd 2300 	strd	r2, r3, [sp]
	lcd_set_user_char(5,sym);//swing
 8001abe:	f7ff ffb9 	bl	8001a34 <lcd_set_user_char>
	sym[3]=0b00101;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <SetSymbols+0xa0>)
 8001ac4:	4911      	ldr	r1, [pc, #68]	; (8001b0c <SetSymbols+0xa4>)
	lcd_set_user_char(6,sym);//Л
 8001ac6:	2006      	movs	r0, #6
	sym[3]=0b00101;
 8001ac8:	e9cd 1300 	strd	r1, r3, [sp]
	lcd_set_user_char(6,sym);//Л
 8001acc:	4669      	mov	r1, sp
 8001ace:	f7ff ffb1 	bl	8001a34 <lcd_set_user_char>
	sym[3]=0b11111;
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <SetSymbols+0xa8>)
 8001ad4:	480f      	ldr	r0, [pc, #60]	; (8001b14 <SetSymbols+0xac>)
	lcd_set_user_char(7,sym);//Ч
 8001ad6:	4669      	mov	r1, sp
	sym[3]=0b11111;
 8001ad8:	e9cd 0300 	strd	r0, r3, [sp]
	lcd_set_user_char(7,sym);//Ч
 8001adc:	2007      	movs	r0, #7
 8001ade:	f7ff ffa9 	bl	8001a34 <lcd_set_user_char>
}
 8001ae2:	b002      	add	sp, #8
 8001ae4:	bd70      	pop	{r4, r5, r6, pc}
 8001ae6:	bf00      	nop
 8001ae8:	040e1504 	.word	0x040e1504
 8001aec:	1f1f0400 	.word	0x1f1f0400
 8001af0:	1f040000 	.word	0x1f040000
 8001af4:	00040e15 	.word	0x00040e15
 8001af8:	150e0400 	.word	0x150e0400
 8001afc:	04150e04 	.word	0x04150e04
 8001b00:	0a070702 	.word	0x0a070702
 8001b04:	081c1c0a 	.word	0x081c1c0a
 8001b08:	00091505 	.word	0x00091505
 8001b0c:	0505050f 	.word	0x0505050f
 8001b10:	00010101 	.word	0x00010101
 8001b14:	1f111111 	.word	0x1f111111

08001b18 <lcd_set_xy>:
	pos_x = x;
 8001b18:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <lcd_set_xy+0x1c>)
 8001b1a:	7010      	strb	r0, [r2, #0]
	pos_y = y;
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <lcd_set_xy+0x20>)
 8001b1e:	7011      	strb	r1, [r2, #0]
	if (y==0) {
 8001b20:	b919      	cbnz	r1, 8001b2a <lcd_set_xy+0x12>
		lcd_send( ((1<<7) | (x)),COMMAND);
 8001b22:	f040 0080 	orr.w	r0, r0, #128	; 0x80
		lcd_send( ((3<<6) | (x)),COMMAND);
 8001b26:	f7ff bf37 	b.w	8001998 <lcd_send>
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8001b30:	e7f9      	b.n	8001b26 <lcd_set_xy+0xe>
 8001b32:	bf00      	nop
 8001b34:	20000778 	.word	0x20000778
 8001b38:	20000779 	.word	0x20000779

08001b3c <lcd_out>:
void lcd_out(char * txt,uint8_t TypeOfLCD) {
 8001b3c:	b570      	push	{r4, r5, r6, lr}
 8001b3e:	460d      	mov	r5, r1
	while(*txt)
 8001b40:	4604      	mov	r4, r0
		if ((TypeOfLCD ==1)&&(i==7) )
 8001b42:	43c6      	mvns	r6, r0
	while(*txt)
 8001b44:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001b48:	b900      	cbnz	r0, 8001b4c <lcd_out+0x10>
}
 8001b4a:	bd70      	pop	{r4, r5, r6, pc}
		lcd_send(*txt,DATA);
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	f7ff ff23 	bl	8001998 <lcd_send>
		if ((TypeOfLCD ==1)&&(i==7) )
 8001b52:	2d01      	cmp	r5, #1
 8001b54:	d1f6      	bne.n	8001b44 <lcd_out+0x8>
 8001b56:	1933      	adds	r3, r6, r4
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b07      	cmp	r3, #7
 8001b5c:	d1f2      	bne.n	8001b44 <lcd_out+0x8>
			lcd_set_xy(0,1);
 8001b5e:	4629      	mov	r1, r5
 8001b60:	2000      	movs	r0, #0
 8001b62:	f7ff ffd9 	bl	8001b18 <lcd_set_xy>
 8001b66:	e7ed      	b.n	8001b44 <lcd_out+0x8>

08001b68 <LcdOutbyNumber>:
	lcd_send(num,DATA);
 8001b68:	2101      	movs	r1, #1
 8001b6a:	b2c0      	uxtb	r0, r0
 8001b6c:	f7ff bf14 	b.w	8001998 <lcd_send>

08001b70 <LcdOut>:
{
 8001b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b74:	460f      	mov	r7, r1
			lcd_send(russ[*txt-192],DATA);
 8001b76:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001bf0 <LcdOut+0x80>
		pos_x++;
 8001b7a:	4c1b      	ldr	r4, [pc, #108]	; (8001be8 <LcdOut+0x78>)
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 8001b7c:	4e1b      	ldr	r6, [pc, #108]	; (8001bec <LcdOut+0x7c>)
 8001b7e:	1e45      	subs	r5, r0, #1
	while(*txt)
 8001b80:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001b84:	b908      	cbnz	r0, 8001b8a <LcdOut+0x1a>
}
 8001b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if(*txt==178)//І
 8001b8a:	28b2      	cmp	r0, #178	; 0xb2
 8001b8c:	d119      	bne.n	8001bc2 <LcdOut+0x52>
			lcd_send(73,DATA);
 8001b8e:	2101      	movs	r1, #1
 8001b90:	2049      	movs	r0, #73	; 0x49
			lcd_send(russ[*txt-192],DATA);
 8001b92:	f7ff ff01 	bl	8001998 <lcd_send>
		pos_x++;
 8001b96:	7823      	ldrb	r3, [r4, #0]
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 8001b98:	f896 9000 	ldrb.w	r9, [r6]
		pos_x++;
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	7023      	strb	r3, [r4, #0]
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 8001ba2:	f1b9 0f00 	cmp.w	r9, #0
 8001ba6:	d1eb      	bne.n	8001b80 <LcdOut+0x10>
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d1e9      	bne.n	8001b80 <LcdOut+0x10>
 8001bac:	2f02      	cmp	r7, #2
 8001bae:	d1e7      	bne.n	8001b80 <LcdOut+0x10>
			lcd_set_xy(0,1);
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	4648      	mov	r0, r9
 8001bb4:	f7ff ffb0 	bl	8001b18 <lcd_set_xy>
			pos_y = 1;
 8001bb8:	2301      	movs	r3, #1
			pos_x = 0;
 8001bba:	f884 9000 	strb.w	r9, [r4]
			pos_y = 1;
 8001bbe:	7033      	strb	r3, [r6, #0]
 8001bc0:	e7de      	b.n	8001b80 <LcdOut+0x10>
		}else if(*txt==175)//Ї
 8001bc2:	28af      	cmp	r0, #175	; 0xaf
 8001bc4:	d102      	bne.n	8001bcc <LcdOut+0x5c>
			lcd_send(3,DATA);
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	2003      	movs	r0, #3
 8001bca:	e7e2      	b.n	8001b92 <LcdOut+0x22>
		}else if(*txt==170)//Є
 8001bcc:	28aa      	cmp	r0, #170	; 0xaa
 8001bce:	d102      	bne.n	8001bd6 <LcdOut+0x66>
			lcd_send(2,DATA);
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	e7dd      	b.n	8001b92 <LcdOut+0x22>
		}else if(*txt<192)
 8001bd6:	28bf      	cmp	r0, #191	; 0xbf
			lcd_send(russ[*txt-192],DATA);
 8001bd8:	bf89      	itett	hi
 8001bda:	4440      	addhi	r0, r8
			lcd_send(*txt,DATA);
 8001bdc:	2101      	movls	r1, #1
			lcd_send(russ[*txt-192],DATA);
 8001bde:	2101      	movhi	r1, #1
 8001be0:	f810 0cc0 	ldrbhi.w	r0, [r0, #-192]
 8001be4:	e7d5      	b.n	8001b92 <LcdOut+0x22>
 8001be6:	bf00      	nop
 8001be8:	20000778 	.word	0x20000778
 8001bec:	20000779 	.word	0x20000779
 8001bf0:	20000250 	.word	0x20000250

08001bf4 <lcd_clear>:
	lcd_send(0x01,COMMAND);
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f7ff bece 	b.w	8001998 <lcd_send>

08001bfc <lcd_init>:
void lcd_init() {
 8001bfc:	b508      	push	{r3, lr}
	delay_ms(100);
 8001bfe:	2064      	movs	r0, #100	; 0x64
 8001c00:	f7ff fa66 	bl	80010d0 <delay_ms>
	lcd_set_4bit_mode();
 8001c04:	f7ff fea6 	bl	8001954 <lcd_set_4bit_mode>
				lcd_send(0x0E,COMMAND);
 8001c08:	2100      	movs	r1, #0
 8001c0a:	200e      	movs	r0, #14
 8001c0c:	f7ff fec4 	bl	8001998 <lcd_send>
}
 8001c10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_clear();
 8001c14:	f7ff bfee 	b.w	8001bf4 <lcd_clear>

08001c18 <PrintToLCD>:


void PrintToLCD(char* str )
{
	LcdOut(str,2);
 8001c18:	2102      	movs	r1, #2
 8001c1a:	f7ff bfa9 	b.w	8001b70 <LcdOut>

08001c1e <PrintToLCD_xy>:
	//Send_String_to_UART(str);
}

void PrintToLCD_xy(char* str ,uint8_t x, uint8_t y)
{
 8001c1e:	b510      	push	{r4, lr}
 8001c20:	4604      	mov	r4, r0
 8001c22:	4608      	mov	r0, r1
	lcd_set_xy(x,y);
 8001c24:	4611      	mov	r1, r2
 8001c26:	f7ff ff77 	bl	8001b18 <lcd_set_xy>

	LcdOut(str,2);
 8001c2a:	4620      	mov	r0, r4
	//Send_String_to_UART(str);
}
 8001c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LcdOut(str,2);
 8001c30:	2102      	movs	r1, #2
 8001c32:	f7ff bf9d 	b.w	8001b70 <LcdOut>

08001c36 <InitLCD>:

{
	PrintToLCD(itoa_koma(x,k));
}
void InitLCD()
{
 8001c36:	b508      	push	{r3, lr}



	lcd_init();
 8001c38:	f7ff ffe0 	bl	8001bfc <lcd_init>
	lcd_clear();
 8001c3c:	f7ff ffda 	bl	8001bf4 <lcd_clear>
	lcd_set_state(LCD_ENABLE, CURSOR_DISABLE, NO_BLINK);
}
 8001c40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				lcd_send(0x0C,COMMAND);
 8001c44:	2100      	movs	r1, #0
 8001c46:	200c      	movs	r0, #12
 8001c48:	f7ff bea6 	b.w	8001998 <lcd_send>

08001c4c <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <LL_APB2_GRP1_EnableClock+0x18>)
{
 8001c4e:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	4302      	orrs	r2, r0
 8001c54:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4018      	ands	r0, r3
 8001c5a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001c5c:	9b01      	ldr	r3, [sp, #4]
}
 8001c5e:	b002      	add	sp, #8
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000

08001c68 <MenuLog_Enter>:
			ClockOnLCD_noSec(DischargeTimeSec);
		}
}
void MenuLog_Enter()
{
	i_LogItems = 0;
 8001c68:	2200      	movs	r2, #0
 8001c6a:	4b01      	ldr	r3, [pc, #4]	; (8001c70 <MenuLog_Enter+0x8>)
 8001c6c:	801a      	strh	r2, [r3, #0]
}
 8001c6e:	4770      	bx	lr
 8001c70:	200007e2 	.word	0x200007e2

08001c74 <MenuCalibrationWriteToFlash_Enter>:
			break;
	}
}

void MenuCalibrationWriteToFlash_Enter(Key_Pressed_t key)
{
 8001c74:	b508      	push	{r3, lr}
	CalibrationWriteToFlash_CRC();
 8001c76:	f7fe feab 	bl	80009d0 <CalibrationWriteToFlash_CRC>
	WriteInLOG("Calibration");
}
 8001c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	WriteInLOG("Calibration");
 8001c7e:	4801      	ldr	r0, [pc, #4]	; (8001c84 <MenuCalibrationWriteToFlash_Enter+0x10>)
 8001c80:	f7ff b88c 	b.w	8000d9c <WriteInLOG>
 8001c84:	08006151 	.word	0x08006151

08001c88 <MenuSettingsBatteryType_Enter>:
{
 8001c88:	b510      	push	{r4, lr}
	if(CountShowBT == 0)
 8001c8a:	4c3b      	ldr	r4, [pc, #236]	; (8001d78 <MenuSettingsBatteryType_Enter+0xf0>)
 8001c8c:	f994 1000 	ldrsb.w	r1, [r4]
 8001c90:	b961      	cbnz	r1, 8001cac <MenuSettingsBatteryType_Enter+0x24>
		lcd_set_xy(0,0);
 8001c92:	4608      	mov	r0, r1
 8001c94:	f7ff ff40 	bl	8001b18 <lcd_set_xy>
		PrintToLCD(" 10.8V  14.6V   ");
 8001c98:	4838      	ldr	r0, [pc, #224]	; (8001d7c <MenuSettingsBatteryType_Enter+0xf4>)
 8001c9a:	f7ff ffbd 	bl	8001c18 <PrintToLCD>
		SettingsData.LowVoltage = 1080;
 8001c9e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8001ca2:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <MenuSettingsBatteryType_Enter+0xf8>)
 8001ca4:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 1460;
 8001ca6:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8001caa:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 1)
 8001cac:	f994 3000 	ldrsb.w	r3, [r4]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d10d      	bne.n	8001cd0 <MenuSettingsBatteryType_Enter+0x48>
		lcd_set_xy(0,0);
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4608      	mov	r0, r1
 8001cb8:	f7ff ff2e 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("  3.0V   4.2V   ");
 8001cbc:	4831      	ldr	r0, [pc, #196]	; (8001d84 <MenuSettingsBatteryType_Enter+0xfc>)
 8001cbe:	f7ff ffab 	bl	8001c18 <PrintToLCD>
		SettingsData.LowVoltage = 300;
 8001cc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <MenuSettingsBatteryType_Enter+0xf8>)
 8001cc8:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 420;
 8001cca:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001cce:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 2)
 8001cd0:	f994 3000 	ldrsb.w	r3, [r4]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d10d      	bne.n	8001cf4 <MenuSettingsBatteryType_Enter+0x6c>
		lcd_set_xy(0,0);
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4608      	mov	r0, r1
 8001cdc:	f7ff ff1c 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("  2.8V   3.7V   ");
 8001ce0:	4829      	ldr	r0, [pc, #164]	; (8001d88 <MenuSettingsBatteryType_Enter+0x100>)
 8001ce2:	f7ff ff99 	bl	8001c18 <PrintToLCD>
		SettingsData.LowVoltage = 280;
 8001ce6:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001cea:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <MenuSettingsBatteryType_Enter+0xf8>)
 8001cec:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 370;
 8001cee:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001cf2:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 3)
 8001cf4:	f994 3000 	ldrsb.w	r3, [r4]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d10c      	bne.n	8001d16 <MenuSettingsBatteryType_Enter+0x8e>
		lcd_set_xy(0,0);
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4608      	mov	r0, r1
 8001d00:	f7ff ff0a 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("  1.6V   2.8V   ");
 8001d04:	4821      	ldr	r0, [pc, #132]	; (8001d8c <MenuSettingsBatteryType_Enter+0x104>)
 8001d06:	f7ff ff87 	bl	8001c18 <PrintToLCD>
		SettingsData.LowVoltage = 160;
 8001d0a:	22a0      	movs	r2, #160	; 0xa0
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <MenuSettingsBatteryType_Enter+0xf8>)
 8001d0e:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 280;
 8001d10:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001d14:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 4)
 8001d16:	f994 3000 	ldrsb.w	r3, [r4]
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d10d      	bne.n	8001d3a <MenuSettingsBatteryType_Enter+0xb2>
		lcd_set_xy(0,0);
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4608      	mov	r0, r1
 8001d22:	f7ff fef9 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("   8V  13.6V    ");
 8001d26:	481a      	ldr	r0, [pc, #104]	; (8001d90 <MenuSettingsBatteryType_Enter+0x108>)
 8001d28:	f7ff ff76 	bl	8001c18 <PrintToLCD>
		SettingsData.LowVoltage = 800;
 8001d2c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <MenuSettingsBatteryType_Enter+0xf8>)
 8001d32:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 1360;
 8001d34:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 8001d38:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 5)
 8001d3a:	f994 3000 	ldrsb.w	r3, [r4]
 8001d3e:	2b05      	cmp	r3, #5
 8001d40:	d10c      	bne.n	8001d5c <MenuSettingsBatteryType_Enter+0xd4>
		lcd_set_xy(0,0);
 8001d42:	2100      	movs	r1, #0
 8001d44:	4608      	mov	r0, r1
 8001d46:	f7ff fee7 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("  1V    20V     ");
 8001d4a:	4812      	ldr	r0, [pc, #72]	; (8001d94 <MenuSettingsBatteryType_Enter+0x10c>)
 8001d4c:	f7ff ff64 	bl	8001c18 <PrintToLCD>
		SettingsData.LowVoltage = 100;
 8001d50:	2264      	movs	r2, #100	; 0x64
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <MenuSettingsBatteryType_Enter+0xf8>)
 8001d54:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 2000;
 8001d56:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001d5a:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 6)
 8001d5c:	f994 3000 	ldrsb.w	r3, [r4]
 8001d60:	2b06      	cmp	r3, #6
		CountShowBT = 0;
 8001d62:	bf04      	itt	eq
 8001d64:	2300      	moveq	r3, #0
 8001d66:	7023      	strbeq	r3, [r4, #0]
	SettingsWriteToFlash_CRC();
 8001d68:	f7fe fe68 	bl	8000a3c <SettingsWriteToFlash_CRC>
}
 8001d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay_ms(600);
 8001d70:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001d74:	f7ff b9ac 	b.w	80010d0 <delay_ms>
 8001d78:	20000793 	.word	0x20000793
 8001d7c:	0800630f 	.word	0x0800630f
 8001d80:	20000154 	.word	0x20000154
 8001d84:	08006320 	.word	0x08006320
 8001d88:	08006331 	.word	0x08006331
 8001d8c:	08006342 	.word	0x08006342
 8001d90:	08006353 	.word	0x08006353
 8001d94:	08006364 	.word	0x08006364

08001d98 <MenuSettingsWriteToFlash_Enter>:

void MenuSettingsWriteToFlash_Enter(Key_Pressed_t key)
{
	SettingsWriteToFlash_CRC();
 8001d98:	f7fe be50 	b.w	8000a3c <SettingsWriteToFlash_CRC>

08001d9c <MenuOption_Enter>:
	}

}

void MenuOption_Enter(Key_Pressed_t key)
{
 8001d9c:	b508      	push	{r3, lr}
	lcd_set_xy(7,1);
 8001d9e:	2101      	movs	r1, #1
 8001da0:	2007      	movs	r0, #7
 8001da2:	f7ff feb9 	bl	8001b18 <lcd_set_xy>
	lcd_send(255,DATA);
 8001da6:	2101      	movs	r1, #1
 8001da8:	20ff      	movs	r0, #255	; 0xff
 8001daa:	f7ff fdf5 	bl	8001998 <lcd_send>
	SettingsWriteToFlash_CRC();
 8001dae:	f7fe fe45 	bl	8000a3c <SettingsWriteToFlash_CRC>
	SelectedOptionValue = SettingsData.Option1;
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <MenuOption_Enter+0x28>)
	delay_ms(200);
 8001db4:	20c8      	movs	r0, #200	; 0xc8
	SelectedOptionValue = SettingsData.Option1;
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <MenuOption_Enter+0x2c>)
 8001dba:	601a      	str	r2, [r3, #0]
}
 8001dbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);
 8001dc0:	f7ff b986 	b.w	80010d0 <delay_ms>
 8001dc4:	20000154 	.word	0x20000154
 8001dc8:	20000a1c 	.word	0x20000a1c

08001dcc <MenuOption_Enter1>:

void MenuOption_Enter1(Key_Pressed_t key)
{
 8001dcc:	b508      	push	{r3, lr}
	lcd_set_xy(7,1);
 8001dce:	2101      	movs	r1, #1
 8001dd0:	2007      	movs	r0, #7
 8001dd2:	f7ff fea1 	bl	8001b18 <lcd_set_xy>
	lcd_send(255,DATA);
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	20ff      	movs	r0, #255	; 0xff
 8001dda:	f7ff fddd 	bl	8001998 <lcd_send>
	SettingsWriteToFlash_CRC();
 8001dde:	f7fe fe2d 	bl	8000a3c <SettingsWriteToFlash_CRC>
	SelectedOptionValue1 = SettingsData.Option2;
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <MenuOption_Enter1+0x28>)
	delay_ms(200);
 8001de4:	20c8      	movs	r0, #200	; 0xc8
	SelectedOptionValue1 = SettingsData.Option2;
 8001de6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <MenuOption_Enter1+0x2c>)
 8001dea:	601a      	str	r2, [r3, #0]
}
 8001dec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);
 8001df0:	f7ff b96e 	b.w	80010d0 <delay_ms>
 8001df4:	20000154 	.word	0x20000154
 8001df8:	20000a14 	.word	0x20000a14

08001dfc <Generic_Write>:
	if (Text) PrintToLCD_xy(Text,0,0);
 8001dfc:	b118      	cbz	r0, 8001e06 <Generic_Write+0xa>
 8001dfe:	2200      	movs	r2, #0
 8001e00:	4611      	mov	r1, r2
 8001e02:	f7ff bf0c 	b.w	8001c1e <PrintToLCD_xy>
}
 8001e06:	4770      	bx	lr

08001e08 <MenuDischarge_Enter>:
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001e08:	f649 23af 	movw	r3, #39599	; 0x9aaf
{
 8001e0c:	b510      	push	{r4, lr}
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001e0e:	4c0e      	ldr	r4, [pc, #56]	; (8001e48 <MenuDischarge_Enter+0x40>)
{
 8001e10:	b090      	sub	sp, #64	; 0x40
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001e12:	6822      	ldr	r2, [r4, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d915      	bls.n	8001e44 <MenuDischarge_Enter+0x3c>
		ClockStringNoSec(DischargeTimeSec,s_clock);
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MenuDischarge_Enter+0x44>)
 8001e1a:	a90b      	add	r1, sp, #44	; 0x2c
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	f7ff fc69 	bl	80016f4 <ClockStringNoSec>
		Merge3Strings(itoaP(BatteryCapacityDischargeCurrent/3600,str),"mAh",s_clock,strout);
 8001e22:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001e26:	6820      	ldr	r0, [r4, #0]
 8001e28:	a901      	add	r1, sp, #4
 8001e2a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e2e:	f7ff faa5 	bl	800137c <itoaP>
 8001e32:	4907      	ldr	r1, [pc, #28]	; (8001e50 <MenuDischarge_Enter+0x48>)
 8001e34:	ab06      	add	r3, sp, #24
 8001e36:	aa0b      	add	r2, sp, #44	; 0x2c
 8001e38:	f7ff fbce 	bl	80015d8 <Merge3Strings>
		WriteInLOGc(strout,DISCHARGE_l);
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	a806      	add	r0, sp, #24
 8001e40:	f7ff f85e 	bl	8000f00 <WriteInLOGc>
}
 8001e44:	b010      	add	sp, #64	; 0x40
 8001e46:	bd10      	pop	{r4, pc}
 8001e48:	20000780 	.word	0x20000780
 8001e4c:	20000798 	.word	0x20000798
 8001e50:	08006261 	.word	0x08006261

08001e54 <MenuCharge_Enter>:
{
 8001e54:	b510      	push	{r4, lr}
	logDebugD("charge=",BatteryCapacityCharge,0);
 8001e56:	4c16      	ldr	r4, [pc, #88]	; (8001eb0 <MenuCharge_Enter+0x5c>)
{
 8001e58:	b090      	sub	sp, #64	; 0x40
	logDebugD("charge=",BatteryCapacityCharge,0);
 8001e5a:	4816      	ldr	r0, [pc, #88]	; (8001eb4 <MenuCharge_Enter+0x60>)
 8001e5c:	f003 fb2e 	bl	80054bc <printToBufferWithoutEndUART1>
 8001e60:	2200      	movs	r2, #0
 8001e62:	6821      	ldr	r1, [r4, #0]
 8001e64:	4814      	ldr	r0, [pc, #80]	; (8001eb8 <MenuCharge_Enter+0x64>)
 8001e66:	f003 fb6d 	bl	8005544 <printToBufferUART1D>
	if (BatteryCapacityCharge/3600>10)
 8001e6a:	f649 23af 	movw	r3, #39599	; 0x9aaf
 8001e6e:	6822      	ldr	r2, [r4, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d91b      	bls.n	8001eac <MenuCharge_Enter+0x58>
		ClockStringNoSec(ChargeTimeSec,s_clock);
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MenuCharge_Enter+0x68>)
 8001e76:	a90b      	add	r1, sp, #44	; 0x2c
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	f7ff fc3b 	bl	80016f4 <ClockStringNoSec>
		Merge3Strings(itoaP(BatteryCapacityCharge/3600,str),"mAh",s_clock,strout);
 8001e7e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001e82:	6820      	ldr	r0, [r4, #0]
 8001e84:	a901      	add	r1, sp, #4
 8001e86:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e8a:	f7ff fa77 	bl	800137c <itoaP>
 8001e8e:	ab06      	add	r3, sp, #24
 8001e90:	aa0b      	add	r2, sp, #44	; 0x2c
 8001e92:	490b      	ldr	r1, [pc, #44]	; (8001ec0 <MenuCharge_Enter+0x6c>)
 8001e94:	f7ff fba0 	bl	80015d8 <Merge3Strings>
		WriteInLOGc(strout,CHARGE_H);
 8001e98:	2101      	movs	r1, #1
 8001e9a:	a806      	add	r0, sp, #24
 8001e9c:	f7ff f830 	bl	8000f00 <WriteInLOGc>
		logDebug(strout);
 8001ea0:	4804      	ldr	r0, [pc, #16]	; (8001eb4 <MenuCharge_Enter+0x60>)
 8001ea2:	f003 fb0b 	bl	80054bc <printToBufferWithoutEndUART1>
 8001ea6:	a806      	add	r0, sp, #24
 8001ea8:	f003 fa9e 	bl	80053e8 <printToBufferUART1>
}
 8001eac:	b010      	add	sp, #64	; 0x40
 8001eae:	bd10      	pop	{r4, pc}
 8001eb0:	2000077c 	.word	0x2000077c
 8001eb4:	08005eb1 	.word	0x08005eb1
 8001eb8:	080061fd 	.word	0x080061fd
 8001ebc:	2000078c 	.word	0x2000078c
 8001ec0:	08006261 	.word	0x08006261

08001ec4 <SelectedOption.part.8>:
void SelectedOption(void)
 8001ec4:	b508      	push	{r3, lr}
		lcd_set_xy(7,1);
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	2007      	movs	r0, #7
 8001eca:	f7ff fe25 	bl	8001b18 <lcd_set_xy>
}
 8001ece:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lcd_send(255,DATA);
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	20ff      	movs	r0, #255	; 0xff
 8001ed6:	f7ff bd5f 	b.w	8001998 <lcd_send>
	...

08001edc <LL_ADC_SetChannelSamplingTime.constprop.34>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_55CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
 8001edc:	b570      	push	{r4, r5, r6, lr}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ee2:	fa91 f1a1 	rbit	r1, r1
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001ee6:	fab1 f381 	clz	r3, r1
 8001eea:	4c10      	ldr	r4, [pc, #64]	; (8001f2c <LL_ADC_SetChannelSamplingTime.constprop.34+0x50>)
 8001eec:	f000 7100 	and.w	r1, r0, #33554432	; 0x2000000
 8001ef0:	40d9      	lsrs	r1, r3
  
  MODIFY_REG(*preg,
 8001ef2:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 8001ef6:	f000 70f8 	and.w	r0, r0, #32505856	; 0x1f00000
 8001efa:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001efe:	fa92 f3a2 	rbit	r3, r2
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	fa92 f2a2 	rbit	r2, r2
 8001f0a:	2607      	movs	r6, #7
 8001f0c:	fab2 f282 	clz	r2, r2
 8001f10:	fa20 f303 	lsr.w	r3, r0, r3
 8001f14:	fa06 f303 	lsl.w	r3, r6, r3
 8001f18:	40d0      	lsrs	r0, r2
 8001f1a:	ea25 0303 	bic.w	r3, r5, r3
 8001f1e:	fa06 f000 	lsl.w	r0, r6, r0
 8001f22:	4318      	orrs	r0, r3
 8001f24:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001f28:	bd70      	pop	{r4, r5, r6, pc}
 8001f2a:	bf00      	nop
 8001f2c:	4001240c 	.word	0x4001240c

08001f30 <LL_ADC_REG_SetSequencerRanks.constprop.35>:
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
 8001f30:	b530      	push	{r4, r5, lr}
 8001f32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f36:	fa93 f3a3 	rbit	r3, r3
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001f3a:	fab3 f383 	clz	r3, r3
  MODIFY_REG(*preg,
 8001f3e:	241f      	movs	r4, #31
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001f40:	f400 7240 	and.w	r2, r0, #768	; 0x300
 8001f44:	4d07      	ldr	r5, [pc, #28]	; (8001f64 <LL_ADC_REG_SetSequencerRanks.constprop.35+0x34>)
 8001f46:	40da      	lsrs	r2, r3
  MODIFY_REG(*preg,
 8001f48:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8001f4c:	f000 001f 	and.w	r0, r0, #31
 8001f50:	4084      	lsls	r4, r0
 8001f52:	f001 011f 	and.w	r1, r1, #31
 8001f56:	ea23 0304 	bic.w	r3, r3, r4
 8001f5a:	4081      	lsls	r1, r0
 8001f5c:	4319      	orrs	r1, r3
 8001f5e:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
}
 8001f62:	bd30      	pop	{r4, r5, pc}
 8001f64:	4001242c 	.word	0x4001242c

08001f68 <NVIC_EncodePriority.constprop.36>:

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001f68:	2000      	movs	r0, #0
 8001f6a:	4770      	bx	lr

08001f6c <MenuTraining_WriteInLOG>:
	s[1] = '\0';
 8001f6c:	2300      	movs	r3, #0
{
 8001f6e:	b510      	push	{r4, lr}
 8001f70:	b096      	sub	sp, #88	; 0x58
 8001f72:	4604      	mov	r4, r0
 8001f74:	4608      	mov	r0, r1
	ClockStringNoSec(Time,s_clock);
 8001f76:	a911      	add	r1, sp, #68	; 0x44
	s[0] = c;
 8001f78:	f88d 2004 	strb.w	r2, [sp, #4]
	s[1] = '\0';
 8001f7c:	f88d 3005 	strb.w	r3, [sp, #5]
	ClockStringNoSec(Time,s_clock);
 8001f80:	f7ff fbb8 	bl	80016f4 <ClockStringNoSec>
	Merge3Strings(itoaP(Capacity/3600,str),"mAh",s_clock,strout);
 8001f84:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8001f88:	a902      	add	r1, sp, #8
 8001f8a:	fbb4 f0f0 	udiv	r0, r4, r0
 8001f8e:	f7ff f9f5 	bl	800137c <itoaP>
 8001f92:	ab07      	add	r3, sp, #28
 8001f94:	aa11      	add	r2, sp, #68	; 0x44
 8001f96:	4907      	ldr	r1, [pc, #28]	; (8001fb4 <MenuTraining_WriteInLOG+0x48>)
 8001f98:	f7ff fb1e 	bl	80015d8 <Merge3Strings>
	Merge2Strings(s,strout,strout1);
 8001f9c:	aa0c      	add	r2, sp, #48	; 0x30
 8001f9e:	a907      	add	r1, sp, #28
 8001fa0:	a801      	add	r0, sp, #4
 8001fa2:	f7ff fb04 	bl	80015ae <Merge2Strings>
	WriteInLOGc(strout1,TRAINING_);
 8001fa6:	2104      	movs	r1, #4
 8001fa8:	a80c      	add	r0, sp, #48	; 0x30
 8001faa:	f7fe ffa9 	bl	8000f00 <WriteInLOGc>
}
 8001fae:	b016      	add	sp, #88	; 0x58
 8001fb0:	bd10      	pop	{r4, pc}
 8001fb2:	bf00      	nop
 8001fb4:	08006261 	.word	0x08006261

08001fb8 <MenuLog>:
	if (key == KEY_NEXT)
 8001fb8:	2802      	cmp	r0, #2
{
 8001fba:	b538      	push	{r3, r4, r5, lr}
 8001fbc:	4c1f      	ldr	r4, [pc, #124]	; (800203c <MenuLog+0x84>)
 8001fbe:	4d20      	ldr	r5, [pc, #128]	; (8002040 <MenuLog+0x88>)
	if (key == KEY_NEXT)
 8001fc0:	d12a      	bne.n	8002018 <MenuLog+0x60>
		i_LogItems++;
 8001fc2:	8823      	ldrh	r3, [r4, #0]
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8001fc4:	682a      	ldr	r2, [r5, #0]
		i_LogItems++;
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	b21b      	sxth	r3, r3
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8001fca:	4293      	cmp	r3, r2
		i_LogItems++;
 8001fcc:	8023      	strh	r3, [r4, #0]
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8001fce:	d301      	bcc.n	8001fd4 <MenuLog+0x1c>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	8023      	strh	r3, [r4, #0]
	lcd_set_xy(0,0);
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4608      	mov	r0, r1
 8001fd8:	f7ff fd9e 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(LoggingData.Records[LoggingData.RecordsQuantity - i_LogItems-1]);
 8001fdc:	6828      	ldr	r0, [r5, #0]
 8001fde:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001fe2:	3801      	subs	r0, #1
 8001fe4:	1ac0      	subs	r0, r0, r3
 8001fe6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8001fea:	3004      	adds	r0, #4
 8001fec:	4428      	add	r0, r5
 8001fee:	f7ff fe13 	bl	8001c18 <PrintToLCD>
	logDebugD("i_LogItems: ",i_LogItems,0);
 8001ff2:	4814      	ldr	r0, [pc, #80]	; (8002044 <MenuLog+0x8c>)
 8001ff4:	f003 fa62 	bl	80054bc <printToBufferWithoutEndUART1>
 8001ff8:	f9b4 1000 	ldrsh.w	r1, [r4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4812      	ldr	r0, [pc, #72]	; (8002048 <MenuLog+0x90>)
 8002000:	f003 faa0 	bl	8005544 <printToBufferUART1D>
	logDebugD("MRecordsQuantity: ",LoggingData.RecordsQuantity,0);
 8002004:	480f      	ldr	r0, [pc, #60]	; (8002044 <MenuLog+0x8c>)
 8002006:	f003 fa59 	bl	80054bc <printToBufferWithoutEndUART1>
 800200a:	6829      	ldr	r1, [r5, #0]
 800200c:	2200      	movs	r2, #0
}
 800200e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	logDebugD("MRecordsQuantity: ",LoggingData.RecordsQuantity,0);
 8002012:	480e      	ldr	r0, [pc, #56]	; (800204c <MenuLog+0x94>)
 8002014:	f003 ba96 	b.w	8005544 <printToBufferUART1D>
	if (key == KEY_BACK)
 8002018:	2801      	cmp	r0, #1
 800201a:	d1db      	bne.n	8001fd4 <MenuLog+0x1c>
		i_LogItems--;
 800201c:	8823      	ldrh	r3, [r4, #0]
 800201e:	3b01      	subs	r3, #1
 8002020:	b21b      	sxth	r3, r3
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 8002022:	2b00      	cmp	r3, #0
		i_LogItems--;
 8002024:	8023      	strh	r3, [r4, #0]
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 8002026:	bfbe      	ittt	lt
 8002028:	682b      	ldrlt	r3, [r5, #0]
 800202a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800202e:	8023      	strhlt	r3, [r4, #0]
		if (i_LogItems<0) i_LogItems=0;
 8002030:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	dacd      	bge.n	8001fd4 <MenuLog+0x1c>
 8002038:	e7ca      	b.n	8001fd0 <MenuLog+0x18>
 800203a:	bf00      	nop
 800203c:	200007e2 	.word	0x200007e2
 8002040:	20000878 	.word	0x20000878
 8002044:	08005eb1 	.word	0x08005eb1
 8002048:	08006265 	.word	0x08006265
 800204c:	08006272 	.word	0x08006272

08002050 <MenuCalibration_CURRENT_Out_to_0>:
	lcd_set_xy(0,0);
 8002050:	2100      	movs	r1, #0
{
 8002052:	b510      	push	{r4, lr}
 8002054:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8002056:	4608      	mov	r0, r1
 8002058:	f7ff fd5e 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa(Current));
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <MenuCalibration_CURRENT_Out_to_0+0x38>)
 800205e:	8818      	ldrh	r0, [r3, #0]
 8002060:	b200      	sxth	r0, r0
 8002062:	f7ff f951 	bl	8001308 <itoa>
 8002066:	f7ff fdd7 	bl	8001c18 <PrintToLCD>
	PrintToLCD("mA >> set 0   ");
 800206a:	4808      	ldr	r0, [pc, #32]	; (800208c <MenuCalibration_CURRENT_Out_to_0+0x3c>)
 800206c:	f7ff fdd4 	bl	8001c18 <PrintToLCD>
	if (key == KEY_NEXT)
 8002070:	2c02      	cmp	r4, #2
 8002072:	d108      	bne.n	8002086 <MenuCalibration_CURRENT_Out_to_0+0x36>
}
 8002074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CalibrationData.Calibration0ValueForCurrent = Current_Out;
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <MenuCalibration_CURRENT_Out_to_0+0x40>)
 800207a:	4a06      	ldr	r2, [pc, #24]	; (8002094 <MenuCalibration_CURRENT_Out_to_0+0x44>)
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	b21b      	sxth	r3, r3
 8002080:	6093      	str	r3, [r2, #8]
		CalibrationWriteToFlash_CRC();
 8002082:	f7fe bca5 	b.w	80009d0 <CalibrationWriteToFlash_CRC>
}
 8002086:	bd10      	pop	{r4, pc}
 8002088:	2000085a 	.word	0x2000085a
 800208c:	080061b5 	.word	0x080061b5
 8002090:	200002b2 	.word	0x200002b2
 8002094:	20000004 	.word	0x20000004

08002098 <MenuCalibration_CURRENT_Load_to_0>:
	lcd_set_xy(0,0);
 8002098:	2100      	movs	r1, #0
{
 800209a:	b510      	push	{r4, lr}
 800209c:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 800209e:	4608      	mov	r0, r1
 80020a0:	f7ff fd3a 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(	itoa(Current));
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <MenuCalibration_CURRENT_Load_to_0+0x38>)
 80020a6:	8818      	ldrh	r0, [r3, #0]
 80020a8:	b200      	sxth	r0, r0
 80020aa:	f7ff f92d 	bl	8001308 <itoa>
 80020ae:	f7ff fdb3 	bl	8001c18 <PrintToLCD>
	PrintToLCD("mA >> set 0   ");
 80020b2:	4808      	ldr	r0, [pc, #32]	; (80020d4 <MenuCalibration_CURRENT_Load_to_0+0x3c>)
 80020b4:	f7ff fdb0 	bl	8001c18 <PrintToLCD>
	if (key == KEY_NEXT)
 80020b8:	2c02      	cmp	r4, #2
 80020ba:	d108      	bne.n	80020ce <MenuCalibration_CURRENT_Load_to_0+0x36>
}
 80020bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CalibrationData.Calibration0ValueForCurrent1 = Current_load;
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <MenuCalibration_CURRENT_Load_to_0+0x40>)
 80020c2:	4a06      	ldr	r2, [pc, #24]	; (80020dc <MenuCalibration_CURRENT_Load_to_0+0x44>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	6113      	str	r3, [r2, #16]
		CalibrationWriteToFlash_CRC();
 80020ca:	f7fe bc81 	b.w	80009d0 <CalibrationWriteToFlash_CRC>
}
 80020ce:	bd10      	pop	{r4, pc}
 80020d0:	2000085a 	.word	0x2000085a
 80020d4:	080061b5 	.word	0x080061b5
 80020d8:	200002b4 	.word	0x200002b4
 80020dc:	20000004 	.word	0x20000004

080020e0 <MenuCalibration_BackToFactory>:
	lcd_set_xy(0,0);
 80020e0:	2100      	movs	r1, #0
{
 80020e2:	b510      	push	{r4, lr}
 80020e4:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 80020e6:	4608      	mov	r0, r1
 80020e8:	f7ff fd16 	bl	8001b18 <lcd_set_xy>
	PrintToLCD("Factory-press >>");
 80020ec:	481f      	ldr	r0, [pc, #124]	; (800216c <MenuCalibration_BackToFactory+0x8c>)
 80020ee:	f7ff fd93 	bl	8001c18 <PrintToLCD>
	if (key == KEY_NEXT)
 80020f2:	2c02      	cmp	r4, #2
 80020f4:	d130      	bne.n	8002158 <MenuCalibration_BackToFactory+0x78>
		FactoryWriteToFlash_CRC();
 80020f6:	f7fe fd43 	bl	8000b80 <FactoryWriteToFlash_CRC>
		EEpromReadStatus = ReadFromFlash();
 80020fa:	f7fe fc25 	bl	8000948 <ReadFromFlash>
		lcd_set_xy(0,0);
 80020fe:	2100      	movs	r1, #0
		EEpromReadStatus = ReadFromFlash();
 8002100:	4604      	mov	r4, r0
		lcd_set_xy(0,0);
 8002102:	4608      	mov	r0, r1
 8002104:	f7ff fd08 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("In Proccess ....");
 8002108:	4819      	ldr	r0, [pc, #100]	; (8002170 <MenuCalibration_BackToFactory+0x90>)
 800210a:	f7ff fd85 	bl	8001c18 <PrintToLCD>
		delay_ms(2000);
 800210e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002112:	f7fe ffdd 	bl	80010d0 <delay_ms>
		lcd_set_xy(0,0);
 8002116:	2100      	movs	r1, #0
 8002118:	4608      	mov	r0, r1
 800211a:	f7ff fcfd 	bl	8001b18 <lcd_set_xy>
		if (EEpromReadStatus == 1)
 800211e:	2c01      	cmp	r4, #1
 8002120:	d11b      	bne.n	800215a <MenuCalibration_BackToFactory+0x7a>
			PrintToLCD("Factory are OK  ");
 8002122:	4814      	ldr	r0, [pc, #80]	; (8002174 <MenuCalibration_BackToFactory+0x94>)
 8002124:	f7ff fd78 	bl	8001c18 <PrintToLCD>
			WriteInLOG("Factory are OK");
 8002128:	4813      	ldr	r0, [pc, #76]	; (8002178 <MenuCalibration_BackToFactory+0x98>)
 800212a:	f7fe fe37 	bl	8000d9c <WriteInLOG>
			delay_ms(2000);
 800212e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002132:	f7fe ffcd 	bl	80010d0 <delay_ms>
		    BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <MenuCalibration_BackToFactory+0x9c>)
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MenuCalibration_BackToFactory+0xa0>)
 800213c:	601a      	str	r2, [r3, #0]
		    ChargeDurationSec = SettingsData.ChargeTime*3600;
 800213e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <MenuCalibration_BackToFactory+0xa4>)
 8002144:	6919      	ldr	r1, [r3, #16]
 8002146:	434a      	muls	r2, r1
 8002148:	490f      	ldr	r1, [pc, #60]	; (8002188 <MenuCalibration_BackToFactory+0xa8>)
 800214a:	600a      	str	r2, [r1, #0]
		    SelectedOptionValue = SettingsData.Option1;
 800214c:	6899      	ldr	r1, [r3, #8]
 800214e:	4a0f      	ldr	r2, [pc, #60]	; (800218c <MenuCalibration_BackToFactory+0xac>)
 8002150:	6011      	str	r1, [r2, #0]
		    SelectedOptionValue1 = SettingsData.Option2;
 8002152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <MenuCalibration_BackToFactory+0xb0>)
 8002156:	601a      	str	r2, [r3, #0]
}
 8002158:	bd10      	pop	{r4, pc}
			PrintToLCD("EEprom read FAIL");
 800215a:	480e      	ldr	r0, [pc, #56]	; (8002194 <MenuCalibration_BackToFactory+0xb4>)
 800215c:	f7ff fd5c 	bl	8001c18 <PrintToLCD>
}
 8002160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			delay_ms(4000);
 8002164:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002168:	f7fe bfb2 	b.w	80010d0 <delay_ms>
 800216c:	0800615d 	.word	0x0800615d
 8002170:	0800616e 	.word	0x0800616e
 8002174:	0800617f 	.word	0x0800617f
 8002178:	08006190 	.word	0x08006190
 800217c:	200000f4 	.word	0x200000f4
 8002180:	20000784 	.word	0x20000784
 8002184:	20000154 	.word	0x20000154
 8002188:	20000a18 	.word	0x20000a18
 800218c:	20000a1c 	.word	0x20000a1c
 8002190:	20000a14 	.word	0x20000a14
 8002194:	0800619f 	.word	0x0800619f

08002198 <MenuSettingsChargeTime>:
	if (key == KEY_NEXT) SettingsData.ChargeTime++;
 8002198:	2802      	cmp	r0, #2
{
 800219a:	b510      	push	{r4, lr}
 800219c:	4c0e      	ldr	r4, [pc, #56]	; (80021d8 <MenuSettingsChargeTime+0x40>)
	if (key == KEY_NEXT) SettingsData.ChargeTime++;
 800219e:	d115      	bne.n	80021cc <MenuSettingsChargeTime+0x34>
 80021a0:	6923      	ldr	r3, [r4, #16]
 80021a2:	3301      	adds	r3, #1
	if (key == KEY_BACK) SettingsData.ChargeTime--;
 80021a4:	6123      	str	r3, [r4, #16]
	lcd_set_xy(0,0);
 80021a6:	2100      	movs	r1, #0
 80021a8:	4608      	mov	r0, r1
 80021aa:	f7ff fcb5 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.ChargeTime));
 80021ae:	6920      	ldr	r0, [r4, #16]
 80021b0:	f7ff f8aa 	bl	8001308 <itoa>
 80021b4:	f7ff fd30 	bl	8001c18 <PrintToLCD>
	PrintToLCD("h   ");
 80021b8:	4808      	ldr	r0, [pc, #32]	; (80021dc <MenuSettingsChargeTime+0x44>)
 80021ba:	f7ff fd2d 	bl	8001c18 <PrintToLCD>
    ChargeDurationSec = SettingsData.ChargeTime*3600;
 80021be:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80021c2:	6922      	ldr	r2, [r4, #16]
 80021c4:	4353      	muls	r3, r2
 80021c6:	4a06      	ldr	r2, [pc, #24]	; (80021e0 <MenuSettingsChargeTime+0x48>)
 80021c8:	6013      	str	r3, [r2, #0]
}
 80021ca:	bd10      	pop	{r4, pc}
	if (key == KEY_BACK) SettingsData.ChargeTime--;
 80021cc:	2801      	cmp	r0, #1
 80021ce:	d1ea      	bne.n	80021a6 <MenuSettingsChargeTime+0xe>
 80021d0:	6923      	ldr	r3, [r4, #16]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	e7e6      	b.n	80021a4 <MenuSettingsChargeTime+0xc>
 80021d6:	bf00      	nop
 80021d8:	20000154 	.word	0x20000154
 80021dc:	0800637b 	.word	0x0800637b
 80021e0:	20000a18 	.word	0x20000a18

080021e4 <MenuSettingsBatteryType>:
{
 80021e4:	b510      	push	{r4, lr}
 80021e6:	4c30      	ldr	r4, [pc, #192]	; (80022a8 <MenuSettingsBatteryType+0xc4>)
	if (key == KEY_NEXT)
 80021e8:	2802      	cmp	r0, #2
 80021ea:	f994 3000 	ldrsb.w	r3, [r4]
 80021ee:	d152      	bne.n	8002296 <MenuSettingsBatteryType+0xb2>
		CountShowBT++;
 80021f0:	3301      	adds	r3, #1
 80021f2:	b25b      	sxtb	r3, r3
		if (CountShowBT==MAXITEM_BT) CountShowBT=0;
 80021f4:	2b07      	cmp	r3, #7
 80021f6:	bf08      	it	eq
 80021f8:	2300      	moveq	r3, #0
		if (CountShowBT<0) CountShowBT=MAXITEM_BT-1;
 80021fa:	7023      	strb	r3, [r4, #0]
	if(CountShowBT == 0)
 80021fc:	f994 1000 	ldrsb.w	r1, [r4]
 8002200:	b929      	cbnz	r1, 800220e <MenuSettingsBatteryType+0x2a>
		lcd_set_xy(0,0);
 8002202:	4608      	mov	r0, r1
 8002204:	f7ff fc88 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("12V Pb Battery  ");
 8002208:	4828      	ldr	r0, [pc, #160]	; (80022ac <MenuSettingsBatteryType+0xc8>)
 800220a:	f7ff fd05 	bl	8001c18 <PrintToLCD>
	if(CountShowBT == 1)
 800220e:	f994 3000 	ldrsb.w	r3, [r4]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d106      	bne.n	8002224 <MenuSettingsBatteryType+0x40>
		lcd_set_xy(0,0);
 8002216:	2100      	movs	r1, #0
 8002218:	4608      	mov	r0, r1
 800221a:	f7ff fc7d 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("Li ion  Battery  ");
 800221e:	4824      	ldr	r0, [pc, #144]	; (80022b0 <MenuSettingsBatteryType+0xcc>)
 8002220:	f7ff fcfa 	bl	8001c18 <PrintToLCD>
	if(CountShowBT == 2)
 8002224:	f994 3000 	ldrsb.w	r3, [r4]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d106      	bne.n	800223a <MenuSettingsBatteryType+0x56>
		lcd_set_xy(0,0);
 800222c:	2100      	movs	r1, #0
 800222e:	4608      	mov	r0, r1
 8002230:	f7ff fc72 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("LiFePo4 Battery ");
 8002234:	481f      	ldr	r0, [pc, #124]	; (80022b4 <MenuSettingsBatteryType+0xd0>)
 8002236:	f7ff fcef 	bl	8001c18 <PrintToLCD>
	if(CountShowBT == 3)
 800223a:	f994 3000 	ldrsb.w	r3, [r4]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d106      	bne.n	8002250 <MenuSettingsBatteryType+0x6c>
		lcd_set_xy(0,0);
 8002242:	2100      	movs	r1, #0
 8002244:	4608      	mov	r0, r1
 8002246:	f7ff fc67 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("LiTo Battery   ");
 800224a:	481b      	ldr	r0, [pc, #108]	; (80022b8 <MenuSettingsBatteryType+0xd4>)
 800224c:	f7ff fce4 	bl	8001c18 <PrintToLCD>
	if(CountShowBT == 4)
 8002250:	f994 3000 	ldrsb.w	r3, [r4]
 8002254:	2b04      	cmp	r3, #4
 8002256:	d106      	bne.n	8002266 <MenuSettingsBatteryType+0x82>
		lcd_set_xy(0,0);
 8002258:	2100      	movs	r1, #0
 800225a:	4608      	mov	r0, r1
 800225c:	f7ff fc5c 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("NIMh 9.6V Bat.  ");
 8002260:	4816      	ldr	r0, [pc, #88]	; (80022bc <MenuSettingsBatteryType+0xd8>)
 8002262:	f7ff fcd9 	bl	8001c18 <PrintToLCD>
	if(CountShowBT == 5)
 8002266:	f994 3000 	ldrsb.w	r3, [r4]
 800226a:	2b05      	cmp	r3, #5
 800226c:	d106      	bne.n	800227c <MenuSettingsBatteryType+0x98>
		lcd_set_xy(0,0);
 800226e:	2100      	movs	r1, #0
 8002270:	4608      	mov	r0, r1
 8002272:	f7ff fc51 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("Min 1V  MAX 20V");
 8002276:	4812      	ldr	r0, [pc, #72]	; (80022c0 <MenuSettingsBatteryType+0xdc>)
 8002278:	f7ff fcce 	bl	8001c18 <PrintToLCD>
	if(CountShowBT == 6)
 800227c:	f994 3000 	ldrsb.w	r3, [r4]
 8002280:	2b06      	cmp	r3, #6
 8002282:	d110      	bne.n	80022a6 <MenuSettingsBatteryType+0xc2>
		lcd_set_xy(0,0);
 8002284:	2100      	movs	r1, #0
 8002286:	4608      	mov	r0, r1
 8002288:	f7ff fc46 	bl	8001b18 <lcd_set_xy>
}
 800228c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PrintToLCD("   OK to Exit  ");
 8002290:	480c      	ldr	r0, [pc, #48]	; (80022c4 <MenuSettingsBatteryType+0xe0>)
 8002292:	f7ff bcc1 	b.w	8001c18 <PrintToLCD>
	if (key == KEY_BACK)
 8002296:	2801      	cmp	r0, #1
 8002298:	d1b0      	bne.n	80021fc <MenuSettingsBatteryType+0x18>
		CountShowBT--;
 800229a:	3b01      	subs	r3, #1
 800229c:	b25b      	sxtb	r3, r3
		if (CountShowBT<0) CountShowBT=MAXITEM_BT-1;
 800229e:	2b00      	cmp	r3, #0
 80022a0:	bfb8      	it	lt
 80022a2:	2306      	movlt	r3, #6
 80022a4:	e7a9      	b.n	80021fa <MenuSettingsBatteryType+0x16>
}
 80022a6:	bd10      	pop	{r4, pc}
 80022a8:	20000793 	.word	0x20000793
 80022ac:	0800629a 	.word	0x0800629a
 80022b0:	080062ab 	.word	0x080062ab
 80022b4:	080062bd 	.word	0x080062bd
 80022b8:	080062ce 	.word	0x080062ce
 80022bc:	080062de 	.word	0x080062de
 80022c0:	080062ef 	.word	0x080062ef
 80022c4:	080062ff 	.word	0x080062ff

080022c8 <MenuSettingsLowVolt>:
	if (key == KEY_NEXT) SettingsData.LowVoltage = SettingsData.LowVoltage + 10;
 80022c8:	2802      	cmp	r0, #2
{
 80022ca:	b510      	push	{r4, lr}
 80022cc:	4c0d      	ldr	r4, [pc, #52]	; (8002304 <MenuSettingsLowVolt+0x3c>)
	if (key == KEY_NEXT) SettingsData.LowVoltage = SettingsData.LowVoltage + 10;
 80022ce:	d114      	bne.n	80022fa <MenuSettingsLowVolt+0x32>
 80022d0:	69a3      	ldr	r3, [r4, #24]
 80022d2:	330a      	adds	r3, #10
	if (key == KEY_BACK) SettingsData.LowVoltage = SettingsData.LowVoltage - 10;
 80022d4:	61a3      	str	r3, [r4, #24]
	lcd_set_xy(0,0);
 80022d6:	2100      	movs	r1, #0
 80022d8:	4608      	mov	r0, r1
 80022da:	f7ff fc1d 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 80022de:	230a      	movs	r3, #10
 80022e0:	69a0      	ldr	r0, [r4, #24]
 80022e2:	2101      	movs	r1, #1
 80022e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80022e8:	f7ff f882 	bl	80013f0 <itoa_koma>
 80022ec:	f7ff fc94 	bl	8001c18 <PrintToLCD>
}
 80022f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V   ");
 80022f4:	4804      	ldr	r0, [pc, #16]	; (8002308 <MenuSettingsLowVolt+0x40>)
 80022f6:	f7ff bc8f 	b.w	8001c18 <PrintToLCD>
	if (key == KEY_BACK) SettingsData.LowVoltage = SettingsData.LowVoltage - 10;
 80022fa:	2801      	cmp	r0, #1
 80022fc:	d1eb      	bne.n	80022d6 <MenuSettingsLowVolt+0xe>
 80022fe:	69a3      	ldr	r3, [r4, #24]
 8002300:	3b0a      	subs	r3, #10
 8002302:	e7e7      	b.n	80022d4 <MenuSettingsLowVolt+0xc>
 8002304:	20000154 	.word	0x20000154
 8002308:	0800632c 	.word	0x0800632c

0800230c <MenuSettingsMaxVolt>:
	if (key == KEY_NEXT) SettingsData.MaxVoltage = SettingsData.MaxVoltage + 10;
 800230c:	2802      	cmp	r0, #2
{
 800230e:	b510      	push	{r4, lr}
 8002310:	4c0d      	ldr	r4, [pc, #52]	; (8002348 <MenuSettingsMaxVolt+0x3c>)
	if (key == KEY_NEXT) SettingsData.MaxVoltage = SettingsData.MaxVoltage + 10;
 8002312:	d114      	bne.n	800233e <MenuSettingsMaxVolt+0x32>
 8002314:	6a23      	ldr	r3, [r4, #32]
 8002316:	330a      	adds	r3, #10
	if (key == KEY_BACK) SettingsData.MaxVoltage = SettingsData.MaxVoltage - 10;
 8002318:	6223      	str	r3, [r4, #32]
	lcd_set_xy(0,0);
 800231a:	2100      	movs	r1, #0
 800231c:	4608      	mov	r0, r1
 800231e:	f7ff fbfb 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002322:	230a      	movs	r3, #10
 8002324:	6a20      	ldr	r0, [r4, #32]
 8002326:	2101      	movs	r1, #1
 8002328:	fbb0 f0f3 	udiv	r0, r0, r3
 800232c:	f7ff f860 	bl	80013f0 <itoa_koma>
 8002330:	f7ff fc72 	bl	8001c18 <PrintToLCD>
}
 8002334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V   ");
 8002338:	4804      	ldr	r0, [pc, #16]	; (800234c <MenuSettingsMaxVolt+0x40>)
 800233a:	f7ff bc6d 	b.w	8001c18 <PrintToLCD>
	if (key == KEY_BACK) SettingsData.MaxVoltage = SettingsData.MaxVoltage - 10;
 800233e:	2801      	cmp	r0, #1
 8002340:	d1eb      	bne.n	800231a <MenuSettingsMaxVolt+0xe>
 8002342:	6a23      	ldr	r3, [r4, #32]
 8002344:	3b0a      	subs	r3, #10
 8002346:	e7e7      	b.n	8002318 <MenuSettingsMaxVolt+0xc>
 8002348:	20000154 	.word	0x20000154
 800234c:	0800632c 	.word	0x0800632c

08002350 <MenuSettingsSwngChrgTime>:
	if (key == KEY_NEXT)  SettingsData.Swing_Chrg_time++;
 8002350:	2802      	cmp	r0, #2
{
 8002352:	b510      	push	{r4, lr}
 8002354:	4c0b      	ldr	r4, [pc, #44]	; (8002384 <MenuSettingsSwngChrgTime+0x34>)
	if (key == KEY_NEXT)  SettingsData.Swing_Chrg_time++;
 8002356:	d110      	bne.n	800237a <MenuSettingsSwngChrgTime+0x2a>
 8002358:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800235a:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.Swing_Chrg_time--;
 800235c:	62a3      	str	r3, [r4, #40]	; 0x28
	lcd_set_xy(0,0);
 800235e:	2100      	movs	r1, #0
 8002360:	4608      	mov	r0, r1
 8002362:	f7ff fbd9 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.Swing_Chrg_time));
 8002366:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002368:	f7fe ffce 	bl	8001308 <itoa>
 800236c:	f7ff fc54 	bl	8001c18 <PrintToLCD>
}
 8002370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD(" sec.   ");
 8002374:	4804      	ldr	r0, [pc, #16]	; (8002388 <MenuSettingsSwngChrgTime+0x38>)
 8002376:	f7ff bc4f 	b.w	8001c18 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.Swing_Chrg_time--;
 800237a:	2801      	cmp	r0, #1
 800237c:	d1ef      	bne.n	800235e <MenuSettingsSwngChrgTime+0xe>
 800237e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002380:	3b01      	subs	r3, #1
 8002382:	e7eb      	b.n	800235c <MenuSettingsSwngChrgTime+0xc>
 8002384:	20000154 	.word	0x20000154
 8002388:	0800642a 	.word	0x0800642a

0800238c <MenuSettingsSwngDChrgTime>:
	if (key == KEY_NEXT)  SettingsData.Swing_DChrg_time++;
 800238c:	2802      	cmp	r0, #2
{
 800238e:	b510      	push	{r4, lr}
 8002390:	4c0b      	ldr	r4, [pc, #44]	; (80023c0 <MenuSettingsSwngDChrgTime+0x34>)
	if (key == KEY_NEXT)  SettingsData.Swing_DChrg_time++;
 8002392:	d110      	bne.n	80023b6 <MenuSettingsSwngDChrgTime+0x2a>
 8002394:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002396:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.Swing_DChrg_time--;
 8002398:	6323      	str	r3, [r4, #48]	; 0x30
	lcd_set_xy(0,0);
 800239a:	2100      	movs	r1, #0
 800239c:	4608      	mov	r0, r1
 800239e:	f7ff fbbb 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.Swing_DChrg_time));
 80023a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80023a4:	f7fe ffb0 	bl	8001308 <itoa>
 80023a8:	f7ff fc36 	bl	8001c18 <PrintToLCD>
}
 80023ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD(" sec.   ");
 80023b0:	4804      	ldr	r0, [pc, #16]	; (80023c4 <MenuSettingsSwngDChrgTime+0x38>)
 80023b2:	f7ff bc31 	b.w	8001c18 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.Swing_DChrg_time--;
 80023b6:	2801      	cmp	r0, #1
 80023b8:	d1ef      	bne.n	800239a <MenuSettingsSwngDChrgTime+0xe>
 80023ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023bc:	3b01      	subs	r3, #1
 80023be:	e7eb      	b.n	8002398 <MenuSettingsSwngDChrgTime+0xc>
 80023c0:	20000154 	.word	0x20000154
 80023c4:	0800642a 	.word	0x0800642a

080023c8 <MenuSettingsChargeAddapt>:
	if (key == KEY_NEXT)  SettingsData.ChargeAdapt++;
 80023c8:	2802      	cmp	r0, #2
{
 80023ca:	b538      	push	{r3, r4, r5, lr}
 80023cc:	4c1a      	ldr	r4, [pc, #104]	; (8002438 <MenuSettingsChargeAddapt+0x70>)
	if (key == KEY_NEXT)  SettingsData.ChargeAdapt++;
 80023ce:	d12d      	bne.n	800242c <MenuSettingsChargeAddapt+0x64>
 80023d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023d2:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.ChargeAdapt--;
 80023d4:	63a3      	str	r3, [r4, #56]	; 0x38
	lcd_set_xy(0,0);
 80023d6:	2100      	movs	r1, #0
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80023d8:	250a      	movs	r5, #10
	lcd_set_xy(0,0);
 80023da:	4608      	mov	r0, r1
 80023dc:	f7ff fb9c 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.ChargeAdapt));
 80023e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80023e2:	f7fe ff91 	bl	8001308 <itoa>
 80023e6:	f7ff fc17 	bl	8001c18 <PrintToLCD>
	PrintToLCD("% ");
 80023ea:	4814      	ldr	r0, [pc, #80]	; (800243c <MenuSettingsChargeAddapt+0x74>)
 80023ec:	f7ff fc14 	bl	8001c18 <PrintToLCD>
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80023f0:	6a20      	ldr	r0, [r4, #32]
 80023f2:	2101      	movs	r1, #1
 80023f4:	fbb0 f0f5 	udiv	r0, r0, r5
 80023f8:	f7fe fffa 	bl	80013f0 <itoa_koma>
 80023fc:	f7ff fc0c 	bl	8001c18 <PrintToLCD>
	PrintToLCD("V ");
 8002400:	480f      	ldr	r0, [pc, #60]	; (8002440 <MenuSettingsChargeAddapt+0x78>)
 8002402:	f7ff fc09 	bl	8001c18 <PrintToLCD>
	PrintToLCD(itoa_koma((SettingsData.MaxVoltage-(SettingsData.MaxVoltage * SettingsData.ChargeAdapt/100))/10,1));
 8002406:	2264      	movs	r2, #100	; 0x64
 8002408:	6a23      	ldr	r3, [r4, #32]
 800240a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800240c:	2101      	movs	r1, #1
 800240e:	4358      	muls	r0, r3
 8002410:	fbb0 f0f2 	udiv	r0, r0, r2
 8002414:	1a18      	subs	r0, r3, r0
 8002416:	fbb0 f0f5 	udiv	r0, r0, r5
 800241a:	f7fe ffe9 	bl	80013f0 <itoa_koma>
 800241e:	f7ff fbfb 	bl	8001c18 <PrintToLCD>
}
 8002422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PrintToLCD("V   ");
 8002426:	4807      	ldr	r0, [pc, #28]	; (8002444 <MenuSettingsChargeAddapt+0x7c>)
 8002428:	f7ff bbf6 	b.w	8001c18 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.ChargeAdapt--;
 800242c:	2801      	cmp	r0, #1
 800242e:	d1d2      	bne.n	80023d6 <MenuSettingsChargeAddapt+0xe>
 8002430:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002432:	3b01      	subs	r3, #1
 8002434:	e7ce      	b.n	80023d4 <MenuSettingsChargeAddapt+0xc>
 8002436:	bf00      	nop
 8002438:	20000154 	.word	0x20000154
 800243c:	08006375 	.word	0x08006375
 8002440:	08006378 	.word	0x08006378
 8002444:	0800632c 	.word	0x0800632c

08002448 <SelectedOption>:
	if (SelectedOptionValue == SettingsData.Option1)
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <SelectedOption+0x14>)
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <SelectedOption+0x18>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d101      	bne.n	8002458 <SelectedOption+0x10>
 8002454:	f7ff bd36 	b.w	8001ec4 <SelectedOption.part.8>
}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000154 	.word	0x20000154
 8002460:	20000a1c 	.word	0x20000a1c

08002464 <SelectedOption1>:
	if (SelectedOptionValue1 == SettingsData.Option2)
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <SelectedOption1+0x14>)
 8002466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <SelectedOption1+0x18>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d101      	bne.n	8002474 <SelectedOption1+0x10>
 8002470:	f7ff bd28 	b.w	8001ec4 <SelectedOption.part.8>
}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000154 	.word	0x20000154
 800247c:	20000a14 	.word	0x20000a14

08002480 <MenuSettingsSaveMenuPosWhenOFF>:
	lcd_set_xy(0,0);
 8002480:	2100      	movs	r1, #0
{
 8002482:	b510      	push	{r4, lr}
 8002484:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8002486:	4608      	mov	r0, r1
 8002488:	f7ff fb46 	bl	8001b18 <lcd_set_xy>
	if (key == KEY_NEXT)
 800248c:	2c02      	cmp	r4, #2
 800248e:	4b17      	ldr	r3, [pc, #92]	; (80024ec <MenuSettingsSaveMenuPosWhenOFF+0x6c>)
 8002490:	d10f      	bne.n	80024b2 <MenuSettingsSaveMenuPosWhenOFF+0x32>
		SettingsData.Option1++;
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	3201      	adds	r2, #1
		if (SettingsData.Option1==QUANTITY_OPTIONS+1) SettingsData.Option1=1;
 8002496:	2a08      	cmp	r2, #8
 8002498:	bf08      	it	eq
 800249a:	2201      	moveq	r2, #1
		if (SettingsData.Option1==0) SettingsData.Option1 = QUANTITY_OPTIONS;
 800249c:	609a      	str	r2, [r3, #8]
	switch (SettingsData.Option1)
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	3a01      	subs	r2, #1
 80024a2:	2a06      	cmp	r2, #6
 80024a4:	d81f      	bhi.n	80024e6 <MenuSettingsSaveMenuPosWhenOFF+0x66>
 80024a6:	e8df f002 	tbb	[pc, r2]
 80024aa:	120b      	.short	0x120b
 80024ac:	1a181614 	.word	0x1a181614
 80024b0:	1c          	.byte	0x1c
 80024b1:	00          	.byte	0x00
	if (key == KEY_BACK)
 80024b2:	2c01      	cmp	r4, #1
 80024b4:	d1f3      	bne.n	800249e <MenuSettingsSaveMenuPosWhenOFF+0x1e>
		SettingsData.Option1--;
 80024b6:	689a      	ldr	r2, [r3, #8]
		if (SettingsData.Option1==0) SettingsData.Option1 = QUANTITY_OPTIONS;
 80024b8:	3a01      	subs	r2, #1
 80024ba:	bf08      	it	eq
 80024bc:	2207      	moveq	r2, #7
 80024be:	e7ed      	b.n	800249c <MenuSettingsSaveMenuPosWhenOFF+0x1c>
			PrintToLCD("PowerSupply     ");
 80024c0:	480b      	ldr	r0, [pc, #44]	; (80024f0 <MenuSettingsSaveMenuPosWhenOFF+0x70>)
			PrintToLCD("Swing           ");
 80024c2:	f7ff fba9 	bl	8001c18 <PrintToLCD>
}
 80024c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			SelectedOption();
 80024ca:	f7ff bfbd 	b.w	8002448 <SelectedOption>
			PrintToLCD("Load Menu       ");
 80024ce:	4809      	ldr	r0, [pc, #36]	; (80024f4 <MenuSettingsSaveMenuPosWhenOFF+0x74>)
 80024d0:	e7f7      	b.n	80024c2 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("Charge CC CV    ");
 80024d2:	4809      	ldr	r0, [pc, #36]	; (80024f8 <MenuSettingsSaveMenuPosWhenOFF+0x78>)
 80024d4:	e7f5      	b.n	80024c2 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("Charge addapt   ");
 80024d6:	4809      	ldr	r0, [pc, #36]	; (80024fc <MenuSettingsSaveMenuPosWhenOFF+0x7c>)
 80024d8:	e7f3      	b.n	80024c2 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("DisCharge       ");
 80024da:	4809      	ldr	r0, [pc, #36]	; (8002500 <MenuSettingsSaveMenuPosWhenOFF+0x80>)
 80024dc:	e7f1      	b.n	80024c2 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("Training        ");
 80024de:	4809      	ldr	r0, [pc, #36]	; (8002504 <MenuSettingsSaveMenuPosWhenOFF+0x84>)
 80024e0:	e7ef      	b.n	80024c2 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("Swing           ");
 80024e2:	4809      	ldr	r0, [pc, #36]	; (8002508 <MenuSettingsSaveMenuPosWhenOFF+0x88>)
 80024e4:	e7ed      	b.n	80024c2 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			SettingsData.Option1 =1;
 80024e6:	2201      	movs	r2, #1
 80024e8:	609a      	str	r2, [r3, #8]
}
 80024ea:	bd10      	pop	{r4, pc}
 80024ec:	20000154 	.word	0x20000154
 80024f0:	080063b3 	.word	0x080063b3
 80024f4:	080063c4 	.word	0x080063c4
 80024f8:	080063d5 	.word	0x080063d5
 80024fc:	080063e6 	.word	0x080063e6
 8002500:	080063f7 	.word	0x080063f7
 8002504:	08006408 	.word	0x08006408
 8002508:	08006419 	.word	0x08006419

0800250c <MenuSettingsOutAfterPowerUp>:
	lcd_set_xy(0,0);
 800250c:	2100      	movs	r1, #0
{
 800250e:	b510      	push	{r4, lr}
 8002510:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8002512:	4608      	mov	r0, r1
 8002514:	f7ff fb00 	bl	8001b18 <lcd_set_xy>
	if (key == KEY_NEXT)
 8002518:	2c02      	cmp	r4, #2
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <MenuSettingsOutAfterPowerUp+0x58>)
 800251c:	d113      	bne.n	8002546 <MenuSettingsOutAfterPowerUp+0x3a>
		SettingsData.Option2++;
 800251e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002520:	3201      	adds	r2, #1
		if (SettingsData.Option2==QUANTITY_OPTIONS1+1) SettingsData.Option2=1;
 8002522:	2a04      	cmp	r2, #4
 8002524:	bf08      	it	eq
 8002526:	2201      	moveq	r2, #1
		if (SettingsData.Option2==0) SettingsData.Option2 = QUANTITY_OPTIONS1;
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
	switch (SettingsData.Option2)
 800252a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800252c:	2a02      	cmp	r2, #2
 800252e:	d011      	beq.n	8002554 <MenuSettingsOutAfterPowerUp+0x48>
 8002530:	2a03      	cmp	r2, #3
 8002532:	d011      	beq.n	8002558 <MenuSettingsOutAfterPowerUp+0x4c>
 8002534:	2a01      	cmp	r2, #1
 8002536:	d111      	bne.n	800255c <MenuSettingsOutAfterPowerUp+0x50>
			PrintToLCD("OFF             ");
 8002538:	480b      	ldr	r0, [pc, #44]	; (8002568 <MenuSettingsOutAfterPowerUp+0x5c>)
			PrintToLCD("Previous        ");
 800253a:	f7ff fb6d 	bl	8001c18 <PrintToLCD>
}
 800253e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			SelectedOption1();
 8002542:	f7ff bf8f 	b.w	8002464 <SelectedOption1>
	if (key == KEY_BACK)
 8002546:	2c01      	cmp	r4, #1
 8002548:	d1ef      	bne.n	800252a <MenuSettingsOutAfterPowerUp+0x1e>
		SettingsData.Option2--;
 800254a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		if (SettingsData.Option2==0) SettingsData.Option2 = QUANTITY_OPTIONS1;
 800254c:	3a01      	subs	r2, #1
 800254e:	bf08      	it	eq
 8002550:	2203      	moveq	r2, #3
 8002552:	e7e9      	b.n	8002528 <MenuSettingsOutAfterPowerUp+0x1c>
			PrintToLCD("ON              ");
 8002554:	4805      	ldr	r0, [pc, #20]	; (800256c <MenuSettingsOutAfterPowerUp+0x60>)
 8002556:	e7f0      	b.n	800253a <MenuSettingsOutAfterPowerUp+0x2e>
			PrintToLCD("Previous        ");
 8002558:	4805      	ldr	r0, [pc, #20]	; (8002570 <MenuSettingsOutAfterPowerUp+0x64>)
 800255a:	e7ee      	b.n	800253a <MenuSettingsOutAfterPowerUp+0x2e>
			SettingsData.Option2 =1;
 800255c:	2201      	movs	r2, #1
 800255e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002560:	bd10      	pop	{r4, pc}
 8002562:	bf00      	nop
 8002564:	20000154 	.word	0x20000154
 8002568:	08006380 	.word	0x08006380
 800256c:	08006391 	.word	0x08006391
 8002570:	080063a2 	.word	0x080063a2

08002574 <BUT_Debrief>:
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <BUT_Debrief+0x58>)
 8002576:	4916      	ldr	r1, [pc, #88]	; (80025d0 <BUT_Debrief+0x5c>)
 8002578:	689a      	ldr	r2, [r3, #8]
int16_t comp = 0;
void BUT_Debrief(void)
{
	Key_Pressed_t key;

	if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_4))
 800257a:	f012 0f10 	tst.w	r2, #16
 800257e:	d00c      	beq.n	800259a <BUT_Debrief+0x26>
 8002580:	689a      	ldr	r2, [r3, #8]
		key = KEY_OK;
	else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_5))
 8002582:	0690      	lsls	r0, r2, #26
 8002584:	d516      	bpl.n	80025b4 <BUT_Debrief+0x40>
 8002586:	689a      	ldr	r2, [r3, #8]
		key = KEY_NEXT;
	else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_6))
 8002588:	0652      	lsls	r2, r2, #25
 800258a:	d515      	bpl.n	80025b8 <BUT_Debrief+0x44>
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	43db      	mvns	r3, r3
		key = KEY_BACK;
	else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_7))
 8002590:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002594:	d112      	bne.n	80025bc <BUT_Debrief+0x48>
			{
			pressedKey = key;
			return;
		}
	}
	else comp=0;
 8002596:	800b      	strh	r3, [r1, #0]
 8002598:	4770      	bx	lr
		key = KEY_OK;
 800259a:	2203      	movs	r2, #3
		if (comp > THRESHOLD2)
 800259c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80025a0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80025a4:	4283      	cmp	r3, r0
 80025a6:	dd0b      	ble.n	80025c0 <BUT_Debrief+0x4c>
			comp = THRESHOLD2 - 40;
 80025a8:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80025ac:	800b      	strh	r3, [r1, #0]
			pressedKey = key;
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <BUT_Debrief+0x60>)
 80025b0:	701a      	strb	r2, [r3, #0]
			return;
 80025b2:	e00a      	b.n	80025ca <BUT_Debrief+0x56>
		key = KEY_NEXT;
 80025b4:	2202      	movs	r2, #2
 80025b6:	e7f1      	b.n	800259c <BUT_Debrief+0x28>
		key = KEY_BACK;
 80025b8:	2201      	movs	r2, #1
 80025ba:	e7ef      	b.n	800259c <BUT_Debrief+0x28>
		key = KEY_UP;
 80025bc:	2204      	movs	r2, #4
 80025be:	e7ed      	b.n	800259c <BUT_Debrief+0x28>
		else comp++;
 80025c0:	3301      	adds	r3, #1
 80025c2:	b21b      	sxth	r3, r3
		if (comp == THRESHOLD)
 80025c4:	2b14      	cmp	r3, #20
		else comp++;
 80025c6:	800b      	strh	r3, [r1, #0]
		if (comp == THRESHOLD)
 80025c8:	d0f1      	beq.n	80025ae <BUT_Debrief+0x3a>
}
 80025ca:	4770      	bx	lr
 80025cc:	40010c00 	.word	0x40010c00
 80025d0:	200007e0 	.word	0x200007e0
 80025d4:	200007e4 	.word	0x200007e4

080025d8 <BUT_GetKey>:

Key_Pressed_t BUT_GetKey(void)
{
	if (pressedKey) PowerOffTimesec=0;
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <BUT_GetKey+0x14>)
 80025da:	7818      	ldrb	r0, [r3, #0]
 80025dc:	b110      	cbz	r0, 80025e4 <BUT_GetKey+0xc>
 80025de:	2100      	movs	r1, #0
 80025e0:	4a03      	ldr	r2, [pc, #12]	; (80025f0 <BUT_GetKey+0x18>)
 80025e2:	6011      	str	r1, [r2, #0]
	Key_Pressed_t key = pressedKey;
	pressedKey = 0;
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
	return key;
}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	200007e4 	.word	0x200007e4
 80025f0:	200007a4 	.word	0x200007a4

080025f4 <Start_Timer_sec>:

void Start_Timer_sec()
{
	Timer_Sec = 0;
 80025f4:	2200      	movs	r2, #0
 80025f6:	4b03      	ldr	r3, [pc, #12]	; (8002604 <Start_Timer_sec+0x10>)
 80025f8:	601a      	str	r2, [r3, #0]
	Status_Timer_Sec = 1;
 80025fa:	2201      	movs	r2, #1
 80025fc:	4b02      	ldr	r3, [pc, #8]	; (8002608 <Start_Timer_sec+0x14>)
 80025fe:	701a      	strb	r2, [r3, #0]
}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	200007d0 	.word	0x200007d0
 8002608:	200007aa 	.word	0x200007aa

0800260c <ClockOnLCD_noSec>:
	if (strlen1(string)<2) lcd_out("0",1);
	lcd_out(string,1);

}
void ClockOnLCD_noSec (uint32_t time)
{
 800260c:	b538      	push	{r3, r4, r5, lr}
 800260e:	4604      	mov	r4, r0
	char *string;
	//(" ",1);
	string = itoa(time/3600);
 8002610:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8002614:	fbb4 f0f0 	udiv	r0, r4, r0
 8002618:	f7fe fe76 	bl	8001308 <itoa>
 800261c:	4605      	mov	r5, r0
	if (strlen1(string)<2) lcd_out("0",1);
 800261e:	f7fe ffbe 	bl	800159e <strlen1>
 8002622:	2801      	cmp	r0, #1
 8002624:	d803      	bhi.n	800262e <ClockOnLCD_noSec+0x22>
 8002626:	2101      	movs	r1, #1
 8002628:	4811      	ldr	r0, [pc, #68]	; (8002670 <ClockOnLCD_noSec+0x64>)
 800262a:	f7ff fa87 	bl	8001b3c <lcd_out>
	lcd_out(string,1);
 800262e:	2101      	movs	r1, #1
 8002630:	4628      	mov	r0, r5
 8002632:	f7ff fa83 	bl	8001b3c <lcd_out>

	lcd_out(":",1);
 8002636:	2101      	movs	r1, #1
 8002638:	480e      	ldr	r0, [pc, #56]	; (8002674 <ClockOnLCD_noSec+0x68>)
 800263a:	f7ff fa7f 	bl	8001b3c <lcd_out>
	string = itoa((time/60)%60);
 800263e:	233c      	movs	r3, #60	; 0x3c
 8002640:	fbb4 f4f3 	udiv	r4, r4, r3
 8002644:	fbb4 f0f3 	udiv	r0, r4, r3
 8002648:	fb03 4010 	mls	r0, r3, r0, r4
 800264c:	f7fe fe5c 	bl	8001308 <itoa>
 8002650:	4604      	mov	r4, r0
	if (strlen1(string)<2) lcd_out("0",1);
 8002652:	f7fe ffa4 	bl	800159e <strlen1>
 8002656:	2801      	cmp	r0, #1
 8002658:	d803      	bhi.n	8002662 <ClockOnLCD_noSec+0x56>
 800265a:	2101      	movs	r1, #1
 800265c:	4804      	ldr	r0, [pc, #16]	; (8002670 <ClockOnLCD_noSec+0x64>)
 800265e:	f7ff fa6d 	bl	8001b3c <lcd_out>
	lcd_out(string,1);
 8002662:	4620      	mov	r0, r4


}
 8002664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_out(string,1);
 8002668:	2101      	movs	r1, #1
 800266a:	f7ff ba67 	b.w	8001b3c <lcd_out>
 800266e:	bf00      	nop
 8002670:	0800614f 	.word	0x0800614f
 8002674:	080061d9 	.word	0x080061d9

08002678 <OUT_OFF>:
*/

void OUT_OFF()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	GPIOB->BSRR =  GPIO_BSRR_BR0;//ON-OFF OUT
 8002678:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <OUT_OFF+0x20>)
 800267e:	611a      	str	r2, [r3, #16]
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1
	GPIOA->BSRR =  GPIO_BSRR_BR8;//led out on/off
 8002680:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002684:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002688:	611a      	str	r2, [r3, #16]
	On_off = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	4a03      	ldr	r2, [pc, #12]	; (800269c <OUT_OFF+0x24>)
 800268e:	7013      	strb	r3, [r2, #0]
	Status_Out = 0;
 8002690:	4a03      	ldr	r2, [pc, #12]	; (80026a0 <OUT_OFF+0x28>)
 8002692:	7013      	strb	r3, [r2, #0]
}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40010c00 	.word	0x40010c00
 800269c:	200007a2 	.word	0x200007a2
 80026a0:	200007a9 	.word	0x200007a9

080026a4 <OUT_ON>:
void OUT_ON()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	GPIOB->BSRR =  GPIO_BSRR_BS0;//ON-OFF OUT
 80026a4:	2301      	movs	r3, #1
 80026a6:	4a05      	ldr	r2, [pc, #20]	; (80026bc <OUT_ON+0x18>)
 80026a8:	6113      	str	r3, [r2, #16]
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1
	On_off = 1;
 80026aa:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <OUT_ON+0x1c>)
 80026ac:	7013      	strb	r3, [r2, #0]
	Status_Out = 1;
 80026ae:	4a05      	ldr	r2, [pc, #20]	; (80026c4 <OUT_ON+0x20>)
 80026b0:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS8;//led out on/off
 80026b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b6:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <OUT_ON+0x24>)
 80026b8:	611a      	str	r2, [r3, #16]
}
 80026ba:	4770      	bx	lr
 80026bc:	40010c00 	.word	0x40010c00
 80026c0:	200007a2 	.word	0x200007a2
 80026c4:	200007a9 	.word	0x200007a9
 80026c8:	40010800 	.word	0x40010800

080026cc <OUTStateAfterPowerUpFunction>:
    if (OutStateAfterPowerUp ==2)
 80026cc:	4909      	ldr	r1, [pc, #36]	; (80026f4 <OUTStateAfterPowerUpFunction+0x28>)
{
 80026ce:	b508      	push	{r3, lr}
    if (OutStateAfterPowerUp ==2)
 80026d0:	680b      	ldr	r3, [r1, #0]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d103      	bne.n	80026de <OUTStateAfterPowerUpFunction+0x12>
    	OUT_ON();
 80026d6:	f7ff ffe5 	bl	80026a4 <OUT_ON>
    	OutStateAfterPowerUp = 1;
 80026da:	2301      	movs	r3, #1
 80026dc:	600b      	str	r3, [r1, #0]
    if (OutStateAfterPowerUp ==3)
 80026de:	680b      	ldr	r3, [r1, #0]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d106      	bne.n	80026f2 <OUTStateAfterPowerUpFunction+0x26>
    	if (SaveDataWhenPowerOff.OutState==1)
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <OUTStateAfterPowerUpFunction+0x2c>)
 80026e6:	6998      	ldr	r0, [r3, #24]
 80026e8:	2801      	cmp	r0, #1
 80026ea:	d102      	bne.n	80026f2 <OUTStateAfterPowerUpFunction+0x26>
    		OUT_ON();
 80026ec:	f7ff ffda 	bl	80026a4 <OUT_ON>
    		OutStateAfterPowerUp = 1;
 80026f0:	6008      	str	r0, [r1, #0]
}
 80026f2:	bd08      	pop	{r3, pc}
 80026f4:	20000274 	.word	0x20000274
 80026f8:	200000f4 	.word	0x200000f4

080026fc <MenuPowerSupply>:
	lcd_set_xy(0,0);
 80026fc:	2100      	movs	r1, #0
{
 80026fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status = 1;
 8002702:	2601      	movs	r6, #1
 8002704:	4b29      	ldr	r3, [pc, #164]	; (80027ac <MenuPowerSupply+0xb0>)
	if (On_off == 0)
 8002706:	4d2a      	ldr	r5, [pc, #168]	; (80027b0 <MenuPowerSupply+0xb4>)
{
 8002708:	4607      	mov	r7, r0
	lcd_set_xy(0,0);
 800270a:	4608      	mov	r0, r1
	EnterInMenu_Status = 1;
 800270c:	701e      	strb	r6, [r3, #0]
	lcd_set_xy(0,0);
 800270e:	f7ff fa03 	bl	8001b18 <lcd_set_xy>
	if (On_off == 0)
 8002712:	782b      	ldrb	r3, [r5, #0]
 8002714:	4c27      	ldr	r4, [pc, #156]	; (80027b4 <MenuPowerSupply+0xb8>)
 8002716:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 800271a:	bb3b      	cbnz	r3, 800276c <MenuPowerSupply+0x70>
		PrintToLCD(itoa_koma(U_PS,2));
 800271c:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <MenuPowerSupply+0xbc>)
 800271e:	2102      	movs	r1, #2
 8002720:	8818      	ldrh	r0, [r3, #0]
 8002722:	f7fe fe65 	bl	80013f0 <itoa_koma>
 8002726:	f7ff fa77 	bl	8001c18 <PrintToLCD>
		PrintToLCD("V  ");
 800272a:	4824      	ldr	r0, [pc, #144]	; (80027bc <MenuPowerSupply+0xc0>)
 800272c:	f7ff fa74 	bl	8001c18 <PrintToLCD>
		lcd_set_xy(7,0);
 8002730:	4641      	mov	r1, r8
 8002732:	2007      	movs	r0, #7
 8002734:	f7ff f9f0 	bl	8001b18 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002738:	8820      	ldrh	r0, [r4, #0]
 800273a:	b200      	sxth	r0, r0
 800273c:	f7fe fde4 	bl	8001308 <itoa>
 8002740:	f7ff fa6a 	bl	8001c18 <PrintToLCD>
		PrintToLCD("mA   ");
 8002744:	481e      	ldr	r0, [pc, #120]	; (80027c0 <MenuPowerSupply+0xc4>)
 8002746:	f7ff fa67 	bl	8001c18 <PrintToLCD>
		lcd_set_xy(5,1);
 800274a:	2005      	movs	r0, #5
 800274c:	4631      	mov	r1, r6
 800274e:	f7ff f9e3 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("OFF ");
 8002752:	481c      	ldr	r0, [pc, #112]	; (80027c4 <MenuPowerSupply+0xc8>)
		PrintToLCD("ON ");
 8002754:	f7ff fa60 	bl	8001c18 <PrintToLCD>
    if (key == KEY_NEXT)
 8002758:	2f02      	cmp	r7, #2
 800275a:	d103      	bne.n	8002764 <MenuPowerSupply+0x68>
    	if (On_off == 0)
 800275c:	782b      	ldrb	r3, [r5, #0]
 800275e:	bb13      	cbnz	r3, 80027a6 <MenuPowerSupply+0xaa>
    		OUT_ON();
 8002760:	f7ff ffa0 	bl	80026a4 <OUT_ON>
}
 8002764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    OUTStateAfterPowerUpFunction();
 8002768:	f7ff bfb0 	b.w	80026cc <OUTStateAfterPowerUpFunction>
		PrintToLCD(itoa_koma(U_OUT,2));
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <MenuPowerSupply+0xcc>)
 800276e:	2102      	movs	r1, #2
 8002770:	8818      	ldrh	r0, [r3, #0]
 8002772:	f7fe fe3d 	bl	80013f0 <itoa_koma>
 8002776:	f7ff fa4f 	bl	8001c18 <PrintToLCD>
		PrintToLCD("V  ");
 800277a:	4810      	ldr	r0, [pc, #64]	; (80027bc <MenuPowerSupply+0xc0>)
 800277c:	f7ff fa4c 	bl	8001c18 <PrintToLCD>
		lcd_set_xy(7,0);
 8002780:	2100      	movs	r1, #0
 8002782:	2007      	movs	r0, #7
 8002784:	f7ff f9c8 	bl	8001b18 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002788:	8820      	ldrh	r0, [r4, #0]
 800278a:	b200      	sxth	r0, r0
 800278c:	f7fe fdbc 	bl	8001308 <itoa>
 8002790:	f7ff fa42 	bl	8001c18 <PrintToLCD>
		PrintToLCD("mA    ");
 8002794:	480d      	ldr	r0, [pc, #52]	; (80027cc <MenuPowerSupply+0xd0>)
 8002796:	f7ff fa3f 	bl	8001c18 <PrintToLCD>
		lcd_set_xy(6,1);
 800279a:	2006      	movs	r0, #6
 800279c:	4631      	mov	r1, r6
 800279e:	f7ff f9bb 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("ON ");
 80027a2:	480b      	ldr	r0, [pc, #44]	; (80027d0 <MenuPowerSupply+0xd4>)
 80027a4:	e7d6      	b.n	8002754 <MenuPowerSupply+0x58>
    		OUT_OFF();
 80027a6:	f7ff ff67 	bl	8002678 <OUT_OFF>
 80027aa:	e7db      	b.n	8002764 <MenuPowerSupply+0x68>
 80027ac:	200007a0 	.word	0x200007a0
 80027b0:	200007a2 	.word	0x200007a2
 80027b4:	2000085a 	.word	0x2000085a
 80027b8:	20000874 	.word	0x20000874
 80027bc:	08006285 	.word	0x08006285
 80027c0:	08006289 	.word	0x08006289
 80027c4:	0800613a 	.word	0x0800613a
 80027c8:	2000086e 	.word	0x2000086e
 80027cc:	0800628f 	.word	0x0800628f
 80027d0:	08006296 	.word	0x08006296

080027d4 <MenuCalibration_CURRENT_Out>:
	EnterInMenu_Status=1;
 80027d4:	2201      	movs	r2, #1
 80027d6:	4b16      	ldr	r3, [pc, #88]	; (8002830 <MenuCalibration_CURRENT_Out+0x5c>)
{
 80027d8:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 80027da:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 80027dc:	f7ff ff62 	bl	80026a4 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForCurrent++;
 80027e0:	2802      	cmp	r0, #2
 80027e2:	4c14      	ldr	r4, [pc, #80]	; (8002834 <MenuCalibration_CURRENT_Out+0x60>)
 80027e4:	d11e      	bne.n	8002824 <MenuCalibration_CURRENT_Out+0x50>
 80027e6:	69a3      	ldr	r3, [r4, #24]
 80027e8:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent--;
 80027ea:	61a3      	str	r3, [r4, #24]
	lcd_set_xy(0,0);
 80027ec:	2100      	movs	r1, #0
 80027ee:	4608      	mov	r0, r1
 80027f0:	f7ff f992 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForCurrent));
 80027f4:	69a0      	ldr	r0, [r4, #24]
 80027f6:	f7fe fd87 	bl	8001308 <itoa>
 80027fa:	f7ff fa0d 	bl	8001c18 <PrintToLCD>
	PrintToLCD("   ");
 80027fe:	480e      	ldr	r0, [pc, #56]	; (8002838 <MenuCalibration_CURRENT_Out+0x64>)
 8002800:	f7ff fa0a 	bl	8001c18 <PrintToLCD>
	lcd_set_xy(0,1);
 8002804:	2101      	movs	r1, #1
 8002806:	2000      	movs	r0, #0
 8002808:	f7ff f986 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa(Current));
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <MenuCalibration_CURRENT_Out+0x68>)
 800280e:	8818      	ldrh	r0, [r3, #0]
 8002810:	b200      	sxth	r0, r0
 8002812:	f7fe fd79 	bl	8001308 <itoa>
 8002816:	f7ff f9ff 	bl	8001c18 <PrintToLCD>
}
 800281a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("mA  ");
 800281e:	4808      	ldr	r0, [pc, #32]	; (8002840 <MenuCalibration_CURRENT_Out+0x6c>)
 8002820:	f7ff b9fa 	b.w	8001c18 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent--;
 8002824:	2801      	cmp	r0, #1
 8002826:	d1e1      	bne.n	80027ec <MenuCalibration_CURRENT_Out+0x18>
 8002828:	69a3      	ldr	r3, [r4, #24]
 800282a:	3b01      	subs	r3, #1
 800282c:	e7dd      	b.n	80027ea <MenuCalibration_CURRENT_Out+0x16>
 800282e:	bf00      	nop
 8002830:	200007a0 	.word	0x200007a0
 8002834:	20000004 	.word	0x20000004
 8002838:	0800639e 	.word	0x0800639e
 800283c:	2000085a 	.word	0x2000085a
 8002840:	080061b0 	.word	0x080061b0

08002844 <MenuCalibration_VoltagePS>:
	EnterInMenu_Status=1;
 8002844:	2201      	movs	r2, #1
 8002846:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <MenuCalibration_VoltagePS+0x5c>)
{
 8002848:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 800284a:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 800284c:	f7ff ff2a 	bl	80026a4 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForVoltage++;
 8002850:	2802      	cmp	r0, #2
 8002852:	4c14      	ldr	r4, [pc, #80]	; (80028a4 <MenuCalibration_VoltagePS+0x60>)
 8002854:	d11e      	bne.n	8002894 <MenuCalibration_VoltagePS+0x50>
 8002856:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002858:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage--;
 800285a:	62a3      	str	r3, [r4, #40]	; 0x28
	lcd_set_xy(0,0);
 800285c:	2100      	movs	r1, #0
 800285e:	4608      	mov	r0, r1
 8002860:	f7ff f95a 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForVoltage));
 8002864:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002866:	f7fe fd4f 	bl	8001308 <itoa>
 800286a:	f7ff f9d5 	bl	8001c18 <PrintToLCD>
	PrintToLCD("   ");
 800286e:	480e      	ldr	r0, [pc, #56]	; (80028a8 <MenuCalibration_VoltagePS+0x64>)
 8002870:	f7ff f9d2 	bl	8001c18 <PrintToLCD>
	lcd_set_xy(0,1);
 8002874:	2101      	movs	r1, #1
 8002876:	2000      	movs	r0, #0
 8002878:	f7ff f94e 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_PS,2));
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <MenuCalibration_VoltagePS+0x68>)
 800287e:	2102      	movs	r1, #2
 8002880:	8818      	ldrh	r0, [r3, #0]
 8002882:	f7fe fdb5 	bl	80013f0 <itoa_koma>
 8002886:	f7ff f9c7 	bl	8001c18 <PrintToLCD>
}
 800288a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 800288e:	4808      	ldr	r0, [pc, #32]	; (80028b0 <MenuCalibration_VoltagePS+0x6c>)
 8002890:	f7ff b9c2 	b.w	8001c18 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage--;
 8002894:	2801      	cmp	r0, #1
 8002896:	d1e1      	bne.n	800285c <MenuCalibration_VoltagePS+0x18>
 8002898:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800289a:	3b01      	subs	r3, #1
 800289c:	e7dd      	b.n	800285a <MenuCalibration_VoltagePS+0x16>
 800289e:	bf00      	nop
 80028a0:	200007a0 	.word	0x200007a0
 80028a4:	20000004 	.word	0x20000004
 80028a8:	0800639e 	.word	0x0800639e
 80028ac:	20000874 	.word	0x20000874
 80028b0:	08006285 	.word	0x08006285

080028b4 <MenuCalibration_VoltageOut>:
	EnterInMenu_Status=1;
 80028b4:	2201      	movs	r2, #1
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <MenuCalibration_VoltageOut+0x5c>)
{
 80028b8:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 80028ba:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 80028bc:	f7ff fef2 	bl	80026a4 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForVoltage1++;
 80028c0:	2802      	cmp	r0, #2
 80028c2:	4c14      	ldr	r4, [pc, #80]	; (8002914 <MenuCalibration_VoltageOut+0x60>)
 80028c4:	d11e      	bne.n	8002904 <MenuCalibration_VoltageOut+0x50>
 80028c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80028c8:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage1--;
 80028ca:	6323      	str	r3, [r4, #48]	; 0x30
	lcd_set_xy(0,0);
 80028cc:	2100      	movs	r1, #0
 80028ce:	4608      	mov	r0, r1
 80028d0:	f7ff f922 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForVoltage1));
 80028d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80028d6:	f7fe fd17 	bl	8001308 <itoa>
 80028da:	f7ff f99d 	bl	8001c18 <PrintToLCD>
	PrintToLCD("   ");
 80028de:	480e      	ldr	r0, [pc, #56]	; (8002918 <MenuCalibration_VoltageOut+0x64>)
 80028e0:	f7ff f99a 	bl	8001c18 <PrintToLCD>
	lcd_set_xy(0,1);
 80028e4:	2101      	movs	r1, #1
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7ff f916 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <MenuCalibration_VoltageOut+0x68>)
 80028ee:	2102      	movs	r1, #2
 80028f0:	8818      	ldrh	r0, [r3, #0]
 80028f2:	f7fe fd7d 	bl	80013f0 <itoa_koma>
 80028f6:	f7ff f98f 	bl	8001c18 <PrintToLCD>
}
 80028fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 80028fe:	4808      	ldr	r0, [pc, #32]	; (8002920 <MenuCalibration_VoltageOut+0x6c>)
 8002900:	f7ff b98a 	b.w	8001c18 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage1--;
 8002904:	2801      	cmp	r0, #1
 8002906:	d1e1      	bne.n	80028cc <MenuCalibration_VoltageOut+0x18>
 8002908:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800290a:	3b01      	subs	r3, #1
 800290c:	e7dd      	b.n	80028ca <MenuCalibration_VoltageOut+0x16>
 800290e:	bf00      	nop
 8002910:	200007a0 	.word	0x200007a0
 8002914:	20000004 	.word	0x20000004
 8002918:	0800639e 	.word	0x0800639e
 800291c:	2000086e 	.word	0x2000086e
 8002920:	08006285 	.word	0x08006285

08002924 <MenuCalibration_VoltageIn>:
	EnterInMenu_Status=1;
 8002924:	2201      	movs	r2, #1
 8002926:	4b16      	ldr	r3, [pc, #88]	; (8002980 <MenuCalibration_VoltageIn+0x5c>)
{
 8002928:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 800292a:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 800292c:	f7ff feba 	bl	80026a4 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForVoltage2++;
 8002930:	2802      	cmp	r0, #2
 8002932:	4c14      	ldr	r4, [pc, #80]	; (8002984 <MenuCalibration_VoltageIn+0x60>)
 8002934:	d11e      	bne.n	8002974 <MenuCalibration_VoltageIn+0x50>
 8002936:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002938:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage2--;
 800293a:	63a3      	str	r3, [r4, #56]	; 0x38
	lcd_set_xy(0,0);
 800293c:	2100      	movs	r1, #0
 800293e:	4608      	mov	r0, r1
 8002940:	f7ff f8ea 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForVoltage2));
 8002944:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002946:	f7fe fcdf 	bl	8001308 <itoa>
 800294a:	f7ff f965 	bl	8001c18 <PrintToLCD>
	PrintToLCD("   ");
 800294e:	480e      	ldr	r0, [pc, #56]	; (8002988 <MenuCalibration_VoltageIn+0x64>)
 8002950:	f7ff f962 	bl	8001c18 <PrintToLCD>
	lcd_set_xy(0,1);
 8002954:	2101      	movs	r1, #1
 8002956:	2000      	movs	r0, #0
 8002958:	f7ff f8de 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_IN,2));
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <MenuCalibration_VoltageIn+0x68>)
 800295e:	2102      	movs	r1, #2
 8002960:	8818      	ldrh	r0, [r3, #0]
 8002962:	f7fe fd45 	bl	80013f0 <itoa_koma>
 8002966:	f7ff f957 	bl	8001c18 <PrintToLCD>
}
 800296a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 800296e:	4808      	ldr	r0, [pc, #32]	; (8002990 <MenuCalibration_VoltageIn+0x6c>)
 8002970:	f7ff b952 	b.w	8001c18 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage2--;
 8002974:	2801      	cmp	r0, #1
 8002976:	d1e1      	bne.n	800293c <MenuCalibration_VoltageIn+0x18>
 8002978:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800297a:	3b01      	subs	r3, #1
 800297c:	e7dd      	b.n	800293a <MenuCalibration_VoltageIn+0x16>
 800297e:	bf00      	nop
 8002980:	200007a0 	.word	0x200007a0
 8002984:	20000004 	.word	0x20000004
 8002988:	0800639e 	.word	0x0800639e
 800298c:	20000858 	.word	0x20000858
 8002990:	08006285 	.word	0x08006285

08002994 <MenuCalibration_Resist_Comp_5V1A>:
		EnterInMenu_Status=1;
 8002994:	2201      	movs	r2, #1
{
 8002996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		EnterInMenu_Status=1;
 8002998:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <MenuCalibration_Resist_Comp_5V1A+0xac>)
 800299a:	4e2a      	ldr	r6, [pc, #168]	; (8002a44 <MenuCalibration_Resist_Comp_5V1A+0xb0>)
 800299c:	701a      	strb	r2, [r3, #0]
		OUT_ON();
 800299e:	f7ff fe81 	bl	80026a4 <OUT_ON>
		if (key == KEY_NEXT) ResistanceComp_Voltage++;
 80029a2:	2802      	cmp	r0, #2
 80029a4:	d12e      	bne.n	8002a04 <MenuCalibration_Resist_Comp_5V1A+0x70>
 80029a6:	8833      	ldrh	r3, [r6, #0]
 80029a8:	3301      	adds	r3, #1
		if (key == KEY_BACK) ResistanceComp_Voltage--;
 80029aa:	8033      	strh	r3, [r6, #0]
		lcd_set_xy(0,0);
 80029ac:	2100      	movs	r1, #0
 80029ae:	4608      	mov	r0, r1
 80029b0:	f7ff f8b2 	bl	8001b18 <lcd_set_xy>
		PrintToLCD(itoa_koma(ResistanceComp_Voltage,2));
 80029b4:	2102      	movs	r1, #2
 80029b6:	8830      	ldrh	r0, [r6, #0]
 80029b8:	f7fe fd1a 	bl	80013f0 <itoa_koma>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 80029bc:	4f22      	ldr	r7, [pc, #136]	; (8002a48 <MenuCalibration_Resist_Comp_5V1A+0xb4>)
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 80029be:	4c23      	ldr	r4, [pc, #140]	; (8002a4c <MenuCalibration_Resist_Comp_5V1A+0xb8>)
		PrintToLCD(itoa_koma(ResistanceComp_Voltage,2));
 80029c0:	f7ff f92a 	bl	8001c18 <PrintToLCD>
		PrintToLCD("V ");
 80029c4:	4822      	ldr	r0, [pc, #136]	; (8002a50 <MenuCalibration_Resist_Comp_5V1A+0xbc>)
 80029c6:	f7ff f927 	bl	8001c18 <PrintToLCD>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 80029ca:	883b      	ldrh	r3, [r7, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 80029cc:	8822      	ldrh	r2, [r4, #0]
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 80029ce:	b29b      	uxth	r3, r3
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 80029d0:	b212      	sxth	r2, r2
 80029d2:	2a00      	cmp	r2, #0
 80029d4:	4d1f      	ldr	r5, [pc, #124]	; (8002a54 <MenuCalibration_Resist_Comp_5V1A+0xc0>)
 80029d6:	dc1a      	bgt.n	8002a0e <MenuCalibration_Resist_Comp_5V1A+0x7a>
 80029d8:	2346      	movs	r3, #70	; 0x46
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 80029da:	642b      	str	r3, [r5, #64]	; 0x40
		PrintToLCD(itoa(CalibrationData.ResistanceComp_Ishunt_Wires));
 80029dc:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80029de:	f7fe fc93 	bl	8001308 <itoa>
 80029e2:	f7ff f919 	bl	8001c18 <PrintToLCD>
		PrintToLCD("mOm       ");
 80029e6:	481c      	ldr	r0, [pc, #112]	; (8002a58 <MenuCalibration_Resist_Comp_5V1A+0xc4>)
 80029e8:	f7ff f916 	bl	8001c18 <PrintToLCD>
		Delta = U_PS - U_OUT_ForSetResistance;
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <MenuCalibration_Resist_Comp_5V1A+0xc8>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	883a      	ldrh	r2, [r7, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 80029f2:	8821      	ldrh	r1, [r4, #0]
		Delta = U_PS - U_OUT_ForSetResistance;
 80029f4:	b29b      	uxth	r3, r3
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 80029f6:	b209      	sxth	r1, r1
 80029f8:	2900      	cmp	r1, #0
		Delta = U_PS - U_OUT_ForSetResistance;
 80029fa:	b292      	uxth	r2, r2
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 80029fc:	dc14      	bgt.n	8002a28 <MenuCalibration_Resist_Comp_5V1A+0x94>
 80029fe:	230a      	movs	r3, #10
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8002a00:	64ab      	str	r3, [r5, #72]	; 0x48
}
 8002a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (key == KEY_BACK) ResistanceComp_Voltage--;
 8002a04:	2801      	cmp	r0, #1
 8002a06:	d1d1      	bne.n	80029ac <MenuCalibration_Resist_Comp_5V1A+0x18>
 8002a08:	8833      	ldrh	r3, [r6, #0]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	e7cd      	b.n	80029aa <MenuCalibration_Resist_Comp_5V1A+0x16>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002a0e:	8832      	ldrh	r2, [r6, #0]
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8002a10:	8821      	ldrh	r1, [r4, #0]
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002a12:	1a9b      	subs	r3, r3, r2
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8002a14:	f242 7210 	movw	r2, #10000	; 0x2710
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002a18:	b21b      	sxth	r3, r3
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8002a1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a1e:	4353      	muls	r3, r2
 8002a20:	b209      	sxth	r1, r1
 8002a22:	fb93 f3f1 	sdiv	r3, r3, r1
 8002a26:	e7d8      	b.n	80029da <MenuCalibration_Resist_Comp_5V1A+0x46>
		Delta = U_PS - U_OUT_ForSetResistance;
 8002a28:	1a9b      	subs	r3, r3, r2
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8002a2a:	f242 7210 	movw	r2, #10000	; 0x2710
		Delta = U_PS - U_OUT_ForSetResistance;
 8002a2e:	b21b      	sxth	r3, r3
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8002a30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a34:	4353      	muls	r3, r2
 8002a36:	8821      	ldrh	r1, [r4, #0]
 8002a38:	b209      	sxth	r1, r1
 8002a3a:	fb93 f3f1 	sdiv	r3, r3, r1
 8002a3e:	e7df      	b.n	8002a00 <MenuCalibration_Resist_Comp_5V1A+0x6c>
 8002a40:	200007a0 	.word	0x200007a0
 8002a44:	20000278 	.word	0x20000278
 8002a48:	200002b6 	.word	0x200002b6
 8002a4c:	2000085a 	.word	0x2000085a
 8002a50:	08006378 	.word	0x08006378
 8002a54:	20000004 	.word	0x20000004
 8002a58:	080061c4 	.word	0x080061c4
 8002a5c:	20000874 	.word	0x20000874

08002a60 <LOAD_ON>:

void LOAD_ON()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//ON-OFF OUT
	GPIOB->BSRR =  GPIO_BSRR_BS1; //load1
 8002a60:	2202      	movs	r2, #2
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <LOAD_ON+0x1c>)
 8002a64:	611a      	str	r2, [r3, #16]
	On_off = 1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	4a05      	ldr	r2, [pc, #20]	; (8002a80 <LOAD_ON+0x20>)
 8002a6a:	7013      	strb	r3, [r2, #0]
	Status_Load = 1;
 8002a6c:	4a05      	ldr	r2, [pc, #20]	; (8002a84 <LOAD_ON+0x24>)
 8002a6e:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS11;//led load on/off
 8002a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a74:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <LOAD_ON+0x28>)
 8002a76:	611a      	str	r2, [r3, #16]
}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40010c00 	.word	0x40010c00
 8002a80:	200007a2 	.word	0x200007a2
 8002a84:	200007a8 	.word	0x200007a8
 8002a88:	40010800 	.word	0x40010800

08002a8c <discharge>:
{
 8002a8c:	b508      	push	{r3, lr}
	OUT_OFF();
 8002a8e:	f7ff fdf3 	bl	8002678 <OUT_OFF>
	LOAD_ON();
 8002a92:	f7ff ffe5 	bl	8002a60 <LOAD_ON>
}
 8002a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(50);
 8002a9a:	2032      	movs	r0, #50	; 0x32
 8002a9c:	f7fe bb18 	b.w	80010d0 <delay_ms>

08002aa0 <MenuCalibration_CURRENT_Load>:
{
 8002aa0:	b538      	push	{r3, r4, r5, lr}
	EnterInMenu_Status=1;
 8002aa2:	2201      	movs	r2, #1
{
 8002aa4:	4605      	mov	r5, r0
	EnterInMenu_Status=1;
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <MenuCalibration_CURRENT_Load+0x5c>)
 8002aa8:	4c15      	ldr	r4, [pc, #84]	; (8002b00 <MenuCalibration_CURRENT_Load+0x60>)
 8002aaa:	701a      	strb	r2, [r3, #0]
	discharge();
 8002aac:	f7ff ffee 	bl	8002a8c <discharge>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForCurrent1++;
 8002ab0:	2d02      	cmp	r5, #2
 8002ab2:	d11e      	bne.n	8002af2 <MenuCalibration_CURRENT_Load+0x52>
 8002ab4:	6a23      	ldr	r3, [r4, #32]
 8002ab6:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent1--;
 8002ab8:	6223      	str	r3, [r4, #32]
	lcd_set_xy(0,0);
 8002aba:	2100      	movs	r1, #0
 8002abc:	4608      	mov	r0, r1
 8002abe:	f7ff f82b 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForCurrent1));
 8002ac2:	6a20      	ldr	r0, [r4, #32]
 8002ac4:	f7fe fc20 	bl	8001308 <itoa>
 8002ac8:	f7ff f8a6 	bl	8001c18 <PrintToLCD>
	PrintToLCD("   ");
 8002acc:	480d      	ldr	r0, [pc, #52]	; (8002b04 <MenuCalibration_CURRENT_Load+0x64>)
 8002ace:	f7ff f8a3 	bl	8001c18 <PrintToLCD>
	lcd_set_xy(0,1);
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7ff f81f 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa(Current));
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <MenuCalibration_CURRENT_Load+0x68>)
 8002adc:	8818      	ldrh	r0, [r3, #0]
 8002ade:	b200      	sxth	r0, r0
 8002ae0:	f7fe fc12 	bl	8001308 <itoa>
 8002ae4:	f7ff f898 	bl	8001c18 <PrintToLCD>
}
 8002ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PrintToLCD("mA  ");
 8002aec:	4807      	ldr	r0, [pc, #28]	; (8002b0c <MenuCalibration_CURRENT_Load+0x6c>)
 8002aee:	f7ff b893 	b.w	8001c18 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent1--;
 8002af2:	2d01      	cmp	r5, #1
 8002af4:	d1e1      	bne.n	8002aba <MenuCalibration_CURRENT_Load+0x1a>
 8002af6:	6a23      	ldr	r3, [r4, #32]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	e7dd      	b.n	8002ab8 <MenuCalibration_CURRENT_Load+0x18>
 8002afc:	200007a0 	.word	0x200007a0
 8002b00:	20000004 	.word	0x20000004
 8002b04:	0800639e 	.word	0x0800639e
 8002b08:	2000085a 	.word	0x2000085a
 8002b0c:	080061b0 	.word	0x080061b0

08002b10 <discharge1>:
{
 8002b10:	b508      	push	{r3, lr}
	if (ChargeDischargeState !=2)
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <discharge1+0x38>)
 8002b14:	f993 2000 	ldrsb.w	r2, [r3]
 8002b18:	2a02      	cmp	r2, #2
 8002b1a:	d013      	beq.n	8002b44 <discharge1+0x34>
		ChargeDischargeState = 2;
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	701a      	strb	r2, [r3, #0]
		OUT_OFF();
 8002b20:	f7ff fdaa 	bl	8002678 <OUT_OFF>
		LOAD_ON();
 8002b24:	f7ff ff9c 	bl	8002a60 <LOAD_ON>
		TimerForReadyMeasurement_ms = 0;
 8002b28:	2200      	movs	r2, #0
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <discharge1+0x3c>)
		delay_ms(50);
 8002b2c:	2032      	movs	r0, #50	; 0x32
		TimerForReadyMeasurement_ms = 0;
 8002b2e:	601a      	str	r2, [r3, #0]
		delay_ms(50);
 8002b30:	f7fe face 	bl	80010d0 <delay_ms>
		logDebug("DIsCharge");
 8002b34:	4806      	ldr	r0, [pc, #24]	; (8002b50 <discharge1+0x40>)
 8002b36:	f002 fcc1 	bl	80054bc <printToBufferWithoutEndUART1>
}
 8002b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logDebug("DIsCharge");
 8002b3e:	4805      	ldr	r0, [pc, #20]	; (8002b54 <discharge1+0x44>)
 8002b40:	f002 bc52 	b.w	80053e8 <printToBufferUART1>
}
 8002b44:	bd08      	pop	{r3, pc}
 8002b46:	bf00      	nop
 8002b48:	2000078a 	.word	0x2000078a
 8002b4c:	200007cc 	.word	0x200007cc
 8002b50:	08005eb1 	.word	0x08005eb1
 8002b54:	08006fb1 	.word	0x08006fb1

08002b58 <LOAD_OFF>:

void LOAD_OFF()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//ON-OFF OUT
	GPIOB->BSRR =  GPIO_BSRR_BR1; //load1
 8002b58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b5c:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <LOAD_OFF+0x24>)
 8002b5e:	611a      	str	r2, [r3, #16]
	On_off = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <LOAD_OFF+0x28>)
 8002b64:	7013      	strb	r3, [r2, #0]
	Status_Load = 0;
 8002b66:	4a07      	ldr	r2, [pc, #28]	; (8002b84 <LOAD_OFF+0x2c>)
 8002b68:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BR11;//led load on/off
 8002b6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b72:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002b76:	611a      	str	r2, [r3, #16]
}
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40010c00 	.word	0x40010c00
 8002b80:	200007a2 	.word	0x200007a2
 8002b84:	200007a8 	.word	0x200007a8

08002b88 <MenuLoad>:
	EnterInMenu_Status = 1;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <MenuLoad+0x90>)
	if (key == KEY_NEXT)
 8002b8c:	2802      	cmp	r0, #2
{
 8002b8e:	b510      	push	{r4, lr}
	EnterInMenu_Status = 1;
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	4c22      	ldr	r4, [pc, #136]	; (8002c1c <MenuLoad+0x94>)
	if (key == KEY_NEXT)
 8002b94:	d103      	bne.n	8002b9e <MenuLoad+0x16>
		if (On_off == 0)
 8002b96:	7823      	ldrb	r3, [r4, #0]
 8002b98:	bb73      	cbnz	r3, 8002bf8 <MenuLoad+0x70>
			LOAD_ON();
 8002b9a:	f7ff ff61 	bl	8002a60 <LOAD_ON>
	lcd_set_xy(0,0);
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4608      	mov	r0, r1
 8002ba2:	f7fe ffb9 	bl	8001b18 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 8002ba6:	4b1e      	ldr	r3, [pc, #120]	; (8002c20 <MenuLoad+0x98>)
 8002ba8:	2102      	movs	r1, #2
 8002baa:	8818      	ldrh	r0, [r3, #0]
 8002bac:	f7fe fc20 	bl	80013f0 <itoa_koma>
 8002bb0:	f7ff f832 	bl	8001c18 <PrintToLCD>
	PrintToLCD("V ");
 8002bb4:	481b      	ldr	r0, [pc, #108]	; (8002c24 <MenuLoad+0x9c>)
 8002bb6:	f7ff f82f 	bl	8001c18 <PrintToLCD>
	PrintToLCD(itoa(Current));
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <MenuLoad+0xa0>)
 8002bbc:	8818      	ldrh	r0, [r3, #0]
 8002bbe:	b200      	sxth	r0, r0
 8002bc0:	f7fe fba2 	bl	8001308 <itoa>
 8002bc4:	f7ff f828 	bl	8001c18 <PrintToLCD>
	PrintToLCD("mA    ");
 8002bc8:	4818      	ldr	r0, [pc, #96]	; (8002c2c <MenuLoad+0xa4>)
 8002bca:	f7ff f825 	bl	8001c18 <PrintToLCD>
	if (On_off ==0)
 8002bce:	7823      	ldrb	r3, [r4, #0]
			lcd_set_xy(6,1);
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	4c17      	ldr	r4, [pc, #92]	; (8002c30 <MenuLoad+0xa8>)
 8002bd4:	2006      	movs	r0, #6
	if (On_off ==0)
 8002bd6:	b993      	cbnz	r3, 8002bfe <MenuLoad+0x76>
			lcd_set_xy(6,1);
 8002bd8:	f7fe ff9e 	bl	8001b18 <lcd_set_xy>
			LcdOutbyNumber(2,1);
 8002bdc:	2101      	movs	r1, #1
 8002bde:	2002      	movs	r0, #2
 8002be0:	f7fe ffc2 	bl	8001b68 <LcdOutbyNumber>
			LcdOutbyNumber(2,1);
 8002be4:	2101      	movs	r1, #1
 8002be6:	2002      	movs	r0, #2
					LcdOutbyNumber(3,1);
 8002be8:	f7fe ffbe 	bl	8001b68 <LcdOutbyNumber>
		if (Blink_message_counter>10)
 8002bec:	7823      	ldrb	r3, [r4, #0]
 8002bee:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 8002bf0:	bf84      	itt	hi
 8002bf2:	2300      	movhi	r3, #0
 8002bf4:	7023      	strbhi	r3, [r4, #0]
}
 8002bf6:	bd10      	pop	{r4, pc}
			LOAD_OFF();
 8002bf8:	f7ff ffae 	bl	8002b58 <LOAD_OFF>
 8002bfc:	e7cf      	b.n	8002b9e <MenuLoad+0x16>
			if (Blink_message_counter<=5)
 8002bfe:	7823      	ldrb	r3, [r4, #0]
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d9e9      	bls.n	8002bd8 <MenuLoad+0x50>
					lcd_set_xy(6,1);
 8002c04:	f7fe ff88 	bl	8001b18 <lcd_set_xy>
					LcdOutbyNumber(3,1);
 8002c08:	2101      	movs	r1, #1
 8002c0a:	2003      	movs	r0, #3
 8002c0c:	f7fe ffac 	bl	8001b68 <LcdOutbyNumber>
					LcdOutbyNumber(3,1);
 8002c10:	2101      	movs	r1, #1
 8002c12:	2003      	movs	r0, #3
 8002c14:	e7e8      	b.n	8002be8 <MenuLoad+0x60>
 8002c16:	bf00      	nop
 8002c18:	200007a0 	.word	0x200007a0
 8002c1c:	200007a2 	.word	0x200007a2
 8002c20:	2000086e 	.word	0x2000086e
 8002c24:	08006378 	.word	0x08006378
 8002c28:	2000085a 	.word	0x2000085a
 8002c2c:	0800628f 	.word	0x0800628f
 8002c30:	20000789 	.word	0x20000789

08002c34 <MenuBatterySimilation>:
	lcd_set_xy(0,0);
 8002c34:	2100      	movs	r1, #0
{
 8002c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status = 1;
 8002c3a:	2601      	movs	r6, #1
 8002c3c:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <MenuBatterySimilation+0xbc>)
	if (On_off == 0)
 8002c3e:	4d2d      	ldr	r5, [pc, #180]	; (8002cf4 <MenuBatterySimilation+0xc0>)
{
 8002c40:	4607      	mov	r7, r0
	lcd_set_xy(0,0);
 8002c42:	4608      	mov	r0, r1
	EnterInMenu_Status = 1;
 8002c44:	701e      	strb	r6, [r3, #0]
	lcd_set_xy(0,0);
 8002c46:	f7fe ff67 	bl	8001b18 <lcd_set_xy>
	if (On_off == 0)
 8002c4a:	782b      	ldrb	r3, [r5, #0]
 8002c4c:	4c2a      	ldr	r4, [pc, #168]	; (8002cf8 <MenuBatterySimilation+0xc4>)
 8002c4e:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8002c52:	bb3b      	cbnz	r3, 8002ca4 <MenuBatterySimilation+0x70>
		PrintToLCD(itoa_koma(U_PS,2));
 8002c54:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <MenuBatterySimilation+0xc8>)
 8002c56:	2102      	movs	r1, #2
 8002c58:	8818      	ldrh	r0, [r3, #0]
 8002c5a:	f7fe fbc9 	bl	80013f0 <itoa_koma>
 8002c5e:	f7fe ffdb 	bl	8001c18 <PrintToLCD>
		PrintToLCD("V  ");
 8002c62:	4827      	ldr	r0, [pc, #156]	; (8002d00 <MenuBatterySimilation+0xcc>)
 8002c64:	f7fe ffd8 	bl	8001c18 <PrintToLCD>
		lcd_set_xy(7,0);
 8002c68:	4641      	mov	r1, r8
 8002c6a:	2007      	movs	r0, #7
 8002c6c:	f7fe ff54 	bl	8001b18 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002c70:	8820      	ldrh	r0, [r4, #0]
 8002c72:	b200      	sxth	r0, r0
 8002c74:	f7fe fb48 	bl	8001308 <itoa>
 8002c78:	f7fe ffce 	bl	8001c18 <PrintToLCD>
		PrintToLCD("mA   ");
 8002c7c:	4821      	ldr	r0, [pc, #132]	; (8002d04 <MenuBatterySimilation+0xd0>)
 8002c7e:	f7fe ffcb 	bl	8001c18 <PrintToLCD>
		lcd_set_xy(5,1);
 8002c82:	2005      	movs	r0, #5
 8002c84:	4631      	mov	r1, r6
 8002c86:	f7fe ff47 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("OFF ");
 8002c8a:	481f      	ldr	r0, [pc, #124]	; (8002d08 <MenuBatterySimilation+0xd4>)
		PrintToLCD("ON ");
 8002c8c:	f7fe ffc4 	bl	8001c18 <PrintToLCD>
    if (key == KEY_NEXT)
 8002c90:	2f02      	cmp	r7, #2
 8002c92:	d12a      	bne.n	8002cea <MenuBatterySimilation+0xb6>
    	if (On_off == 0)
 8002c94:	782b      	ldrb	r3, [r5, #0]
 8002c96:	bb13      	cbnz	r3, 8002cde <MenuBatterySimilation+0xaa>
    		OUT_ON();
 8002c98:	f7ff fd04 	bl	80026a4 <OUT_ON>
}
 8002c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		LOAD_ON();
 8002ca0:	f7ff bede 	b.w	8002a60 <LOAD_ON>
		PrintToLCD(itoa_koma(U_OUT,2));
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <MenuBatterySimilation+0xd8>)
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	8818      	ldrh	r0, [r3, #0]
 8002caa:	f7fe fba1 	bl	80013f0 <itoa_koma>
 8002cae:	f7fe ffb3 	bl	8001c18 <PrintToLCD>
		PrintToLCD("V  ");
 8002cb2:	4813      	ldr	r0, [pc, #76]	; (8002d00 <MenuBatterySimilation+0xcc>)
 8002cb4:	f7fe ffb0 	bl	8001c18 <PrintToLCD>
		lcd_set_xy(7,0);
 8002cb8:	2100      	movs	r1, #0
 8002cba:	2007      	movs	r0, #7
 8002cbc:	f7fe ff2c 	bl	8001b18 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002cc0:	8820      	ldrh	r0, [r4, #0]
 8002cc2:	b200      	sxth	r0, r0
 8002cc4:	f7fe fb20 	bl	8001308 <itoa>
 8002cc8:	f7fe ffa6 	bl	8001c18 <PrintToLCD>
		PrintToLCD("mA    ");
 8002ccc:	4810      	ldr	r0, [pc, #64]	; (8002d10 <MenuBatterySimilation+0xdc>)
 8002cce:	f7fe ffa3 	bl	8001c18 <PrintToLCD>
		lcd_set_xy(6,1);
 8002cd2:	2006      	movs	r0, #6
 8002cd4:	4631      	mov	r1, r6
 8002cd6:	f7fe ff1f 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("ON ");
 8002cda:	480e      	ldr	r0, [pc, #56]	; (8002d14 <MenuBatterySimilation+0xe0>)
 8002cdc:	e7d6      	b.n	8002c8c <MenuBatterySimilation+0x58>
    		OUT_OFF();
 8002cde:	f7ff fccb 	bl	8002678 <OUT_OFF>
}
 8002ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		LOAD_OFF();
 8002ce6:	f7ff bf37 	b.w	8002b58 <LOAD_OFF>
}
 8002cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cee:	bf00      	nop
 8002cf0:	200007a0 	.word	0x200007a0
 8002cf4:	200007a2 	.word	0x200007a2
 8002cf8:	2000085a 	.word	0x2000085a
 8002cfc:	20000874 	.word	0x20000874
 8002d00:	08006285 	.word	0x08006285
 8002d04:	08006289 	.word	0x08006289
 8002d08:	0800613a 	.word	0x0800613a
 8002d0c:	2000086e 	.word	0x2000086e
 8002d10:	0800628f 	.word	0x0800628f
 8002d14:	08006296 	.word	0x08006296

08002d18 <charge>:
{
 8002d18:	b508      	push	{r3, lr}
	LOAD_OFF();
 8002d1a:	f7ff ff1d 	bl	8002b58 <LOAD_OFF>
	OUT_ON();
 8002d1e:	f7ff fcc1 	bl	80026a4 <OUT_ON>
}
 8002d22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(50);
 8002d26:	2032      	movs	r0, #50	; 0x32
 8002d28:	f7fe b9d2 	b.w	80010d0 <delay_ms>

08002d2c <charge1>:
{
 8002d2c:	b508      	push	{r3, lr}
	if (ChargeDischargeState !=1)
 8002d2e:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <charge1+0x38>)
 8002d30:	f993 2000 	ldrsb.w	r2, [r3]
 8002d34:	2a01      	cmp	r2, #1
 8002d36:	d013      	beq.n	8002d60 <charge1+0x34>
		ChargeDischargeState = 1;
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]
		LOAD_OFF();
 8002d3c:	f7ff ff0c 	bl	8002b58 <LOAD_OFF>
		OUT_ON();
 8002d40:	f7ff fcb0 	bl	80026a4 <OUT_ON>
		TimerForReadyMeasurement_ms = 0;
 8002d44:	2200      	movs	r2, #0
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <charge1+0x3c>)
		delay_ms(50);
 8002d48:	2032      	movs	r0, #50	; 0x32
		TimerForReadyMeasurement_ms = 0;
 8002d4a:	601a      	str	r2, [r3, #0]
		delay_ms(50);
 8002d4c:	f7fe f9c0 	bl	80010d0 <delay_ms>
		logDebug("Charge");
 8002d50:	4806      	ldr	r0, [pc, #24]	; (8002d6c <charge1+0x40>)
 8002d52:	f002 fbb3 	bl	80054bc <printToBufferWithoutEndUART1>
}
 8002d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logDebug("Charge");
 8002d5a:	4805      	ldr	r0, [pc, #20]	; (8002d70 <charge1+0x44>)
 8002d5c:	f002 bb44 	b.w	80053e8 <printToBufferUART1>
}
 8002d60:	bd08      	pop	{r3, pc}
 8002d62:	bf00      	nop
 8002d64:	2000078a 	.word	0x2000078a
 8002d68:	200007cc 	.word	0x200007cc
 8002d6c:	08005eb1 	.word	0x08005eb1
 8002d70:	08006fb4 	.word	0x08006fb4

08002d74 <MenuTraining_new>:
{
 8002d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (EnterInMenu_Status == 0)
 8002d78:	4abc      	ldr	r2, [pc, #752]	; (800306c <MenuTraining_new+0x2f8>)
{
 8002d7a:	b087      	sub	sp, #28
	if (EnterInMenu_Status == 0)
 8002d7c:	7813      	ldrb	r3, [r2, #0]
{
 8002d7e:	9001      	str	r0, [sp, #4]
	if (EnterInMenu_Status == 0)
 8002d80:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8002d84:	9202      	str	r2, [sp, #8]
 8002d86:	f8df a344 	ldr.w	sl, [pc, #836]	; 80030cc <MenuTraining_new+0x358>
 8002d8a:	f8df b344 	ldr.w	fp, [pc, #836]	; 80030d0 <MenuTraining_new+0x35c>
 8002d8e:	f8df 9344 	ldr.w	r9, [pc, #836]	; 80030d4 <MenuTraining_new+0x360>
 8002d92:	4fb7      	ldr	r7, [pc, #732]	; (8003070 <MenuTraining_new+0x2fc>)
 8002d94:	f8df 8340 	ldr.w	r8, [pc, #832]	; 80030d8 <MenuTraining_new+0x364>
 8002d98:	4db6      	ldr	r5, [pc, #728]	; (8003074 <MenuTraining_new+0x300>)
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d13d      	bne.n	8002e1a <MenuTraining_new+0xa6>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8002d9e:	4bb6      	ldr	r3, [pc, #728]	; (8003078 <MenuTraining_new+0x304>)
 8002da0:	881a      	ldrh	r2, [r3, #0]
 8002da2:	4bb6      	ldr	r3, [pc, #728]	; (800307c <MenuTraining_new+0x308>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	3305      	adds	r3, #5
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d915      	bls.n	8002dd8 <MenuTraining_new+0x64>
			lcd_set_xy(0,0);
 8002dac:	4621      	mov	r1, r4
 8002dae:	4620      	mov	r0, r4
 8002db0:	f7fe feb2 	bl	8001b18 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8002db4:	48b2      	ldr	r0, [pc, #712]	; (8003080 <MenuTraining_new+0x30c>)
 8002db6:	f7fe ff2f 	bl	8001c18 <PrintToLCD>
			delay_ms(2000);
 8002dba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002dbe:	f7fe f987 	bl	80010d0 <delay_ms>
			lcd_set_xy(0,0);
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f7fe fea7 	bl	8001b18 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8002dca:	48ae      	ldr	r0, [pc, #696]	; (8003084 <MenuTraining_new+0x310>)
 8002dcc:	f7fe ff24 	bl	8001c18 <PrintToLCD>
			delay_ms(3000);
 8002dd0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002dd4:	f7fe f97c 	bl	80010d0 <delay_ms>
		EnterInMenu_Status = 1;
 8002dd8:	2601      	movs	r6, #1
		ChargeStatusForTimer = 0;
 8002dda:	2400      	movs	r4, #0
		EnterInMenu_Status = 1;
 8002ddc:	9b02      	ldr	r3, [sp, #8]
 8002dde:	701e      	strb	r6, [r3, #0]
		DischargeTimeSec_Previous = 0;
 8002de0:	4ba9      	ldr	r3, [pc, #676]	; (8003088 <MenuTraining_new+0x314>)
		ChargeStatusForTimer = 0;
 8002de2:	f88a 4000 	strb.w	r4, [sl]
		DisChargeStatusForTimer = 0;
 8002de6:	f88b 4000 	strb.w	r4, [fp]
		ChargeTimeSec = 0;
 8002dea:	f8c9 4000 	str.w	r4, [r9]
		DischargeTimeSec = 0;
 8002dee:	603c      	str	r4, [r7, #0]
		DischargeTimeSec_Previous = 0;
 8002df0:	601c      	str	r4, [r3, #0]
		BatteryCapacityCharge = 0;
 8002df2:	f8c8 4000 	str.w	r4, [r8]
		BatteryCapacityDischargeCurrent = 0;
 8002df6:	602c      	str	r4, [r5, #0]
		ChargeStatusForTimer = 1;
 8002df8:	f88a 6000 	strb.w	r6, [sl]
		charge1();
 8002dfc:	f7ff ff96 	bl	8002d2c <charge1>
		ChargeDischargeStatus = CHARGEs;
 8002e00:	4ba2      	ldr	r3, [pc, #648]	; (800308c <MenuTraining_new+0x318>)
		lcd_set_xy(0,0);
 8002e02:	4621      	mov	r1, r4
 8002e04:	4620      	mov	r0, r4
		ChargeDischargeStatus = CHARGEs;
 8002e06:	701e      	strb	r6, [r3, #0]
		lcd_set_xy(0,0);
 8002e08:	f7fe fe86 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("Testing Battery.");
 8002e0c:	48a0      	ldr	r0, [pc, #640]	; (8003090 <MenuTraining_new+0x31c>)
 8002e0e:	f7fe ff03 	bl	8001c18 <PrintToLCD>
		delay_ms(1000);
 8002e12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e16:	f7fe f95b 	bl	80010d0 <delay_ms>
	if (Module16(Current)>5)
 8002e1a:	4c9e      	ldr	r4, [pc, #632]	; (8003094 <MenuTraining_new+0x320>)
 8002e1c:	8820      	ldrh	r0, [r4, #0]
 8002e1e:	b200      	sxth	r0, r0
 8002e20:	f7fe fbb7 	bl	8001592 <Module16>
 8002e24:	2805      	cmp	r0, #5
 8002e26:	9404      	str	r4, [sp, #16]
 8002e28:	f340 81d1 	ble.w	80031ce <MenuTraining_new+0x45a>
		if (U_OUT < SettingsData.LowVoltage && ChargeDischargeStatus == DISCHARGEs  && TimerForReadyMeasurement_ms>1000)
 8002e2c:	4b9a      	ldr	r3, [pc, #616]	; (8003098 <MenuTraining_new+0x324>)
 8002e2e:	4e93      	ldr	r6, [pc, #588]	; (800307c <MenuTraining_new+0x308>)
 8002e30:	881a      	ldrh	r2, [r3, #0]
 8002e32:	69b1      	ldr	r1, [r6, #24]
 8002e34:	9303      	str	r3, [sp, #12]
 8002e36:	4291      	cmp	r1, r2
 8002e38:	d920      	bls.n	8002e7c <MenuTraining_new+0x108>
 8002e3a:	4c94      	ldr	r4, [pc, #592]	; (800308c <MenuTraining_new+0x318>)
 8002e3c:	7822      	ldrb	r2, [r4, #0]
 8002e3e:	2a02      	cmp	r2, #2
 8002e40:	d11c      	bne.n	8002e7c <MenuTraining_new+0x108>
 8002e42:	4b96      	ldr	r3, [pc, #600]	; (800309c <MenuTraining_new+0x328>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e4a:	d917      	bls.n	8002e7c <MenuTraining_new+0x108>
			DisChargeStatusForTimer = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f88b 3000 	strb.w	r3, [fp]
			if (BatteryCapacityDischargeCurrent/3600 > 100)
 8002e52:	6829      	ldr	r1, [r5, #0]
 8002e54:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <MenuTraining_new+0x32c>)
 8002e56:	4299      	cmp	r1, r3
 8002e58:	d903      	bls.n	8002e62 <MenuTraining_new+0xee>
				MenuTraining_WriteInLOG(BatteryCapacityDischargeCurrent,DischargeTimeSec,DISCHARGE_l);
 8002e5a:	6828      	ldr	r0, [r5, #0]
 8002e5c:	6839      	ldr	r1, [r7, #0]
 8002e5e:	f7ff f885 	bl	8001f6c <MenuTraining_WriteInLOG>
			ChargeTimeSec = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8c9 3000 	str.w	r3, [r9]
			BatteryCapacityCharge = 0;
 8002e68:	f8c8 3000 	str.w	r3, [r8]
			ChargeStatusForTimer = 1;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f88a 3000 	strb.w	r3, [sl]
 8002e72:	9305      	str	r3, [sp, #20]
			charge1();
 8002e74:	f7ff ff5a 	bl	8002d2c <charge1>
			ChargeDischargeStatus = CHARGEs;
 8002e78:	9b05      	ldr	r3, [sp, #20]
 8002e7a:	7023      	strb	r3, [r4, #0]
		if ((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))
 8002e7c:	9b03      	ldr	r3, [sp, #12]
 8002e7e:	6a32      	ldr	r2, [r6, #32]
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d208      	bcs.n	8002e98 <MenuTraining_new+0x124>
 8002e86:	4b81      	ldr	r3, [pc, #516]	; (800308c <MenuTraining_new+0x318>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d104      	bne.n	8002e98 <MenuTraining_new+0x124>
 8002e8e:	4b83      	ldr	r3, [pc, #524]	; (800309c <MenuTraining_new+0x328>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e96:	d809      	bhi.n	8002eac <MenuTraining_new+0x138>
 8002e98:	4b82      	ldr	r3, [pc, #520]	; (80030a4 <MenuTraining_new+0x330>)
 8002e9a:	f8d9 2000 	ldr.w	r2, [r9]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d923      	bls.n	8002eec <MenuTraining_new+0x178>
 8002ea4:	4b79      	ldr	r3, [pc, #484]	; (800308c <MenuTraining_new+0x318>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d11f      	bne.n	8002eec <MenuTraining_new+0x178>
			ChargeStatusForTimer = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f88a 3000 	strb.w	r3, [sl]
			if (BatteryCapacityCharge/3600 > 100)
 8002eb2:	f8d8 2000 	ldr.w	r2, [r8]
 8002eb6:	4b7a      	ldr	r3, [pc, #488]	; (80030a0 <MenuTraining_new+0x32c>)
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d906      	bls.n	8002eca <MenuTraining_new+0x156>
				MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8002ebc:	f8d8 0000 	ldr.w	r0, [r8]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f8d9 1000 	ldr.w	r1, [r9]
 8002ec6:	f7ff f851 	bl	8001f6c <MenuTraining_WriteInLOG>
			DischargeTimeSec_Previous = DischargeTimeSec;
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	4b6e      	ldr	r3, [pc, #440]	; (8003088 <MenuTraining_new+0x314>)
 8002ece:	601a      	str	r2, [r3, #0]
			SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 8002ed0:	682a      	ldr	r2, [r5, #0]
 8002ed2:	4b75      	ldr	r3, [pc, #468]	; (80030a8 <MenuTraining_new+0x334>)
 8002ed4:	609a      	str	r2, [r3, #8]
			DischargeTimeSec = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	603b      	str	r3, [r7, #0]
			BatteryCapacityDischargeCurrent = 0;
 8002eda:	602b      	str	r3, [r5, #0]
			DisChargeStatusForTimer = 1;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f88b 3000 	strb.w	r3, [fp]
			discharge1();
 8002ee2:	f7ff fe15 	bl	8002b10 <discharge1>
			ChargeDischargeStatus = DISCHARGEs;
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	4b68      	ldr	r3, [pc, #416]	; (800308c <MenuTraining_new+0x318>)
 8002eea:	701a      	strb	r2, [r3, #0]
		if (key == KEY_NEXT)
 8002eec:	9a01      	ldr	r2, [sp, #4]
 8002eee:	4c6f      	ldr	r4, [pc, #444]	; (80030ac <MenuTraining_new+0x338>)
 8002ef0:	2a02      	cmp	r2, #2
 8002ef2:	f994 3000 	ldrsb.w	r3, [r4]
 8002ef6:	f040 8159 	bne.w	80031ac <MenuTraining_new+0x438>
			CountShow++;
 8002efa:	3301      	adds	r3, #1
 8002efc:	b25b      	sxtb	r3, r3
			if (CountShow==MAX_SCREENS__MENU_TRAINING) CountShow=0;
 8002efe:	2b05      	cmp	r3, #5
 8002f00:	bf08      	it	eq
 8002f02:	2300      	moveq	r3, #0
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_TRAINING-1;
 8002f04:	7023      	strb	r3, [r4, #0]
		if(CountShow == 0)
 8002f06:	f994 3000 	ldrsb.w	r3, [r4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d132      	bne.n	8002f74 <MenuTraining_new+0x200>
			lcd_set_xy(0,0);
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4618      	mov	r0, r3
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	f7fe fe00 	bl	8001b18 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 8002f18:	9b03      	ldr	r3, [sp, #12]
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	8818      	ldrh	r0, [r3, #0]
 8002f1e:	f7fe fa67 	bl	80013f0 <itoa_koma>
 8002f22:	f7fe fe79 	bl	8001c18 <PrintToLCD>
			PrintToLCD("V ");
 8002f26:	4862      	ldr	r0, [pc, #392]	; (80030b0 <MenuTraining_new+0x33c>)
 8002f28:	f7fe fe76 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa(Current));
 8002f2c:	9b04      	ldr	r3, [sp, #16]
 8002f2e:	8818      	ldrh	r0, [r3, #0]
 8002f30:	b200      	sxth	r0, r0
 8002f32:	f7fe f9e9 	bl	8001308 <itoa>
 8002f36:	f7fe fe6f 	bl	8001c18 <PrintToLCD>
			PrintToLCD("mA     ");
 8002f3a:	485e      	ldr	r0, [pc, #376]	; (80030b4 <MenuTraining_new+0x340>)
 8002f3c:	f7fe fe6c 	bl	8001c18 <PrintToLCD>
			lcd_set_xy(6,1);
 8002f40:	2101      	movs	r1, #1
 8002f42:	2006      	movs	r0, #6
 8002f44:	f7fe fde8 	bl	8001b18 <lcd_set_xy>
			LcdOutbyNumber(4,1);
 8002f48:	2101      	movs	r1, #1
 8002f4a:	2004      	movs	r0, #4
 8002f4c:	f7fe fe0c 	bl	8001b68 <LcdOutbyNumber>
			if (Status_Out ==1)
 8002f50:	4a59      	ldr	r2, [pc, #356]	; (80030b8 <MenuTraining_new+0x344>)
 8002f52:	9b01      	ldr	r3, [sp, #4]
 8002f54:	7812      	ldrb	r2, [r2, #0]
 8002f56:	2a01      	cmp	r2, #1
 8002f58:	f040 8132 	bne.w	80031c0 <MenuTraining_new+0x44c>
				lcd_set_xy(7,1);
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	2007      	movs	r0, #7
 8002f60:	9303      	str	r3, [sp, #12]
 8002f62:	9201      	str	r2, [sp, #4]
 8002f64:	f7fe fdd8 	bl	8001b18 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8002f68:	9a01      	ldr	r2, [sp, #4]
 8002f6a:	9b03      	ldr	r3, [sp, #12]
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4618      	mov	r0, r3
				LcdOutbyNumber(2,1);//discharge
 8002f70:	f7fe fdfa 	bl	8001b68 <LcdOutbyNumber>
		if(CountShow == 1)
 8002f74:	f994 3000 	ldrsb.w	r3, [r4]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d128      	bne.n	8002fce <MenuTraining_new+0x25a>
			lcd_set_xy(0,0);
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4608      	mov	r0, r1
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	f7fe fdc9 	bl	8001b18 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8002f86:	6930      	ldr	r0, [r6, #16]
 8002f88:	f7fe f9be 	bl	8001308 <itoa>
 8002f8c:	f7fe fe44 	bl	8001c18 <PrintToLCD>
			PrintToLCD("h ");
 8002f90:	484a      	ldr	r0, [pc, #296]	; (80030bc <MenuTraining_new+0x348>)
 8002f92:	f7fe fe41 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8002f96:	220a      	movs	r2, #10
 8002f98:	9b01      	ldr	r3, [sp, #4]
 8002f9a:	69b0      	ldr	r0, [r6, #24]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	fbb0 f0f2 	udiv	r0, r0, r2
 8002fa2:	9303      	str	r3, [sp, #12]
 8002fa4:	9201      	str	r2, [sp, #4]
 8002fa6:	f7fe fa23 	bl	80013f0 <itoa_koma>
 8002faa:	f7fe fe35 	bl	8001c18 <PrintToLCD>
			PrintToLCD("V ");
 8002fae:	4840      	ldr	r0, [pc, #256]	; (80030b0 <MenuTraining_new+0x33c>)
 8002fb0:	f7fe fe32 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002fb4:	9b03      	ldr	r3, [sp, #12]
 8002fb6:	9a01      	ldr	r2, [sp, #4]
 8002fb8:	6a30      	ldr	r0, [r6, #32]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	fbb0 f0f2 	udiv	r0, r0, r2
 8002fc0:	f7fe fa16 	bl	80013f0 <itoa_koma>
 8002fc4:	f7fe fe28 	bl	8001c18 <PrintToLCD>
			PrintToLCD("V     ");
 8002fc8:	483d      	ldr	r0, [pc, #244]	; (80030c0 <MenuTraining_new+0x34c>)
 8002fca:	f7fe fe25 	bl	8001c18 <PrintToLCD>
		if(CountShow == 2)
 8002fce:	f994 6000 	ldrsb.w	r6, [r4]
 8002fd2:	2e02      	cmp	r6, #2
 8002fd4:	d121      	bne.n	800301a <MenuTraining_new+0x2a6>
			lcd_set_xy(0,0);
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4608      	mov	r0, r1
 8002fda:	f7fe fd9d 	bl	8001b18 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 8002fde:	2101      	movs	r1, #1
 8002fe0:	4630      	mov	r0, r6
 8002fe2:	f7fe fdc1 	bl	8001b68 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f7fe fd95 	bl	8001b18 <lcd_set_xy>
			PrintToLCD(" ");
 8002fee:	4835      	ldr	r0, [pc, #212]	; (80030c4 <MenuTraining_new+0x350>)
 8002ff0:	f7fe fe12 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600));
 8002ff4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002ff8:	6828      	ldr	r0, [r5, #0]
 8002ffa:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ffe:	f7fe f983 	bl	8001308 <itoa>
 8003002:	f7fe fe09 	bl	8001c18 <PrintToLCD>
			PrintToLCD("mAH      ");
 8003006:	4830      	ldr	r0, [pc, #192]	; (80030c8 <MenuTraining_new+0x354>)
 8003008:	f7fe fe06 	bl	8001c18 <PrintToLCD>
			lcd_set_xy(3,1);
 800300c:	2003      	movs	r0, #3
 800300e:	2101      	movs	r1, #1
 8003010:	f7fe fd82 	bl	8001b18 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 8003014:	6838      	ldr	r0, [r7, #0]
 8003016:	f7ff faf9 	bl	800260c <ClockOnLCD_noSec>
		if(CountShow == 3)
 800301a:	f994 6000 	ldrsb.w	r6, [r4]
 800301e:	2e03      	cmp	r6, #3
 8003020:	d15c      	bne.n	80030dc <MenuTraining_new+0x368>
			lcd_set_xy(0,0);
 8003022:	2100      	movs	r1, #0
 8003024:	4608      	mov	r0, r1
 8003026:	f7fe fd77 	bl	8001b18 <lcd_set_xy>
			LcdOutbyNumber(0,1);//charge
 800302a:	2101      	movs	r1, #1
 800302c:	2000      	movs	r0, #0
 800302e:	f7fe fd9b 	bl	8001b68 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 8003032:	2100      	movs	r1, #0
 8003034:	2001      	movs	r0, #1
 8003036:	f7fe fd6f 	bl	8001b18 <lcd_set_xy>
			PrintToLCD(" ");
 800303a:	4822      	ldr	r0, [pc, #136]	; (80030c4 <MenuTraining_new+0x350>)
 800303c:	f7fe fdec 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityCharge/3600));
 8003040:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003044:	f8d8 0000 	ldr.w	r0, [r8]
 8003048:	fbb0 f0f3 	udiv	r0, r0, r3
 800304c:	f7fe f95c 	bl	8001308 <itoa>
 8003050:	f7fe fde2 	bl	8001c18 <PrintToLCD>
			PrintToLCD("mAH      ");
 8003054:	481c      	ldr	r0, [pc, #112]	; (80030c8 <MenuTraining_new+0x354>)
 8003056:	f7fe fddf 	bl	8001c18 <PrintToLCD>
			lcd_set_xy(3,1);
 800305a:	4630      	mov	r0, r6
 800305c:	2101      	movs	r1, #1
 800305e:	f7fe fd5b 	bl	8001b18 <lcd_set_xy>
			ClockOnLCD_noSec(ChargeTimeSec);
 8003062:	f8d9 0000 	ldr.w	r0, [r9]
 8003066:	f7ff fad1 	bl	800260c <ClockOnLCD_noSec>
 800306a:	e037      	b.n	80030dc <MenuTraining_new+0x368>
 800306c:	200007a0 	.word	0x200007a0
 8003070:	20000798 	.word	0x20000798
 8003074:	20000780 	.word	0x20000780
 8003078:	20000874 	.word	0x20000874
 800307c:	20000154 	.word	0x20000154
 8003080:	0800643b 	.word	0x0800643b
 8003084:	0800644c 	.word	0x0800644c
 8003088:	2000079c 	.word	0x2000079c
 800308c:	20000270 	.word	0x20000270
 8003090:	0800645d 	.word	0x0800645d
 8003094:	2000085a 	.word	0x2000085a
 8003098:	2000086e 	.word	0x2000086e
 800309c:	200007cc 	.word	0x200007cc
 80030a0:	00058c4f 	.word	0x00058c4f
 80030a4:	20000a18 	.word	0x20000a18
 80030a8:	200000f4 	.word	0x200000f4
 80030ac:	20000791 	.word	0x20000791
 80030b0:	08006378 	.word	0x08006378
 80030b4:	0800646e 	.word	0x0800646e
 80030b8:	200007a9 	.word	0x200007a9
 80030bc:	08005c16 	.word	0x08005c16
 80030c0:	0800636e 	.word	0x0800636e
 80030c4:	080063a0 	.word	0x080063a0
 80030c8:	08006476 	.word	0x08006476
 80030cc:	2000078b 	.word	0x2000078b
 80030d0:	20000794 	.word	0x20000794
 80030d4:	2000078c 	.word	0x2000078c
 80030d8:	2000077c 	.word	0x2000077c
		if(CountShow == 4)
 80030dc:	f994 3000 	ldrsb.w	r3, [r4]
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d123      	bne.n	800312c <MenuTraining_new+0x3b8>
			lcd_set_xy(0,0);
 80030e4:	2100      	movs	r1, #0
 80030e6:	4608      	mov	r0, r1
 80030e8:	f7fe fd16 	bl	8001b18 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 80030ec:	2101      	movs	r1, #1
 80030ee:	2002      	movs	r0, #2
 80030f0:	f7fe fd3a 	bl	8001b68 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 80030f4:	2100      	movs	r1, #0
 80030f6:	2001      	movs	r0, #1
 80030f8:	f7fe fd0e 	bl	8001b18 <lcd_set_xy>
			PrintToLCD("P ");
 80030fc:	483a      	ldr	r0, [pc, #232]	; (80031e8 <MenuTraining_new+0x474>)
 80030fe:	f7fe fd8b 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa(SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue/3600));
 8003102:	4b3a      	ldr	r3, [pc, #232]	; (80031ec <MenuTraining_new+0x478>)
 8003104:	6898      	ldr	r0, [r3, #8]
 8003106:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800310a:	fbb0 f0f3 	udiv	r0, r0, r3
 800310e:	f7fe f8fb 	bl	8001308 <itoa>
 8003112:	f7fe fd81 	bl	8001c18 <PrintToLCD>
			PrintToLCD("mAH     ");
 8003116:	4836      	ldr	r0, [pc, #216]	; (80031f0 <MenuTraining_new+0x47c>)
 8003118:	f7fe fd7e 	bl	8001c18 <PrintToLCD>
			lcd_set_xy(3,1);
 800311c:	2003      	movs	r0, #3
 800311e:	2101      	movs	r1, #1
 8003120:	f7fe fcfa 	bl	8001b18 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec_Previous);
 8003124:	4b33      	ldr	r3, [pc, #204]	; (80031f4 <MenuTraining_new+0x480>)
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	f7ff fa70 	bl	800260c <ClockOnLCD_noSec>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 800312c:	4832      	ldr	r0, [pc, #200]	; (80031f8 <MenuTraining_new+0x484>)
 800312e:	f002 f9c5 	bl	80054bc <printToBufferWithoutEndUART1>
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	2200      	movs	r2, #0
 8003136:	7819      	ldrb	r1, [r3, #0]
 8003138:	4830      	ldr	r0, [pc, #192]	; (80031fc <MenuTraining_new+0x488>)
 800313a:	f002 fa03 	bl	8005544 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 800313e:	482e      	ldr	r0, [pc, #184]	; (80031f8 <MenuTraining_new+0x484>)
 8003140:	f002 f9bc 	bl	80054bc <printToBufferWithoutEndUART1>
 8003144:	f89a 1000 	ldrb.w	r1, [sl]
 8003148:	2200      	movs	r2, #0
 800314a:	482d      	ldr	r0, [pc, #180]	; (8003200 <MenuTraining_new+0x48c>)
 800314c:	f002 f9fa 	bl	8005544 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003150:	4829      	ldr	r0, [pc, #164]	; (80031f8 <MenuTraining_new+0x484>)
 8003152:	f002 f9b3 	bl	80054bc <printToBufferWithoutEndUART1>
 8003156:	f8d9 1000 	ldr.w	r1, [r9]
 800315a:	2200      	movs	r2, #0
 800315c:	4829      	ldr	r0, [pc, #164]	; (8003204 <MenuTraining_new+0x490>)
 800315e:	f002 f9f1 	bl	8005544 <printToBufferUART1D>
	logDebugD("BatteryCapacityCharge: ",BatteryCapacityCharge,0);
 8003162:	4825      	ldr	r0, [pc, #148]	; (80031f8 <MenuTraining_new+0x484>)
 8003164:	f002 f9aa 	bl	80054bc <printToBufferWithoutEndUART1>
 8003168:	f8d8 1000 	ldr.w	r1, [r8]
 800316c:	2200      	movs	r2, #0
 800316e:	4826      	ldr	r0, [pc, #152]	; (8003208 <MenuTraining_new+0x494>)
 8003170:	f002 f9e8 	bl	8005544 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8003174:	4820      	ldr	r0, [pc, #128]	; (80031f8 <MenuTraining_new+0x484>)
 8003176:	f002 f9a1 	bl	80054bc <printToBufferWithoutEndUART1>
 800317a:	f89b 1000 	ldrb.w	r1, [fp]
 800317e:	2200      	movs	r2, #0
 8003180:	4822      	ldr	r0, [pc, #136]	; (800320c <MenuTraining_new+0x498>)
 8003182:	f002 f9df 	bl	8005544 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003186:	481c      	ldr	r0, [pc, #112]	; (80031f8 <MenuTraining_new+0x484>)
 8003188:	f002 f998 	bl	80054bc <printToBufferWithoutEndUART1>
 800318c:	6839      	ldr	r1, [r7, #0]
 800318e:	2200      	movs	r2, #0
 8003190:	481f      	ldr	r0, [pc, #124]	; (8003210 <MenuTraining_new+0x49c>)
 8003192:	f002 f9d7 	bl	8005544 <printToBufferUART1D>
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 8003196:	4818      	ldr	r0, [pc, #96]	; (80031f8 <MenuTraining_new+0x484>)
 8003198:	f002 f990 	bl	80054bc <printToBufferWithoutEndUART1>
 800319c:	2200      	movs	r2, #0
 800319e:	6829      	ldr	r1, [r5, #0]
 80031a0:	481c      	ldr	r0, [pc, #112]	; (8003214 <MenuTraining_new+0x4a0>)
}
 80031a2:	b007      	add	sp, #28
 80031a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 80031a8:	f002 b9cc 	b.w	8005544 <printToBufferUART1D>
		if (key == KEY_BACK)
 80031ac:	9a01      	ldr	r2, [sp, #4]
 80031ae:	2a01      	cmp	r2, #1
 80031b0:	f47f aea9 	bne.w	8002f06 <MenuTraining_new+0x192>
			CountShow--;
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_TRAINING-1;
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bfb8      	it	lt
 80031bc:	2304      	movlt	r3, #4
 80031be:	e6a1      	b.n	8002f04 <MenuTraining_new+0x190>
				lcd_set_xy(7,1);
 80031c0:	2101      	movs	r1, #1
 80031c2:	2007      	movs	r0, #7
 80031c4:	f7fe fca8 	bl	8001b18 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 80031c8:	2101      	movs	r1, #1
 80031ca:	2002      	movs	r0, #2
 80031cc:	e6d0      	b.n	8002f70 <MenuTraining_new+0x1fc>
		if (TimerForReadyMeasurement_ms>1000)
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <MenuTraining_new+0x4a4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031d6:	d9a9      	bls.n	800312c <MenuTraining_new+0x3b8>
			lcd_set_xy(0,0);
 80031d8:	2100      	movs	r1, #0
 80031da:	4608      	mov	r0, r1
 80031dc:	f7fe fc9c 	bl	8001b18 <lcd_set_xy>
			PrintToLCD("NO/BAD Battery  ");
 80031e0:	480e      	ldr	r0, [pc, #56]	; (800321c <MenuTraining_new+0x4a8>)
 80031e2:	f7fe fd19 	bl	8001c18 <PrintToLCD>
 80031e6:	e7a1      	b.n	800312c <MenuTraining_new+0x3b8>
 80031e8:	08006480 	.word	0x08006480
 80031ec:	200000f4 	.word	0x200000f4
 80031f0:	08006483 	.word	0x08006483
 80031f4:	2000079c 	.word	0x2000079c
 80031f8:	08005eb1 	.word	0x08005eb1
 80031fc:	0800649d 	.word	0x0800649d
 8003200:	080064b2 	.word	0x080064b2
 8003204:	080064c7 	.word	0x080064c7
 8003208:	080064d7 	.word	0x080064d7
 800320c:	080064ef 	.word	0x080064ef
 8003210:	08006507 	.word	0x08006507
 8003214:	0800651a 	.word	0x0800651a
 8003218:	200007cc 	.word	0x200007cc
 800321c:	0800648c 	.word	0x0800648c

08003220 <MenuSwing>:
   	lcd_set_xy(0,0);
 8003220:	2100      	movs	r1, #0
{
 8003222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003224:	4606      	mov	r6, r0
   	lcd_set_xy(0,0);
 8003226:	4608      	mov	r0, r1
 8003228:	f7fe fc76 	bl	8001b18 <lcd_set_xy>
       	EnterInMenu_Status = 1;
 800322c:	2201      	movs	r2, #1
 800322e:	4b66      	ldr	r3, [pc, #408]	; (80033c8 <MenuSwing+0x1a8>)
 8003230:	701a      	strb	r2, [r3, #0]
       	if (InitiStatus==0)
 8003232:	4b66      	ldr	r3, [pc, #408]	; (80033cc <MenuSwing+0x1ac>)
 8003234:	7819      	ldrb	r1, [r3, #0]
 8003236:	b911      	cbnz	r1, 800323e <MenuSwing+0x1e>
       		InitiStatus=1;
 8003238:	701a      	strb	r2, [r3, #0]
       		Start_Timer_sec();
 800323a:	f7ff f9db 	bl	80025f4 <Start_Timer_sec>
       if (Timer_Sec<=SettingsData.Swing_Chrg_time)
 800323e:	4d64      	ldr	r5, [pc, #400]	; (80033d0 <MenuSwing+0x1b0>)
 8003240:	4c64      	ldr	r4, [pc, #400]	; (80033d4 <MenuSwing+0x1b4>)
 8003242:	682b      	ldr	r3, [r5, #0]
 8003244:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003246:	429a      	cmp	r2, r3
 8003248:	d311      	bcc.n	800326e <MenuSwing+0x4e>
    	   charge1();
 800324a:	f7ff fd6f 	bl	8002d2c <charge1>
           if (U_OUT>SettingsData.MaxVoltage && TimerForReadyMeasurement_ms>400)
 800324e:	4b62      	ldr	r3, [pc, #392]	; (80033d8 <MenuSwing+0x1b8>)
 8003250:	6a22      	ldr	r2, [r4, #32]
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d20a      	bcs.n	800326e <MenuSwing+0x4e>
 8003258:	4b60      	ldr	r3, [pc, #384]	; (80033dc <MenuSwing+0x1bc>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003260:	d905      	bls.n	800326e <MenuSwing+0x4e>
        	   ReStart_Timer_sec();
 8003262:	f7ff f9c7 	bl	80025f4 <Start_Timer_sec>
               Timer_Sec  = Timer_Sec+ SettingsData.Swing_Chrg_time;
 8003266:	682b      	ldr	r3, [r5, #0]
 8003268:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800326a:	4413      	add	r3, r2
 800326c:	602b      	str	r3, [r5, #0]
       if (Timer_Sec > SettingsData.Swing_Chrg_time)
 800326e:	682b      	ldr	r3, [r5, #0]
 8003270:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003272:	429a      	cmp	r2, r3
 8003274:	d20d      	bcs.n	8003292 <MenuSwing+0x72>
           discharge1();
 8003276:	f7ff fc4b 	bl	8002b10 <discharge1>
           if (U_OUT<SettingsData.LowVoltage && TimerForReadyMeasurement_ms>400)
 800327a:	4b57      	ldr	r3, [pc, #348]	; (80033d8 <MenuSwing+0x1b8>)
 800327c:	69a2      	ldr	r2, [r4, #24]
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d906      	bls.n	8003292 <MenuSwing+0x72>
 8003284:	4b55      	ldr	r3, [pc, #340]	; (80033dc <MenuSwing+0x1bc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800328c:	d901      	bls.n	8003292 <MenuSwing+0x72>
        	   ReStart_Timer_sec();
 800328e:	f7ff f9b1 	bl	80025f4 <Start_Timer_sec>
       if (Timer_Sec > (SettingsData.Swing_Chrg_time+SettingsData.Swing_DChrg_time))
 8003292:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003294:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003296:	682a      	ldr	r2, [r5, #0]
 8003298:	440b      	add	r3, r1
 800329a:	4293      	cmp	r3, r2
 800329c:	d201      	bcs.n	80032a2 <MenuSwing+0x82>
    	   ReStart_Timer_sec();
 800329e:	f7ff f9a9 	bl	80025f4 <Start_Timer_sec>
 80032a2:	4d4f      	ldr	r5, [pc, #316]	; (80033e0 <MenuSwing+0x1c0>)
		if (key == KEY_NEXT)
 80032a4:	2e02      	cmp	r6, #2
 80032a6:	f995 3000 	ldrsb.w	r3, [r5]
 80032aa:	d17d      	bne.n	80033a8 <MenuSwing+0x188>
			CountShow++;
 80032ac:	3301      	adds	r3, #1
 80032ae:	b25b      	sxtb	r3, r3
			if (CountShow==MAXITEM6) CountShow=0;
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	bf08      	it	eq
 80032b4:	2300      	moveq	r3, #0
			if (CountShow<0) CountShow=MAXITEM6-1;
 80032b6:	702b      	strb	r3, [r5, #0]
		if(CountShow == 0)
 80032b8:	f995 6000 	ldrsb.w	r6, [r5]
 80032bc:	bb5e      	cbnz	r6, 8003316 <MenuSwing+0xf6>
			lcd_set_xy(0,0);
 80032be:	4631      	mov	r1, r6
 80032c0:	4630      	mov	r0, r6
 80032c2:	f7fe fc29 	bl	8001b18 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 80032c6:	4b44      	ldr	r3, [pc, #272]	; (80033d8 <MenuSwing+0x1b8>)
 80032c8:	2102      	movs	r1, #2
 80032ca:	8818      	ldrh	r0, [r3, #0]
 80032cc:	f7fe f890 	bl	80013f0 <itoa_koma>
 80032d0:	f7fe fca2 	bl	8001c18 <PrintToLCD>
			PrintToLCD("V ");
 80032d4:	4843      	ldr	r0, [pc, #268]	; (80033e4 <MenuSwing+0x1c4>)
 80032d6:	f7fe fc9f 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa(Current));
 80032da:	4b43      	ldr	r3, [pc, #268]	; (80033e8 <MenuSwing+0x1c8>)
 80032dc:	8818      	ldrh	r0, [r3, #0]
 80032de:	b200      	sxth	r0, r0
 80032e0:	f7fe f812 	bl	8001308 <itoa>
 80032e4:	f7fe fc98 	bl	8001c18 <PrintToLCD>
			PrintToLCD("mA     ");
 80032e8:	4840      	ldr	r0, [pc, #256]	; (80033ec <MenuSwing+0x1cc>)
 80032ea:	f7fe fc95 	bl	8001c18 <PrintToLCD>
			lcd_set_xy(6,1);
 80032ee:	2101      	movs	r1, #1
 80032f0:	2006      	movs	r0, #6
 80032f2:	f7fe fc11 	bl	8001b18 <lcd_set_xy>
			LcdOutbyNumber(5,1);
 80032f6:	2101      	movs	r1, #1
 80032f8:	2005      	movs	r0, #5
 80032fa:	f7fe fc35 	bl	8001b68 <LcdOutbyNumber>
			if (Status_Out ==1)
 80032fe:	4b3c      	ldr	r3, [pc, #240]	; (80033f0 <MenuSwing+0x1d0>)
 8003300:	781f      	ldrb	r7, [r3, #0]
 8003302:	2f01      	cmp	r7, #1
 8003304:	d158      	bne.n	80033b8 <MenuSwing+0x198>
				lcd_set_xy(7,1);
 8003306:	4639      	mov	r1, r7
 8003308:	2007      	movs	r0, #7
 800330a:	f7fe fc05 	bl	8001b18 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 800330e:	4639      	mov	r1, r7
 8003310:	4630      	mov	r0, r6
				LcdOutbyNumber(2,1);//discharge
 8003312:	f7fe fc29 	bl	8001b68 <LcdOutbyNumber>
		if(CountShow == 1)
 8003316:	f995 6000 	ldrsb.w	r6, [r5]
 800331a:	2e01      	cmp	r6, #1
 800331c:	d122      	bne.n	8003364 <MenuSwing+0x144>
			lcd_set_xy(0,0);
 800331e:	2100      	movs	r1, #0
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8003320:	270a      	movs	r7, #10
			lcd_set_xy(0,0);
 8003322:	4608      	mov	r0, r1
 8003324:	f7fe fbf8 	bl	8001b18 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8003328:	6920      	ldr	r0, [r4, #16]
 800332a:	f7fd ffed 	bl	8001308 <itoa>
 800332e:	f7fe fc73 	bl	8001c18 <PrintToLCD>
			PrintToLCD("h ");
 8003332:	4830      	ldr	r0, [pc, #192]	; (80033f4 <MenuSwing+0x1d4>)
 8003334:	f7fe fc70 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8003338:	69a0      	ldr	r0, [r4, #24]
 800333a:	4631      	mov	r1, r6
 800333c:	fbb0 f0f7 	udiv	r0, r0, r7
 8003340:	f7fe f856 	bl	80013f0 <itoa_koma>
 8003344:	f7fe fc68 	bl	8001c18 <PrintToLCD>
			PrintToLCD("V ");
 8003348:	4826      	ldr	r0, [pc, #152]	; (80033e4 <MenuSwing+0x1c4>)
 800334a:	f7fe fc65 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800334e:	6a20      	ldr	r0, [r4, #32]
 8003350:	4631      	mov	r1, r6
 8003352:	fbb0 f0f7 	udiv	r0, r0, r7
 8003356:	f7fe f84b 	bl	80013f0 <itoa_koma>
 800335a:	f7fe fc5d 	bl	8001c18 <PrintToLCD>
			PrintToLCD("V     ");
 800335e:	4826      	ldr	r0, [pc, #152]	; (80033f8 <MenuSwing+0x1d8>)
 8003360:	f7fe fc5a 	bl	8001c18 <PrintToLCD>
		if(CountShow == 2)
 8003364:	f995 3000 	ldrsb.w	r3, [r5]
 8003368:	2b02      	cmp	r3, #2
 800336a:	d12c      	bne.n	80033c6 <MenuSwing+0x1a6>
			lcd_set_xy(0,0);
 800336c:	2100      	movs	r1, #0
 800336e:	4608      	mov	r0, r1
 8003370:	f7fe fbd2 	bl	8001b18 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.Swing_Chrg_time));
 8003374:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003376:	f7fd ffc7 	bl	8001308 <itoa>
 800337a:	f7fe fc4d 	bl	8001c18 <PrintToLCD>
			PrintToLCD("s ");
 800337e:	481f      	ldr	r0, [pc, #124]	; (80033fc <MenuSwing+0x1dc>)
 8003380:	f7fe fc4a 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa(SettingsData.Swing_DChrg_time));
 8003384:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003386:	f7fd ffbf 	bl	8001308 <itoa>
 800338a:	f7fe fc45 	bl	8001c18 <PrintToLCD>
			PrintToLCD("s      ");
 800338e:	481c      	ldr	r0, [pc, #112]	; (8003400 <MenuSwing+0x1e0>)
 8003390:	f7fe fc42 	bl	8001c18 <PrintToLCD>
			lcd_set_xy(3,1);
 8003394:	2003      	movs	r0, #3
 8003396:	2101      	movs	r1, #1
 8003398:	f7fe fbbe 	bl	8001b18 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 800339c:	4b19      	ldr	r3, [pc, #100]	; (8003404 <MenuSwing+0x1e4>)
 800339e:	6818      	ldr	r0, [r3, #0]
}
 80033a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			ClockOnLCD_noSec(DischargeTimeSec);
 80033a4:	f7ff b932 	b.w	800260c <ClockOnLCD_noSec>
		if (key == KEY_BACK)
 80033a8:	2e01      	cmp	r6, #1
 80033aa:	d185      	bne.n	80032b8 <MenuSwing+0x98>
			CountShow--;
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAXITEM6-1;
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bfb8      	it	lt
 80033b4:	2302      	movlt	r3, #2
 80033b6:	e77e      	b.n	80032b6 <MenuSwing+0x96>
				lcd_set_xy(7,1);
 80033b8:	2101      	movs	r1, #1
 80033ba:	2007      	movs	r0, #7
 80033bc:	f7fe fbac 	bl	8001b18 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 80033c0:	2101      	movs	r1, #1
 80033c2:	2002      	movs	r0, #2
 80033c4:	e7a5      	b.n	8003312 <MenuSwing+0xf2>
}
 80033c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033c8:	200007a0 	.word	0x200007a0
 80033cc:	200007a1 	.word	0x200007a1
 80033d0:	200007d0 	.word	0x200007d0
 80033d4:	20000154 	.word	0x20000154
 80033d8:	2000086e 	.word	0x2000086e
 80033dc:	200007cc 	.word	0x200007cc
 80033e0:	20000791 	.word	0x20000791
 80033e4:	08006378 	.word	0x08006378
 80033e8:	2000085a 	.word	0x2000085a
 80033ec:	0800646e 	.word	0x0800646e
 80033f0:	200007a9 	.word	0x200007a9
 80033f4:	08005c16 	.word	0x08005c16
 80033f8:	0800636e 	.word	0x0800636e
 80033fc:	08006211 	.word	0x08006211
 8003400:	08006433 	.word	0x08006433
 8003404:	20000798 	.word	0x20000798

08003408 <OFF>:
{
 8003408:	b508      	push	{r3, lr}
	LOAD_OFF();
 800340a:	f7ff fba5 	bl	8002b58 <LOAD_OFF>
}
 800340e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	OUT_OFF();
 8003412:	f7ff b931 	b.w	8002678 <OUT_OFF>
	...

08003418 <MenuChargeCC_CV>:
	EnterInMenu_Status = 1;
 8003418:	2201      	movs	r2, #1
{
 800341a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (InitiStatus==0)
 800341e:	4e96      	ldr	r6, [pc, #600]	; (8003678 <MenuChargeCC_CV+0x260>)
	EnterInMenu_Status = 1;
 8003420:	4b96      	ldr	r3, [pc, #600]	; (800367c <MenuChargeCC_CV+0x264>)
	if (InitiStatus==0)
 8003422:	7834      	ldrb	r4, [r6, #0]
{
 8003424:	4682      	mov	sl, r0
	EnterInMenu_Status = 1;
 8003426:	701a      	strb	r2, [r3, #0]
 8003428:	4698      	mov	r8, r3
 800342a:	4d95      	ldr	r5, [pc, #596]	; (8003680 <MenuChargeCC_CV+0x268>)
 800342c:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 80036f0 <MenuChargeCC_CV+0x2d8>
 8003430:	4f94      	ldr	r7, [pc, #592]	; (8003684 <MenuChargeCC_CV+0x26c>)
	if (InitiStatus==0)
 8003432:	bb2c      	cbnz	r4, 8003480 <MenuChargeCC_CV+0x68>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8003434:	4b94      	ldr	r3, [pc, #592]	; (8003688 <MenuChargeCC_CV+0x270>)
 8003436:	881a      	ldrh	r2, [r3, #0]
 8003438:	4b94      	ldr	r3, [pc, #592]	; (800368c <MenuChargeCC_CV+0x274>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	3305      	adds	r3, #5
 800343e:	4293      	cmp	r3, r2
 8003440:	d915      	bls.n	800346e <MenuChargeCC_CV+0x56>
			lcd_set_xy(0,0);
 8003442:	4621      	mov	r1, r4
 8003444:	4620      	mov	r0, r4
 8003446:	f7fe fb67 	bl	8001b18 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 800344a:	4891      	ldr	r0, [pc, #580]	; (8003690 <MenuChargeCC_CV+0x278>)
 800344c:	f7fe fbe4 	bl	8001c18 <PrintToLCD>
			delay_ms(2000);
 8003450:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003454:	f7fd fe3c 	bl	80010d0 <delay_ms>
			lcd_set_xy(0,0);
 8003458:	4621      	mov	r1, r4
 800345a:	4620      	mov	r0, r4
 800345c:	f7fe fb5c 	bl	8001b18 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8003460:	488c      	ldr	r0, [pc, #560]	; (8003694 <MenuChargeCC_CV+0x27c>)
 8003462:	f7fe fbd9 	bl	8001c18 <PrintToLCD>
			delay_ms(3000);
 8003466:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800346a:	f7fd fe31 	bl	80010d0 <delay_ms>
		ChargeStatusForTimer = 0;
 800346e:	2300      	movs	r3, #0
		BatteryCapacityCharge = 0;
 8003470:	4a89      	ldr	r2, [pc, #548]	; (8003698 <MenuChargeCC_CV+0x280>)
		ChargeStatusForTimer = 0;
 8003472:	702b      	strb	r3, [r5, #0]
		DisChargeStatusForTimer = 0;
 8003474:	f889 3000 	strb.w	r3, [r9]
		BatteryCapacityCharge = 0;
 8003478:	6013      	str	r3, [r2, #0]
		InitiStatus = 1;
 800347a:	2201      	movs	r2, #1
		ChargeTimeSec = 0;
 800347c:	603b      	str	r3, [r7, #0]
		InitiStatus = 1;
 800347e:	7032      	strb	r2, [r6, #0]
	if ((ChargeTimeSec > ChargeDurationSec)|| (U_OUT> SettingsData.MaxVoltage))
 8003480:	4b86      	ldr	r3, [pc, #536]	; (800369c <MenuChargeCC_CV+0x284>)
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d805      	bhi.n	8003496 <MenuChargeCC_CV+0x7e>
 800348a:	4b85      	ldr	r3, [pc, #532]	; (80036a0 <MenuChargeCC_CV+0x288>)
 800348c:	4a7f      	ldr	r2, [pc, #508]	; (800368c <MenuChargeCC_CV+0x274>)
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	6a12      	ldr	r2, [r2, #32]
 8003492:	429a      	cmp	r2, r3
 8003494:	d203      	bcs.n	800349e <MenuChargeCC_CV+0x86>
		OFF();
 8003496:	f7ff ffb7 	bl	8003408 <OFF>
		ChargeStatusForTimer = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	702b      	strb	r3, [r5, #0]
    OUTStateAfterPowerUpFunction();
 800349e:	f7ff f915 	bl	80026cc <OUTStateAfterPowerUpFunction>
	if (key == KEY_NEXT)
 80034a2:	f1ba 0f02 	cmp.w	sl, #2
 80034a6:	4c7f      	ldr	r4, [pc, #508]	; (80036a4 <MenuChargeCC_CV+0x28c>)
 80034a8:	f040 80bd 	bne.w	8003626 <MenuChargeCC_CV+0x20e>
		if (On_off == 0)
 80034ac:	4b7e      	ldr	r3, [pc, #504]	; (80036a8 <MenuChargeCC_CV+0x290>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f040 80b4 	bne.w	800361e <MenuChargeCC_CV+0x206>
			charge();
 80034b6:	f7ff fc2f 	bl	8002d18 <charge>
			ChargeStatusForTimer = 1;
 80034ba:	2301      	movs	r3, #1
			ChargeStatusForTimer = 0;
 80034bc:	702b      	strb	r3, [r5, #0]
	if(CountShow == 0)
 80034be:	f994 1000 	ldrsb.w	r1, [r4]
 80034c2:	bba1      	cbnz	r1, 800352e <MenuChargeCC_CV+0x116>
		lcd_set_xy(0,0);
 80034c4:	4608      	mov	r0, r1
 80034c6:	f7fe fb27 	bl	8001b18 <lcd_set_xy>
		if (On_off ==0)
 80034ca:	4b77      	ldr	r3, [pc, #476]	; (80036a8 <MenuChargeCC_CV+0x290>)
 80034cc:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 80036a0 <MenuChargeCC_CV+0x288>
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	469b      	mov	fp, r3
 80034d4:	2a00      	cmp	r2, #0
 80034d6:	f040 80b2 	bne.w	800363e <MenuChargeCC_CV+0x226>
			PrintToLCD(itoa_koma(U_PS,2));
 80034da:	4b6b      	ldr	r3, [pc, #428]	; (8003688 <MenuChargeCC_CV+0x270>)
 80034dc:	2102      	movs	r1, #2
 80034de:	8818      	ldrh	r0, [r3, #0]
 80034e0:	f7fd ff86 	bl	80013f0 <itoa_koma>
 80034e4:	f7fe fb98 	bl	8001c18 <PrintToLCD>
			PrintToLCD("V ");
 80034e8:	4870      	ldr	r0, [pc, #448]	; (80036ac <MenuChargeCC_CV+0x294>)
 80034ea:	f7fe fb95 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa_koma(U_OUT,2));
 80034ee:	2102      	movs	r1, #2
 80034f0:	f8ba 0000 	ldrh.w	r0, [sl]
 80034f4:	f7fd ff7c 	bl	80013f0 <itoa_koma>
 80034f8:	f7fe fb8e 	bl	8001c18 <PrintToLCD>
			PrintToLCD("V     ");
 80034fc:	486c      	ldr	r0, [pc, #432]	; (80036b0 <MenuChargeCC_CV+0x298>)
			PrintToLCD("mA     ");
 80034fe:	f7fe fb8b 	bl	8001c18 <PrintToLCD>
		if (On_off ==0)
 8003502:	f89b 3000 	ldrb.w	r3, [fp]
 8003506:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 80036f4 <MenuChargeCC_CV+0x2dc>
			lcd_set_xy(7,1);
 800350a:	2101      	movs	r1, #1
 800350c:	2007      	movs	r0, #7
		if (On_off ==0)
 800350e:	2b00      	cmp	r3, #0
 8003510:	f040 80a8 	bne.w	8003664 <MenuChargeCC_CV+0x24c>
			lcd_set_xy(7,1);
 8003514:	f7fe fb00 	bl	8001b18 <lcd_set_xy>
			LcdOutbyNumber(0,1);
 8003518:	2101      	movs	r1, #1
 800351a:	2000      	movs	r0, #0
					LcdOutbyNumber(1,1);
 800351c:	f7fe fb24 	bl	8001b68 <LcdOutbyNumber>
		if (Blink_message_counter>10)
 8003520:	f89a 3000 	ldrb.w	r3, [sl]
 8003524:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 8003526:	bf84      	itt	hi
 8003528:	2300      	movhi	r3, #0
 800352a:	f88a 3000 	strbhi.w	r3, [sl]
	if(CountShow == 1)
 800352e:	f994 a000 	ldrsb.w	sl, [r4]
 8003532:	f1ba 0f01 	cmp.w	sl, #1
 8003536:	d11e      	bne.n	8003576 <MenuChargeCC_CV+0x15e>
		lcd_set_xy(0,0);
 8003538:	2100      	movs	r1, #0
		PrintToLCD(itoa(SettingsData.ChargeTime));
 800353a:	f8df b150 	ldr.w	fp, [pc, #336]	; 800368c <MenuChargeCC_CV+0x274>
		lcd_set_xy(0,0);
 800353e:	4608      	mov	r0, r1
 8003540:	f7fe faea 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("T:");
 8003544:	485b      	ldr	r0, [pc, #364]	; (80036b4 <MenuChargeCC_CV+0x29c>)
 8003546:	f7fe fb67 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa(SettingsData.ChargeTime));
 800354a:	f8db 0010 	ldr.w	r0, [fp, #16]
 800354e:	f7fd fedb 	bl	8001308 <itoa>
 8003552:	f7fe fb61 	bl	8001c18 <PrintToLCD>
		PrintToLCD("h MaxV:");
 8003556:	4858      	ldr	r0, [pc, #352]	; (80036b8 <MenuChargeCC_CV+0x2a0>)
 8003558:	f7fe fb5e 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800355c:	230a      	movs	r3, #10
 800355e:	f8db 0020 	ldr.w	r0, [fp, #32]
 8003562:	4651      	mov	r1, sl
 8003564:	fbb0 f0f3 	udiv	r0, r0, r3
 8003568:	f7fd ff42 	bl	80013f0 <itoa_koma>
 800356c:	f7fe fb54 	bl	8001c18 <PrintToLCD>
		PrintToLCD("V   ");
 8003570:	4852      	ldr	r0, [pc, #328]	; (80036bc <MenuChargeCC_CV+0x2a4>)
 8003572:	f7fe fb51 	bl	8001c18 <PrintToLCD>
	if(CountShow == 2)
 8003576:	f994 3000 	ldrsb.w	r3, [r4]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d11a      	bne.n	80035b4 <MenuChargeCC_CV+0x19c>
		lcd_set_xy(0,0);
 800357e:	2100      	movs	r1, #0
 8003580:	4608      	mov	r0, r1
 8003582:	f7fe fac9 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("C ");
 8003586:	484e      	ldr	r0, [pc, #312]	; (80036c0 <MenuChargeCC_CV+0x2a8>)
 8003588:	f7fe fb46 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityCharge/3600));
 800358c:	4b42      	ldr	r3, [pc, #264]	; (8003698 <MenuChargeCC_CV+0x280>)
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003594:	fbb0 f0f3 	udiv	r0, r0, r3
 8003598:	f7fd feb6 	bl	8001308 <itoa>
 800359c:	f7fe fb3c 	bl	8001c18 <PrintToLCD>
		PrintToLCD("mAh     ");
 80035a0:	4848      	ldr	r0, [pc, #288]	; (80036c4 <MenuChargeCC_CV+0x2ac>)
 80035a2:	f7fe fb39 	bl	8001c18 <PrintToLCD>
		lcd_set_xy(3,1);
 80035a6:	2003      	movs	r0, #3
 80035a8:	2101      	movs	r1, #1
 80035aa:	f7fe fab5 	bl	8001b18 <lcd_set_xy>
		ClockOnLCD_noSec(ChargeTimeSec);
 80035ae:	6838      	ldr	r0, [r7, #0]
 80035b0:	f7ff f82c 	bl	800260c <ClockOnLCD_noSec>
	logDebugD("Init status: ",InitiStatus,0);
 80035b4:	4844      	ldr	r0, [pc, #272]	; (80036c8 <MenuChargeCC_CV+0x2b0>)
 80035b6:	f001 ff81 	bl	80054bc <printToBufferWithoutEndUART1>
 80035ba:	7831      	ldrb	r1, [r6, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	4843      	ldr	r0, [pc, #268]	; (80036cc <MenuChargeCC_CV+0x2b4>)
 80035c0:	f001 ffc0 	bl	8005544 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 80035c4:	4840      	ldr	r0, [pc, #256]	; (80036c8 <MenuChargeCC_CV+0x2b0>)
 80035c6:	f001 ff79 	bl	80054bc <printToBufferWithoutEndUART1>
 80035ca:	f898 1000 	ldrb.w	r1, [r8]
 80035ce:	2200      	movs	r2, #0
 80035d0:	483f      	ldr	r0, [pc, #252]	; (80036d0 <MenuChargeCC_CV+0x2b8>)
 80035d2:	f001 ffb7 	bl	8005544 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 80035d6:	483c      	ldr	r0, [pc, #240]	; (80036c8 <MenuChargeCC_CV+0x2b0>)
 80035d8:	f001 ff70 	bl	80054bc <printToBufferWithoutEndUART1>
 80035dc:	7829      	ldrb	r1, [r5, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	483c      	ldr	r0, [pc, #240]	; (80036d4 <MenuChargeCC_CV+0x2bc>)
 80035e2:	f001 ffaf 	bl	8005544 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 80035e6:	4838      	ldr	r0, [pc, #224]	; (80036c8 <MenuChargeCC_CV+0x2b0>)
 80035e8:	f001 ff68 	bl	80054bc <printToBufferWithoutEndUART1>
 80035ec:	6839      	ldr	r1, [r7, #0]
 80035ee:	2200      	movs	r2, #0
 80035f0:	4839      	ldr	r0, [pc, #228]	; (80036d8 <MenuChargeCC_CV+0x2c0>)
 80035f2:	f001 ffa7 	bl	8005544 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 80035f6:	4834      	ldr	r0, [pc, #208]	; (80036c8 <MenuChargeCC_CV+0x2b0>)
 80035f8:	f001 ff60 	bl	80054bc <printToBufferWithoutEndUART1>
 80035fc:	f899 1000 	ldrb.w	r1, [r9]
 8003600:	2200      	movs	r2, #0
 8003602:	4836      	ldr	r0, [pc, #216]	; (80036dc <MenuChargeCC_CV+0x2c4>)
 8003604:	f001 ff9e 	bl	8005544 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003608:	482f      	ldr	r0, [pc, #188]	; (80036c8 <MenuChargeCC_CV+0x2b0>)
 800360a:	f001 ff57 	bl	80054bc <printToBufferWithoutEndUART1>
 800360e:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <MenuChargeCC_CV+0x2c8>)
 8003610:	2200      	movs	r2, #0
 8003612:	6819      	ldr	r1, [r3, #0]
 8003614:	4833      	ldr	r0, [pc, #204]	; (80036e4 <MenuChargeCC_CV+0x2cc>)
}
 8003616:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 800361a:	f001 bf93 	b.w	8005544 <printToBufferUART1D>
			OFF();
 800361e:	f7ff fef3 	bl	8003408 <OFF>
			ChargeStatusForTimer = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	e74a      	b.n	80034bc <MenuChargeCC_CV+0xa4>
	if (key == KEY_BACK)
 8003626:	f1ba 0f01 	cmp.w	sl, #1
 800362a:	f47f af48 	bne.w	80034be <MenuChargeCC_CV+0xa6>
		CountShow--;
 800362e:	7823      	ldrb	r3, [r4, #0]
 8003630:	3b01      	subs	r3, #1
 8003632:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM0-1;
 8003634:	2b00      	cmp	r3, #0
 8003636:	bfb8      	it	lt
 8003638:	2302      	movlt	r3, #2
 800363a:	7023      	strb	r3, [r4, #0]
 800363c:	e73f      	b.n	80034be <MenuChargeCC_CV+0xa6>
			PrintToLCD(itoa_koma(U_OUT,2));
 800363e:	2102      	movs	r1, #2
 8003640:	f8ba 0000 	ldrh.w	r0, [sl]
 8003644:	f7fd fed4 	bl	80013f0 <itoa_koma>
 8003648:	f7fe fae6 	bl	8001c18 <PrintToLCD>
			PrintToLCD("V ");
 800364c:	4817      	ldr	r0, [pc, #92]	; (80036ac <MenuChargeCC_CV+0x294>)
 800364e:	f7fe fae3 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa(Current));
 8003652:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <MenuChargeCC_CV+0x2d0>)
 8003654:	8818      	ldrh	r0, [r3, #0]
 8003656:	b200      	sxth	r0, r0
 8003658:	f7fd fe56 	bl	8001308 <itoa>
 800365c:	f7fe fadc 	bl	8001c18 <PrintToLCD>
			PrintToLCD("mA     ");
 8003660:	4822      	ldr	r0, [pc, #136]	; (80036ec <MenuChargeCC_CV+0x2d4>)
 8003662:	e74c      	b.n	80034fe <MenuChargeCC_CV+0xe6>
			if (Blink_message_counter<=5)
 8003664:	f89a 3000 	ldrb.w	r3, [sl]
 8003668:	2b05      	cmp	r3, #5
 800366a:	f67f af53 	bls.w	8003514 <MenuChargeCC_CV+0xfc>
					lcd_set_xy(7,1);
 800366e:	f7fe fa53 	bl	8001b18 <lcd_set_xy>
					LcdOutbyNumber(1,1);
 8003672:	2101      	movs	r1, #1
 8003674:	4608      	mov	r0, r1
 8003676:	e751      	b.n	800351c <MenuChargeCC_CV+0x104>
 8003678:	200007a1 	.word	0x200007a1
 800367c:	200007a0 	.word	0x200007a0
 8003680:	2000078b 	.word	0x2000078b
 8003684:	2000078c 	.word	0x2000078c
 8003688:	20000874 	.word	0x20000874
 800368c:	20000154 	.word	0x20000154
 8003690:	0800643b 	.word	0x0800643b
 8003694:	0800644c 	.word	0x0800644c
 8003698:	2000077c 	.word	0x2000077c
 800369c:	20000a18 	.word	0x20000a18
 80036a0:	2000086e 	.word	0x2000086e
 80036a4:	20000791 	.word	0x20000791
 80036a8:	200007a2 	.word	0x200007a2
 80036ac:	08006378 	.word	0x08006378
 80036b0:	0800636e 	.word	0x0800636e
 80036b4:	080061d8 	.word	0x080061d8
 80036b8:	080061db 	.word	0x080061db
 80036bc:	0800632c 	.word	0x0800632c
 80036c0:	080061e3 	.word	0x080061e3
 80036c4:	080061e6 	.word	0x080061e6
 80036c8:	08005eb1 	.word	0x08005eb1
 80036cc:	080061ef 	.word	0x080061ef
 80036d0:	0800649d 	.word	0x0800649d
 80036d4:	080064b2 	.word	0x080064b2
 80036d8:	080064c7 	.word	0x080064c7
 80036dc:	080064ef 	.word	0x080064ef
 80036e0:	20000798 	.word	0x20000798
 80036e4:	08006507 	.word	0x08006507
 80036e8:	2000085a 	.word	0x2000085a
 80036ec:	0800646e 	.word	0x0800646e
 80036f0:	20000794 	.word	0x20000794
 80036f4:	20000789 	.word	0x20000789

080036f8 <MenuChargeAdapt>:
	EnterInMenu_Status = 1;
 80036f8:	2201      	movs	r2, #1
{
 80036fa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (InitiStatus==0)
 80036fe:	4eba      	ldr	r6, [pc, #744]	; (80039e8 <MenuChargeAdapt+0x2f0>)
	EnterInMenu_Status = 1;
 8003700:	4bba      	ldr	r3, [pc, #744]	; (80039ec <MenuChargeAdapt+0x2f4>)
	if (InitiStatus==0)
 8003702:	7835      	ldrb	r5, [r6, #0]
{
 8003704:	4682      	mov	sl, r0
	EnterInMenu_Status = 1;
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	4698      	mov	r8, r3
 800370a:	4cb9      	ldr	r4, [pc, #740]	; (80039f0 <MenuChargeAdapt+0x2f8>)
 800370c:	f8df 9350 	ldr.w	r9, [pc, #848]	; 8003a60 <MenuChargeAdapt+0x368>
 8003710:	4fb8      	ldr	r7, [pc, #736]	; (80039f4 <MenuChargeAdapt+0x2fc>)
	if (InitiStatus==0)
 8003712:	bb2d      	cbnz	r5, 8003760 <MenuChargeAdapt+0x68>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8003714:	4bb8      	ldr	r3, [pc, #736]	; (80039f8 <MenuChargeAdapt+0x300>)
 8003716:	881a      	ldrh	r2, [r3, #0]
 8003718:	4bb8      	ldr	r3, [pc, #736]	; (80039fc <MenuChargeAdapt+0x304>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	3305      	adds	r3, #5
 800371e:	4293      	cmp	r3, r2
 8003720:	d915      	bls.n	800374e <MenuChargeAdapt+0x56>
			lcd_set_xy(0,0);
 8003722:	4629      	mov	r1, r5
 8003724:	4628      	mov	r0, r5
 8003726:	f7fe f9f7 	bl	8001b18 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 800372a:	48b5      	ldr	r0, [pc, #724]	; (8003a00 <MenuChargeAdapt+0x308>)
 800372c:	f7fe fa74 	bl	8001c18 <PrintToLCD>
			delay_ms(2000);
 8003730:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003734:	f7fd fccc 	bl	80010d0 <delay_ms>
			lcd_set_xy(0,0);
 8003738:	4629      	mov	r1, r5
 800373a:	4628      	mov	r0, r5
 800373c:	f7fe f9ec 	bl	8001b18 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8003740:	48b0      	ldr	r0, [pc, #704]	; (8003a04 <MenuChargeAdapt+0x30c>)
 8003742:	f7fe fa69 	bl	8001c18 <PrintToLCD>
			delay_ms(3000);
 8003746:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800374a:	f7fd fcc1 	bl	80010d0 <delay_ms>
		ChargeStatusForTimer = 0;
 800374e:	2300      	movs	r3, #0
		BatteryCapacityCharge = 0;
 8003750:	4aad      	ldr	r2, [pc, #692]	; (8003a08 <MenuChargeAdapt+0x310>)
		ChargeStatusForTimer = 0;
 8003752:	7023      	strb	r3, [r4, #0]
		DisChargeStatusForTimer = 0;
 8003754:	f889 3000 	strb.w	r3, [r9]
		BatteryCapacityCharge = 0;
 8003758:	6013      	str	r3, [r2, #0]
		InitiStatus = 1;
 800375a:	2201      	movs	r2, #1
		ChargeTimeSec = 0;
 800375c:	603b      	str	r3, [r7, #0]
		InitiStatus = 1;
 800375e:	7032      	strb	r2, [r6, #0]
	if (ChargeTimeSec > ChargeDurationSec)
 8003760:	4baa      	ldr	r3, [pc, #680]	; (8003a0c <MenuChargeAdapt+0x314>)
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	f240 80fb 	bls.w	8003962 <MenuChargeAdapt+0x26a>
			OFF();
 800376c:	f7ff fe4c 	bl	8003408 <OFF>
			ChargeStatusForTimer = 0;
 8003770:	2300      	movs	r3, #0
				ChargeStatusForTimer = 1;
 8003772:	7023      	strb	r3, [r4, #0]
    OUTStateAfterPowerUpFunction();
 8003774:	f7fe ffaa 	bl	80026cc <OUTStateAfterPowerUpFunction>
	if (key == KEY_NEXT)
 8003778:	f1ba 0f02 	cmp.w	sl, #2
 800377c:	4da4      	ldr	r5, [pc, #656]	; (8003a10 <MenuChargeAdapt+0x318>)
 800377e:	f040 8109 	bne.w	8003994 <MenuChargeAdapt+0x29c>
		if (On_off == 0)
 8003782:	4ba4      	ldr	r3, [pc, #656]	; (8003a14 <MenuChargeAdapt+0x31c>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f040 8100 	bne.w	800398c <MenuChargeAdapt+0x294>
			charge();
 800378c:	f7ff fac4 	bl	8002d18 <charge>
			ChargeStatusForTimer = 1;
 8003790:	2301      	movs	r3, #1
			ChargeStatusForTimer = 0;
 8003792:	7023      	strb	r3, [r4, #0]
	if(CountShow == 0)
 8003794:	f995 1000 	ldrsb.w	r1, [r5]
 8003798:	bba1      	cbnz	r1, 8003804 <MenuChargeAdapt+0x10c>
		lcd_set_xy(0,0);
 800379a:	4608      	mov	r0, r1
 800379c:	f7fe f9bc 	bl	8001b18 <lcd_set_xy>
		if (On_off ==0)
 80037a0:	4b9c      	ldr	r3, [pc, #624]	; (8003a14 <MenuChargeAdapt+0x31c>)
 80037a2:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 8003a54 <MenuChargeAdapt+0x35c>
 80037a6:	781a      	ldrb	r2, [r3, #0]
 80037a8:	469b      	mov	fp, r3
 80037aa:	2a00      	cmp	r2, #0
 80037ac:	f040 80fe 	bne.w	80039ac <MenuChargeAdapt+0x2b4>
			PrintToLCD(itoa_koma(U_PS,2));
 80037b0:	4b91      	ldr	r3, [pc, #580]	; (80039f8 <MenuChargeAdapt+0x300>)
 80037b2:	2102      	movs	r1, #2
 80037b4:	8818      	ldrh	r0, [r3, #0]
 80037b6:	f7fd fe1b 	bl	80013f0 <itoa_koma>
 80037ba:	f7fe fa2d 	bl	8001c18 <PrintToLCD>
			PrintToLCD("V ");
 80037be:	4896      	ldr	r0, [pc, #600]	; (8003a18 <MenuChargeAdapt+0x320>)
 80037c0:	f7fe fa2a 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa_koma(U_OUT,2));
 80037c4:	2102      	movs	r1, #2
 80037c6:	f8ba 0000 	ldrh.w	r0, [sl]
 80037ca:	f7fd fe11 	bl	80013f0 <itoa_koma>
 80037ce:	f7fe fa23 	bl	8001c18 <PrintToLCD>
			PrintToLCD("V   ");
 80037d2:	4892      	ldr	r0, [pc, #584]	; (8003a1c <MenuChargeAdapt+0x324>)
			PrintToLCD("mA      ");
 80037d4:	f7fe fa20 	bl	8001c18 <PrintToLCD>
		if (On_off ==0)
 80037d8:	f89b 3000 	ldrb.w	r3, [fp]
 80037dc:	f8df a284 	ldr.w	sl, [pc, #644]	; 8003a64 <MenuChargeAdapt+0x36c>
			lcd_set_xy(7,1);
 80037e0:	2101      	movs	r1, #1
 80037e2:	2007      	movs	r0, #7
		if (On_off ==0)
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f040 80f4 	bne.w	80039d2 <MenuChargeAdapt+0x2da>
			lcd_set_xy(7,1);
 80037ea:	f7fe f995 	bl	8001b18 <lcd_set_xy>
			LcdOutbyNumber(0,1);
 80037ee:	2101      	movs	r1, #1
 80037f0:	2000      	movs	r0, #0
					LcdOutbyNumber(1,1);
 80037f2:	f7fe f9b9 	bl	8001b68 <LcdOutbyNumber>
		if (Blink_message_counter>10)
 80037f6:	f89a 3000 	ldrb.w	r3, [sl]
 80037fa:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 80037fc:	bf84      	itt	hi
 80037fe:	2300      	movhi	r3, #0
 8003800:	f88a 3000 	strbhi.w	r3, [sl]
	if(CountShow == 1)
 8003804:	f995 a000 	ldrsb.w	sl, [r5]
 8003808:	f1ba 0f01 	cmp.w	sl, #1
 800380c:	d11e      	bne.n	800384c <MenuChargeAdapt+0x154>
		lcd_set_xy(0,0);
 800380e:	2100      	movs	r1, #0
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8003810:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 80039fc <MenuChargeAdapt+0x304>
		lcd_set_xy(0,0);
 8003814:	4608      	mov	r0, r1
 8003816:	f7fe f97f 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("T:");
 800381a:	4881      	ldr	r0, [pc, #516]	; (8003a20 <MenuChargeAdapt+0x328>)
 800381c:	f7fe f9fc 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8003820:	f8db 0010 	ldr.w	r0, [fp, #16]
 8003824:	f7fd fd70 	bl	8001308 <itoa>
 8003828:	f7fe f9f6 	bl	8001c18 <PrintToLCD>
		PrintToLCD("h MaxV:");
 800382c:	487d      	ldr	r0, [pc, #500]	; (8003a24 <MenuChargeAdapt+0x32c>)
 800382e:	f7fe f9f3 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003832:	230a      	movs	r3, #10
 8003834:	f8db 0020 	ldr.w	r0, [fp, #32]
 8003838:	4651      	mov	r1, sl
 800383a:	fbb0 f0f3 	udiv	r0, r0, r3
 800383e:	f7fd fdd7 	bl	80013f0 <itoa_koma>
 8003842:	f7fe f9e9 	bl	8001c18 <PrintToLCD>
		PrintToLCD("V   ");
 8003846:	4875      	ldr	r0, [pc, #468]	; (8003a1c <MenuChargeAdapt+0x324>)
 8003848:	f7fe f9e6 	bl	8001c18 <PrintToLCD>
	if(CountShow == 2)
 800384c:	f995 3000 	ldrsb.w	r3, [r5]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d12f      	bne.n	80038b4 <MenuChargeAdapt+0x1bc>
		lcd_set_xy(0,0);
 8003854:	2100      	movs	r1, #0
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003856:	f04f 0a0a 	mov.w	sl, #10
		PrintToLCD(itoa(SettingsData.ChargeAdapt));
 800385a:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 80039fc <MenuChargeAdapt+0x304>
		lcd_set_xy(0,0);
 800385e:	4608      	mov	r0, r1
 8003860:	f7fe f95a 	bl	8001b18 <lcd_set_xy>
		PrintToLCD(itoa(SettingsData.ChargeAdapt));
 8003864:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 8003868:	f7fd fd4e 	bl	8001308 <itoa>
 800386c:	f7fe f9d4 	bl	8001c18 <PrintToLCD>
		PrintToLCD("% ");
 8003870:	486d      	ldr	r0, [pc, #436]	; (8003a28 <MenuChargeAdapt+0x330>)
 8003872:	f7fe f9d1 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003876:	f8db 0020 	ldr.w	r0, [fp, #32]
 800387a:	2101      	movs	r1, #1
 800387c:	fbb0 f0fa 	udiv	r0, r0, sl
 8003880:	f7fd fdb6 	bl	80013f0 <itoa_koma>
 8003884:	f7fe f9c8 	bl	8001c18 <PrintToLCD>
		PrintToLCD("V ");
 8003888:	4863      	ldr	r0, [pc, #396]	; (8003a18 <MenuChargeAdapt+0x320>)
 800388a:	f7fe f9c5 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa_koma((SettingsData.MaxVoltage-(SettingsData.MaxVoltage*SettingsData.ChargeAdapt/100))/10,1));
 800388e:	2264      	movs	r2, #100	; 0x64
 8003890:	f8db 3020 	ldr.w	r3, [fp, #32]
 8003894:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 8003898:	2101      	movs	r1, #1
 800389a:	4358      	muls	r0, r3
 800389c:	fbb0 f0f2 	udiv	r0, r0, r2
 80038a0:	1a18      	subs	r0, r3, r0
 80038a2:	fbb0 f0fa 	udiv	r0, r0, sl
 80038a6:	f7fd fda3 	bl	80013f0 <itoa_koma>
 80038aa:	f7fe f9b5 	bl	8001c18 <PrintToLCD>
		PrintToLCD("V   ");
 80038ae:	485b      	ldr	r0, [pc, #364]	; (8003a1c <MenuChargeAdapt+0x324>)
 80038b0:	f7fe f9b2 	bl	8001c18 <PrintToLCD>
	if(CountShow == 3)
 80038b4:	f995 5000 	ldrsb.w	r5, [r5]
 80038b8:	2d03      	cmp	r5, #3
 80038ba:	d11a      	bne.n	80038f2 <MenuChargeAdapt+0x1fa>
		lcd_set_xy(0,0);
 80038bc:	2100      	movs	r1, #0
 80038be:	4608      	mov	r0, r1
 80038c0:	f7fe f92a 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("C ");
 80038c4:	4859      	ldr	r0, [pc, #356]	; (8003a2c <MenuChargeAdapt+0x334>)
 80038c6:	f7fe f9a7 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityCharge/3600));
 80038ca:	4b4f      	ldr	r3, [pc, #316]	; (8003a08 <MenuChargeAdapt+0x310>)
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80038d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80038d6:	f7fd fd17 	bl	8001308 <itoa>
 80038da:	f7fe f99d 	bl	8001c18 <PrintToLCD>
		PrintToLCD("mAH     ");
 80038de:	4854      	ldr	r0, [pc, #336]	; (8003a30 <MenuChargeAdapt+0x338>)
 80038e0:	f7fe f99a 	bl	8001c18 <PrintToLCD>
		lcd_set_xy(3,1);
 80038e4:	4628      	mov	r0, r5
 80038e6:	2101      	movs	r1, #1
 80038e8:	f7fe f916 	bl	8001b18 <lcd_set_xy>
		ClockOnLCD_noSec(ChargeTimeSec);
 80038ec:	6838      	ldr	r0, [r7, #0]
 80038ee:	f7fe fe8d 	bl	800260c <ClockOnLCD_noSec>
	delay_ms(MENUDELAY);
 80038f2:	2064      	movs	r0, #100	; 0x64
 80038f4:	f7fd fbec 	bl	80010d0 <delay_ms>
	logDebugD("Init status: ",InitiStatus,0);
 80038f8:	484e      	ldr	r0, [pc, #312]	; (8003a34 <MenuChargeAdapt+0x33c>)
 80038fa:	f001 fddf 	bl	80054bc <printToBufferWithoutEndUART1>
 80038fe:	7831      	ldrb	r1, [r6, #0]
 8003900:	2200      	movs	r2, #0
 8003902:	484d      	ldr	r0, [pc, #308]	; (8003a38 <MenuChargeAdapt+0x340>)
 8003904:	f001 fe1e 	bl	8005544 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003908:	484a      	ldr	r0, [pc, #296]	; (8003a34 <MenuChargeAdapt+0x33c>)
 800390a:	f001 fdd7 	bl	80054bc <printToBufferWithoutEndUART1>
 800390e:	f898 1000 	ldrb.w	r1, [r8]
 8003912:	2200      	movs	r2, #0
 8003914:	4849      	ldr	r0, [pc, #292]	; (8003a3c <MenuChargeAdapt+0x344>)
 8003916:	f001 fe15 	bl	8005544 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 800391a:	4846      	ldr	r0, [pc, #280]	; (8003a34 <MenuChargeAdapt+0x33c>)
 800391c:	f001 fdce 	bl	80054bc <printToBufferWithoutEndUART1>
 8003920:	7821      	ldrb	r1, [r4, #0]
 8003922:	2200      	movs	r2, #0
 8003924:	4846      	ldr	r0, [pc, #280]	; (8003a40 <MenuChargeAdapt+0x348>)
 8003926:	f001 fe0d 	bl	8005544 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 800392a:	4842      	ldr	r0, [pc, #264]	; (8003a34 <MenuChargeAdapt+0x33c>)
 800392c:	f001 fdc6 	bl	80054bc <printToBufferWithoutEndUART1>
 8003930:	6839      	ldr	r1, [r7, #0]
 8003932:	2200      	movs	r2, #0
 8003934:	4843      	ldr	r0, [pc, #268]	; (8003a44 <MenuChargeAdapt+0x34c>)
 8003936:	f001 fe05 	bl	8005544 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 800393a:	483e      	ldr	r0, [pc, #248]	; (8003a34 <MenuChargeAdapt+0x33c>)
 800393c:	f001 fdbe 	bl	80054bc <printToBufferWithoutEndUART1>
 8003940:	f899 1000 	ldrb.w	r1, [r9]
 8003944:	2200      	movs	r2, #0
 8003946:	4840      	ldr	r0, [pc, #256]	; (8003a48 <MenuChargeAdapt+0x350>)
 8003948:	f001 fdfc 	bl	8005544 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 800394c:	4839      	ldr	r0, [pc, #228]	; (8003a34 <MenuChargeAdapt+0x33c>)
 800394e:	f001 fdb5 	bl	80054bc <printToBufferWithoutEndUART1>
 8003952:	4b3e      	ldr	r3, [pc, #248]	; (8003a4c <MenuChargeAdapt+0x354>)
 8003954:	2200      	movs	r2, #0
 8003956:	6819      	ldr	r1, [r3, #0]
 8003958:	483d      	ldr	r0, [pc, #244]	; (8003a50 <MenuChargeAdapt+0x358>)
}
 800395a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 800395e:	f001 bdf1 	b.w	8005544 <printToBufferUART1D>
		if (U_OUT> SettingsData.MaxVoltage)
 8003962:	493c      	ldr	r1, [pc, #240]	; (8003a54 <MenuChargeAdapt+0x35c>)
 8003964:	4a25      	ldr	r2, [pc, #148]	; (80039fc <MenuChargeAdapt+0x304>)
 8003966:	8808      	ldrh	r0, [r1, #0]
 8003968:	6a13      	ldr	r3, [r2, #32]
 800396a:	4283      	cmp	r3, r0
 800396c:	f4ff aefe 	bcc.w	800376c <MenuChargeAdapt+0x74>
			if (U_OUT< (SettingsData.MaxVoltage-(SettingsData.MaxVoltage*SettingsData.ChargeAdapt/100))   )
 8003970:	2064      	movs	r0, #100	; 0x64
 8003972:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003974:	8809      	ldrh	r1, [r1, #0]
 8003976:	435a      	muls	r2, r3
 8003978:	fbb2 f2f0 	udiv	r2, r2, r0
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	428b      	cmp	r3, r1
 8003980:	f67f aef8 	bls.w	8003774 <MenuChargeAdapt+0x7c>
				charge();
 8003984:	f7ff f9c8 	bl	8002d18 <charge>
				ChargeStatusForTimer = 1;
 8003988:	2301      	movs	r3, #1
 800398a:	e6f2      	b.n	8003772 <MenuChargeAdapt+0x7a>
			OFF();
 800398c:	f7ff fd3c 	bl	8003408 <OFF>
			ChargeStatusForTimer = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	e6fe      	b.n	8003792 <MenuChargeAdapt+0x9a>
	if (key == KEY_BACK)
 8003994:	f1ba 0f01 	cmp.w	sl, #1
 8003998:	f47f aefc 	bne.w	8003794 <MenuChargeAdapt+0x9c>
		CountShow--;
 800399c:	782b      	ldrb	r3, [r5, #0]
 800399e:	3b01      	subs	r3, #1
 80039a0:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM1-1;
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	bfb8      	it	lt
 80039a6:	2303      	movlt	r3, #3
 80039a8:	702b      	strb	r3, [r5, #0]
 80039aa:	e6f3      	b.n	8003794 <MenuChargeAdapt+0x9c>
			PrintToLCD(itoa_koma(U_OUT,2));
 80039ac:	2102      	movs	r1, #2
 80039ae:	f8ba 0000 	ldrh.w	r0, [sl]
 80039b2:	f7fd fd1d 	bl	80013f0 <itoa_koma>
 80039b6:	f7fe f92f 	bl	8001c18 <PrintToLCD>
			PrintToLCD("V ");
 80039ba:	4817      	ldr	r0, [pc, #92]	; (8003a18 <MenuChargeAdapt+0x320>)
 80039bc:	f7fe f92c 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa(Current));
 80039c0:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <MenuChargeAdapt+0x360>)
 80039c2:	8818      	ldrh	r0, [r3, #0]
 80039c4:	b200      	sxth	r0, r0
 80039c6:	f7fd fc9f 	bl	8001308 <itoa>
 80039ca:	f7fe f925 	bl	8001c18 <PrintToLCD>
			PrintToLCD("mA      ");
 80039ce:	4823      	ldr	r0, [pc, #140]	; (8003a5c <MenuChargeAdapt+0x364>)
 80039d0:	e700      	b.n	80037d4 <MenuChargeAdapt+0xdc>
			if (Blink_message_counter<=5)
 80039d2:	f89a 3000 	ldrb.w	r3, [sl]
 80039d6:	2b05      	cmp	r3, #5
 80039d8:	f67f af07 	bls.w	80037ea <MenuChargeAdapt+0xf2>
					lcd_set_xy(7,1);
 80039dc:	f7fe f89c 	bl	8001b18 <lcd_set_xy>
					LcdOutbyNumber(1,1);
 80039e0:	2101      	movs	r1, #1
 80039e2:	4608      	mov	r0, r1
 80039e4:	e705      	b.n	80037f2 <MenuChargeAdapt+0xfa>
 80039e6:	bf00      	nop
 80039e8:	200007a1 	.word	0x200007a1
 80039ec:	200007a0 	.word	0x200007a0
 80039f0:	2000078b 	.word	0x2000078b
 80039f4:	2000078c 	.word	0x2000078c
 80039f8:	20000874 	.word	0x20000874
 80039fc:	20000154 	.word	0x20000154
 8003a00:	0800643b 	.word	0x0800643b
 8003a04:	0800644c 	.word	0x0800644c
 8003a08:	2000077c 	.word	0x2000077c
 8003a0c:	20000a18 	.word	0x20000a18
 8003a10:	20000791 	.word	0x20000791
 8003a14:	200007a2 	.word	0x200007a2
 8003a18:	08006378 	.word	0x08006378
 8003a1c:	0800632c 	.word	0x0800632c
 8003a20:	080061d8 	.word	0x080061d8
 8003a24:	080061db 	.word	0x080061db
 8003a28:	08006375 	.word	0x08006375
 8003a2c:	080061e3 	.word	0x080061e3
 8003a30:	08006483 	.word	0x08006483
 8003a34:	08005eb1 	.word	0x08005eb1
 8003a38:	080061ef 	.word	0x080061ef
 8003a3c:	0800649d 	.word	0x0800649d
 8003a40:	080064b2 	.word	0x080064b2
 8003a44:	080064c7 	.word	0x080064c7
 8003a48:	080064ef 	.word	0x080064ef
 8003a4c:	20000798 	.word	0x20000798
 8003a50:	08006507 	.word	0x08006507
 8003a54:	2000086e 	.word	0x2000086e
 8003a58:	2000085a 	.word	0x2000085a
 8003a5c:	080061cf 	.word	0x080061cf
 8003a60:	20000794 	.word	0x20000794
 8003a64:	20000789 	.word	0x20000789

08003a68 <MenuDisCharge>:
	EnterInMenu_Status = 1;
 8003a68:	2101      	movs	r1, #1
{
 8003a6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (InitiStatus==0)
 8003a6e:	4d8a      	ldr	r5, [pc, #552]	; (8003c98 <MenuDisCharge+0x230>)
	EnterInMenu_Status = 1;
 8003a70:	4e8a      	ldr	r6, [pc, #552]	; (8003c9c <MenuDisCharge+0x234>)
	if (InitiStatus==0)
 8003a72:	782b      	ldrb	r3, [r5, #0]
	EnterInMenu_Status = 1;
 8003a74:	7031      	strb	r1, [r6, #0]
 8003a76:	4a8a      	ldr	r2, [pc, #552]	; (8003ca0 <MenuDisCharge+0x238>)
	if (InitiStatus==0)
 8003a78:	b94b      	cbnz	r3, 8003a8e <MenuDisCharge+0x26>
		InitiStatus = 1;
 8003a7a:	7029      	strb	r1, [r5, #0]
		ChargeStatusForTimer = 0;
 8003a7c:	4989      	ldr	r1, [pc, #548]	; (8003ca4 <MenuDisCharge+0x23c>)
		BatteryLow=0;
 8003a7e:	7013      	strb	r3, [r2, #0]
		ChargeStatusForTimer = 0;
 8003a80:	700b      	strb	r3, [r1, #0]
		DisChargeStatusForTimer = 0;
 8003a82:	4989      	ldr	r1, [pc, #548]	; (8003ca8 <MenuDisCharge+0x240>)
 8003a84:	700b      	strb	r3, [r1, #0]
		BatteryCapacityDischargeCurrent = 0;
 8003a86:	4989      	ldr	r1, [pc, #548]	; (8003cac <MenuDisCharge+0x244>)
 8003a88:	600b      	str	r3, [r1, #0]
		DischargeTimeSec = 0;
 8003a8a:	4989      	ldr	r1, [pc, #548]	; (8003cb0 <MenuDisCharge+0x248>)
 8003a8c:	600b      	str	r3, [r1, #0]
	U_BatteryTmp = U_OUT;
 8003a8e:	4f89      	ldr	r7, [pc, #548]	; (8003cb4 <MenuDisCharge+0x24c>)
 8003a90:	4989      	ldr	r1, [pc, #548]	; (8003cb8 <MenuDisCharge+0x250>)
 8003a92:	883b      	ldrh	r3, [r7, #0]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	800b      	strh	r3, [r1, #0]
	if (U_BatteryTmp >=SettingsData.LowVoltage) BatteryLow=0;
 8003a98:	4988      	ldr	r1, [pc, #544]	; (8003cbc <MenuDisCharge+0x254>)
 8003a9a:	698c      	ldr	r4, [r1, #24]
 8003a9c:	4688      	mov	r8, r1
 8003a9e:	42a3      	cmp	r3, r4
 8003aa0:	f0c0 80f1 	bcc.w	8003c86 <MenuDisCharge+0x21e>
 8003aa4:	2300      	movs	r3, #0
		BatteryLow = 1;
 8003aa6:	7013      	strb	r3, [r2, #0]
	if ((time_sec - U_Battery_Timer)>3 && BatteryLow !=0)//was 10
 8003aa8:	4985      	ldr	r1, [pc, #532]	; (8003cc0 <MenuDisCharge+0x258>)
 8003aaa:	4b86      	ldr	r3, [pc, #536]	; (8003cc4 <MenuDisCharge+0x25c>)
 8003aac:	6809      	ldr	r1, [r1, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8003ca8 <MenuDisCharge+0x240>
 8003ab4:	1a5b      	subs	r3, r3, r1
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d906      	bls.n	8003ac8 <MenuDisCharge+0x60>
 8003aba:	7813      	ldrb	r3, [r2, #0]
 8003abc:	b123      	cbz	r3, 8003ac8 <MenuDisCharge+0x60>
		OFF();
 8003abe:	f7ff fca3 	bl	8003408 <OFF>
		DisChargeStatusForTimer = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f889 3000 	strb.w	r3, [r9]
	if (key == KEY_NEXT)
 8003ac8:	2802      	cmp	r0, #2
 8003aca:	4c7f      	ldr	r4, [pc, #508]	; (8003cc8 <MenuDisCharge+0x260>)
 8003acc:	f040 80c7 	bne.w	8003c5e <MenuDisCharge+0x1f6>
    	if (On_off == 0)
 8003ad0:	4b7e      	ldr	r3, [pc, #504]	; (8003ccc <MenuDisCharge+0x264>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f040 80be 	bne.w	8003c56 <MenuDisCharge+0x1ee>
    		discharge();
 8003ada:	f7fe ffd7 	bl	8002a8c <discharge>
    		DisChargeStatusForTimer = 1;
 8003ade:	2301      	movs	r3, #1
    		DisChargeStatusForTimer = 0;
 8003ae0:	f889 3000 	strb.w	r3, [r9]
	if(CountShow == 0)
 8003ae4:	f994 1000 	ldrsb.w	r1, [r4]
 8003ae8:	bb41      	cbnz	r1, 8003b3c <MenuDisCharge+0xd4>
		lcd_set_xy(0,0);
 8003aea:	4608      	mov	r0, r1
 8003aec:	f7fe f814 	bl	8001b18 <lcd_set_xy>
		PrintToLCD(itoa_koma(U_OUT ,2));
 8003af0:	2102      	movs	r1, #2
 8003af2:	8838      	ldrh	r0, [r7, #0]
 8003af4:	f7fd fc7c 	bl	80013f0 <itoa_koma>
 8003af8:	f7fe f88e 	bl	8001c18 <PrintToLCD>
		PrintToLCD("V ");
 8003afc:	4874      	ldr	r0, [pc, #464]	; (8003cd0 <MenuDisCharge+0x268>)
 8003afe:	f7fe f88b 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa(Current ));
 8003b02:	4b74      	ldr	r3, [pc, #464]	; (8003cd4 <MenuDisCharge+0x26c>)
 8003b04:	4f74      	ldr	r7, [pc, #464]	; (8003cd8 <MenuDisCharge+0x270>)
 8003b06:	8818      	ldrh	r0, [r3, #0]
 8003b08:	b200      	sxth	r0, r0
 8003b0a:	f7fd fbfd 	bl	8001308 <itoa>
 8003b0e:	f7fe f883 	bl	8001c18 <PrintToLCD>
		PrintToLCD("mA      ");
 8003b12:	4872      	ldr	r0, [pc, #456]	; (8003cdc <MenuDisCharge+0x274>)
 8003b14:	f7fe f880 	bl	8001c18 <PrintToLCD>
		if (On_off ==0)
 8003b18:	4b6c      	ldr	r3, [pc, #432]	; (8003ccc <MenuDisCharge+0x264>)
				lcd_set_xy(7,1);
 8003b1a:	2101      	movs	r1, #1
		if (On_off ==0)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
				lcd_set_xy(7,1);
 8003b1e:	2007      	movs	r0, #7
		if (On_off ==0)
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f040 80a7 	bne.w	8003c74 <MenuDisCharge+0x20c>
				lcd_set_xy(7,1);
 8003b26:	f7fd fff7 	bl	8001b18 <lcd_set_xy>
				LcdOutbyNumber(2,1);
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	2002      	movs	r0, #2
						LcdOutbyNumber(3,1);
 8003b2e:	f7fe f81b 	bl	8001b68 <LcdOutbyNumber>
			if (Blink_message_counter>10)
 8003b32:	783b      	ldrb	r3, [r7, #0]
 8003b34:	2b0a      	cmp	r3, #10
				Blink_message_counter = 0;
 8003b36:	bf84      	itt	hi
 8003b38:	2300      	movhi	r3, #0
 8003b3a:	703b      	strbhi	r3, [r7, #0]
	if(CountShow == 1)
 8003b3c:	f994 7000 	ldrsb.w	r7, [r4]
 8003b40:	2f01      	cmp	r7, #1
 8003b42:	d113      	bne.n	8003b6c <MenuDisCharge+0x104>
		lcd_set_xy(0,0);
 8003b44:	2100      	movs	r1, #0
 8003b46:	4608      	mov	r0, r1
 8003b48:	f7fd ffe6 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("OffWhen Vb<");
 8003b4c:	4864      	ldr	r0, [pc, #400]	; (8003ce0 <MenuDisCharge+0x278>)
 8003b4e:	f7fe f863 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.LowVoltage/10 ,1));
 8003b52:	230a      	movs	r3, #10
 8003b54:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8003b58:	4639      	mov	r1, r7
 8003b5a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003b5e:	f7fd fc47 	bl	80013f0 <itoa_koma>
 8003b62:	f7fe f859 	bl	8001c18 <PrintToLCD>
		PrintToLCD("V   ");
 8003b66:	485f      	ldr	r0, [pc, #380]	; (8003ce4 <MenuDisCharge+0x27c>)
 8003b68:	f7fe f856 	bl	8001c18 <PrintToLCD>
	if(CountShow == 2)
 8003b6c:	f994 3000 	ldrsb.w	r3, [r4]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d11b      	bne.n	8003bac <MenuDisCharge+0x144>
		lcd_set_xy(0,0);
 8003b74:	2100      	movs	r1, #0
 8003b76:	4608      	mov	r0, r1
 8003b78:	f7fd ffce 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("P ");
 8003b7c:	485a      	ldr	r0, [pc, #360]	; (8003ce8 <MenuDisCharge+0x280>)
 8003b7e:	f7fe f84b 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa(SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue/3600 ));
 8003b82:	4b5a      	ldr	r3, [pc, #360]	; (8003cec <MenuDisCharge+0x284>)
 8003b84:	6898      	ldr	r0, [r3, #8]
 8003b86:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003b8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003b8e:	f7fd fbbb 	bl	8001308 <itoa>
 8003b92:	f7fe f841 	bl	8001c18 <PrintToLCD>
		PrintToLCD("mAh     ");
 8003b96:	4856      	ldr	r0, [pc, #344]	; (8003cf0 <MenuDisCharge+0x288>)
 8003b98:	f7fe f83e 	bl	8001c18 <PrintToLCD>
		lcd_set_xy(3,1);
 8003b9c:	2003      	movs	r0, #3
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	f7fd ffba 	bl	8001b18 <lcd_set_xy>
		ClockOnLCD_noSec(DischargeTimeSec_Previous);
 8003ba4:	4b53      	ldr	r3, [pc, #332]	; (8003cf4 <MenuDisCharge+0x28c>)
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	f7fe fd30 	bl	800260c <ClockOnLCD_noSec>
	if(CountShow == 3)
 8003bac:	f994 7000 	ldrsb.w	r7, [r4]
 8003bb0:	4c3f      	ldr	r4, [pc, #252]	; (8003cb0 <MenuDisCharge+0x248>)
 8003bb2:	2f03      	cmp	r7, #3
 8003bb4:	d11a      	bne.n	8003bec <MenuDisCharge+0x184>
		lcd_set_xy(0,0);
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	4608      	mov	r0, r1
 8003bba:	f7fd ffad 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("N ");
 8003bbe:	484e      	ldr	r0, [pc, #312]	; (8003cf8 <MenuDisCharge+0x290>)
 8003bc0:	f7fe f82a 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600 ));
 8003bc4:	4b39      	ldr	r3, [pc, #228]	; (8003cac <MenuDisCharge+0x244>)
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003bcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8003bd0:	f7fd fb9a 	bl	8001308 <itoa>
 8003bd4:	f7fe f820 	bl	8001c18 <PrintToLCD>
		PrintToLCD("mAH     ");
 8003bd8:	4848      	ldr	r0, [pc, #288]	; (8003cfc <MenuDisCharge+0x294>)
 8003bda:	f7fe f81d 	bl	8001c18 <PrintToLCD>
		lcd_set_xy(3,1);
 8003bde:	4638      	mov	r0, r7
 8003be0:	2101      	movs	r1, #1
 8003be2:	f7fd ff99 	bl	8001b18 <lcd_set_xy>
		ClockOnLCD_noSec(DischargeTimeSec);
 8003be6:	6820      	ldr	r0, [r4, #0]
 8003be8:	f7fe fd10 	bl	800260c <ClockOnLCD_noSec>
	logDebugD("Init status: ",InitiStatus,0);
 8003bec:	4844      	ldr	r0, [pc, #272]	; (8003d00 <MenuDisCharge+0x298>)
 8003bee:	f001 fc65 	bl	80054bc <printToBufferWithoutEndUART1>
 8003bf2:	7829      	ldrb	r1, [r5, #0]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	4843      	ldr	r0, [pc, #268]	; (8003d04 <MenuDisCharge+0x29c>)
 8003bf8:	f001 fca4 	bl	8005544 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003bfc:	4840      	ldr	r0, [pc, #256]	; (8003d00 <MenuDisCharge+0x298>)
 8003bfe:	f001 fc5d 	bl	80054bc <printToBufferWithoutEndUART1>
 8003c02:	7831      	ldrb	r1, [r6, #0]
 8003c04:	2200      	movs	r2, #0
 8003c06:	4840      	ldr	r0, [pc, #256]	; (8003d08 <MenuDisCharge+0x2a0>)
 8003c08:	f001 fc9c 	bl	8005544 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003c0c:	483c      	ldr	r0, [pc, #240]	; (8003d00 <MenuDisCharge+0x298>)
 8003c0e:	f001 fc55 	bl	80054bc <printToBufferWithoutEndUART1>
 8003c12:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <MenuDisCharge+0x23c>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	7819      	ldrb	r1, [r3, #0]
 8003c18:	483c      	ldr	r0, [pc, #240]	; (8003d0c <MenuDisCharge+0x2a4>)
 8003c1a:	f001 fc93 	bl	8005544 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003c1e:	4838      	ldr	r0, [pc, #224]	; (8003d00 <MenuDisCharge+0x298>)
 8003c20:	f001 fc4c 	bl	80054bc <printToBufferWithoutEndUART1>
 8003c24:	4b3a      	ldr	r3, [pc, #232]	; (8003d10 <MenuDisCharge+0x2a8>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	6819      	ldr	r1, [r3, #0]
 8003c2a:	483a      	ldr	r0, [pc, #232]	; (8003d14 <MenuDisCharge+0x2ac>)
 8003c2c:	f001 fc8a 	bl	8005544 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8003c30:	4833      	ldr	r0, [pc, #204]	; (8003d00 <MenuDisCharge+0x298>)
 8003c32:	f001 fc43 	bl	80054bc <printToBufferWithoutEndUART1>
 8003c36:	f899 1000 	ldrb.w	r1, [r9]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4836      	ldr	r0, [pc, #216]	; (8003d18 <MenuDisCharge+0x2b0>)
 8003c3e:	f001 fc81 	bl	8005544 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003c42:	482f      	ldr	r0, [pc, #188]	; (8003d00 <MenuDisCharge+0x298>)
 8003c44:	f001 fc3a 	bl	80054bc <printToBufferWithoutEndUART1>
 8003c48:	6821      	ldr	r1, [r4, #0]
 8003c4a:	2200      	movs	r2, #0
}
 8003c4c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003c50:	4832      	ldr	r0, [pc, #200]	; (8003d1c <MenuDisCharge+0x2b4>)
 8003c52:	f001 bc77 	b.w	8005544 <printToBufferUART1D>
    		OFF();
 8003c56:	f7ff fbd7 	bl	8003408 <OFF>
    		DisChargeStatusForTimer = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e740      	b.n	8003ae0 <MenuDisCharge+0x78>
	if (key == KEY_BACK)
 8003c5e:	2801      	cmp	r0, #1
 8003c60:	f47f af40 	bne.w	8003ae4 <MenuDisCharge+0x7c>
		CountShow--;
 8003c64:	7823      	ldrb	r3, [r4, #0]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM2-1;
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bfb8      	it	lt
 8003c6e:	2303      	movlt	r3, #3
 8003c70:	7023      	strb	r3, [r4, #0]
 8003c72:	e737      	b.n	8003ae4 <MenuDisCharge+0x7c>
				if (Blink_message_counter<=5)
 8003c74:	783b      	ldrb	r3, [r7, #0]
 8003c76:	2b05      	cmp	r3, #5
 8003c78:	f67f af55 	bls.w	8003b26 <MenuDisCharge+0xbe>
						lcd_set_xy(7,1);
 8003c7c:	f7fd ff4c 	bl	8001b18 <lcd_set_xy>
						LcdOutbyNumber(3,1);
 8003c80:	2101      	movs	r1, #1
 8003c82:	2003      	movs	r0, #3
 8003c84:	e753      	b.n	8003b2e <MenuDisCharge+0xc6>
		if (BatteryLow == 0) U_Battery_Timer = time_sec;
 8003c86:	7813      	ldrb	r3, [r2, #0]
 8003c88:	b91b      	cbnz	r3, 8003c92 <MenuDisCharge+0x22a>
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <MenuDisCharge+0x25c>)
 8003c8c:	6819      	ldr	r1, [r3, #0]
 8003c8e:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <MenuDisCharge+0x258>)
 8003c90:	6019      	str	r1, [r3, #0]
		BatteryLow = 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e707      	b.n	8003aa6 <MenuDisCharge+0x3e>
 8003c96:	bf00      	nop
 8003c98:	200007a1 	.word	0x200007a1
 8003c9c:	200007a0 	.word	0x200007a0
 8003ca0:	20000788 	.word	0x20000788
 8003ca4:	2000078b 	.word	0x2000078b
 8003ca8:	20000794 	.word	0x20000794
 8003cac:	20000780 	.word	0x20000780
 8003cb0:	20000798 	.word	0x20000798
 8003cb4:	2000086e 	.word	0x2000086e
 8003cb8:	200007d4 	.word	0x200007d4
 8003cbc:	20000154 	.word	0x20000154
 8003cc0:	200007d8 	.word	0x200007d8
 8003cc4:	200007e8 	.word	0x200007e8
 8003cc8:	20000791 	.word	0x20000791
 8003ccc:	200007a2 	.word	0x200007a2
 8003cd0:	08006378 	.word	0x08006378
 8003cd4:	2000085a 	.word	0x2000085a
 8003cd8:	20000789 	.word	0x20000789
 8003cdc:	080061cf 	.word	0x080061cf
 8003ce0:	08006255 	.word	0x08006255
 8003ce4:	0800632c 	.word	0x0800632c
 8003ce8:	08006480 	.word	0x08006480
 8003cec:	200000f4 	.word	0x200000f4
 8003cf0:	080061e6 	.word	0x080061e6
 8003cf4:	2000079c 	.word	0x2000079c
 8003cf8:	08006297 	.word	0x08006297
 8003cfc:	08006483 	.word	0x08006483
 8003d00:	08005eb1 	.word	0x08005eb1
 8003d04:	080061ef 	.word	0x080061ef
 8003d08:	0800649d 	.word	0x0800649d
 8003d0c:	080064b2 	.word	0x080064b2
 8003d10:	2000078c 	.word	0x2000078c
 8003d14:	080064c7 	.word	0x080064c7
 8003d18:	080064ef 	.word	0x080064ef
 8003d1c:	08006507 	.word	0x08006507

08003d20 <MenuCheckingCapacity>:
{
 8003d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (EnterInMenu_Status == 0)
 8003d24:	4a86      	ldr	r2, [pc, #536]	; (8003f40 <MenuCheckingCapacity+0x220>)
{
 8003d26:	b085      	sub	sp, #20
	if (EnterInMenu_Status == 0)
 8003d28:	7813      	ldrb	r3, [r2, #0]
{
 8003d2a:	4683      	mov	fp, r0
	if (EnterInMenu_Status == 0)
 8003d2c:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8003d30:	9200      	str	r2, [sp, #0]
 8003d32:	f8df a258 	ldr.w	sl, [pc, #600]	; 8003f8c <MenuCheckingCapacity+0x26c>
 8003d36:	4e83      	ldr	r6, [pc, #524]	; (8003f44 <MenuCheckingCapacity+0x224>)
 8003d38:	f8df 9254 	ldr.w	r9, [pc, #596]	; 8003f90 <MenuCheckingCapacity+0x270>
 8003d3c:	4d82      	ldr	r5, [pc, #520]	; (8003f48 <MenuCheckingCapacity+0x228>)
 8003d3e:	4f83      	ldr	r7, [pc, #524]	; (8003f4c <MenuCheckingCapacity+0x22c>)
 8003d40:	4c83      	ldr	r4, [pc, #524]	; (8003f50 <MenuCheckingCapacity+0x230>)
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d146      	bne.n	8003dd4 <MenuCheckingCapacity+0xb4>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8003d46:	4b83      	ldr	r3, [pc, #524]	; (8003f54 <MenuCheckingCapacity+0x234>)
 8003d48:	881a      	ldrh	r2, [r3, #0]
 8003d4a:	4b83      	ldr	r3, [pc, #524]	; (8003f58 <MenuCheckingCapacity+0x238>)
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	3305      	adds	r3, #5
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d915      	bls.n	8003d80 <MenuCheckingCapacity+0x60>
			lcd_set_xy(0,0);
 8003d54:	4641      	mov	r1, r8
 8003d56:	4640      	mov	r0, r8
 8003d58:	f7fd fede 	bl	8001b18 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8003d5c:	487f      	ldr	r0, [pc, #508]	; (8003f5c <MenuCheckingCapacity+0x23c>)
 8003d5e:	f7fd ff5b 	bl	8001c18 <PrintToLCD>
			delay_ms(2000);
 8003d62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003d66:	f7fd f9b3 	bl	80010d0 <delay_ms>
			lcd_set_xy(0,0);
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	4640      	mov	r0, r8
 8003d6e:	f7fd fed3 	bl	8001b18 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8003d72:	487b      	ldr	r0, [pc, #492]	; (8003f60 <MenuCheckingCapacity+0x240>)
 8003d74:	f7fd ff50 	bl	8001c18 <PrintToLCD>
			delay_ms(3000);
 8003d78:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003d7c:	f7fd f9a8 	bl	80010d0 <delay_ms>
		EnterInMenu_Status = 1;
 8003d80:	2301      	movs	r3, #1
		ChargeStatusForTimer = 0;
 8003d82:	f04f 0800 	mov.w	r8, #0
		EnterInMenu_Status = 1;
 8003d86:	9a00      	ldr	r2, [sp, #0]
		ChargeStatusForTimer = 1;
 8003d88:	9301      	str	r3, [sp, #4]
		EnterInMenu_Status = 1;
 8003d8a:	7013      	strb	r3, [r2, #0]
		DisChargeStatusForTimer = 0;
 8003d8c:	4a75      	ldr	r2, [pc, #468]	; (8003f64 <MenuCheckingCapacity+0x244>)
		ChargeStatusForTimer = 0;
 8003d8e:	f88a 8000 	strb.w	r8, [sl]
		DisChargeStatusForTimer = 0;
 8003d92:	f882 8000 	strb.w	r8, [r2]
		DischargeTimeSec_Previous = 0;
 8003d96:	4a74      	ldr	r2, [pc, #464]	; (8003f68 <MenuCheckingCapacity+0x248>)
		ChargeTimeSec = 0;
 8003d98:	f8c6 8000 	str.w	r8, [r6]
		DischargeTimeSec = 0;
 8003d9c:	f8c9 8000 	str.w	r8, [r9]
		DischargeTimeSec_Previous = 0;
 8003da0:	f8c2 8000 	str.w	r8, [r2]
		BatteryCapacityCharge = 0;
 8003da4:	f8c5 8000 	str.w	r8, [r5]
		BatteryCapacityDischargeCurrent = 0;
 8003da8:	f8c7 8000 	str.w	r8, [r7]
		ChargeStatusForTimer = 1;
 8003dac:	f88a 3000 	strb.w	r3, [sl]
		charge1();
 8003db0:	f7fe ffbc 	bl	8002d2c <charge1>
		ChargeDischargeStatus = CHARGEs;
 8003db4:	9b01      	ldr	r3, [sp, #4]
 8003db6:	4a6d      	ldr	r2, [pc, #436]	; (8003f6c <MenuCheckingCapacity+0x24c>)
		lcd_set_xy(0,0);
 8003db8:	4641      	mov	r1, r8
 8003dba:	4640      	mov	r0, r8
		ChargeDischargeStatus = CHARGEs;
 8003dbc:	7013      	strb	r3, [r2, #0]
		lcd_set_xy(0,0);
 8003dbe:	f7fd feab 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("Testing Battery.");
 8003dc2:	486b      	ldr	r0, [pc, #428]	; (8003f70 <MenuCheckingCapacity+0x250>)
 8003dc4:	f7fd ff28 	bl	8001c18 <PrintToLCD>
		delay_ms(1000);
 8003dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dcc:	f7fd f980 	bl	80010d0 <delay_ms>
		CheckingCapacityCounter = 1;
 8003dd0:	9b01      	ldr	r3, [sp, #4]
 8003dd2:	7023      	strb	r3, [r4, #0]
	if (CheckingCapacityCounter<=3)
 8003dd4:	f994 3000 	ldrsb.w	r3, [r4]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	f300 81f9 	bgt.w	80041d0 <MenuCheckingCapacity+0x4b0>
		if (Module16(Current)>5)
 8003dde:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8003f94 <MenuCheckingCapacity+0x274>
 8003de2:	f8b8 0000 	ldrh.w	r0, [r8]
 8003de6:	b200      	sxth	r0, r0
 8003de8:	f7fd fbd3 	bl	8001592 <Module16>
 8003dec:	2805      	cmp	r0, #5
 8003dee:	f8cd 8004 	str.w	r8, [sp, #4]
 8003df2:	f340 81a2 	ble.w	800413a <MenuCheckingCapacity+0x41a>
			if (U_OUT < SettingsData.LowVoltage && ChargeDischargeStatus == DISCHARGEs  && TimerForReadyMeasurement_ms>1000)
 8003df6:	4b5f      	ldr	r3, [pc, #380]	; (8003f74 <MenuCheckingCapacity+0x254>)
 8003df8:	4a57      	ldr	r2, [pc, #348]	; (8003f58 <MenuCheckingCapacity+0x238>)
 8003dfa:	8819      	ldrh	r1, [r3, #0]
 8003dfc:	6990      	ldr	r0, [r2, #24]
 8003dfe:	4690      	mov	r8, r2
 8003e00:	4288      	cmp	r0, r1
 8003e02:	9302      	str	r3, [sp, #8]
 8003e04:	d92a      	bls.n	8003e5c <MenuCheckingCapacity+0x13c>
 8003e06:	4b59      	ldr	r3, [pc, #356]	; (8003f6c <MenuCheckingCapacity+0x24c>)
 8003e08:	781a      	ldrb	r2, [r3, #0]
 8003e0a:	2a02      	cmp	r2, #2
 8003e0c:	d126      	bne.n	8003e5c <MenuCheckingCapacity+0x13c>
 8003e0e:	4b5a      	ldr	r3, [pc, #360]	; (8003f78 <MenuCheckingCapacity+0x258>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e16:	d921      	bls.n	8003e5c <MenuCheckingCapacity+0x13c>
				DisChargeStatusForTimer = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	4952      	ldr	r1, [pc, #328]	; (8003f64 <MenuCheckingCapacity+0x244>)
 8003e1c:	700b      	strb	r3, [r1, #0]
				if (BatteryCapacityDischargeCurrent/3600 > 100)
 8003e1e:	6839      	ldr	r1, [r7, #0]
 8003e20:	4b56      	ldr	r3, [pc, #344]	; (8003f7c <MenuCheckingCapacity+0x25c>)
 8003e22:	4299      	cmp	r1, r3
 8003e24:	d904      	bls.n	8003e30 <MenuCheckingCapacity+0x110>
					MenuTraining_WriteInLOG(BatteryCapacityDischargeCurrent,DischargeTimeSec,DISCHARGE_l);
 8003e26:	6838      	ldr	r0, [r7, #0]
 8003e28:	f8d9 1000 	ldr.w	r1, [r9]
 8003e2c:	f7fe f89e 	bl	8001f6c <MenuTraining_WriteInLOG>
				DischargeTimeSec_Previous = DischargeTimeSec;
 8003e30:	f8d9 2000 	ldr.w	r2, [r9]
 8003e34:	4b4c      	ldr	r3, [pc, #304]	; (8003f68 <MenuCheckingCapacity+0x248>)
 8003e36:	601a      	str	r2, [r3, #0]
				SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	4b51      	ldr	r3, [pc, #324]	; (8003f80 <MenuCheckingCapacity+0x260>)
 8003e3c:	609a      	str	r2, [r3, #8]
				ChargeStatusForTimer = 1;
 8003e3e:	2201      	movs	r2, #1
				BatteryCapacityCharge = 0;
 8003e40:	2300      	movs	r3, #0
				ChargeStatusForTimer = 1;
 8003e42:	f88a 2000 	strb.w	r2, [sl]
 8003e46:	9203      	str	r2, [sp, #12]
				BatteryCapacityCharge = 0;
 8003e48:	602b      	str	r3, [r5, #0]
				ChargeTimeSec = 0;
 8003e4a:	6033      	str	r3, [r6, #0]
				charge1();
 8003e4c:	f7fe ff6e 	bl	8002d2c <charge1>
				CheckingCapacityCounter ++;
 8003e50:	7823      	ldrb	r3, [r4, #0]
				ChargeDischargeStatus = CHARGEs;
 8003e52:	9a03      	ldr	r2, [sp, #12]
				CheckingCapacityCounter ++;
 8003e54:	3301      	adds	r3, #1
 8003e56:	7023      	strb	r3, [r4, #0]
				ChargeDischargeStatus = CHARGEs;
 8003e58:	4b44      	ldr	r3, [pc, #272]	; (8003f6c <MenuCheckingCapacity+0x24c>)
 8003e5a:	701a      	strb	r2, [r3, #0]
			if (((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))&&CheckingCapacityCounter<3)
 8003e5c:	4b45      	ldr	r3, [pc, #276]	; (8003f74 <MenuCheckingCapacity+0x254>)
 8003e5e:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d208      	bcs.n	8003e7a <MenuCheckingCapacity+0x15a>
 8003e68:	4b40      	ldr	r3, [pc, #256]	; (8003f6c <MenuCheckingCapacity+0x24c>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d104      	bne.n	8003e7a <MenuCheckingCapacity+0x15a>
 8003e70:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <MenuCheckingCapacity+0x258>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e78:	d808      	bhi.n	8003e8c <MenuCheckingCapacity+0x16c>
 8003e7a:	4b42      	ldr	r3, [pc, #264]	; (8003f84 <MenuCheckingCapacity+0x264>)
 8003e7c:	6832      	ldr	r2, [r6, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d922      	bls.n	8003eca <MenuCheckingCapacity+0x1aa>
 8003e84:	4b39      	ldr	r3, [pc, #228]	; (8003f6c <MenuCheckingCapacity+0x24c>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d11e      	bne.n	8003eca <MenuCheckingCapacity+0x1aa>
 8003e8c:	f994 3000 	ldrsb.w	r3, [r4]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	dc1a      	bgt.n	8003eca <MenuCheckingCapacity+0x1aa>
				ChargeStatusForTimer = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	f88a 3000 	strb.w	r3, [sl]
				if (BatteryCapacityCharge/3600 > 100)
 8003e9a:	682a      	ldr	r2, [r5, #0]
 8003e9c:	4b37      	ldr	r3, [pc, #220]	; (8003f7c <MenuCheckingCapacity+0x25c>)
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d904      	bls.n	8003eac <MenuCheckingCapacity+0x18c>
					MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003ea2:	6828      	ldr	r0, [r5, #0]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	6831      	ldr	r1, [r6, #0]
 8003ea8:	f7fe f860 	bl	8001f6c <MenuTraining_WriteInLOG>
				DisChargeStatusForTimer = 1;
 8003eac:	2301      	movs	r3, #1
 8003eae:	4a2d      	ldr	r2, [pc, #180]	; (8003f64 <MenuCheckingCapacity+0x244>)
 8003eb0:	7013      	strb	r3, [r2, #0]
				BatteryCapacityDischargeCurrent = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	603b      	str	r3, [r7, #0]
				DischargeTimeSec = 0;
 8003eb6:	f8c9 3000 	str.w	r3, [r9]
				discharge1();
 8003eba:	f7fe fe29 	bl	8002b10 <discharge1>
				ChargeDischargeStatus = DISCHARGEs;
 8003ebe:	2202      	movs	r2, #2
				CheckingCapacityCounter ++;
 8003ec0:	7823      	ldrb	r3, [r4, #0]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	7023      	strb	r3, [r4, #0]
				ChargeDischargeStatus = DISCHARGEs;
 8003ec6:	4b29      	ldr	r3, [pc, #164]	; (8003f6c <MenuCheckingCapacity+0x24c>)
 8003ec8:	701a      	strb	r2, [r3, #0]
			if (((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))&&CheckingCapacityCounter>=3)
 8003eca:	4b2a      	ldr	r3, [pc, #168]	; (8003f74 <MenuCheckingCapacity+0x254>)
 8003ecc:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d208      	bcs.n	8003ee8 <MenuCheckingCapacity+0x1c8>
 8003ed6:	4b25      	ldr	r3, [pc, #148]	; (8003f6c <MenuCheckingCapacity+0x24c>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d104      	bne.n	8003ee8 <MenuCheckingCapacity+0x1c8>
 8003ede:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <MenuCheckingCapacity+0x258>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ee6:	d808      	bhi.n	8003efa <MenuCheckingCapacity+0x1da>
 8003ee8:	4b26      	ldr	r3, [pc, #152]	; (8003f84 <MenuCheckingCapacity+0x264>)
 8003eea:	6832      	ldr	r2, [r6, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d952      	bls.n	8003f98 <MenuCheckingCapacity+0x278>
 8003ef2:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <MenuCheckingCapacity+0x24c>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d14e      	bne.n	8003f98 <MenuCheckingCapacity+0x278>
 8003efa:	f994 3000 	ldrsb.w	r3, [r4]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	dd4a      	ble.n	8003f98 <MenuCheckingCapacity+0x278>
				OFF();
 8003f02:	f7ff fa81 	bl	8003408 <OFF>
				ChargeStatusForTimer = 0;
 8003f06:	2300      	movs	r3, #0
				DisChargeStatusForTimer = 0;
 8003f08:	4a16      	ldr	r2, [pc, #88]	; (8003f64 <MenuCheckingCapacity+0x244>)
				ChargeStatusForTimer = 0;
 8003f0a:	f88a 3000 	strb.w	r3, [sl]
				DisChargeStatusForTimer = 0;
 8003f0e:	7013      	strb	r3, [r2, #0]
				if (BatteryCapacityCharge/3600 > 100)
 8003f10:	682a      	ldr	r2, [r5, #0]
 8003f12:	4b1a      	ldr	r3, [pc, #104]	; (8003f7c <MenuCheckingCapacity+0x25c>)
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d904      	bls.n	8003f22 <MenuCheckingCapacity+0x202>
					MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003f18:	6828      	ldr	r0, [r5, #0]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	6831      	ldr	r1, [r6, #0]
 8003f1e:	f7fe f825 	bl	8001f6c <MenuTraining_WriteInLOG>
				CountShow = 2;
 8003f22:	2202      	movs	r2, #2
				CheckingCapacityCounter ++;
 8003f24:	7823      	ldrb	r3, [r4, #0]
			if (key == KEY_NEXT)
 8003f26:	4593      	cmp	fp, r2
				CheckingCapacityCounter ++;
 8003f28:	f103 0301 	add.w	r3, r3, #1
 8003f2c:	7023      	strb	r3, [r4, #0]
				CountShow = 2;
 8003f2e:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <MenuCheckingCapacity+0x268>)
 8003f30:	701a      	strb	r2, [r3, #0]
			if (key == KEY_NEXT)
 8003f32:	f040 80ee 	bne.w	8004112 <MenuCheckingCapacity+0x3f2>
				if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY-1;
 8003f36:	2203      	movs	r2, #3
 8003f38:	4b13      	ldr	r3, [pc, #76]	; (8003f88 <MenuCheckingCapacity+0x268>)
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	e038      	b.n	8003fb0 <MenuCheckingCapacity+0x290>
 8003f3e:	bf00      	nop
 8003f40:	200007a0 	.word	0x200007a0
 8003f44:	2000078c 	.word	0x2000078c
 8003f48:	2000077c 	.word	0x2000077c
 8003f4c:	20000780 	.word	0x20000780
 8003f50:	20000790 	.word	0x20000790
 8003f54:	20000874 	.word	0x20000874
 8003f58:	20000154 	.word	0x20000154
 8003f5c:	0800643b 	.word	0x0800643b
 8003f60:	0800644c 	.word	0x0800644c
 8003f64:	20000794 	.word	0x20000794
 8003f68:	2000079c 	.word	0x2000079c
 8003f6c:	20000270 	.word	0x20000270
 8003f70:	0800645d 	.word	0x0800645d
 8003f74:	2000086e 	.word	0x2000086e
 8003f78:	200007cc 	.word	0x200007cc
 8003f7c:	00058c4f 	.word	0x00058c4f
 8003f80:	200000f4 	.word	0x200000f4
 8003f84:	20000a18 	.word	0x20000a18
 8003f88:	20000791 	.word	0x20000791
 8003f8c:	2000078b 	.word	0x2000078b
 8003f90:	20000798 	.word	0x20000798
 8003f94:	2000085a 	.word	0x2000085a
			if (key == KEY_NEXT)
 8003f98:	f1bb 0f02 	cmp.w	fp, #2
 8003f9c:	f040 80b9 	bne.w	8004112 <MenuCheckingCapacity+0x3f2>
				CountShow++;
 8003fa0:	4ac6      	ldr	r2, [pc, #792]	; (80042bc <MenuCheckingCapacity+0x59c>)
 8003fa2:	7813      	ldrb	r3, [r2, #0]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	b25b      	sxtb	r3, r3
				if (CountShow==MAX_SCREENS__MENU_CAPACITY) CountShow=0;
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	bf08      	it	eq
 8003fac:	2300      	moveq	r3, #0
 8003fae:	7013      	strb	r3, [r2, #0]
			if(CountShow == 0)
 8003fb0:	4cc2      	ldr	r4, [pc, #776]	; (80042bc <MenuCheckingCapacity+0x59c>)
 8003fb2:	f994 b000 	ldrsb.w	fp, [r4]
 8003fb6:	f1bb 0f00 	cmp.w	fp, #0
 8003fba:	d12e      	bne.n	800401a <MenuCheckingCapacity+0x2fa>
				lcd_set_xy(0,0);
 8003fbc:	4659      	mov	r1, fp
 8003fbe:	4658      	mov	r0, fp
 8003fc0:	f7fd fdaa 	bl	8001b18 <lcd_set_xy>
				PrintToLCD(itoa_koma(U_OUT,2));
 8003fc4:	9b02      	ldr	r3, [sp, #8]
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	8818      	ldrh	r0, [r3, #0]
 8003fca:	f7fd fa11 	bl	80013f0 <itoa_koma>
 8003fce:	f7fd fe23 	bl	8001c18 <PrintToLCD>
				PrintToLCD("V ");
 8003fd2:	48bb      	ldr	r0, [pc, #748]	; (80042c0 <MenuCheckingCapacity+0x5a0>)
 8003fd4:	f7fd fe20 	bl	8001c18 <PrintToLCD>
				PrintToLCD(itoa(Current));
 8003fd8:	9b01      	ldr	r3, [sp, #4]
 8003fda:	8818      	ldrh	r0, [r3, #0]
 8003fdc:	b200      	sxth	r0, r0
 8003fde:	f7fd f993 	bl	8001308 <itoa>
 8003fe2:	f7fd fe19 	bl	8001c18 <PrintToLCD>
				PrintToLCD("mA     ");
 8003fe6:	48b7      	ldr	r0, [pc, #732]	; (80042c4 <MenuCheckingCapacity+0x5a4>)
 8003fe8:	f7fd fe16 	bl	8001c18 <PrintToLCD>
				lcd_set_xy(6,1);
 8003fec:	2101      	movs	r1, #1
 8003fee:	2006      	movs	r0, #6
 8003ff0:	f7fd fd92 	bl	8001b18 <lcd_set_xy>
				LcdOutbyNumber(4,1);
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	2004      	movs	r0, #4
 8003ff8:	f7fd fdb6 	bl	8001b68 <LcdOutbyNumber>
				if (Status_Out ==1)
 8003ffc:	4bb2      	ldr	r3, [pc, #712]	; (80042c8 <MenuCheckingCapacity+0x5a8>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	f040 8093 	bne.w	800412c <MenuCheckingCapacity+0x40c>
					lcd_set_xy(7,1);
 8004006:	4619      	mov	r1, r3
 8004008:	2007      	movs	r0, #7
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	f7fd fd84 	bl	8001b18 <lcd_set_xy>
					LcdOutbyNumber(0,1);//charge
 8004010:	9b01      	ldr	r3, [sp, #4]
 8004012:	4658      	mov	r0, fp
 8004014:	4619      	mov	r1, r3
					LcdOutbyNumber(2,1);//discharge
 8004016:	f7fd fda7 	bl	8001b68 <LcdOutbyNumber>
			if(CountShow == 1)
 800401a:	f994 b000 	ldrsb.w	fp, [r4]
 800401e:	f1bb 0f01 	cmp.w	fp, #1
 8004022:	d127      	bne.n	8004074 <MenuCheckingCapacity+0x354>
				lcd_set_xy(0,0);
 8004024:	2100      	movs	r1, #0
 8004026:	4608      	mov	r0, r1
 8004028:	f7fd fd76 	bl	8001b18 <lcd_set_xy>
				PrintToLCD(itoa(SettingsData.ChargeTime));
 800402c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004030:	f7fd f96a 	bl	8001308 <itoa>
 8004034:	f7fd fdf0 	bl	8001c18 <PrintToLCD>
				PrintToLCD("h ");
 8004038:	48a4      	ldr	r0, [pc, #656]	; (80042cc <MenuCheckingCapacity+0x5ac>)
 800403a:	f7fd fded 	bl	8001c18 <PrintToLCD>
				PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 800403e:	230a      	movs	r3, #10
 8004040:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8004044:	4659      	mov	r1, fp
 8004046:	fbb0 f0f3 	udiv	r0, r0, r3
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	f7fd f9d0 	bl	80013f0 <itoa_koma>
 8004050:	f7fd fde2 	bl	8001c18 <PrintToLCD>
				PrintToLCD("V ");
 8004054:	489a      	ldr	r0, [pc, #616]	; (80042c0 <MenuCheckingCapacity+0x5a0>)
 8004056:	f7fd fddf 	bl	8001c18 <PrintToLCD>
				PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800405a:	4659      	mov	r1, fp
 800405c:	f8d8 0020 	ldr.w	r0, [r8, #32]
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8004060:	9b01      	ldr	r3, [sp, #4]
 8004062:	fbb0 f0f3 	udiv	r0, r0, r3
 8004066:	f7fd f9c3 	bl	80013f0 <itoa_koma>
 800406a:	f7fd fdd5 	bl	8001c18 <PrintToLCD>
			PrintToLCD("V     ");
 800406e:	4898      	ldr	r0, [pc, #608]	; (80042d0 <MenuCheckingCapacity+0x5b0>)
 8004070:	f7fd fdd2 	bl	8001c18 <PrintToLCD>
		if(CountShow == 2)
 8004074:	f994 8000 	ldrsb.w	r8, [r4]
 8004078:	f1b8 0f02 	cmp.w	r8, #2
 800407c:	d122      	bne.n	80040c4 <MenuCheckingCapacity+0x3a4>
			lcd_set_xy(0,0);
 800407e:	2100      	movs	r1, #0
 8004080:	4608      	mov	r0, r1
 8004082:	f7fd fd49 	bl	8001b18 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 8004086:	2101      	movs	r1, #1
 8004088:	4640      	mov	r0, r8
 800408a:	f7fd fd6d 	bl	8001b68 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 800408e:	2100      	movs	r1, #0
 8004090:	2001      	movs	r0, #1
 8004092:	f7fd fd41 	bl	8001b18 <lcd_set_xy>
			PrintToLCD(" ");
 8004096:	488f      	ldr	r0, [pc, #572]	; (80042d4 <MenuCheckingCapacity+0x5b4>)
 8004098:	f7fd fdbe 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600));
 800409c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80040a0:	6838      	ldr	r0, [r7, #0]
 80040a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80040a6:	f7fd f92f 	bl	8001308 <itoa>
 80040aa:	f7fd fdb5 	bl	8001c18 <PrintToLCD>
			PrintToLCD("mAH      ");
 80040ae:	488a      	ldr	r0, [pc, #552]	; (80042d8 <MenuCheckingCapacity+0x5b8>)
 80040b0:	f7fd fdb2 	bl	8001c18 <PrintToLCD>
			lcd_set_xy(3,1);
 80040b4:	2003      	movs	r0, #3
 80040b6:	2101      	movs	r1, #1
 80040b8:	f7fd fd2e 	bl	8001b18 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 80040bc:	f8d9 0000 	ldr.w	r0, [r9]
 80040c0:	f7fe faa4 	bl	800260c <ClockOnLCD_noSec>
		if(CountShow == 3)
 80040c4:	f994 4000 	ldrsb.w	r4, [r4]
 80040c8:	2c03      	cmp	r4, #3
 80040ca:	d142      	bne.n	8004152 <MenuCheckingCapacity+0x432>
			lcd_set_xy(0,0);
 80040cc:	2100      	movs	r1, #0
 80040ce:	4608      	mov	r0, r1
 80040d0:	f7fd fd22 	bl	8001b18 <lcd_set_xy>
			LcdOutbyNumber(0,1);//charge
 80040d4:	2101      	movs	r1, #1
 80040d6:	2000      	movs	r0, #0
 80040d8:	f7fd fd46 	bl	8001b68 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 80040dc:	2100      	movs	r1, #0
 80040de:	2001      	movs	r0, #1
 80040e0:	f7fd fd1a 	bl	8001b18 <lcd_set_xy>
			PrintToLCD(" ");
 80040e4:	487b      	ldr	r0, [pc, #492]	; (80042d4 <MenuCheckingCapacity+0x5b4>)
 80040e6:	f7fd fd97 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityCharge/3600));
 80040ea:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80040ee:	6828      	ldr	r0, [r5, #0]
 80040f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80040f4:	f7fd f908 	bl	8001308 <itoa>
 80040f8:	f7fd fd8e 	bl	8001c18 <PrintToLCD>
			PrintToLCD("mAH      ");
 80040fc:	4876      	ldr	r0, [pc, #472]	; (80042d8 <MenuCheckingCapacity+0x5b8>)
 80040fe:	f7fd fd8b 	bl	8001c18 <PrintToLCD>
			lcd_set_xy(3,1);
 8004102:	4620      	mov	r0, r4
 8004104:	2101      	movs	r1, #1
 8004106:	f7fd fd07 	bl	8001b18 <lcd_set_xy>
			ClockOnLCD_noSec(ChargeTimeSec);
 800410a:	6830      	ldr	r0, [r6, #0]
 800410c:	f7fe fa7e 	bl	800260c <ClockOnLCD_noSec>
 8004110:	e01f      	b.n	8004152 <MenuCheckingCapacity+0x432>
			if (key == KEY_BACK)
 8004112:	f1bb 0f01 	cmp.w	fp, #1
 8004116:	f47f af4b 	bne.w	8003fb0 <MenuCheckingCapacity+0x290>
				CountShow--;
 800411a:	4a68      	ldr	r2, [pc, #416]	; (80042bc <MenuCheckingCapacity+0x59c>)
 800411c:	7813      	ldrb	r3, [r2, #0]
 800411e:	3b01      	subs	r3, #1
 8004120:	b25b      	sxtb	r3, r3
				if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY-1;
 8004122:	2b00      	cmp	r3, #0
				CountShow--;
 8004124:	7013      	strb	r3, [r2, #0]
				if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY-1;
 8004126:	f6bf af43 	bge.w	8003fb0 <MenuCheckingCapacity+0x290>
 800412a:	e704      	b.n	8003f36 <MenuCheckingCapacity+0x216>
					lcd_set_xy(7,1);
 800412c:	2101      	movs	r1, #1
 800412e:	2007      	movs	r0, #7
 8004130:	f7fd fcf2 	bl	8001b18 <lcd_set_xy>
					LcdOutbyNumber(2,1);//discharge
 8004134:	2101      	movs	r1, #1
 8004136:	2002      	movs	r0, #2
 8004138:	e76d      	b.n	8004016 <MenuCheckingCapacity+0x2f6>
			if (TimerForReadyMeasurement_ms>1000)
 800413a:	4b68      	ldr	r3, [pc, #416]	; (80042dc <MenuCheckingCapacity+0x5bc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004142:	d906      	bls.n	8004152 <MenuCheckingCapacity+0x432>
				lcd_set_xy(0,0);
 8004144:	2100      	movs	r1, #0
 8004146:	4608      	mov	r0, r1
 8004148:	f7fd fce6 	bl	8001b18 <lcd_set_xy>
				PrintToLCD("NO/BAD Battery  ");
 800414c:	4864      	ldr	r0, [pc, #400]	; (80042e0 <MenuCheckingCapacity+0x5c0>)
 800414e:	f7fd fd63 	bl	8001c18 <PrintToLCD>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8004152:	4864      	ldr	r0, [pc, #400]	; (80042e4 <MenuCheckingCapacity+0x5c4>)
 8004154:	f001 f9b2 	bl	80054bc <printToBufferWithoutEndUART1>
 8004158:	9b00      	ldr	r3, [sp, #0]
 800415a:	2200      	movs	r2, #0
 800415c:	7819      	ldrb	r1, [r3, #0]
 800415e:	4862      	ldr	r0, [pc, #392]	; (80042e8 <MenuCheckingCapacity+0x5c8>)
 8004160:	f001 f9f0 	bl	8005544 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8004164:	485f      	ldr	r0, [pc, #380]	; (80042e4 <MenuCheckingCapacity+0x5c4>)
 8004166:	f001 f9a9 	bl	80054bc <printToBufferWithoutEndUART1>
 800416a:	f89a 1000 	ldrb.w	r1, [sl]
 800416e:	2200      	movs	r2, #0
 8004170:	485e      	ldr	r0, [pc, #376]	; (80042ec <MenuCheckingCapacity+0x5cc>)
 8004172:	f001 f9e7 	bl	8005544 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8004176:	485b      	ldr	r0, [pc, #364]	; (80042e4 <MenuCheckingCapacity+0x5c4>)
 8004178:	f001 f9a0 	bl	80054bc <printToBufferWithoutEndUART1>
 800417c:	6831      	ldr	r1, [r6, #0]
 800417e:	2200      	movs	r2, #0
 8004180:	485b      	ldr	r0, [pc, #364]	; (80042f0 <MenuCheckingCapacity+0x5d0>)
 8004182:	f001 f9df 	bl	8005544 <printToBufferUART1D>
	logDebugD("BatteryCapacityCharge: ",BatteryCapacityCharge,0);
 8004186:	4857      	ldr	r0, [pc, #348]	; (80042e4 <MenuCheckingCapacity+0x5c4>)
 8004188:	f001 f998 	bl	80054bc <printToBufferWithoutEndUART1>
 800418c:	6829      	ldr	r1, [r5, #0]
 800418e:	2200      	movs	r2, #0
 8004190:	4858      	ldr	r0, [pc, #352]	; (80042f4 <MenuCheckingCapacity+0x5d4>)
 8004192:	f001 f9d7 	bl	8005544 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8004196:	4853      	ldr	r0, [pc, #332]	; (80042e4 <MenuCheckingCapacity+0x5c4>)
 8004198:	f001 f990 	bl	80054bc <printToBufferWithoutEndUART1>
 800419c:	4b56      	ldr	r3, [pc, #344]	; (80042f8 <MenuCheckingCapacity+0x5d8>)
 800419e:	2200      	movs	r2, #0
 80041a0:	7819      	ldrb	r1, [r3, #0]
 80041a2:	4856      	ldr	r0, [pc, #344]	; (80042fc <MenuCheckingCapacity+0x5dc>)
 80041a4:	f001 f9ce 	bl	8005544 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 80041a8:	484e      	ldr	r0, [pc, #312]	; (80042e4 <MenuCheckingCapacity+0x5c4>)
 80041aa:	f001 f987 	bl	80054bc <printToBufferWithoutEndUART1>
 80041ae:	f8d9 1000 	ldr.w	r1, [r9]
 80041b2:	2200      	movs	r2, #0
 80041b4:	4852      	ldr	r0, [pc, #328]	; (8004300 <MenuCheckingCapacity+0x5e0>)
 80041b6:	f001 f9c5 	bl	8005544 <printToBufferUART1D>
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 80041ba:	484a      	ldr	r0, [pc, #296]	; (80042e4 <MenuCheckingCapacity+0x5c4>)
 80041bc:	f001 f97e 	bl	80054bc <printToBufferWithoutEndUART1>
 80041c0:	2200      	movs	r2, #0
 80041c2:	6839      	ldr	r1, [r7, #0]
 80041c4:	484f      	ldr	r0, [pc, #316]	; (8004304 <MenuCheckingCapacity+0x5e4>)
}
 80041c6:	b005      	add	sp, #20
 80041c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 80041cc:	f001 b9ba 	b.w	8005544 <printToBufferUART1D>
 80041d0:	4c3a      	ldr	r4, [pc, #232]	; (80042bc <MenuCheckingCapacity+0x59c>)
		if (key == KEY_NEXT)
 80041d2:	f1bb 0f02 	cmp.w	fp, #2
 80041d6:	f994 3000 	ldrsb.w	r3, [r4]
 80041da:	d15f      	bne.n	800429c <MenuCheckingCapacity+0x57c>
			CountShow++;
 80041dc:	3301      	adds	r3, #1
 80041de:	b25b      	sxtb	r3, r3
			if (CountShow==MAX_SCREENS__MENU_CAPACITY1) CountShow=0;
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	bf08      	it	eq
 80041e4:	2300      	moveq	r3, #0
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY1-1;
 80041e6:	7023      	strb	r3, [r4, #0]
		if(CountShow == 0)
 80041e8:	f994 8000 	ldrsb.w	r8, [r4]
 80041ec:	f1b8 0f00 	cmp.w	r8, #0
 80041f0:	d12d      	bne.n	800424e <MenuCheckingCapacity+0x52e>
			lcd_set_xy(0,0);
 80041f2:	4641      	mov	r1, r8
 80041f4:	4640      	mov	r0, r8
 80041f6:	f7fd fc8f 	bl	8001b18 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 80041fa:	4b43      	ldr	r3, [pc, #268]	; (8004308 <MenuCheckingCapacity+0x5e8>)
 80041fc:	2102      	movs	r1, #2
 80041fe:	8818      	ldrh	r0, [r3, #0]
 8004200:	f7fd f8f6 	bl	80013f0 <itoa_koma>
 8004204:	f7fd fd08 	bl	8001c18 <PrintToLCD>
			PrintToLCD("V ");
 8004208:	482d      	ldr	r0, [pc, #180]	; (80042c0 <MenuCheckingCapacity+0x5a0>)
 800420a:	f7fd fd05 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa(Current));
 800420e:	4b3f      	ldr	r3, [pc, #252]	; (800430c <MenuCheckingCapacity+0x5ec>)
 8004210:	8818      	ldrh	r0, [r3, #0]
 8004212:	b200      	sxth	r0, r0
 8004214:	f7fd f878 	bl	8001308 <itoa>
 8004218:	f7fd fcfe 	bl	8001c18 <PrintToLCD>
			PrintToLCD("mA     ");
 800421c:	4829      	ldr	r0, [pc, #164]	; (80042c4 <MenuCheckingCapacity+0x5a4>)
 800421e:	f7fd fcfb 	bl	8001c18 <PrintToLCD>
			lcd_set_xy(6,1);
 8004222:	2101      	movs	r1, #1
 8004224:	2006      	movs	r0, #6
 8004226:	f7fd fc77 	bl	8001b18 <lcd_set_xy>
			LcdOutbyNumber(4,1);
 800422a:	2101      	movs	r1, #1
 800422c:	2004      	movs	r0, #4
 800422e:	f7fd fc9b 	bl	8001b68 <LcdOutbyNumber>
			if (Status_Out ==1)
 8004232:	4b25      	ldr	r3, [pc, #148]	; (80042c8 <MenuCheckingCapacity+0x5a8>)
 8004234:	f893 b000 	ldrb.w	fp, [r3]
 8004238:	f1bb 0f01 	cmp.w	fp, #1
 800423c:	d137      	bne.n	80042ae <MenuCheckingCapacity+0x58e>
				lcd_set_xy(7,1);
 800423e:	4659      	mov	r1, fp
 8004240:	2007      	movs	r0, #7
 8004242:	f7fd fc69 	bl	8001b18 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8004246:	4659      	mov	r1, fp
 8004248:	4640      	mov	r0, r8
				LcdOutbyNumber(2,1);//discharge
 800424a:	f7fd fc8d 	bl	8001b68 <LcdOutbyNumber>
		if(CountShow == 1)
 800424e:	f994 8000 	ldrsb.w	r8, [r4]
 8004252:	f1b8 0f01 	cmp.w	r8, #1
 8004256:	f47f af0d 	bne.w	8004074 <MenuCheckingCapacity+0x354>
			lcd_set_xy(0,0);
 800425a:	2100      	movs	r1, #0
			PrintToLCD(itoa(SettingsData.ChargeTime));
 800425c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8004310 <MenuCheckingCapacity+0x5f0>
			lcd_set_xy(0,0);
 8004260:	4608      	mov	r0, r1
 8004262:	f7fd fc59 	bl	8001b18 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8004266:	f8db 0010 	ldr.w	r0, [fp, #16]
 800426a:	f7fd f84d 	bl	8001308 <itoa>
 800426e:	f7fd fcd3 	bl	8001c18 <PrintToLCD>
			PrintToLCD("h ");
 8004272:	4816      	ldr	r0, [pc, #88]	; (80042cc <MenuCheckingCapacity+0x5ac>)
 8004274:	f7fd fcd0 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8004278:	230a      	movs	r3, #10
 800427a:	f8db 0018 	ldr.w	r0, [fp, #24]
 800427e:	4641      	mov	r1, r8
 8004280:	fbb0 f0f3 	udiv	r0, r0, r3
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	f7fd f8b3 	bl	80013f0 <itoa_koma>
 800428a:	f7fd fcc5 	bl	8001c18 <PrintToLCD>
			PrintToLCD("V ");
 800428e:	480c      	ldr	r0, [pc, #48]	; (80042c0 <MenuCheckingCapacity+0x5a0>)
 8004290:	f7fd fcc2 	bl	8001c18 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8004294:	f8db 0020 	ldr.w	r0, [fp, #32]
 8004298:	4641      	mov	r1, r8
 800429a:	e6e1      	b.n	8004060 <MenuCheckingCapacity+0x340>
		if (key == KEY_BACK)
 800429c:	f1bb 0f01 	cmp.w	fp, #1
 80042a0:	d1a2      	bne.n	80041e8 <MenuCheckingCapacity+0x4c8>
			CountShow--;
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY1-1;
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bfb8      	it	lt
 80042aa:	2303      	movlt	r3, #3
 80042ac:	e79b      	b.n	80041e6 <MenuCheckingCapacity+0x4c6>
				lcd_set_xy(7,1);
 80042ae:	2101      	movs	r1, #1
 80042b0:	2007      	movs	r0, #7
 80042b2:	f7fd fc31 	bl	8001b18 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 80042b6:	2101      	movs	r1, #1
 80042b8:	2002      	movs	r0, #2
 80042ba:	e7c6      	b.n	800424a <MenuCheckingCapacity+0x52a>
 80042bc:	20000791 	.word	0x20000791
 80042c0:	08006378 	.word	0x08006378
 80042c4:	0800646e 	.word	0x0800646e
 80042c8:	200007a9 	.word	0x200007a9
 80042cc:	08005c16 	.word	0x08005c16
 80042d0:	0800636e 	.word	0x0800636e
 80042d4:	080063a0 	.word	0x080063a0
 80042d8:	08006476 	.word	0x08006476
 80042dc:	200007cc 	.word	0x200007cc
 80042e0:	0800648c 	.word	0x0800648c
 80042e4:	08005eb1 	.word	0x08005eb1
 80042e8:	0800649d 	.word	0x0800649d
 80042ec:	080064b2 	.word	0x080064b2
 80042f0:	080064c7 	.word	0x080064c7
 80042f4:	080064d7 	.word	0x080064d7
 80042f8:	20000794 	.word	0x20000794
 80042fc:	080064ef 	.word	0x080064ef
 8004300:	08006507 	.word	0x08006507
 8004304:	0800651a 	.word	0x0800651a
 8004308:	2000086e 	.word	0x2000086e
 800430c:	2000085a 	.word	0x2000085a
 8004310:	20000154 	.word	0x20000154

08004314 <All_OUT_OFF_When_Power_OFF>:
{
 8004314:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ( (U_IN < VOLTAGE_OFF_SYSTEM) && (time_sec>6))
 8004316:	4d34      	ldr	r5, [pc, #208]	; (80043e8 <All_OUT_OFF_When_Power_OFF+0xd4>)
{
 8004318:	b091      	sub	sp, #68	; 0x44
	if ( (U_IN < VOLTAGE_OFF_SYSTEM) && (time_sec>6))
 800431a:	882b      	ldrh	r3, [r5, #0]
 800431c:	4933      	ldr	r1, [pc, #204]	; (80043ec <All_OUT_OFF_When_Power_OFF+0xd8>)
 800431e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004322:	d25d      	bcs.n	80043e0 <All_OUT_OFF_When_Power_OFF+0xcc>
 8004324:	4b32      	ldr	r3, [pc, #200]	; (80043f0 <All_OUT_OFF_When_Power_OFF+0xdc>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b06      	cmp	r3, #6
 800432a:	d959      	bls.n	80043e0 <All_OUT_OFF_When_Power_OFF+0xcc>
		if ((GPIOB->IDR & 0x01)==1)//if Out on
 800432c:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <All_OUT_OFF_When_Power_OFF+0xe0>)
 800432e:	4c32      	ldr	r4, [pc, #200]	; (80043f8 <All_OUT_OFF_When_Power_OFF+0xe4>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f013 0301 	ands.w	r3, r3, #1
			SaveDataWhenPowerOff.OutState = 1;
 8004336:	bf18      	it	ne
 8004338:	2301      	movne	r3, #1
			SaveDataWhenPowerOff.OutState = 0;
 800433a:	61a3      	str	r3, [r4, #24]
		OFF();
 800433c:	f7ff f864 	bl	8003408 <OFF>
		if (EEpromWrite_status == 0)
 8004340:	780b      	ldrb	r3, [r1, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d14a      	bne.n	80043dc <All_OUT_OFF_When_Power_OFF+0xc8>
			EEpromWrite_status = 1;
 8004346:	2301      	movs	r3, #1
			SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = BatteryCapacityDischargeCurrent;
 8004348:	4e2c      	ldr	r6, [pc, #176]	; (80043fc <All_OUT_OFF_When_Power_OFF+0xe8>)
			EEpromWrite_status = 1;
 800434a:	700b      	strb	r3, [r1, #0]
			SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = BatteryCapacityDischargeCurrent;
 800434c:	6833      	ldr	r3, [r6, #0]
 800434e:	6123      	str	r3, [r4, #16]
			DataWhenPowerOffWriteToFlash_CRC();
 8004350:	f7fc fbce 	bl	8000af0 <DataWhenPowerOffWriteToFlash_CRC>
			logDebugD("dc: ",SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent,2);
 8004354:	482a      	ldr	r0, [pc, #168]	; (8004400 <All_OUT_OFF_When_Power_OFF+0xec>)
 8004356:	f001 f8b1 	bl	80054bc <printToBufferWithoutEndUART1>
 800435a:	2202      	movs	r2, #2
 800435c:	6921      	ldr	r1, [r4, #16]
 800435e:	4829      	ldr	r0, [pc, #164]	; (8004404 <All_OUT_OFF_When_Power_OFF+0xf0>)
 8004360:	f001 f8f0 	bl	8005544 <printToBufferUART1D>
			if (BatteryCapacityDischargeCurrent/3600>10)
 8004364:	f649 23af 	movw	r3, #39599	; 0x9aaf
 8004368:	6832      	ldr	r2, [r6, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d915      	bls.n	800439a <All_OUT_OFF_When_Power_OFF+0x86>
				ClockStringNoSec(DischargeTimeSec,s_clock);
 800436e:	4b26      	ldr	r3, [pc, #152]	; (8004408 <All_OUT_OFF_When_Power_OFF+0xf4>)
 8004370:	a90b      	add	r1, sp, #44	; 0x2c
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	f7fd f9be 	bl	80016f4 <ClockStringNoSec>
				Merge3Strings(itoaP(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent/3600,str),"mAh",s_clock,strout);
 8004378:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800437c:	6920      	ldr	r0, [r4, #16]
 800437e:	a901      	add	r1, sp, #4
 8004380:	fbb0 f0f3 	udiv	r0, r0, r3
 8004384:	f7fc fffa 	bl	800137c <itoaP>
 8004388:	4920      	ldr	r1, [pc, #128]	; (800440c <All_OUT_OFF_When_Power_OFF+0xf8>)
 800438a:	ab06      	add	r3, sp, #24
 800438c:	aa0b      	add	r2, sp, #44	; 0x2c
 800438e:	f7fd f923 	bl	80015d8 <Merge3Strings>
				WriteInLOGc(strout,DISCHARGE_l);
 8004392:	2102      	movs	r1, #2
 8004394:	a806      	add	r0, sp, #24
 8004396:	f7fc fdb3 	bl	8000f00 <WriteInLOGc>
			WriteInLOG(Merge2Strings("PowerOFF ",itoa_komaP(U_IN/10,str,1),strout));
 800439a:	230a      	movs	r3, #10
 800439c:	8828      	ldrh	r0, [r5, #0]
 800439e:	2201      	movs	r2, #1
 80043a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80043a4:	a901      	add	r1, sp, #4
 80043a6:	f7fd f88b 	bl	80014c0 <itoa_komaP>
 80043aa:	aa06      	add	r2, sp, #24
 80043ac:	4601      	mov	r1, r0
 80043ae:	4818      	ldr	r0, [pc, #96]	; (8004410 <All_OUT_OFF_When_Power_OFF+0xfc>)
 80043b0:	f7fd f8fd 	bl	80015ae <Merge2Strings>
 80043b4:	f7fc fcf2 	bl	8000d9c <WriteInLOG>
 80043b8:	2405      	movs	r4, #5
				logDebugD("U off(10msec): ",U_IN,2);
 80043ba:	4f11      	ldr	r7, [pc, #68]	; (8004400 <All_OUT_OFF_When_Power_OFF+0xec>)
 80043bc:	4e15      	ldr	r6, [pc, #84]	; (8004414 <All_OUT_OFF_When_Power_OFF+0x100>)
 80043be:	4638      	mov	r0, r7
 80043c0:	f001 f87c 	bl	80054bc <printToBufferWithoutEndUART1>
 80043c4:	8829      	ldrh	r1, [r5, #0]
 80043c6:	2202      	movs	r2, #2
 80043c8:	4630      	mov	r0, r6
 80043ca:	f001 f8bb 	bl	8005544 <printToBufferUART1D>
 80043ce:	3c01      	subs	r4, #1
				delay_ms(10);
 80043d0:	200a      	movs	r0, #10
 80043d2:	f7fc fe7d 	bl	80010d0 <delay_ms>
			for (i = 0; i<5; i++)
 80043d6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80043da:	d1f0      	bne.n	80043be <All_OUT_OFF_When_Power_OFF+0xaa>
}
 80043dc:	b011      	add	sp, #68	; 0x44
 80043de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EEpromWrite_status = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	700b      	strb	r3, [r1, #0]
}
 80043e4:	e7fa      	b.n	80043dc <All_OUT_OFF_When_Power_OFF+0xc8>
 80043e6:	bf00      	nop
 80043e8:	20000858 	.word	0x20000858
 80043ec:	20000271 	.word	0x20000271
 80043f0:	200007e8 	.word	0x200007e8
 80043f4:	40010c00 	.word	0x40010c00
 80043f8:	200000f4 	.word	0x200000f4
 80043fc:	20000780 	.word	0x20000780
 8004400:	08005eb1 	.word	0x08005eb1
 8004404:	08006130 	.word	0x08006130
 8004408:	20000798 	.word	0x20000798
 800440c:	08006261 	.word	0x08006261
 8004410:	08006135 	.word	0x08006135
 8004414:	0800613f 	.word	0x0800613f

08004418 <MenuDIAGNOSTIC>:
	EnterInMenu_Status=1;
 8004418:	2201      	movs	r2, #1
{
 800441a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status=1;
 800441e:	4ba1      	ldr	r3, [pc, #644]	; (80046a4 <MenuDIAGNOSTIC+0x28c>)
 8004420:	4ca1      	ldr	r4, [pc, #644]	; (80046a8 <MenuDIAGNOSTIC+0x290>)
	if (key == KEY_NEXT)
 8004422:	2802      	cmp	r0, #2
	EnterInMenu_Status=1;
 8004424:	701a      	strb	r2, [r3, #0]
{
 8004426:	b086      	sub	sp, #24
 8004428:	f994 3000 	ldrsb.w	r3, [r4]
	if (key == KEY_NEXT)
 800442c:	f040 8130 	bne.w	8004690 <MenuDIAGNOSTIC+0x278>
		CountShow1++;
 8004430:	4413      	add	r3, r2
 8004432:	b25b      	sxtb	r3, r3
		if (CountShow1==MAXITEM) CountShow1=0;
 8004434:	2b08      	cmp	r3, #8
 8004436:	bf08      	it	eq
 8004438:	2300      	moveq	r3, #0
		if (CountShow1<0) CountShow1=MAXITEM-1;
 800443a:	7023      	strb	r3, [r4, #0]
	if(CountShow1 == 0)
 800443c:	f994 1000 	ldrsb.w	r1, [r4]
 8004440:	b9f1      	cbnz	r1, 8004480 <MenuDIAGNOSTIC+0x68>
		OFF();
 8004442:	f7fe ffe1 	bl	8003408 <OFF>
		lcd_set_xy(0,0);
 8004446:	4608      	mov	r0, r1
 8004448:	f7fd fb66 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("Uin=");
 800444c:	4897      	ldr	r0, [pc, #604]	; (80046ac <MenuDIAGNOSTIC+0x294>)
 800444e:	f7fd fbe3 	bl	8001c18 <PrintToLCD>
		PrintToLCD(		itoa_koma(U_IN/10,1));
 8004452:	4b97      	ldr	r3, [pc, #604]	; (80046b0 <MenuDIAGNOSTIC+0x298>)
 8004454:	2101      	movs	r1, #1
 8004456:	8818      	ldrh	r0, [r3, #0]
 8004458:	230a      	movs	r3, #10
 800445a:	fbb0 f0f3 	udiv	r0, r0, r3
 800445e:	f7fc ffc7 	bl	80013f0 <itoa_koma>
 8004462:	f7fd fbd9 	bl	8001c18 <PrintToLCD>
		PrintToLCD(" Uc=");
 8004466:	4893      	ldr	r0, [pc, #588]	; (80046b4 <MenuDIAGNOSTIC+0x29c>)
 8004468:	f7fd fbd6 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa_koma(U_Controller,2));
 800446c:	4b92      	ldr	r3, [pc, #584]	; (80046b8 <MenuDIAGNOSTIC+0x2a0>)
 800446e:	2102      	movs	r1, #2
 8004470:	8818      	ldrh	r0, [r3, #0]
 8004472:	f7fc ffbd 	bl	80013f0 <itoa_koma>
 8004476:	f7fd fbcf 	bl	8001c18 <PrintToLCD>
		PrintToLCD("    ");
 800447a:	4890      	ldr	r0, [pc, #576]	; (80046bc <MenuDIAGNOSTIC+0x2a4>)
 800447c:	f7fd fbcc 	bl	8001c18 <PrintToLCD>
	if(CountShow1 == 1)
 8004480:	f994 3000 	ldrsb.w	r3, [r4]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d11b      	bne.n	80044c0 <MenuDIAGNOSTIC+0xa8>
		OFF();
 8004488:	f7fe ffbe 	bl	8003408 <OFF>
		lcd_set_xy(0,0);
 800448c:	2100      	movs	r1, #0
 800448e:	4608      	mov	r0, r1
 8004490:	f7fd fb42 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("Ups ");
 8004494:	488a      	ldr	r0, [pc, #552]	; (80046c0 <MenuDIAGNOSTIC+0x2a8>)
 8004496:	f7fd fbbf 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa_koma(U_PS,2));
 800449a:	4b8a      	ldr	r3, [pc, #552]	; (80046c4 <MenuDIAGNOSTIC+0x2ac>)
 800449c:	2102      	movs	r1, #2
 800449e:	8818      	ldrh	r0, [r3, #0]
 80044a0:	f7fc ffa6 	bl	80013f0 <itoa_koma>
 80044a4:	f7fd fbb8 	bl	8001c18 <PrintToLCD>
		PrintToLCD("V ");
 80044a8:	4887      	ldr	r0, [pc, #540]	; (80046c8 <MenuDIAGNOSTIC+0x2b0>)
 80044aa:	f7fd fbb5 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[3])));
 80044ae:	4b87      	ldr	r3, [pc, #540]	; (80046cc <MenuDIAGNOSTIC+0x2b4>)
 80044b0:	88d8      	ldrh	r0, [r3, #6]
 80044b2:	f7fc ff29 	bl	8001308 <itoa>
 80044b6:	f7fd fbaf 	bl	8001c18 <PrintToLCD>
		PrintToLCD("      ");
 80044ba:	4885      	ldr	r0, [pc, #532]	; (80046d0 <MenuDIAGNOSTIC+0x2b8>)
 80044bc:	f7fd fbac 	bl	8001c18 <PrintToLCD>
	if(CountShow1 == 2)
 80044c0:	f994 5000 	ldrsb.w	r5, [r4]
 80044c4:	2d02      	cmp	r5, #2
 80044c6:	d11b      	bne.n	8004500 <MenuDIAGNOSTIC+0xe8>
		OUT_ON();
 80044c8:	f7fe f8ec 	bl	80026a4 <OUT_ON>
		lcd_set_xy(0,0);
 80044cc:	2100      	movs	r1, #0
 80044ce:	4608      	mov	r0, r1
 80044d0:	f7fd fb22 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("Uout ");
 80044d4:	487f      	ldr	r0, [pc, #508]	; (80046d4 <MenuDIAGNOSTIC+0x2bc>)
 80044d6:	f7fd fb9f 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa_koma(U_OUT,2));
 80044da:	4b7f      	ldr	r3, [pc, #508]	; (80046d8 <MenuDIAGNOSTIC+0x2c0>)
 80044dc:	4629      	mov	r1, r5
 80044de:	8818      	ldrh	r0, [r3, #0]
 80044e0:	f7fc ff86 	bl	80013f0 <itoa_koma>
 80044e4:	f7fd fb98 	bl	8001c18 <PrintToLCD>
		PrintToLCD("V ");
 80044e8:	4877      	ldr	r0, [pc, #476]	; (80046c8 <MenuDIAGNOSTIC+0x2b0>)
 80044ea:	f7fd fb95 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[2])));
 80044ee:	4b77      	ldr	r3, [pc, #476]	; (80046cc <MenuDIAGNOSTIC+0x2b4>)
 80044f0:	8898      	ldrh	r0, [r3, #4]
 80044f2:	f7fc ff09 	bl	8001308 <itoa>
 80044f6:	f7fd fb8f 	bl	8001c18 <PrintToLCD>
		PrintToLCD("      ");
 80044fa:	4875      	ldr	r0, [pc, #468]	; (80046d0 <MenuDIAGNOSTIC+0x2b8>)
 80044fc:	f7fd fb8c 	bl	8001c18 <PrintToLCD>
	if(CountShow1 == 3)
 8004500:	f994 3000 	ldrsb.w	r3, [r4]
 8004504:	2b03      	cmp	r3, #3
 8004506:	d11d      	bne.n	8004544 <MenuDIAGNOSTIC+0x12c>
		LOAD_OFF();
 8004508:	f7fe fb26 	bl	8002b58 <LOAD_OFF>
		OUT_ON();
 800450c:	f7fe f8ca 	bl	80026a4 <OUT_ON>
		lcd_set_xy(0,0);
 8004510:	2100      	movs	r1, #0
 8004512:	4608      	mov	r0, r1
 8004514:	f7fd fb00 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("Iout ");
 8004518:	4870      	ldr	r0, [pc, #448]	; (80046dc <MenuDIAGNOSTIC+0x2c4>)
 800451a:	f7fd fb7d 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa(Current));
 800451e:	4b70      	ldr	r3, [pc, #448]	; (80046e0 <MenuDIAGNOSTIC+0x2c8>)
 8004520:	8818      	ldrh	r0, [r3, #0]
 8004522:	b200      	sxth	r0, r0
 8004524:	f7fc fef0 	bl	8001308 <itoa>
 8004528:	f7fd fb76 	bl	8001c18 <PrintToLCD>
		PrintToLCD("mA ");
 800452c:	486d      	ldr	r0, [pc, #436]	; (80046e4 <MenuDIAGNOSTIC+0x2cc>)
 800452e:	f7fd fb73 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[1])));
 8004532:	4b66      	ldr	r3, [pc, #408]	; (80046cc <MenuDIAGNOSTIC+0x2b4>)
 8004534:	8858      	ldrh	r0, [r3, #2]
 8004536:	f7fc fee7 	bl	8001308 <itoa>
 800453a:	f7fd fb6d 	bl	8001c18 <PrintToLCD>
		PrintToLCD("      ");
 800453e:	4864      	ldr	r0, [pc, #400]	; (80046d0 <MenuDIAGNOSTIC+0x2b8>)
 8004540:	f7fd fb6a 	bl	8001c18 <PrintToLCD>
	if(CountShow1 == 4)
 8004544:	f994 3000 	ldrsb.w	r3, [r4]
 8004548:	2b04      	cmp	r3, #4
 800454a:	d11d      	bne.n	8004588 <MenuDIAGNOSTIC+0x170>
		OUT_OFF();
 800454c:	f7fe f894 	bl	8002678 <OUT_OFF>
		LOAD_ON();
 8004550:	f7fe fa86 	bl	8002a60 <LOAD_ON>
		lcd_set_xy(0,0);
 8004554:	2100      	movs	r1, #0
 8004556:	4608      	mov	r0, r1
 8004558:	f7fd fade 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("I(l) ");
 800455c:	4862      	ldr	r0, [pc, #392]	; (80046e8 <MenuDIAGNOSTIC+0x2d0>)
 800455e:	f7fd fb5b 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa(Current_load));
 8004562:	4b62      	ldr	r3, [pc, #392]	; (80046ec <MenuDIAGNOSTIC+0x2d4>)
 8004564:	8818      	ldrh	r0, [r3, #0]
 8004566:	b200      	sxth	r0, r0
 8004568:	f7fc fece 	bl	8001308 <itoa>
 800456c:	f7fd fb54 	bl	8001c18 <PrintToLCD>
		PrintToLCD("mA ");
 8004570:	485c      	ldr	r0, [pc, #368]	; (80046e4 <MenuDIAGNOSTIC+0x2cc>)
 8004572:	f7fd fb51 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa(RegularConvData[0]));
 8004576:	4b55      	ldr	r3, [pc, #340]	; (80046cc <MenuDIAGNOSTIC+0x2b4>)
 8004578:	8818      	ldrh	r0, [r3, #0]
 800457a:	f7fc fec5 	bl	8001308 <itoa>
 800457e:	f7fd fb4b 	bl	8001c18 <PrintToLCD>
		PrintToLCD("       ");
 8004582:	485b      	ldr	r0, [pc, #364]	; (80046f0 <MenuDIAGNOSTIC+0x2d8>)
 8004584:	f7fd fb48 	bl	8001c18 <PrintToLCD>
	if(CountShow1 == 5)
 8004588:	f994 3000 	ldrsb.w	r3, [r4]
 800458c:	2b05      	cmp	r3, #5
 800458e:	d145      	bne.n	800461c <MenuDIAGNOSTIC+0x204>
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 8004590:	4f4c      	ldr	r7, [pc, #304]	; (80046c4 <MenuDIAGNOSTIC+0x2ac>)
 8004592:	4e58      	ldr	r6, [pc, #352]	; (80046f4 <MenuDIAGNOSTIC+0x2dc>)
		LOAD_OFF();
 8004594:	f7fe fae0 	bl	8002b58 <LOAD_OFF>
		OUT_ON();
 8004598:	f7fe f884 	bl	80026a4 <OUT_ON>
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 800459c:	883b      	ldrh	r3, [r7, #0]
 800459e:	8831      	ldrh	r1, [r6, #0]
 80045a0:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80046e0 <MenuDIAGNOSTIC+0x2c8>
 80045a4:	1a59      	subs	r1, r3, r1
 80045a6:	f242 7310 	movw	r3, #10000	; 0x2710
 80045aa:	434b      	muls	r3, r1
 80045ac:	f8b8 2000 	ldrh.w	r2, [r8]
		lcd_set_xy(0,0);
 80045b0:	2100      	movs	r1, #0
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 80045b2:	b212      	sxth	r2, r2
 80045b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80045b8:	4d4f      	ldr	r5, [pc, #316]	; (80046f8 <MenuDIAGNOSTIC+0x2e0>)
		lcd_set_xy(0,0);
 80045ba:	4608      	mov	r0, r1
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 80045bc:	64ab      	str	r3, [r5, #72]	; 0x48
		lcd_set_xy(0,0);
 80045be:	f7fd faab 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("R=");
 80045c2:	484e      	ldr	r0, [pc, #312]	; (80046fc <MenuDIAGNOSTIC+0x2e4>)
 80045c4:	f7fd fb28 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa(CalibrationData.ResistanceComp_Ishunt_Wires));
 80045c8:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80045ca:	f7fc fe9d 	bl	8001308 <itoa>
 80045ce:	f7fd fb23 	bl	8001c18 <PrintToLCD>
		PrintToLCD("mOm ");
 80045d2:	484b      	ldr	r0, [pc, #300]	; (8004700 <MenuDIAGNOSTIC+0x2e8>)
 80045d4:	f7fd fb20 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa(CalibrationData.ResistanceComp_MOSFET));
 80045d8:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80045da:	f7fc fe95 	bl	8001308 <itoa>
 80045de:	f7fd fb1b 	bl	8001c18 <PrintToLCD>
		PrintToLCD("mOm    ");
 80045e2:	4848      	ldr	r0, [pc, #288]	; (8004704 <MenuDIAGNOSTIC+0x2ec>)
 80045e4:	f7fd fb18 	bl	8001c18 <PrintToLCD>
		logDebugD("I: ",Current,0);
 80045e8:	4847      	ldr	r0, [pc, #284]	; (8004708 <MenuDIAGNOSTIC+0x2f0>)
 80045ea:	f000 ff67 	bl	80054bc <printToBufferWithoutEndUART1>
 80045ee:	f8b8 1000 	ldrh.w	r1, [r8]
 80045f2:	2200      	movs	r2, #0
 80045f4:	b209      	sxth	r1, r1
 80045f6:	4845      	ldr	r0, [pc, #276]	; (800470c <MenuDIAGNOSTIC+0x2f4>)
 80045f8:	f000 ffa4 	bl	8005544 <printToBufferUART1D>
		logDebugD("U_PS: ",U_PS,2);
 80045fc:	4842      	ldr	r0, [pc, #264]	; (8004708 <MenuDIAGNOSTIC+0x2f0>)
 80045fe:	f000 ff5d 	bl	80054bc <printToBufferWithoutEndUART1>
 8004602:	8839      	ldrh	r1, [r7, #0]
 8004604:	2202      	movs	r2, #2
 8004606:	4842      	ldr	r0, [pc, #264]	; (8004710 <MenuDIAGNOSTIC+0x2f8>)
 8004608:	f000 ff9c 	bl	8005544 <printToBufferUART1D>
		logDebugD("U out: ",U_OUT_ForSetResistance,2);
 800460c:	483e      	ldr	r0, [pc, #248]	; (8004708 <MenuDIAGNOSTIC+0x2f0>)
 800460e:	f000 ff55 	bl	80054bc <printToBufferWithoutEndUART1>
 8004612:	8831      	ldrh	r1, [r6, #0]
 8004614:	2202      	movs	r2, #2
 8004616:	483f      	ldr	r0, [pc, #252]	; (8004714 <MenuDIAGNOSTIC+0x2fc>)
 8004618:	f000 ff94 	bl	8005544 <printToBufferUART1D>
	if(CountShow1 == 6)
 800461c:	f994 3000 	ldrsb.w	r3, [r4]
 8004620:	2b06      	cmp	r3, #6
 8004622:	d10f      	bne.n	8004644 <MenuDIAGNOSTIC+0x22c>
		OFF();
 8004624:	f7fe fef0 	bl	8003408 <OFF>
		lcd_set_xy(0,0);
 8004628:	2100      	movs	r1, #0
 800462a:	4608      	mov	r0, r1
 800462c:	f7fd fa74 	bl	8001b18 <lcd_set_xy>
		PrintToLCD(ClockStringWithSec(time_sec,s));
 8004630:	4b39      	ldr	r3, [pc, #228]	; (8004718 <MenuDIAGNOSTIC+0x300>)
 8004632:	a901      	add	r1, sp, #4
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	f7fc ffee 	bl	8001616 <ClockStringWithSec>
 800463a:	f7fd faed 	bl	8001c18 <PrintToLCD>
		PrintToLCD("        ");
 800463e:	4837      	ldr	r0, [pc, #220]	; (800471c <MenuDIAGNOSTIC+0x304>)
 8004640:	f7fd faea 	bl	8001c18 <PrintToLCD>
	if(CountShow1 == 7)
 8004644:	f994 3000 	ldrsb.w	r3, [r4]
 8004648:	2b07      	cmp	r3, #7
 800464a:	d11e      	bne.n	800468a <MenuDIAGNOSTIC+0x272>
		LOAD_OFF();
 800464c:	f7fe fa84 	bl	8002b58 <LOAD_OFF>
		OUT_ON();
 8004650:	f7fe f828 	bl	80026a4 <OUT_ON>
		lcd_set_xy(0,0);
 8004654:	2100      	movs	r1, #0
 8004656:	4608      	mov	r0, r1
 8004658:	f7fd fa5e 	bl	8001b18 <lcd_set_xy>
		PrintToLCD("T=");
 800465c:	4830      	ldr	r0, [pc, #192]	; (8004720 <MenuDIAGNOSTIC+0x308>)
 800465e:	f7fd fadb 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa(GetTemperature(Rt)));
 8004662:	4b30      	ldr	r3, [pc, #192]	; (8004724 <MenuDIAGNOSTIC+0x30c>)
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	f7fc fb75 	bl	8000d54 <GetTemperature>
 800466a:	f7fc fe4d 	bl	8001308 <itoa>
 800466e:	f7fd fad3 	bl	8001c18 <PrintToLCD>
		PrintToLCD("C   ");
 8004672:	482d      	ldr	r0, [pc, #180]	; (8004728 <MenuDIAGNOSTIC+0x310>)
 8004674:	f7fd fad0 	bl	8001c18 <PrintToLCD>
		PrintToLCD(itoa(RegularConvData[5]));
 8004678:	4b14      	ldr	r3, [pc, #80]	; (80046cc <MenuDIAGNOSTIC+0x2b4>)
 800467a:	8958      	ldrh	r0, [r3, #10]
 800467c:	f7fc fe44 	bl	8001308 <itoa>
 8004680:	f7fd faca 	bl	8001c18 <PrintToLCD>
		PrintToLCD("    ");
 8004684:	480d      	ldr	r0, [pc, #52]	; (80046bc <MenuDIAGNOSTIC+0x2a4>)
 8004686:	f7fd fac7 	bl	8001c18 <PrintToLCD>
}
 800468a:	b006      	add	sp, #24
 800468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (key == KEY_BACK)
 8004690:	2801      	cmp	r0, #1
 8004692:	f47f aed3 	bne.w	800443c <MenuDIAGNOSTIC+0x24>
		CountShow1--;
 8004696:	3b01      	subs	r3, #1
 8004698:	b25b      	sxtb	r3, r3
		if (CountShow1<0) CountShow1=MAXITEM-1;
 800469a:	2b00      	cmp	r3, #0
 800469c:	bfb8      	it	lt
 800469e:	2307      	movlt	r3, #7
 80046a0:	e6cb      	b.n	800443a <MenuDIAGNOSTIC+0x22>
 80046a2:	bf00      	nop
 80046a4:	200007a0 	.word	0x200007a0
 80046a8:	20000792 	.word	0x20000792
 80046ac:	08006205 	.word	0x08006205
 80046b0:	20000858 	.word	0x20000858
 80046b4:	0800620a 	.word	0x0800620a
 80046b8:	2000086c 	.word	0x2000086c
 80046bc:	0800639d 	.word	0x0800639d
 80046c0:	0800620f 	.word	0x0800620f
 80046c4:	20000874 	.word	0x20000874
 80046c8:	08006378 	.word	0x08006378
 80046cc:	2000085c 	.word	0x2000085c
 80046d0:	0800639b 	.word	0x0800639b
 80046d4:	08006214 	.word	0x08006214
 80046d8:	2000086e 	.word	0x2000086e
 80046dc:	0800621a 	.word	0x0800621a
 80046e0:	2000085a 	.word	0x2000085a
 80046e4:	08006220 	.word	0x08006220
 80046e8:	08006224 	.word	0x08006224
 80046ec:	200002b4 	.word	0x200002b4
 80046f0:	0800639a 	.word	0x0800639a
 80046f4:	200002b6 	.word	0x200002b6
 80046f8:	20000004 	.word	0x20000004
 80046fc:	0800622a 	.word	0x0800622a
 8004700:	0800622d 	.word	0x0800622d
 8004704:	08006232 	.word	0x08006232
 8004708:	08005eb1 	.word	0x08005eb1
 800470c:	0800623a 	.word	0x0800623a
 8004710:	0800623e 	.word	0x0800623e
 8004714:	08006245 	.word	0x08006245
 8004718:	200007e8 	.word	0x200007e8
 800471c:	08006399 	.word	0x08006399
 8004720:	0800624d 	.word	0x0800624d
 8004724:	20000870 	.word	0x20000870
 8004728:	08006250 	.word	0x08006250

0800472c <adc_func>:
	Count1000mSecond++;
}


void adc_func()
{
 800472c:	b5f0      	push	{r4, r5, r6, r7, lr}
	//3 U PS
	//4 U In
	//5 T
	//6 temp
	//7 vref
	volatile int32_t Ut = 0;
 800472e:	2600      	movs	r6, #0
	volatile int32_t It_m = 0;
	#define NUM_READ 32
	//LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);


	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 8004730:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
{
 8004734:	b085      	sub	sp, #20
	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 8004736:	4c70      	ldr	r4, [pc, #448]	; (80048f8 <adc_func+0x1cc>)
	volatile int32_t Ut = 0;
 8004738:	9600      	str	r6, [sp, #0]
	volatile int32_t It = 0;
 800473a:	9601      	str	r6, [sp, #4]
	volatile int32_t Ut_m = 0;
 800473c:	9602      	str	r6, [sp, #8]
	volatile int32_t It_m = 0;
 800473e:	9603      	str	r6, [sp, #12]
	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 8004740:	89e2      	ldrh	r2, [r4, #14]
	Ut= (RegularConvData[3] * CalibrationData.CalibrationValueForVoltage) / RegularConvData[7];
 8004742:	4d6e      	ldr	r5, [pc, #440]	; (80048fc <adc_func+0x1d0>)
	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 8004744:	fb93 f3f2 	sdiv	r3, r3, r2
 8004748:	4a6d      	ldr	r2, [pc, #436]	; (8004900 <adc_func+0x1d4>)
 800474a:	b29b      	uxth	r3, r3
 800474c:	8013      	strh	r3, [r2, #0]
	Ut= (RegularConvData[3] * CalibrationData.CalibrationValueForVoltage) / RegularConvData[7];
 800474e:	88e1      	ldrh	r1, [r4, #6]
 8004750:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004752:	89e2      	ldrh	r2, [r4, #14]
 8004754:	434b      	muls	r3, r1
 8004756:	fbb3 f3f2 	udiv	r3, r3, r2
 800475a:	9300      	str	r3, [sp, #0]
	Ut_m = middle_of_3Umax1(Ut);
 800475c:	9800      	ldr	r0, [sp, #0]
 800475e:	f7fd f851 	bl	8001804 <middle_of_3Umax1>
 8004762:	9002      	str	r0, [sp, #8]
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 8004764:	9802      	ldr	r0, [sp, #8]
 8004766:	f7fd f8a9 	bl	80018bc <RunningAverageU1>
 800476a:	4a66      	ldr	r2, [pc, #408]	; (8004904 <adc_func+0x1d8>)
	SumU1Counter ++;
 800476c:	4966      	ldr	r1, [pc, #408]	; (8004908 <adc_func+0x1dc>)
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 800476e:	6813      	ldr	r3, [r2, #0]
 8004770:	4418      	add	r0, r3
 8004772:	6010      	str	r0, [r2, #0]
	SumU1Counter ++;
 8004774:	880b      	ldrh	r3, [r1, #0]
 8004776:	3301      	adds	r3, #1
 8004778:	b21b      	sxth	r3, r3
 800477a:	800b      	strh	r3, [r1, #0]
	if (SumU1Counter >= NUM_READ)
 800477c:	880b      	ldrh	r3, [r1, #0]
 800477e:	b21b      	sxth	r3, r3
 8004780:	2b1f      	cmp	r3, #31
 8004782:	dd0c      	ble.n	800479e <adc_func+0x72>
	{
		U_PS = SumU1/NUM_READ;
 8004784:	2020      	movs	r0, #32
 8004786:	6813      	ldr	r3, [r2, #0]
 8004788:	fb93 f3f0 	sdiv	r3, r3, r0
 800478c:	485f      	ldr	r0, [pc, #380]	; (800490c <adc_func+0x1e0>)
 800478e:	b29b      	uxth	r3, r3
 8004790:	8003      	strh	r3, [r0, #0]
		SumU1Counter = 0;
 8004792:	800e      	strh	r6, [r1, #0]
		SumU1 = 0;
 8004794:	6016      	str	r6, [r2, #0]
		if (U_PS < 3) U_PS = 0;
 8004796:	8803      	ldrh	r3, [r0, #0]
 8004798:	2b02      	cmp	r3, #2
 800479a:	bf98      	it	ls
 800479c:	8006      	strhls	r6, [r0, #0]
	}

	Ut = (RegularConvData[2] * CalibrationData.CalibrationValueForVoltage1) / RegularConvData[7];
 800479e:	88a1      	ldrh	r1, [r4, #4]
 80047a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80047a2:	89e2      	ldrh	r2, [r4, #14]
 80047a4:	434b      	muls	r3, r1
 80047a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80047aa:	9300      	str	r3, [sp, #0]
	Ut_m = middle_of_3Umax2(Ut);
 80047ac:	9800      	ldr	r0, [sp, #0]
 80047ae:	f7fd f847 	bl	8001840 <middle_of_3Umax2>
 80047b2:	9002      	str	r0, [sp, #8]
	SumU2 = SumU2 + RunningAverageU2(Ut_m);
 80047b4:	9802      	ldr	r0, [sp, #8]
 80047b6:	f7fd f882 	bl	80018be <RunningAverageU2>
 80047ba:	4f55      	ldr	r7, [pc, #340]	; (8004910 <adc_func+0x1e4>)
	SumU2Counter ++;
 80047bc:	4e55      	ldr	r6, [pc, #340]	; (8004914 <adc_func+0x1e8>)
	SumU2 = SumU2 + RunningAverageU2(Ut_m);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	4418      	add	r0, r3
 80047c2:	6038      	str	r0, [r7, #0]
	SumU2Counter ++;
 80047c4:	8833      	ldrh	r3, [r6, #0]
 80047c6:	3301      	adds	r3, #1
 80047c8:	b21b      	sxth	r3, r3
 80047ca:	8033      	strh	r3, [r6, #0]


	Ut = (RegularConvData[4] * CalibrationData.CalibrationValueForVoltage2) / RegularConvData[7];
 80047cc:	8921      	ldrh	r1, [r4, #8]
 80047ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80047d0:	89e2      	ldrh	r2, [r4, #14]
 80047d2:	434b      	muls	r3, r1
 80047d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80047d8:	9300      	str	r3, [sp, #0]
	U_IN = middle_of_3Umax3(Ut);
 80047da:	9800      	ldr	r0, [sp, #0]
 80047dc:	f7fd f84e 	bl	800187c <middle_of_3Umax3>
 80047e0:	4b4d      	ldr	r3, [pc, #308]	; (8004918 <adc_func+0x1ec>)
 80047e2:	b280      	uxth	r0, r0
 80047e4:	8018      	strh	r0, [r3, #0]


	It = (RegularConvData[1] * CalibrationData.CalibrationValueForCurrent*10) / RegularConvData[7] ;//  Current A/10
 80047e6:	230a      	movs	r3, #10
 80047e8:	69a8      	ldr	r0, [r5, #24]
 80047ea:	8861      	ldrh	r1, [r4, #2]
 80047ec:	4343      	muls	r3, r0
 80047ee:	434b      	muls	r3, r1
 80047f0:	89e2      	ldrh	r2, [r4, #14]
 80047f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80047f6:	9301      	str	r3, [sp, #4]
	It_m = middle_of_3Imax1(It);
 80047f8:	9801      	ldr	r0, [sp, #4]
 80047fa:	f7fc ffc7 	bl	800178c <middle_of_3Imax1>
 80047fe:	9003      	str	r0, [sp, #12]
	SumI1 =SumI1 + RunningAverageI1(It_m);
 8004800:	9803      	ldr	r0, [sp, #12]
 8004802:	f7fd f859 	bl	80018b8 <RunningAverageI1>
 8004806:	4a45      	ldr	r2, [pc, #276]	; (800491c <adc_func+0x1f0>)
	SumI1Counter ++;
 8004808:	4945      	ldr	r1, [pc, #276]	; (8004920 <adc_func+0x1f4>)
	SumI1 =SumI1 + RunningAverageI1(It_m);
 800480a:	6813      	ldr	r3, [r2, #0]
 800480c:	4418      	add	r0, r3
 800480e:	6010      	str	r0, [r2, #0]
	SumI1Counter ++;
 8004810:	880b      	ldrh	r3, [r1, #0]
 8004812:	3301      	adds	r3, #1
 8004814:	b21b      	sxth	r3, r3
 8004816:	800b      	strh	r3, [r1, #0]
	if (SumI1Counter >= NUM_READ)
 8004818:	880b      	ldrh	r3, [r1, #0]
 800481a:	b21b      	sxth	r3, r3
 800481c:	2b1f      	cmp	r3, #31
 800481e:	dd09      	ble.n	8004834 <adc_func+0x108>
	{
		Current_Out = SumI1/NUM_READ;
 8004820:	2020      	movs	r0, #32
 8004822:	6813      	ldr	r3, [r2, #0]
 8004824:	fb93 f3f0 	sdiv	r3, r3, r0
 8004828:	483e      	ldr	r0, [pc, #248]	; (8004924 <adc_func+0x1f8>)
 800482a:	b21b      	sxth	r3, r3
 800482c:	8003      	strh	r3, [r0, #0]
		SumI1Counter = 0;
 800482e:	2300      	movs	r3, #0
 8004830:	800b      	strh	r3, [r1, #0]
		SumI1 = 0;
 8004832:	6013      	str	r3, [r2, #0]
	}

	It= (RegularConvData[0] * CalibrationData.CalibrationValueForCurrent1*10) / RegularConvData[7] ;//  Current A/10
 8004834:	230a      	movs	r3, #10
 8004836:	6a28      	ldr	r0, [r5, #32]
 8004838:	8821      	ldrh	r1, [r4, #0]
 800483a:	4343      	muls	r3, r0
 800483c:	434b      	muls	r3, r1
 800483e:	89e2      	ldrh	r2, [r4, #14]
 8004840:	fbb3 f3f2 	udiv	r3, r3, r2
 8004844:	9301      	str	r3, [sp, #4]
	It_m = middle_of_3Imax2(It);
 8004846:	9801      	ldr	r0, [sp, #4]
 8004848:	f7fc ffbe 	bl	80017c8 <middle_of_3Imax2>
 800484c:	9003      	str	r0, [sp, #12]
	SumI2 =SumI2 + RunningAverageI2(It_m);
 800484e:	9803      	ldr	r0, [sp, #12]
 8004850:	f7fd f833 	bl	80018ba <RunningAverageI2>
 8004854:	4a34      	ldr	r2, [pc, #208]	; (8004928 <adc_func+0x1fc>)
	SumI2Counter ++;
 8004856:	4935      	ldr	r1, [pc, #212]	; (800492c <adc_func+0x200>)
	SumI2 =SumI2 + RunningAverageI2(It_m);
 8004858:	6813      	ldr	r3, [r2, #0]
 800485a:	4418      	add	r0, r3
 800485c:	6010      	str	r0, [r2, #0]
	SumI2Counter ++;
 800485e:	880b      	ldrh	r3, [r1, #0]
 8004860:	3301      	adds	r3, #1
 8004862:	b21b      	sxth	r3, r3
 8004864:	800b      	strh	r3, [r1, #0]
	if (SumI2Counter >= NUM_READ)
 8004866:	880b      	ldrh	r3, [r1, #0]
 8004868:	b21b      	sxth	r3, r3
 800486a:	2b1f      	cmp	r3, #31
 800486c:	dd09      	ble.n	8004882 <adc_func+0x156>
	{
		Current_load = SumI2/NUM_READ;
 800486e:	2020      	movs	r0, #32
 8004870:	6813      	ldr	r3, [r2, #0]
 8004872:	fb93 f3f0 	sdiv	r3, r3, r0
 8004876:	482e      	ldr	r0, [pc, #184]	; (8004930 <adc_func+0x204>)
 8004878:	b21b      	sxth	r3, r3
 800487a:	8003      	strh	r3, [r0, #0]
		SumI2Counter = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	800b      	strh	r3, [r1, #0]
		SumI2 = 0;
 8004880:	6013      	str	r3, [r2, #0]
	}
	if ((GPIOB->IDR & 0x02)==0x02)//if load on
 8004882:	4b2c      	ldr	r3, [pc, #176]	; (8004934 <adc_func+0x208>)
 8004884:	492c      	ldr	r1, [pc, #176]	; (8004938 <adc_func+0x20c>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f013 0f02 	tst.w	r3, #2
	{
		Current =(int32_t)(Current_load-CalibrationData.Calibration0ValueForCurrent1)*(-1) ;//2745;
 800488c:	bf15      	itete	ne
 800488e:	4b28      	ldrne	r3, [pc, #160]	; (8004930 <adc_func+0x204>)
	}else
	{
		Current = (Current_Out-CalibrationData.Calibration0ValueForCurrent)/1 ;//2745;
 8004890:	4b24      	ldreq	r3, [pc, #144]	; (8004924 <adc_func+0x1f8>)
		Current =(int32_t)(Current_load-CalibrationData.Calibration0ValueForCurrent1)*(-1) ;//2745;
 8004892:	881a      	ldrhne	r2, [r3, #0]
		Current = (Current_Out-CalibrationData.Calibration0ValueForCurrent)/1 ;//2745;
 8004894:	881b      	ldrheq	r3, [r3, #0]
		Current =(int32_t)(Current_load-CalibrationData.Calibration0ValueForCurrent1)*(-1) ;//2745;
 8004896:	bf14      	ite	ne
 8004898:	692b      	ldrne	r3, [r5, #16]
		Current = (Current_Out-CalibrationData.Calibration0ValueForCurrent)/1 ;//2745;
 800489a:	68aa      	ldreq	r2, [r5, #8]
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	b21b      	sxth	r3, r3
 80048a0:	800b      	strh	r3, [r1, #0]
	}
	if (SumU2Counter >= NUM_READ)
 80048a2:	8833      	ldrh	r3, [r6, #0]
 80048a4:	b21b      	sxth	r3, r3
 80048a6:	2b1f      	cmp	r3, #31
 80048a8:	dd24      	ble.n	80048f4 <adc_func+0x1c8>
	{

		U_OUTtmp = SumU2/NUM_READ;
 80048aa:	2220      	movs	r2, #32
 80048ac:	683b      	ldr	r3, [r7, #0]
		SumU2 = 0;
		SumU2Counter = 0;

		U_OUT_ForSetResistance = U_OUTtmp;
 80048ae:	4c23      	ldr	r4, [pc, #140]	; (800493c <adc_func+0x210>)
		U_OUTtmp = SumU2/NUM_READ;
 80048b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80048b4:	4a22      	ldr	r2, [pc, #136]	; (8004940 <adc_func+0x214>)
 80048b6:	6013      	str	r3, [r2, #0]
		SumU2 = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	603b      	str	r3, [r7, #0]
		SumU2Counter = 0;
 80048bc:	8033      	strh	r3, [r6, #0]
		U_OUT_ForSetResistance = U_OUTtmp;
 80048be:	6810      	ldr	r0, [r2, #0]
 80048c0:	b280      	uxth	r0, r0
 80048c2:	8020      	strh	r0, [r4, #0]
		if (U_OUTtmp<3) U_OUTtmp = 0;
 80048c4:	6810      	ldr	r0, [r2, #0]
 80048c6:	2802      	cmp	r0, #2
 80048c8:	bfd8      	it	le
 80048ca:	6013      	strle	r3, [r2, #0]

		if (Current>=0)
 80048cc:	8808      	ldrh	r0, [r1, #0]
		{
			U_OUTtmp = U_OUTtmp - (int32_t)CalibrationData.ResistanceComp_Ishunt_Wires*Current/10000;
 80048ce:	8809      	ldrh	r1, [r1, #0]
 80048d0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80048d2:	b209      	sxth	r1, r1
 80048d4:	434b      	muls	r3, r1
 80048d6:	481b      	ldr	r0, [pc, #108]	; (8004944 <adc_func+0x218>)
 80048d8:	6814      	ldr	r4, [r2, #0]
 80048da:	fb93 f3f0 	sdiv	r3, r3, r0
 80048de:	4423      	add	r3, r4
 80048e0:	6013      	str	r3, [r2, #0]
		}
		else
		{
			U_OUTtmp = U_OUTtmp - (int32_t)CalibrationData.ResistanceComp_Ishunt_Wires*Current/10000;
		}
		if (U_OUTtmp<3)
 80048e2:	6813      	ldr	r3, [r2, #0]
 80048e4:	2b02      	cmp	r3, #2
			U_OUTtmp=0;
 80048e6:	bfdc      	itt	le
 80048e8:	2300      	movle	r3, #0
 80048ea:	6013      	strle	r3, [r2, #0]
		U_OUT = U_OUTtmp;
 80048ec:	6813      	ldr	r3, [r2, #0]
 80048ee:	4a16      	ldr	r2, [pc, #88]	; (8004948 <adc_func+0x21c>)
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	8013      	strh	r3, [r2, #0]
	}
	 //LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
}
 80048f4:	b005      	add	sp, #20
 80048f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048f8:	2000085c 	.word	0x2000085c
 80048fc:	20000004 	.word	0x20000004
 8004900:	2000086c 	.word	0x2000086c
 8004904:	200007bc 	.word	0x200007bc
 8004908:	200007c0 	.word	0x200007c0
 800490c:	20000874 	.word	0x20000874
 8004910:	200007c4 	.word	0x200007c4
 8004914:	200007c8 	.word	0x200007c8
 8004918:	20000858 	.word	0x20000858
 800491c:	200007ac 	.word	0x200007ac
 8004920:	200007b0 	.word	0x200007b0
 8004924:	200002b2 	.word	0x200002b2
 8004928:	200007b4 	.word	0x200007b4
 800492c:	200007b8 	.word	0x200007b8
 8004930:	200002b4 	.word	0x200002b4
 8004934:	40010c00 	.word	0x40010c00
 8004938:	2000085a 	.word	0x2000085a
 800493c:	200002b6 	.word	0x200002b6
 8004940:	200007dc 	.word	0x200007dc
 8004944:	ffffd8f0 	.word	0xffffd8f0
 8004948:	2000086e 	.word	0x2000086e

0800494c <SysTick_Callback>:
{
 800494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BUT_Debrief();
 800494e:	f7fd fe11 	bl	8002574 <BUT_Debrief>
	TimerForReadyMeasurement_ms++;
 8004952:	4a33      	ldr	r2, [pc, #204]	; (8004a20 <SysTick_Callback+0xd4>)
	if (Count10mSecond >= 5)
 8004954:	4e33      	ldr	r6, [pc, #204]	; (8004a24 <SysTick_Callback+0xd8>)
	TimerForReadyMeasurement_ms++;
 8004956:	6813      	ldr	r3, [r2, #0]
 8004958:	3301      	adds	r3, #1
 800495a:	6013      	str	r3, [r2, #0]
	if (Count10mSecond >= 5)
 800495c:	8833      	ldrh	r3, [r6, #0]
 800495e:	2b04      	cmp	r3, #4
 8004960:	d905      	bls.n	800496e <SysTick_Callback+0x22>
		Count10mSecond = 0;
 8004962:	2300      	movs	r3, #0
 8004964:	8033      	strh	r3, [r6, #0]
		adc_func();
 8004966:	f7ff fee1 	bl	800472c <adc_func>
		All_OUT_OFF_When_Power_OFF();
 800496a:	f7ff fcd3 	bl	8004314 <All_OUT_OFF_When_Power_OFF>
	if (Count100mSecond >= 100)
 800496e:	4d2e      	ldr	r5, [pc, #184]	; (8004a28 <SysTick_Callback+0xdc>)
	if (Count1000mSecond >= 1000)
 8004970:	4c2e      	ldr	r4, [pc, #184]	; (8004a2c <SysTick_Callback+0xe0>)
	if (Count100mSecond >= 100)
 8004972:	882b      	ldrh	r3, [r5, #0]
 8004974:	2b63      	cmp	r3, #99	; 0x63
		Count100mSecond = 0;
 8004976:	bf84      	itt	hi
 8004978:	2300      	movhi	r3, #0
 800497a:	802b      	strhhi	r3, [r5, #0]
	if (Count1000mSecond >= 1000)
 800497c:	8823      	ldrh	r3, [r4, #0]
 800497e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004982:	d340      	bcc.n	8004a06 <SysTick_Callback+0xba>
		Count1000mSecond = 0;
 8004984:	2300      	movs	r3, #0
		if (Current < 2)
 8004986:	4f2a      	ldr	r7, [pc, #168]	; (8004a30 <SysTick_Callback+0xe4>)
		Count1000mSecond = 0;
 8004988:	8023      	strh	r3, [r4, #0]
		if (Current < 2)
 800498a:	883b      	ldrh	r3, [r7, #0]
 800498c:	b21b      	sxth	r3, r3
 800498e:	2b01      	cmp	r3, #1
 8004990:	dc07      	bgt.n	80049a2 <SysTick_Callback+0x56>
			BatteryCapacityDischargeCurrent = BatteryCapacityDischargeCurrent + Module16(Current);
 8004992:	8838      	ldrh	r0, [r7, #0]
 8004994:	b200      	sxth	r0, r0
 8004996:	f7fc fdfc 	bl	8001592 <Module16>
 800499a:	4a26      	ldr	r2, [pc, #152]	; (8004a34 <SysTick_Callback+0xe8>)
 800499c:	6813      	ldr	r3, [r2, #0]
 800499e:	4418      	add	r0, r3
 80049a0:	6010      	str	r0, [r2, #0]
		if (Current > 2)
 80049a2:	883b      	ldrh	r3, [r7, #0]
 80049a4:	b21b      	sxth	r3, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	dd07      	ble.n	80049ba <SysTick_Callback+0x6e>
			BatteryCapacityCharge = BatteryCapacityCharge + Module16(Current);
 80049aa:	8838      	ldrh	r0, [r7, #0]
 80049ac:	b200      	sxth	r0, r0
 80049ae:	f7fc fdf0 	bl	8001592 <Module16>
 80049b2:	4a21      	ldr	r2, [pc, #132]	; (8004a38 <SysTick_Callback+0xec>)
 80049b4:	6813      	ldr	r3, [r2, #0]
 80049b6:	4418      	add	r0, r3
 80049b8:	6010      	str	r0, [r2, #0]
		if (ChargeStatusForTimer == 1)
 80049ba:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <SysTick_Callback+0xf0>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2b01      	cmp	r3, #1
			ChargeTimeSec++;
 80049c0:	bf01      	itttt	eq
 80049c2:	4a1f      	ldreq	r2, [pc, #124]	; (8004a40 <SysTick_Callback+0xf4>)
 80049c4:	6813      	ldreq	r3, [r2, #0]
 80049c6:	3301      	addeq	r3, #1
 80049c8:	6013      	streq	r3, [r2, #0]
		if (DisChargeStatusForTimer == 1)
 80049ca:	4b1e      	ldr	r3, [pc, #120]	; (8004a44 <SysTick_Callback+0xf8>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	2b01      	cmp	r3, #1
			DischargeTimeSec++;
 80049d0:	bf01      	itttt	eq
 80049d2:	4a1d      	ldreq	r2, [pc, #116]	; (8004a48 <SysTick_Callback+0xfc>)
 80049d4:	6813      	ldreq	r3, [r2, #0]
 80049d6:	3301      	addeq	r3, #1
 80049d8:	6013      	streq	r3, [r2, #0]
		if (Status_Timer_Sec == 1)
 80049da:	4b1c      	ldr	r3, [pc, #112]	; (8004a4c <SysTick_Callback+0x100>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b01      	cmp	r3, #1
			Timer_Sec++;
 80049e0:	bf01      	itttt	eq
 80049e2:	4a1b      	ldreq	r2, [pc, #108]	; (8004a50 <SysTick_Callback+0x104>)
 80049e4:	6813      	ldreq	r3, [r2, #0]
 80049e6:	3301      	addeq	r3, #1
 80049e8:	6013      	streq	r3, [r2, #0]
		time_sec++;
 80049ea:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <SysTick_Callback+0x108>)
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	3201      	adds	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
		if (time_sec%2==0) GPIOA->BSRR =  GPIO_BSRR_BS15;
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f013 0f01 	tst.w	r3, #1
 80049f8:	bf0c      	ite	eq
 80049fa:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
		else GPIOA->BSRR =  GPIO_BSRR_BR15;
 80049fe:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <SysTick_Callback+0x10c>)
 8004a04:	611a      	str	r2, [r3, #16]
	Count10mSecond++;
 8004a06:	8833      	ldrh	r3, [r6, #0]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	8033      	strh	r3, [r6, #0]
	Count100mSecond++;
 8004a0e:	882b      	ldrh	r3, [r5, #0]
 8004a10:	3301      	adds	r3, #1
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	802b      	strh	r3, [r5, #0]
	Count1000mSecond++;
 8004a16:	8823      	ldrh	r3, [r4, #0]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	8023      	strh	r3, [r4, #0]
}
 8004a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a20:	200007cc 	.word	0x200007cc
 8004a24:	200002b0 	.word	0x200002b0
 8004a28:	200002ae 	.word	0x200002ae
 8004a2c:	200002ac 	.word	0x200002ac
 8004a30:	2000085a 	.word	0x2000085a
 8004a34:	20000780 	.word	0x20000780
 8004a38:	2000077c 	.word	0x2000077c
 8004a3c:	2000078b 	.word	0x2000078b
 8004a40:	2000078c 	.word	0x2000078c
 8004a44:	20000794 	.word	0x20000794
 8004a48:	20000798 	.word	0x20000798
 8004a4c:	200007aa 	.word	0x200007aa
 8004a50:	200007d0 	.word	0x200007d0
 8004a54:	200007e8 	.word	0x200007e8
 8004a58:	40010800 	.word	0x40010800

08004a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a5c:	b510      	push	{r4, lr}
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004a5e:	4c1d      	ldr	r4, [pc, #116]	; (8004ad4 <SystemClock_Config+0x78>)
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a66:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004a68:	6823      	ldr	r3, [r4, #0]
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8004a6a:	039a      	lsls	r2, r3, #14
 8004a6c:	d5fc      	bpl.n	8004a68 <SystemClock_Config+0xc>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8004a6e:	6863      	ldr	r3, [r4, #4]
 8004a70:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004a74:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8004a78:	6063      	str	r3, [r4, #4]
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
 8004a7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a7c:	f023 030f 	bic.w	r3, r3, #15
 8004a80:	62e3      	str	r3, [r4, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a88:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004a8a:	6823      	ldr	r3, [r4, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_3);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8004a8c:	019b      	lsls	r3, r3, #6
 8004a8e:	d5fc      	bpl.n	8004a8a <SystemClock_Config+0x2e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004a90:	6863      	ldr	r3, [r4, #4]
 8004a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a96:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004a98:	6863      	ldr	r3, [r4, #4]
 8004a9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a9e:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004aa0:	6863      	ldr	r3, [r4, #4]
 8004aa2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004aa6:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004aa8:	6863      	ldr	r3, [r4, #4]
 8004aaa:	f023 0303 	bic.w	r3, r3, #3
 8004aae:	f043 0302 	orr.w	r3, r3, #2
 8004ab2:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ab4:	6863      	ldr	r3, [r4, #4]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d1fa      	bne.n	8004ab4 <SystemClock_Config+0x58>
  {

  }
  LL_Init1msTick(24000000);
 8004abe:	4806      	ldr	r0, [pc, #24]	; (8004ad8 <SystemClock_Config+0x7c>)
 8004ac0:	f000 ff88 	bl	80059d4 <LL_Init1msTick>
  LL_SetSystemCoreClock(24000000);
 8004ac4:	4804      	ldr	r0, [pc, #16]	; (8004ad8 <SystemClock_Config+0x7c>)
 8004ac6:	f000 ff93 	bl	80059f0 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8004aca:	6863      	ldr	r3, [r4, #4]
 8004acc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004ad0:	6063      	str	r3, [r4, #4]
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_2);
}
 8004ad2:	bd10      	pop	{r4, pc}
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	016e3600 	.word	0x016e3600

08004adc <main>:
{
 8004adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(RCC->APB1ENR, Periphs);
 8004ae0:	4dc5      	ldr	r5, [pc, #788]	; (8004df8 <main+0x31c>)
 8004ae2:	b091      	sub	sp, #68	; 0x44
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	f7fd f8b1 	bl	8001c4c <LL_APB2_GRP1_EnableClock>
 8004aea:	69eb      	ldr	r3, [r5, #28]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aec:	f8df 935c 	ldr.w	r9, [pc, #860]	; 8004e4c <main+0x370>
 8004af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af4:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004af6:	69eb      	ldr	r3, [r5, #28]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004af8:	f8df a354 	ldr.w	sl, [pc, #852]	; 8004e50 <main+0x374>
 8004afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b00:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004b02:	9b00      	ldr	r3, [sp, #0]
 8004b04:	f8d9 200c 	ldr.w	r2, [r9, #12]
  reg_value  =  (reg_value                                   |
 8004b08:	4bbc      	ldr	r3, [pc, #752]	; (8004dfc <main+0x320>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b0e:	0412      	lsls	r2, r2, #16
 8004b10:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 8004b12:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 8004b14:	f8c9 300c 	str.w	r3, [r9, #12]
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8004b18:	4bb9      	ldr	r3, [pc, #740]	; (8004e00 <main+0x324>)
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004b1a:	4eba      	ldr	r6, [pc, #744]	; (8004e04 <main+0x328>)
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8004b1c:	685a      	ldr	r2, [r3, #4]

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b1e:	2400      	movs	r4, #0
 8004b20:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8004b24:	605a      	str	r2, [r3, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8004b26:	685a      	ldr	r2, [r3, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b28:	f04f 0b01 	mov.w	fp, #1
 8004b2c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004b30:	605a      	str	r2, [r3, #4]
  SystemClock_Config();
 8004b32:	f7ff ff93 	bl	8004a5c <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b36:	2214      	movs	r2, #20
 8004b38:	2100      	movs	r1, #0
 8004b3a:	a809      	add	r0, sp, #36	; 0x24
 8004b3c:	f000 ff8d 	bl	8005a5a <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8004b40:	2020      	movs	r0, #32
 8004b42:	f7fd f883 	bl	8001c4c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004b46:	2004      	movs	r0, #4
 8004b48:	f7fd f880 	bl	8001c4c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8004b4c:	2008      	movs	r0, #8
 8004b4e:	f7fd f87d 	bl	8001c4c <LL_APB2_GRP1_EnableClock>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004b52:	f64f 4303 	movw	r3, #64515	; 0xfc03
 8004b56:	f8ca 3014 	str.w	r3, [sl, #20]
 8004b5a:	f44f 4309 	mov.w	r3, #35072	; 0x8900
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b5e:	2702      	movs	r7, #2
 8004b60:	6173      	str	r3, [r6, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b62:	f240 3303 	movw	r3, #771	; 0x303
  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004b66:	f04f 0804 	mov.w	r8, #4
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b6a:	a909      	add	r1, sp, #36	; 0x24
 8004b6c:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b6e:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b72:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b76:	f000 fde5 	bl	8005744 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
 8004b7a:	4ba3      	ldr	r3, [pc, #652]	; (8004e08 <main+0x32c>)
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b7c:	a909      	add	r1, sp, #36	; 0x24
 8004b7e:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b80:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004b84:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004b88:	970b      	str	r7, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b8a:	f000 fddb 	bl	8005744 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_15;
 8004b8e:	4b9f      	ldr	r3, [pc, #636]	; (8004e0c <main+0x330>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b90:	a909      	add	r1, sp, #36	; 0x24
 8004b92:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004b94:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b98:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b9c:	f000 fdd2 	bl	8005744 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004ba0:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8004ba4:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba6:	a909      	add	r1, sp, #36	; 0x24
 8004ba8:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004baa:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004bae:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bb2:	f000 fdc7 	bl	8005744 <LL_GPIO_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 8004bb6:	696b      	ldr	r3, [r5, #20]
 8004bb8:	ea43 030b 	orr.w	r3, r3, fp
 8004bbc:	616b      	str	r3, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004bbe:	696b      	ldr	r3, [r5, #20]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bc0:	4d93      	ldr	r5, [pc, #588]	; (8004e10 <main+0x334>)
 8004bc2:	ea03 030b 	and.w	r3, r3, fp
 8004bc6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004bc8:	9b01      	ldr	r3, [sp, #4]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bca:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004bce:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004bd2:	f7fd f9c9 	bl	8001f68 <NVIC_EncodePriority.constprop.36>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bda:	fa00 f008 	lsl.w	r0, r0, r8
 8004bde:	b2c0      	uxtb	r0, r0
 8004be0:	f885 030b 	strb.w	r0, [r5, #779]	; 0x30b
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004be4:	221c      	movs	r2, #28
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004be6:	602b      	str	r3, [r5, #0]
 8004be8:	4621      	mov	r1, r4
 8004bea:	a809      	add	r0, sp, #36	; 0x24
 8004bec:	f000 ff35 	bl	8005a5a <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf0:	2214      	movs	r2, #20
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	a804      	add	r0, sp, #16
 8004bf6:	f000 ff30 	bl	8005a5a <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8004bfa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004bfe:	f7fd f825 	bl	8001c4c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004c02:	4640      	mov	r0, r8
 8004c04:	f7fd f822 	bl	8001c4c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004c08:	2309      	movs	r3, #9
 8004c0a:	4982      	ldr	r1, [pc, #520]	; (8004e14 <main+0x338>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c0c:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004c0e:	e9cd 1304 	strd	r1, r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004c12:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c14:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004c16:	e9cd 3406 	strd	r3, r4, [sp, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c1a:	f000 fd93 	bl	8005744 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8004c1e:	4b7e      	ldr	r3, [pc, #504]	; (8004e18 <main+0x33c>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c20:	a904      	add	r1, sp, #16
 8004c22:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8004c24:	e9cd 3804 	strd	r3, r8, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c28:	f000 fd8c 	bl	8005744 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c2c:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004c30:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004c34:	f7fd f998 	bl	8001f68 <NVIC_EncodePriority.constprop.36>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c38:	2320      	movs	r3, #32
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c3a:	fa00 f008 	lsl.w	r0, r0, r8
 8004c3e:	b2c0      	uxtb	r0, r0
 8004c40:	f885 0325 	strb.w	r0, [r5, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c44:	606b      	str	r3, [r5, #4]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8004c46:	4d75      	ldr	r5, [pc, #468]	; (8004e1c <main+0x340>)
  LL_USART_Init(USART1, &USART_InitStruct);
 8004c48:	a909      	add	r1, sp, #36	; 0x24
 8004c4a:	68eb      	ldr	r3, [r5, #12]
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c52:	60eb      	str	r3, [r5, #12]
  USART_InitStruct.BaudRate = 38400;
 8004c54:	f44f 4316 	mov.w	r3, #38400	; 0x9600
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004c58:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004c5c:	230c      	movs	r3, #12
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004c5e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004c62:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004c66:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART1, &USART_InitStruct);
 8004c68:	f000 fe46 	bl	80058f8 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c6c:	692b      	ldr	r3, [r5, #16]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004c6e:	2214      	movs	r2, #20
 8004c70:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004c74:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004c76:	696b      	ldr	r3, [r5, #20]
 8004c78:	4621      	mov	r1, r4
 8004c7a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004c7e:	616b      	str	r3, [r5, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004c80:	68eb      	ldr	r3, [r5, #12]
 8004c82:	a804      	add	r0, sp, #16
 8004c84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c88:	60eb      	str	r3, [r5, #12]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004c8a:	e9cd 4402 	strd	r4, r4, [sp, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004c8e:	f000 fee4 	bl	8005a5a <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c92:	2214      	movs	r2, #20
 8004c94:	4621      	mov	r1, r4
 8004c96:	a809      	add	r0, sp, #36	; 0x24
 8004c98:	f000 fedf 	bl	8005a5a <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8004c9c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004ca0:	f7fc ffd4 	bl	8001c4c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004ca4:	4640      	mov	r0, r8
 8004ca6:	f7fc ffd1 	bl	8001c4c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 8004caa:	f647 637e 	movw	r3, #32382	; 0x7e7e
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cae:	a909      	add	r1, sp, #36	; 0x24
 8004cb0:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004cb2:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cb6:	f000 fd45 	bl	8005744 <LL_GPIO_Init>
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8004cba:	4b59      	ldr	r3, [pc, #356]	; (8004e20 <main+0x344>)
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8004cbc:	f44f 7880 	mov.w	r8, #256	; 0x100
 8004cc0:	681a      	ldr	r2, [r3, #0]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004cc2:	f5a5 55a0 	sub.w	r5, r5, #5120	; 0x1400
 8004cc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cca:	f022 0210 	bic.w	r2, r2, #16
 8004cce:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	a902      	add	r1, sp, #8
 8004cd4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cdc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	f042 0220 	orr.w	r2, r2, #32
 8004ce6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cee:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cf6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d02:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8004d10:	4a44      	ldr	r2, [pc, #272]	; (8004e24 <main+0x348>)
 8004d12:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8004d14:	4a44      	ldr	r2, [pc, #272]	; (8004e28 <main+0x34c>)
 8004d16:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	0c12      	lsrs	r2, r2, #16
 8004d1c:	0412      	lsls	r2, r2, #16
 8004d1e:	f042 0208 	orr.w	r2, r2, #8
 8004d22:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	ea42 020b 	orr.w	r2, r2, fp
 8004d2a:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8004d2c:	9402      	str	r4, [sp, #8]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8004d2e:	f8cd 800c 	str.w	r8, [sp, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004d32:	f000 fcd0 	bl	80056d6 <LL_ADC_Init>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8004d36:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8004d3a:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004d3e:	a904      	add	r1, sp, #16
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8004d40:	e9cd 0304 	strd	r0, r3, [sp, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004d44:	4628      	mov	r0, r5
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8004d46:	e9cd 4706 	strd	r4, r7, [sp, #24]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8004d4a:	f8cd 8020 	str.w	r8, [sp, #32]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004d4e:	f000 fcd7 	bl	8005700 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8004d52:	4936      	ldr	r1, [pc, #216]	; (8004e2c <main+0x350>)
 8004d54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004d58:	f7fd f8ea 	bl	8001f30 <LL_ADC_REG_SetSequencerRanks.constprop.35>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004d5c:	4833      	ldr	r0, [pc, #204]	; (8004e2c <main+0x350>)
 8004d5e:	f7fd f8bd 	bl	8001edc <LL_ADC_SetChannelSamplingTime.constprop.34>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8004d62:	4933      	ldr	r1, [pc, #204]	; (8004e30 <main+0x354>)
 8004d64:	f240 2005 	movw	r0, #517	; 0x205
 8004d68:	f7fd f8e2 	bl	8001f30 <LL_ADC_REG_SetSequencerRanks.constprop.35>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004d6c:	4830      	ldr	r0, [pc, #192]	; (8004e30 <main+0x354>)
 8004d6e:	f7fd f8b5 	bl	8001edc <LL_ADC_SetChannelSamplingTime.constprop.34>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_3);
 8004d72:	4930      	ldr	r1, [pc, #192]	; (8004e34 <main+0x358>)
 8004d74:	f240 200a 	movw	r0, #522	; 0x20a
 8004d78:	f7fd f8da 	bl	8001f30 <LL_ADC_REG_SetSequencerRanks.constprop.35>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004d7c:	482d      	ldr	r0, [pc, #180]	; (8004e34 <main+0x358>)
 8004d7e:	f7fd f8ad 	bl	8001edc <LL_ADC_SetChannelSamplingTime.constprop.34>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_4);
 8004d82:	492d      	ldr	r1, [pc, #180]	; (8004e38 <main+0x35c>)
 8004d84:	f240 200f 	movw	r0, #527	; 0x20f
 8004d88:	f7fd f8d2 	bl	8001f30 <LL_ADC_REG_SetSequencerRanks.constprop.35>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004d8c:	482a      	ldr	r0, [pc, #168]	; (8004e38 <main+0x35c>)
 8004d8e:	f7fd f8a5 	bl	8001edc <LL_ADC_SetChannelSamplingTime.constprop.34>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_5);
 8004d92:	492a      	ldr	r1, [pc, #168]	; (8004e3c <main+0x360>)
 8004d94:	f44f 7005 	mov.w	r0, #532	; 0x214
 8004d98:	f7fd f8ca 	bl	8001f30 <LL_ADC_REG_SetSequencerRanks.constprop.35>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004d9c:	4827      	ldr	r0, [pc, #156]	; (8004e3c <main+0x360>)
 8004d9e:	f7fd f89d 	bl	8001edc <LL_ADC_SetChannelSamplingTime.constprop.34>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_6);
 8004da2:	4927      	ldr	r1, [pc, #156]	; (8004e40 <main+0x364>)
 8004da4:	f240 2019 	movw	r0, #537	; 0x219
 8004da8:	f7fd f8c2 	bl	8001f30 <LL_ADC_REG_SetSequencerRanks.constprop.35>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004dac:	4824      	ldr	r0, [pc, #144]	; (8004e40 <main+0x364>)
 8004dae:	f7fd f895 	bl	8001edc <LL_ADC_SetChannelSamplingTime.constprop.34>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_TEMPSENSOR);
 8004db2:	4924      	ldr	r1, [pc, #144]	; (8004e44 <main+0x368>)
 8004db4:	4640      	mov	r0, r8
 8004db6:	f7fd f8bb 	bl	8001f30 <LL_ADC_REG_SetSequencerRanks.constprop.35>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_TEMPSENSOR, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004dba:	4822      	ldr	r0, [pc, #136]	; (8004e44 <main+0x368>)
 8004dbc:	f7fd f88e 	bl	8001edc <LL_ADC_SetChannelSamplingTime.constprop.34>
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 8004dc0:	68ab      	ldr	r3, [r5, #8]
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_VREFINT);
 8004dc2:	4921      	ldr	r1, [pc, #132]	; (8004e48 <main+0x36c>)
 8004dc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dc8:	60ab      	str	r3, [r5, #8]
 8004dca:	f240 1005 	movw	r0, #261	; 0x105
 8004dce:	f7fd f8af 	bl	8001f30 <LL_ADC_REG_SetSequencerRanks.constprop.35>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004dd2:	481d      	ldr	r0, [pc, #116]	; (8004e48 <main+0x36c>)
 8004dd4:	f7fd f882 	bl	8001edc <LL_ADC_SetChannelSamplingTime.constprop.34>
 8004dd8:	68ab      	ldr	r3, [r5, #8]
	  delay_ms(100);
 8004dda:	2064      	movs	r0, #100	; 0x64
 8004ddc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004de0:	60ab      	str	r3, [r5, #8]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004de2:	68ab      	ldr	r3, [r5, #8]
 8004de4:	ea43 030b 	orr.w	r3, r3, fp
 8004de8:	60ab      	str	r3, [r5, #8]
 8004dea:	f7fc f971 	bl	80010d0 <delay_ms>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8004dee:	68ab      	ldr	r3, [r5, #8]
 8004df0:	f043 0304 	orr.w	r3, r3, #4
 8004df4:	60ab      	str	r3, [r5, #8]
 8004df6:	e02d      	b.n	8004e54 <main+0x378>
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	05fa0300 	.word	0x05fa0300
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40010800 	.word	0x40010800
 8004e08:	04fc00fc 	.word	0x04fc00fc
 8004e0c:	04890089 	.word	0x04890089
 8004e10:	e000e100 	.word	0xe000e100
 8004e14:	04020002 	.word	0x04020002
 8004e18:	04040004 	.word	0x04040004
 8004e1c:	40013800 	.word	0x40013800
 8004e20:	40020008 	.word	0x40020008
 8004e24:	4001244c 	.word	0x4001244c
 8004e28:	2000085c 	.word	0x2000085c
 8004e2c:	02300001 	.word	0x02300001
 8004e30:	02600002 	.word	0x02600002
 8004e34:	02900003 	.word	0x02900003
 8004e38:	02c00004 	.word	0x02c00004
 8004e3c:	02f00005 	.word	0x02f00005
 8004e40:	03200006 	.word	0x03200006
 8004e44:	81200010 	.word	0x81200010
 8004e48:	81500011 	.word	0x81500011
 8004e4c:	e000ed00 	.word	0xe000ed00
 8004e50:	40010c00 	.word	0x40010c00
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8004e54:	68ac      	ldr	r4, [r5, #8]
	  while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0) {}
 8004e56:	f014 0404 	ands.w	r4, r4, #4
 8004e5a:	d1fb      	bne.n	8004e54 <main+0x378>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004e5c:	68ab      	ldr	r3, [r5, #8]
 8004e5e:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8004e62:	60ab      	str	r3, [r5, #8]
  InitLCD();
 8004e64:	f7fc fee7 	bl	8001c36 <InitLCD>
  SystemCoreClockUpdate();
 8004e68:	f000 fa8e 	bl	8005388 <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock/1000);//SystemCoreClock/1000 - 1mc
 8004e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e70:	4baf      	ldr	r3, [pc, #700]	; (8005130 <main+0x654>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e7e:	d208      	bcs.n	8004e92 <main+0x3b6>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e80:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e82:	4aac      	ldr	r2, [pc, #688]	; (8005134 <main+0x658>)
 8004e84:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e86:	4bac      	ldr	r3, [pc, #688]	; (8005138 <main+0x65c>)
 8004e88:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e8c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e8e:	6094      	str	r4, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e90:	6013      	str	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS15;//Led on Board ON
 8004e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	LoggingData.RecordsQuantity= 0;
 8004e96:	2400      	movs	r4, #0
	GPIOA->BSRR =  GPIO_BSRR_BS15;//Led on Board ON
 8004e98:	6133      	str	r3, [r6, #16]
	LoggingData.RecordsQuantity= 0;
 8004e9a:	4da8      	ldr	r5, [pc, #672]	; (800513c <main+0x660>)
	OFF();
 8004e9c:	f7fe fab4 	bl	8003408 <OFF>
	PrintToLCD(Version);
 8004ea0:	48a7      	ldr	r0, [pc, #668]	; (8005140 <main+0x664>)
	LoggingData.RecordsQuantity= 0;
 8004ea2:	602c      	str	r4, [r5, #0]
	PrintToLCD(Version);
 8004ea4:	f7fc feb8 	bl	8001c18 <PrintToLCD>
	InfoToUARTBeforeStart();
 8004ea8:	f7fc f922 	bl	80010f0 <InfoToUARTBeforeStart>
	logInfo(Version);
 8004eac:	48a5      	ldr	r0, [pc, #660]	; (8005144 <main+0x668>)
 8004eae:	f000 fb05 	bl	80054bc <printToBufferWithoutEndUART1>
 8004eb2:	48a3      	ldr	r0, [pc, #652]	; (8005140 <main+0x664>)
 8004eb4:	f000 fa98 	bl	80053e8 <printToBufferUART1>
	SetSymbols();
 8004eb8:	f7fc fdd6 	bl	8001a68 <SetSymbols>
	lcd_set_xy(0,0);
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f7fc fe2a 	bl	8001b18 <lcd_set_xy>
	delay_ms(1000);
 8004ec4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ec8:	f7fc f902 	bl	80010d0 <delay_ms>
	flash_read_block();
 8004ecc:	f7fb fa30 	bl	8000330 <flash_read_block>
	if (LoggingData.RecordsQuantity>=MAX_LOG_ITEMS) LoggingData.RecordsQuantity = 0;
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	2b17      	cmp	r3, #23
 8004ed4:	bf88      	it	hi
 8004ed6:	602c      	strhi	r4, [r5, #0]
	EEpromReadStatus = ReadFromFlash();
 8004ed8:	f7fb fd36 	bl	8000948 <ReadFromFlash>
	if (EEpromReadStatus==0)
 8004edc:	4604      	mov	r4, r0
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d154      	bne.n	8004f8c <main+0x4b0>
		delay_ms(1000);
 8004ee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ee6:	f7fc f8f3 	bl	80010d0 <delay_ms>
		EEpromReadStatus = ReadFromFlash();
 8004eea:	f7fb fd2d 	bl	8000948 <ReadFromFlash>
 8004eee:	4604      	mov	r4, r0
		logInfo("Read from EEprom - FAIL");
 8004ef0:	4894      	ldr	r0, [pc, #592]	; (8005144 <main+0x668>)
 8004ef2:	f000 fae3 	bl	80054bc <printToBufferWithoutEndUART1>
 8004ef6:	4894      	ldr	r0, [pc, #592]	; (8005148 <main+0x66c>)
 8004ef8:	f000 fa76 	bl	80053e8 <printToBufferUART1>
	if (EEpromReadStatus == 0)
 8004efc:	2c00      	cmp	r4, #0
 8004efe:	d145      	bne.n	8004f8c <main+0x4b0>
		PrintToLCD("EEprom Read FAIL");
 8004f00:	4892      	ldr	r0, [pc, #584]	; (800514c <main+0x670>)
 8004f02:	f7fc fe89 	bl	8001c18 <PrintToLCD>
		delay_ms(4000);
 8004f06:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004f0a:	f7fc f8e1 	bl	80010d0 <delay_ms>
		WriteInLOG("EEprmReadFAIL");
 8004f0e:	4890      	ldr	r0, [pc, #576]	; (8005150 <main+0x674>)
 8004f10:	f7fb ff44 	bl	8000d9c <WriteInLOG>
		logInfo("Read from EEprom - FAIL");
 8004f14:	488b      	ldr	r0, [pc, #556]	; (8005144 <main+0x668>)
 8004f16:	f000 fad1 	bl	80054bc <printToBufferWithoutEndUART1>
 8004f1a:	488b      	ldr	r0, [pc, #556]	; (8005148 <main+0x66c>)
		logInfo("Read from EEprom - SUCCESS");
 8004f1c:	f000 fa64 	bl	80053e8 <printToBufferUART1>
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 8004f20:	4d8c      	ldr	r5, [pc, #560]	; (8005154 <main+0x678>)
 8004f22:	4b8d      	ldr	r3, [pc, #564]	; (8005158 <main+0x67c>)
 8004f24:	692a      	ldr	r2, [r5, #16]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004f26:	4c8d      	ldr	r4, [pc, #564]	; (800515c <main+0x680>)
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 8004f28:	601a      	str	r2, [r3, #0]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004f2a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004f2e:	6922      	ldr	r2, [r4, #16]
  OutStateAfterPowerUp = SettingsData.Option2;
 8004f30:	4e8b      	ldr	r6, [pc, #556]	; (8005160 <main+0x684>)
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004f32:	4353      	muls	r3, r2
 8004f34:	4a8b      	ldr	r2, [pc, #556]	; (8005164 <main+0x688>)
 8004f36:	6013      	str	r3, [r2, #0]
  SelectedOptionValue = SettingsData.Option1;
 8004f38:	68a2      	ldr	r2, [r4, #8]
 8004f3a:	4b8b      	ldr	r3, [pc, #556]	; (8005168 <main+0x68c>)
 8004f3c:	601a      	str	r2, [r3, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 8004f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f40:	4a8a      	ldr	r2, [pc, #552]	; (800516c <main+0x690>)
  OutStateAfterPowerUp = SettingsData.Option2;
 8004f42:	6033      	str	r3, [r6, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 8004f44:	6013      	str	r3, [r2, #0]
  Generation_Coefficients_R_A_B();
 8004f46:	f7fb fed1 	bl	8000cec <Generation_Coefficients_R_A_B>
  delay_ms(1000);
 8004f4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f4e:	f7fc f8bf 	bl	80010d0 <delay_ms>
  lcd_clear();
 8004f52:	f7fc fe4f 	bl	8001bf4 <lcd_clear>
	Menu_SetGenericWriteCallback(Generic_Write);
 8004f56:	4886      	ldr	r0, [pc, #536]	; (8005170 <main+0x694>)
 8004f58:	f7fc fcd2 	bl	8001900 <Menu_SetGenericWriteCallback>
	if (SettingsData.Option1 == 1)
 8004f5c:	68a3      	ldr	r3, [r4, #8]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d11b      	bne.n	8004f9a <main+0x4be>
		Menu_Navigate(&Menu_2_1);
 8004f62:	4884      	ldr	r0, [pc, #528]	; (8005174 <main+0x698>)
		Menu_Navigate(&Menu_3_1);
 8004f64:	f7fc fcb2 	bl	80018cc <Menu_Navigate>
  	Blink_message_counter++;
 8004f68:	4f83      	ldr	r7, [pc, #524]	; (8005178 <main+0x69c>)
	if (Menu_GetCurrentMenu() == &Menu_2_1)
 8004f6a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8005174 <main+0x698>
 8004f6e:	f8df 8260 	ldr.w	r8, [pc, #608]	; 80051d0 <main+0x6f4>
  	Blink_message_counter++;
 8004f72:	783b      	ldrb	r3, [r7, #0]
 8004f74:	3301      	adds	r3, #1
 8004f76:	703b      	strb	r3, [r7, #0]
  	Button=BUT_GetKey();
 8004f78:	f7fd fb2e 	bl	80025d8 <BUT_GetKey>
	switch (Button)
 8004f7c:	1e43      	subs	r3, r0, #1
  	Button=BUT_GetKey();
 8004f7e:	4604      	mov	r4, r0
	switch (Button)
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d827      	bhi.n	8004fd4 <main+0x4f8>
 8004f84:	e8df f003 	tbb	[pc, r3]
 8004f88:	524b4721 	.word	0x524b4721
	if (EEpromReadStatus == 1)
 8004f8c:	2c01      	cmp	r4, #1
 8004f8e:	d1c7      	bne.n	8004f20 <main+0x444>
		logInfo("Read from EEprom - SUCCESS");
 8004f90:	486c      	ldr	r0, [pc, #432]	; (8005144 <main+0x668>)
 8004f92:	f000 fa93 	bl	80054bc <printToBufferWithoutEndUART1>
 8004f96:	4879      	ldr	r0, [pc, #484]	; (800517c <main+0x6a0>)
 8004f98:	e7c0      	b.n	8004f1c <main+0x440>
	else if (SettingsData.Option1 == 2)
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d101      	bne.n	8004fa2 <main+0x4c6>
		Menu_Navigate(&Menu_3_1);
 8004f9e:	4878      	ldr	r0, [pc, #480]	; (8005180 <main+0x6a4>)
 8004fa0:	e7e0      	b.n	8004f64 <main+0x488>
	else if (SettingsData.Option1 == 3)
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d101      	bne.n	8004faa <main+0x4ce>
		Menu_Navigate(&Menu_4_1);
 8004fa6:	4877      	ldr	r0, [pc, #476]	; (8005184 <main+0x6a8>)
 8004fa8:	e7dc      	b.n	8004f64 <main+0x488>
	else if (SettingsData.Option1 == 4)
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d101      	bne.n	8004fb2 <main+0x4d6>
		Menu_Navigate(&Menu_5_1);
 8004fae:	4876      	ldr	r0, [pc, #472]	; (8005188 <main+0x6ac>)
 8004fb0:	e7d8      	b.n	8004f64 <main+0x488>
	else if (SettingsData.Option1 == 5)
 8004fb2:	2b05      	cmp	r3, #5
 8004fb4:	d101      	bne.n	8004fba <main+0x4de>
		Menu_Navigate(&Menu_6_1);
 8004fb6:	4875      	ldr	r0, [pc, #468]	; (800518c <main+0x6b0>)
 8004fb8:	e7d4      	b.n	8004f64 <main+0x488>
	else if (SettingsData.Option1 == 6)
 8004fba:	2b06      	cmp	r3, #6
 8004fbc:	d101      	bne.n	8004fc2 <main+0x4e6>
		Menu_Navigate(&Menu_7_1);
 8004fbe:	4874      	ldr	r0, [pc, #464]	; (8005190 <main+0x6b4>)
 8004fc0:	e7d0      	b.n	8004f64 <main+0x488>
	else if (SettingsData.Option1 == 7)
 8004fc2:	2b07      	cmp	r3, #7
 8004fc4:	d1cd      	bne.n	8004f62 <main+0x486>
		Menu_Navigate(&Menu_8_1);
 8004fc6:	4873      	ldr	r0, [pc, #460]	; (8005194 <main+0x6b8>)
 8004fc8:	e7cc      	b.n	8004f64 <main+0x488>
			Menu_Navigate(MENU_PREVIOUS);
 8004fca:	f7fc fc79 	bl	80018c0 <Menu_GetCurrentMenu>
 8004fce:	6840      	ldr	r0, [r0, #4]
			Menu_Navigate(MENU_PARENT);
 8004fd0:	f7fc fc7c 	bl	80018cc <Menu_Navigate>
	if (Menu_GetCurrentMenu() == &Menu_2_1)
 8004fd4:	f7fc fc74 	bl	80018c0 <Menu_GetCurrentMenu>
 8004fd8:	4581      	cmp	r9, r0
 8004fda:	d12b      	bne.n	8005034 <main+0x558>
		MenuPowerSupply(Button);
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f7fd fb8d 	bl	80026fc <MenuPowerSupply>
	if (EnterInMenu_Status == 0)
 8004fe2:	f898 3000 	ldrb.w	r3, [r8]
 8004fe6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004fea:	b983      	cbnz	r3, 800500e <main+0x532>
		OFF();
 8004fec:	f7fe fa0c 	bl	8003408 <OFF>
		InitiStatus = 0;
 8004ff0:	4b69      	ldr	r3, [pc, #420]	; (8005198 <main+0x6bc>)
 8004ff2:	7019      	strb	r1, [r3, #0]
		CountShow = 0;
 8004ff4:	4b69      	ldr	r3, [pc, #420]	; (800519c <main+0x6c0>)
 8004ff6:	7019      	strb	r1, [r3, #0]
		SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 8004ff8:	4b69      	ldr	r3, [pc, #420]	; (80051a0 <main+0x6c4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	60ab      	str	r3, [r5, #8]
		DischargeTimeSec_Previous = DischargeTimeSec;
 8004ffe:	4b69      	ldr	r3, [pc, #420]	; (80051a4 <main+0x6c8>)
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b69      	ldr	r3, [pc, #420]	; (80051a8 <main+0x6cc>)
 8005004:	601a      	str	r2, [r3, #0]
		ChargeDischargeState = 0;
 8005006:	4b69      	ldr	r3, [pc, #420]	; (80051ac <main+0x6d0>)
 8005008:	7019      	strb	r1, [r3, #0]
		OutStateAfterPowerUp = 1;
 800500a:	2301      	movs	r3, #1
 800500c:	6033      	str	r3, [r6, #0]
	delay_ms(100);
 800500e:	2064      	movs	r0, #100	; 0x64
 8005010:	f7fc f85e 	bl	80010d0 <delay_ms>
  {
 8005014:	e7ad      	b.n	8004f72 <main+0x496>
			Menu_Navigate(MENU_NEXT);
 8005016:	f7fc fc53 	bl	80018c0 <Menu_GetCurrentMenu>
 800501a:	6800      	ldr	r0, [r0, #0]
 800501c:	e7d8      	b.n	8004fd0 <main+0x4f4>
			Menu_SelectItem(KEY_NEXT);
 800501e:	2002      	movs	r0, #2
 8005020:	f7fc fc78 	bl	8001914 <Menu_SelectItem>
			Menu_Navigate(MENU_CHILD);
 8005024:	f7fc fc4c 	bl	80018c0 <Menu_GetCurrentMenu>
 8005028:	68c0      	ldr	r0, [r0, #12]
 800502a:	e7d1      	b.n	8004fd0 <main+0x4f4>
			Menu_Navigate(MENU_PARENT);
 800502c:	f7fc fc48 	bl	80018c0 <Menu_GetCurrentMenu>
 8005030:	6880      	ldr	r0, [r0, #8]
 8005032:	e7cd      	b.n	8004fd0 <main+0x4f4>
	else if (Menu_GetCurrentMenu() == &Menu_3_1)
 8005034:	f7fc fc44 	bl	80018c0 <Menu_GetCurrentMenu>
 8005038:	4b51      	ldr	r3, [pc, #324]	; (8005180 <main+0x6a4>)
 800503a:	4283      	cmp	r3, r0
 800503c:	d103      	bne.n	8005046 <main+0x56a>
		MenuLoad(Button);
 800503e:	4620      	mov	r0, r4
 8005040:	f7fd fda2 	bl	8002b88 <MenuLoad>
 8005044:	e7cd      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_4_1)
 8005046:	f7fc fc3b 	bl	80018c0 <Menu_GetCurrentMenu>
 800504a:	4b4e      	ldr	r3, [pc, #312]	; (8005184 <main+0x6a8>)
 800504c:	4283      	cmp	r3, r0
 800504e:	d103      	bne.n	8005058 <main+0x57c>
		MenuChargeCC_CV(Button);
 8005050:	4620      	mov	r0, r4
 8005052:	f7fe f9e1 	bl	8003418 <MenuChargeCC_CV>
 8005056:	e7c4      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_5_1)
 8005058:	f7fc fc32 	bl	80018c0 <Menu_GetCurrentMenu>
 800505c:	4b4a      	ldr	r3, [pc, #296]	; (8005188 <main+0x6ac>)
 800505e:	4283      	cmp	r3, r0
 8005060:	d103      	bne.n	800506a <main+0x58e>
		MenuChargeAdapt(Button);
 8005062:	4620      	mov	r0, r4
 8005064:	f7fe fb48 	bl	80036f8 <MenuChargeAdapt>
 8005068:	e7bb      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_6_1)
 800506a:	f7fc fc29 	bl	80018c0 <Menu_GetCurrentMenu>
 800506e:	4b47      	ldr	r3, [pc, #284]	; (800518c <main+0x6b0>)
 8005070:	4283      	cmp	r3, r0
 8005072:	d103      	bne.n	800507c <main+0x5a0>
		MenuDisCharge(Button);
 8005074:	4620      	mov	r0, r4
 8005076:	f7fe fcf7 	bl	8003a68 <MenuDisCharge>
 800507a:	e7b2      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_6_1a)
 800507c:	f7fc fc20 	bl	80018c0 <Menu_GetCurrentMenu>
 8005080:	4b4b      	ldr	r3, [pc, #300]	; (80051b0 <main+0x6d4>)
 8005082:	4283      	cmp	r3, r0
 8005084:	d103      	bne.n	800508e <main+0x5b2>
		MenuCheckingCapacity(Button);
 8005086:	4620      	mov	r0, r4
 8005088:	f7fe fe4a 	bl	8003d20 <MenuCheckingCapacity>
 800508c:	e7a9      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_7_1)
 800508e:	f7fc fc17 	bl	80018c0 <Menu_GetCurrentMenu>
 8005092:	4b3f      	ldr	r3, [pc, #252]	; (8005190 <main+0x6b4>)
 8005094:	4283      	cmp	r3, r0
 8005096:	d103      	bne.n	80050a0 <main+0x5c4>
		MenuTraining_new(Button);
 8005098:	4620      	mov	r0, r4
 800509a:	f7fd fe6b 	bl	8002d74 <MenuTraining_new>
 800509e:	e7a0      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_8_1)
 80050a0:	f7fc fc0e 	bl	80018c0 <Menu_GetCurrentMenu>
 80050a4:	4b3b      	ldr	r3, [pc, #236]	; (8005194 <main+0x6b8>)
 80050a6:	4283      	cmp	r3, r0
 80050a8:	d103      	bne.n	80050b2 <main+0x5d6>
		MenuSwing(Button);
 80050aa:	4620      	mov	r0, r4
 80050ac:	f7fe f8b8 	bl	8003220 <MenuSwing>
 80050b0:	e797      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_8a_1)
 80050b2:	f7fc fc05 	bl	80018c0 <Menu_GetCurrentMenu>
 80050b6:	4b3f      	ldr	r3, [pc, #252]	; (80051b4 <main+0x6d8>)
 80050b8:	4283      	cmp	r3, r0
 80050ba:	d103      	bne.n	80050c4 <main+0x5e8>
		MenuBatterySimilation(Button);
 80050bc:	4620      	mov	r0, r4
 80050be:	f7fd fdb9 	bl	8002c34 <MenuBatterySimilation>
 80050c2:	e78e      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_9_1)
 80050c4:	f7fc fbfc 	bl	80018c0 <Menu_GetCurrentMenu>
 80050c8:	4b3b      	ldr	r3, [pc, #236]	; (80051b8 <main+0x6dc>)
 80050ca:	4283      	cmp	r3, r0
 80050cc:	d103      	bne.n	80050d6 <main+0x5fa>
		MenuDIAGNOSTIC(Button);
 80050ce:	4620      	mov	r0, r4
 80050d0:	f7ff f9a2 	bl	8004418 <MenuDIAGNOSTIC>
 80050d4:	e785      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_11_1)
 80050d6:	f7fc fbf3 	bl	80018c0 <Menu_GetCurrentMenu>
 80050da:	4b38      	ldr	r3, [pc, #224]	; (80051bc <main+0x6e0>)
 80050dc:	4283      	cmp	r3, r0
 80050de:	d103      	bne.n	80050e8 <main+0x60c>
		MenuLog(Button);
 80050e0:	4620      	mov	r0, r4
 80050e2:	f7fc ff69 	bl	8001fb8 <MenuLog>
 80050e6:	e77c      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_10_2_1)
 80050e8:	f7fc fbea 	bl	80018c0 <Menu_GetCurrentMenu>
 80050ec:	4b34      	ldr	r3, [pc, #208]	; (80051c0 <main+0x6e4>)
 80050ee:	4283      	cmp	r3, r0
 80050f0:	d103      	bne.n	80050fa <main+0x61e>
		MenuCalibration_CURRENT_Load_to_0(Button);
 80050f2:	4620      	mov	r0, r4
 80050f4:	f7fc ffd0 	bl	8002098 <MenuCalibration_CURRENT_Load_to_0>
 80050f8:	e773      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_10_1_1)
 80050fa:	f7fc fbe1 	bl	80018c0 <Menu_GetCurrentMenu>
 80050fe:	4b31      	ldr	r3, [pc, #196]	; (80051c4 <main+0x6e8>)
 8005100:	4283      	cmp	r3, r0
 8005102:	d103      	bne.n	800510c <main+0x630>
		MenuCalibration_CURRENT_Out_to_0(Button);
 8005104:	4620      	mov	r0, r4
 8005106:	f7fc ffa3 	bl	8002050 <MenuCalibration_CURRENT_Out_to_0>
 800510a:	e76a      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_10_4_1)
 800510c:	f7fc fbd8 	bl	80018c0 <Menu_GetCurrentMenu>
 8005110:	4b2d      	ldr	r3, [pc, #180]	; (80051c8 <main+0x6ec>)
 8005112:	4283      	cmp	r3, r0
 8005114:	d103      	bne.n	800511e <main+0x642>
		MenuCalibration_CURRENT_Load(Button);
 8005116:	4620      	mov	r0, r4
 8005118:	f7fd fcc2 	bl	8002aa0 <MenuCalibration_CURRENT_Load>
 800511c:	e761      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_10_3_1)
 800511e:	f7fc fbcf 	bl	80018c0 <Menu_GetCurrentMenu>
 8005122:	4b2a      	ldr	r3, [pc, #168]	; (80051cc <main+0x6f0>)
 8005124:	4283      	cmp	r3, r0
 8005126:	d155      	bne.n	80051d4 <main+0x6f8>
		MenuCalibration_CURRENT_Out(Button);
 8005128:	4620      	mov	r0, r4
 800512a:	f7fd fb53 	bl	80027d4 <MenuCalibration_CURRENT_Out>
 800512e:	e758      	b.n	8004fe2 <main+0x506>
 8005130:	2000028c 	.word	0x2000028c
 8005134:	e000e010 	.word	0xe000e010
 8005138:	e000ed00 	.word	0xe000ed00
 800513c:	20000878 	.word	0x20000878
 8005140:	2000027a 	.word	0x2000027a
 8005144:	08005ec6 	.word	0x08005ec6
 8005148:	08006fbb 	.word	0x08006fbb
 800514c:	08006fd3 	.word	0x08006fd3
 8005150:	08006fe4 	.word	0x08006fe4
 8005154:	200000f4 	.word	0x200000f4
 8005158:	20000784 	.word	0x20000784
 800515c:	20000154 	.word	0x20000154
 8005160:	20000274 	.word	0x20000274
 8005164:	20000a18 	.word	0x20000a18
 8005168:	20000a1c 	.word	0x20000a1c
 800516c:	20000a14 	.word	0x20000a14
 8005170:	08001dfd 	.word	0x08001dfd
 8005174:	08006c70 	.word	0x08006c70
 8005178:	20000789 	.word	0x20000789
 800517c:	08005dec 	.word	0x08005dec
 8005180:	08006cc8 	.word	0x08006cc8
 8005184:	08006d20 	.word	0x08006d20
 8005188:	08006d78 	.word	0x08006d78
 800518c:	08006dd0 	.word	0x08006dd0
 8005190:	08006e80 	.word	0x08006e80
 8005194:	08006ed8 	.word	0x08006ed8
 8005198:	200007a1 	.word	0x200007a1
 800519c:	20000791 	.word	0x20000791
 80051a0:	20000780 	.word	0x20000780
 80051a4:	20000798 	.word	0x20000798
 80051a8:	2000079c 	.word	0x2000079c
 80051ac:	2000078a 	.word	0x2000078a
 80051b0:	08006dfc 	.word	0x08006dfc
 80051b4:	08006f30 	.word	0x08006f30
 80051b8:	08006f88 	.word	0x08006f88
 80051bc:	080068d4 	.word	0x080068d4
 80051c0:	08006644 	.word	0x08006644
 80051c4:	080065ec 	.word	0x080065ec
 80051c8:	080066f4 	.word	0x080066f4
 80051cc:	0800669c 	.word	0x0800669c
 80051d0:	200007a0 	.word	0x200007a0
	else if (Menu_GetCurrentMenu() == &Menu_10_7_1)
 80051d4:	f7fc fb74 	bl	80018c0 <Menu_GetCurrentMenu>
 80051d8:	4b3f      	ldr	r3, [pc, #252]	; (80052d8 <main+0x7fc>)
 80051da:	4283      	cmp	r3, r0
 80051dc:	d103      	bne.n	80051e6 <main+0x70a>
		MenuCalibration_VoltageIn(Button);
 80051de:	4620      	mov	r0, r4
 80051e0:	f7fd fba0 	bl	8002924 <MenuCalibration_VoltageIn>
 80051e4:	e6fd      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_10_6_1)
 80051e6:	f7fc fb6b 	bl	80018c0 <Menu_GetCurrentMenu>
 80051ea:	4b3c      	ldr	r3, [pc, #240]	; (80052dc <main+0x800>)
 80051ec:	4283      	cmp	r3, r0
 80051ee:	d103      	bne.n	80051f8 <main+0x71c>
		MenuCalibration_VoltageOut(Button);
 80051f0:	4620      	mov	r0, r4
 80051f2:	f7fd fb5f 	bl	80028b4 <MenuCalibration_VoltageOut>
 80051f6:	e6f4      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_10_5_1)
 80051f8:	f7fc fb62 	bl	80018c0 <Menu_GetCurrentMenu>
 80051fc:	4b38      	ldr	r3, [pc, #224]	; (80052e0 <main+0x804>)
 80051fe:	4283      	cmp	r3, r0
 8005200:	d103      	bne.n	800520a <main+0x72e>
		MenuCalibration_VoltagePS(Button);
 8005202:	4620      	mov	r0, r4
 8005204:	f7fd fb1e 	bl	8002844 <MenuCalibration_VoltagePS>
 8005208:	e6eb      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_10_8_1)
 800520a:	f7fc fb59 	bl	80018c0 <Menu_GetCurrentMenu>
 800520e:	4b35      	ldr	r3, [pc, #212]	; (80052e4 <main+0x808>)
 8005210:	4283      	cmp	r3, r0
 8005212:	d103      	bne.n	800521c <main+0x740>
		MenuCalibration_Resist_Comp_5V1A(Button);
 8005214:	4620      	mov	r0, r4
 8005216:	f7fd fbbd 	bl	8002994 <MenuCalibration_Resist_Comp_5V1A>
 800521a:	e6e2      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_10_9_1)
 800521c:	f7fc fb50 	bl	80018c0 <Menu_GetCurrentMenu>
 8005220:	4b31      	ldr	r3, [pc, #196]	; (80052e8 <main+0x80c>)
 8005222:	4283      	cmp	r3, r0
 8005224:	d103      	bne.n	800522e <main+0x752>
		MenuCalibration_BackToFactory(Button);
 8005226:	4620      	mov	r0, r4
 8005228:	f7fc ff5a 	bl	80020e0 <MenuCalibration_BackToFactory>
 800522c:	e6d9      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_1_1_1)
 800522e:	f7fc fb47 	bl	80018c0 <Menu_GetCurrentMenu>
 8005232:	4b2e      	ldr	r3, [pc, #184]	; (80052ec <main+0x810>)
 8005234:	4283      	cmp	r3, r0
 8005236:	d103      	bne.n	8005240 <main+0x764>
		MenuSettingsChargeTime(Button);
 8005238:	4620      	mov	r0, r4
 800523a:	f7fc ffad 	bl	8002198 <MenuSettingsChargeTime>
 800523e:	e6d0      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_1_1_1a)
 8005240:	f7fc fb3e 	bl	80018c0 <Menu_GetCurrentMenu>
 8005244:	4b2a      	ldr	r3, [pc, #168]	; (80052f0 <main+0x814>)
 8005246:	4283      	cmp	r3, r0
 8005248:	d103      	bne.n	8005252 <main+0x776>
		MenuSettingsBatteryType(Button);
 800524a:	4620      	mov	r0, r4
 800524c:	f7fc ffca 	bl	80021e4 <MenuSettingsBatteryType>
 8005250:	e6c7      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_1_2_1)
 8005252:	f7fc fb35 	bl	80018c0 <Menu_GetCurrentMenu>
 8005256:	4b27      	ldr	r3, [pc, #156]	; (80052f4 <main+0x818>)
 8005258:	4283      	cmp	r3, r0
 800525a:	d103      	bne.n	8005264 <main+0x788>
		MenuSettingsLowVolt(Button);
 800525c:	4620      	mov	r0, r4
 800525e:	f7fd f833 	bl	80022c8 <MenuSettingsLowVolt>
 8005262:	e6be      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_1_3_1)
 8005264:	f7fc fb2c 	bl	80018c0 <Menu_GetCurrentMenu>
 8005268:	4b23      	ldr	r3, [pc, #140]	; (80052f8 <main+0x81c>)
 800526a:	4283      	cmp	r3, r0
 800526c:	d103      	bne.n	8005276 <main+0x79a>
		MenuSettingsMaxVolt(Button);
 800526e:	4620      	mov	r0, r4
 8005270:	f7fd f84c 	bl	800230c <MenuSettingsMaxVolt>
 8005274:	e6b5      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_1_4_1)
 8005276:	f7fc fb23 	bl	80018c0 <Menu_GetCurrentMenu>
 800527a:	4b20      	ldr	r3, [pc, #128]	; (80052fc <main+0x820>)
 800527c:	4283      	cmp	r3, r0
 800527e:	d103      	bne.n	8005288 <main+0x7ac>
		MenuSettingsSwngChrgTime(Button);
 8005280:	4620      	mov	r0, r4
 8005282:	f7fd f865 	bl	8002350 <MenuSettingsSwngChrgTime>
 8005286:	e6ac      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_1_5_1)
 8005288:	f7fc fb1a 	bl	80018c0 <Menu_GetCurrentMenu>
 800528c:	4b1c      	ldr	r3, [pc, #112]	; (8005300 <main+0x824>)
 800528e:	4283      	cmp	r3, r0
 8005290:	d103      	bne.n	800529a <main+0x7be>
		MenuSettingsSwngDChrgTime(Button);
 8005292:	4620      	mov	r0, r4
 8005294:	f7fd f87a 	bl	800238c <MenuSettingsSwngDChrgTime>
 8005298:	e6a3      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_1_6_1)
 800529a:	f7fc fb11 	bl	80018c0 <Menu_GetCurrentMenu>
 800529e:	4b19      	ldr	r3, [pc, #100]	; (8005304 <main+0x828>)
 80052a0:	4283      	cmp	r3, r0
 80052a2:	d103      	bne.n	80052ac <main+0x7d0>
		MenuSettingsChargeAddapt(Button);
 80052a4:	4620      	mov	r0, r4
 80052a6:	f7fd f88f 	bl	80023c8 <MenuSettingsChargeAddapt>
 80052aa:	e69a      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_1_S_1)
 80052ac:	f7fc fb08 	bl	80018c0 <Menu_GetCurrentMenu>
 80052b0:	4b15      	ldr	r3, [pc, #84]	; (8005308 <main+0x82c>)
 80052b2:	4283      	cmp	r3, r0
 80052b4:	d103      	bne.n	80052be <main+0x7e2>
		MenuSettingsSaveMenuPosWhenOFF(Button);
 80052b6:	4620      	mov	r0, r4
 80052b8:	f7fd f8e2 	bl	8002480 <MenuSettingsSaveMenuPosWhenOFF>
 80052bc:	e691      	b.n	8004fe2 <main+0x506>
	else if (Menu_GetCurrentMenu() == &Menu_1_SO_1)
 80052be:	f7fc faff 	bl	80018c0 <Menu_GetCurrentMenu>
 80052c2:	4b12      	ldr	r3, [pc, #72]	; (800530c <main+0x830>)
 80052c4:	4283      	cmp	r3, r0
 80052c6:	d103      	bne.n	80052d0 <main+0x7f4>
		MenuSettingsOutAfterPowerUp(Button);
 80052c8:	4620      	mov	r0, r4
 80052ca:	f7fd f91f 	bl	800250c <MenuSettingsOutAfterPowerUp>
 80052ce:	e688      	b.n	8004fe2 <main+0x506>
	else EnterInMenu_Status = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f888 3000 	strb.w	r3, [r8]
 80052d6:	e684      	b.n	8004fe2 <main+0x506>
 80052d8:	080067fc 	.word	0x080067fc
 80052dc:	080067a4 	.word	0x080067a4
 80052e0:	0800674c 	.word	0x0800674c
 80052e4:	08006844 	.word	0x08006844
 80052e8:	0800688c 	.word	0x0800688c
 80052ec:	0800692c 	.word	0x0800692c
 80052f0:	08006958 	.word	0x08006958
 80052f4:	080069dc 	.word	0x080069dc
 80052f8:	08006a34 	.word	0x08006a34
 80052fc:	08006a8c 	.word	0x08006a8c
 8005300:	08006ae4 	.word	0x08006ae4
 8005304:	08006b3c 	.word	0x08006b3c
 8005308:	08006c18 	.word	0x08006c18
 800530c:	08006bec 	.word	0x08006bec

08005310 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005310:	4770      	bx	lr

08005312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005312:	e7fe      	b.n	8005312 <HardFault_Handler>

08005314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005314:	e7fe      	b.n	8005314 <MemManage_Handler>

08005316 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005316:	e7fe      	b.n	8005316 <BusFault_Handler>

08005318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005318:	e7fe      	b.n	8005318 <UsageFault_Handler>

0800531a <SVC_Handler>:
 800531a:	4770      	bx	lr

0800531c <DebugMon_Handler>:
 800531c:	4770      	bx	lr

0800531e <PendSV_Handler>:
 800531e:	4770      	bx	lr

08005320 <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//Delay_us(990);
	SysTick_Callback();
 8005320:	f7ff bb14 	b.w	800494c <SysTick_Callback>

08005324 <DMA1_Channel1_IRQHandler>:
 8005324:	4770      	bx	lr
	...

08005328 <USART1_IRQHandler>:
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

	if ( (USART1->SR & USART_SR_TXE) != 0 ) //if(LL_USART_IsActiveFlag_TXE(USART1)) //прерывание по передачи
 8005328:	4914      	ldr	r1, [pc, #80]	; (800537c <USART1_IRQHandler+0x54>)
 800532a:	680b      	ldr	r3, [r1, #0]
 800532c:	061b      	lsls	r3, r3, #24
 800532e:	d524      	bpl.n	800537a <USART1_IRQHandler+0x52>
	{
		if (bufferUart1.tx_counter > 0) //если есть что передать
 8005330:	4b13      	ldr	r3, [pc, #76]	; (8005380 <USART1_IRQHandler+0x58>)
 8005332:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005336:	b292      	uxth	r2, r2
 8005338:	b1da      	cbz	r2, 8005372 <USART1_IRQHandler+0x4a>
	    {
	      --bufferUart1.tx_counter; // уменьшаем количество не переданных данных
 800533a:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800533e:	3a01      	subs	r2, #1
 8005340:	b292      	uxth	r2, r2
 8005342:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	      //LL_USART_TransmitData8(USART1,tx_buffer[tx_rd_index++]);
	      USART1->DR = bufferUart1.tx_buffer[bufferUart1.tx_rd_index++]; //передаем данные инкрементируя хвост буфера
 8005346:	f8b3 2456 	ldrh.w	r2, [r3, #1110]	; 0x456
 800534a:	b292      	uxth	r2, r2
 800534c:	1c50      	adds	r0, r2, #1
 800534e:	b280      	uxth	r0, r0
 8005350:	f8a3 0456 	strh.w	r0, [r3, #1110]	; 0x456
 8005354:	441a      	add	r2, r3
 8005356:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	604a      	str	r2, [r1, #4]
	      if (bufferUart1.tx_rd_index == TX_BUFFER_SIZE) bufferUart1.tx_rd_index=0; //идем по кругу
 800535e:	f8b3 2456 	ldrh.w	r2, [r3, #1110]	; 0x456
 8005362:	b292      	uxth	r2, r2
 8005364:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005368:	d107      	bne.n	800537a <USART1_IRQHandler+0x52>
 800536a:	2200      	movs	r2, #0
 800536c:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
 8005370:	4770      	bx	lr
	    }
	    else //если нечего передать, запрещаем прерывание по передачи
	    {
	    	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8005372:	68cb      	ldr	r3, [r1, #12]
 8005374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005378:	60cb      	str	r3, [r1, #12]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800537a:	4770      	bx	lr
 800537c:	40013800 	.word	0x40013800
 8005380:	200002b8 	.word	0x200002b8

08005384 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005384:	4770      	bx	lr
	...

08005388 <SystemCoreClockUpdate>:
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005388:	4a12      	ldr	r2, [pc, #72]	; (80053d4 <SystemCoreClockUpdate+0x4c>)
{
 800538a:	b510      	push	{r4, lr}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800538c:	6853      	ldr	r3, [r2, #4]
 800538e:	4912      	ldr	r1, [pc, #72]	; (80053d8 <SystemCoreClockUpdate+0x50>)
 8005390:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8005394:	2b08      	cmp	r3, #8
 8005396:	d00a      	beq.n	80053ae <SystemCoreClockUpdate+0x26>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8005398:	4b10      	ldr	r3, [pc, #64]	; (80053dc <SystemCoreClockUpdate+0x54>)
      else
      {
 #if defined(STM32F100xB) || defined(STM32F100xE)
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 800539a:	600b      	str	r3, [r1, #0]
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800539c:	6853      	ldr	r3, [r2, #4]
 800539e:	4a10      	ldr	r2, [pc, #64]	; (80053e0 <SystemCoreClockUpdate+0x58>)
 80053a0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80053a4:	5cd2      	ldrb	r2, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80053a6:	680b      	ldr	r3, [r1, #0]
 80053a8:	40d3      	lsrs	r3, r2
 80053aa:	600b      	str	r3, [r1, #0]
}
 80053ac:	bd10      	pop	{r4, pc}
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80053ae:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80053b0:	6850      	ldr	r0, [r2, #4]
      pllmull = ( pllmull >> 18U) + 2U;
 80053b2:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00U)
 80053b6:	03c0      	lsls	r0, r0, #15
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 80053b8:	bf41      	itttt	mi
 80053ba:	6ad0      	ldrmi	r0, [r2, #44]	; 0x2c
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 80053bc:	4c07      	ldrmi	r4, [pc, #28]	; (80053dc <SystemCoreClockUpdate+0x54>)
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 80053be:	f000 000f 	andmi.w	r0, r0, #15
 80053c2:	3001      	addmi	r0, #1
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 80053c4:	bf4c      	ite	mi
 80053c6:	fbb4 f0f0 	udivmi	r0, r4, r0
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 80053ca:	4806      	ldrpl	r0, [pc, #24]	; (80053e4 <SystemCoreClockUpdate+0x5c>)
      pllmull = ( pllmull >> 18U) + 2U;
 80053cc:	3302      	adds	r3, #2
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 80053ce:	4343      	muls	r3, r0
 80053d0:	e7e3      	b.n	800539a <SystemCoreClockUpdate+0x12>
 80053d2:	bf00      	nop
 80053d4:	40021000 	.word	0x40021000
 80053d8:	2000028c 	.word	0x2000028c
 80053dc:	007a1200 	.word	0x007a1200
 80053e0:	08006ff2 	.word	0x08006ff2
 80053e4:	003d0900 	.word	0x003d0900

080053e8 <printToBufferUART1>:



void printToBufferUART1(volatile char* str)//10us for one char 24Mgz
{
	while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем
 80053e8:	4a32      	ldr	r2, [pc, #200]	; (80054b4 <printToBufferUART1+0xcc>)
{
 80053ea:	b530      	push	{r4, r5, lr}
 80053ec:	4613      	mov	r3, r2
	while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем
 80053ee:	f240 34c9 	movw	r4, #969	; 0x3c9
 80053f2:	f8b2 1458 	ldrh.w	r1, [r2, #1112]	; 0x458
 80053f6:	428c      	cmp	r4, r1
 80053f8:	d3fb      	bcc.n	80053f2 <printToBufferUART1+0xa>

	//LL_USART_DisableIT_TXE(USART1); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80053fa:	492f      	ldr	r1, [pc, #188]	; (80054b8 <printToBufferUART1+0xd0>)
 80053fc:	68ca      	ldr	r2, [r1, #12]
 80053fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005402:	60ca      	str	r2, [r1, #12]

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005404:	2100      	movs	r1, #0
	while (*str != 0)
 8005406:	7802      	ldrb	r2, [r0, #0]
 8005408:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800540c:	bb4a      	cbnz	r2, 8005462 <printToBufferUART1+0x7a>
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif
	}
	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 800540e:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005412:	b292      	uxth	r2, r2
 8005414:	1c51      	adds	r1, r2, #1
 8005416:	b289      	uxth	r1, r1
 8005418:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 800541c:	210a      	movs	r1, #10
 800541e:	441a      	add	r2, r3
 8005420:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005424:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005428:	b292      	uxth	r2, r2
 800542a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800542e:	bf08      	it	eq
 8005430:	f8a3 4454 	strheq.w	r4, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8005434:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005438:	3201      	adds	r2, #1
 800543a:	b292      	uxth	r2, r2
 800543c:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8005440:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 8005444:	f8b3 1458 	ldrh.w	r1, [r3, #1112]	; 0x458
 8005448:	4291      	cmp	r1, r2
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800544a:	bf82      	ittt	hi
 800544c:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
 8005450:	b292      	uxthhi	r2, r2
 8005452:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART1); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 8005456:	4a18      	ldr	r2, [pc, #96]	; (80054b8 <printToBufferUART1+0xd0>)
 8005458:	68d3      	ldr	r3, [r2, #12]
 800545a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545e:	60d3      	str	r3, [r2, #12]
}
 8005460:	bd30      	pop	{r4, r5, pc}
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 8005462:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005466:	1c44      	adds	r4, r0, #1
 8005468:	b292      	uxth	r2, r2
 800546a:	1c55      	adds	r5, r2, #1
 800546c:	b2ad      	uxth	r5, r5
 800546e:	f8a3 5454 	strh.w	r5, [r3, #1108]	; 0x454
 8005472:	7800      	ldrb	r0, [r0, #0]
 8005474:	441a      	add	r2, r3
 8005476:	b2c0      	uxtb	r0, r0
 8005478:	f882 006c 	strb.w	r0, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800547c:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005480:	b292      	uxth	r2, r2
 8005482:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005486:	bf08      	it	eq
 8005488:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 800548c:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005490:	3201      	adds	r2, #1
 8005492:	b292      	uxth	r2, r2
 8005494:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8005498:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 800549c:	f8b3 0458 	ldrh.w	r0, [r3, #1112]	; 0x458
 80054a0:	4290      	cmp	r0, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80054a2:	bf88      	it	hi
 80054a4:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
{
 80054a8:	4620      	mov	r0, r4
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80054aa:	bf84      	itt	hi
 80054ac:	b292      	uxthhi	r2, r2
 80054ae:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 80054b2:	e7a8      	b.n	8005406 <printToBufferUART1+0x1e>
 80054b4:	200002b8 	.word	0x200002b8
 80054b8:	40013800 	.word	0x40013800

080054bc <printToBufferWithoutEndUART1>:


void printToBufferWithoutEndUART1(volatile char* str)//10us for one char 24Mgz
{
	while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем
 80054bc:	4a1f      	ldr	r2, [pc, #124]	; (800553c <printToBufferWithoutEndUART1+0x80>)
{
 80054be:	b530      	push	{r4, r5, lr}
 80054c0:	4613      	mov	r3, r2
	while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем
 80054c2:	f240 34c9 	movw	r4, #969	; 0x3c9
 80054c6:	f8b2 1458 	ldrh.w	r1, [r2, #1112]	; 0x458
 80054ca:	428c      	cmp	r4, r1
 80054cc:	d3fb      	bcc.n	80054c6 <printToBufferWithoutEndUART1+0xa>

	//LL_USART_DisableIT_TXE(USART1); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80054ce:	491c      	ldr	r1, [pc, #112]	; (8005540 <printToBufferWithoutEndUART1+0x84>)
 80054d0:	68ca      	ldr	r2, [r1, #12]
 80054d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054d6:	60ca      	str	r2, [r1, #12]

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80054d8:	2100      	movs	r1, #0
	while (*str != 0)
 80054da:	7802      	ldrb	r2, [r0, #0]
 80054dc:	b92a      	cbnz	r2, 80054ea <printToBufferWithoutEndUART1+0x2e>
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif

	}
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 80054de:	4a18      	ldr	r2, [pc, #96]	; (8005540 <printToBufferWithoutEndUART1+0x84>)
 80054e0:	68d3      	ldr	r3, [r2, #12]
 80054e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e6:	60d3      	str	r3, [r2, #12]
}
 80054e8:	bd30      	pop	{r4, r5, pc}
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80054ea:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80054ee:	1c44      	adds	r4, r0, #1
 80054f0:	b292      	uxth	r2, r2
 80054f2:	1c55      	adds	r5, r2, #1
 80054f4:	b2ad      	uxth	r5, r5
 80054f6:	f8a3 5454 	strh.w	r5, [r3, #1108]	; 0x454
 80054fa:	7800      	ldrb	r0, [r0, #0]
 80054fc:	441a      	add	r2, r3
 80054fe:	b2c0      	uxtb	r0, r0
 8005500:	f882 006c 	strb.w	r0, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005504:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005508:	b292      	uxth	r2, r2
 800550a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800550e:	bf08      	it	eq
 8005510:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8005514:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005518:	3201      	adds	r2, #1
 800551a:	b292      	uxth	r2, r2
 800551c:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8005520:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 8005524:	f8b3 0458 	ldrh.w	r0, [r3, #1112]	; 0x458
 8005528:	4290      	cmp	r0, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800552a:	bf88      	it	hi
 800552c:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
{
 8005530:	4620      	mov	r0, r4
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005532:	bf84      	itt	hi
 8005534:	b292      	uxthhi	r2, r2
 8005536:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 800553a:	e7ce      	b.n	80054da <printToBufferWithoutEndUART1+0x1e>
 800553c:	200002b8 	.word	0x200002b8
 8005540:	40013800 	.word	0x40013800

08005544 <printToBufferUART1D>:

void printToBufferUART1D(volatile char* str, volatile int32_t value, volatile uint8_t koma) //10us for one char + 6us for one digit 24Mgz
{
 8005544:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005546:	9101      	str	r1, [sp, #4]
 8005548:	f88d 2003 	strb.w	r2, [sp, #3]
	char *str1;
	if (koma == 0)
 800554c:	f89d 3003 	ldrb.w	r3, [sp, #3]
{
 8005550:	4604      	mov	r4, r0
		str1 = itoa(value);
 8005552:	9801      	ldr	r0, [sp, #4]
	if (koma == 0)
 8005554:	2b00      	cmp	r3, #0
 8005556:	d144      	bne.n	80055e2 <printToBufferUART1D+0x9e>
		str1 = itoa(value);
 8005558:	f7fb fed6 	bl	8001308 <itoa>
	else
		str1 = itoa_koma(value,koma);

	while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем
 800555c:	4a49      	ldr	r2, [pc, #292]	; (8005684 <printToBufferUART1D+0x140>)
 800555e:	f240 35c9 	movw	r5, #969	; 0x3c9
 8005562:	4613      	mov	r3, r2
 8005564:	f8b2 1458 	ldrh.w	r1, [r2, #1112]	; 0x458
 8005568:	428d      	cmp	r5, r1
 800556a:	d3fb      	bcc.n	8005564 <printToBufferUART1D+0x20>
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800556c:	2500      	movs	r5, #0
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 800556e:	4946      	ldr	r1, [pc, #280]	; (8005688 <printToBufferUART1D+0x144>)
 8005570:	68ca      	ldr	r2, [r1, #12]
 8005572:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005576:	60ca      	str	r2, [r1, #12]
	while (*str != 0)
 8005578:	7822      	ldrb	r2, [r4, #0]
 800557a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800557e:	2a00      	cmp	r2, #0
 8005580:	d134      	bne.n	80055ec <printToBufferUART1D+0xa8>
 8005582:	3801      	subs	r0, #1

	}

	while (*str1 != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 8005584:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
	while (*str1 != 0)
 8005588:	f810 4f01 	ldrb.w	r4, [r0, #1]!
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 800558c:	b292      	uxth	r2, r2
	while (*str1 != 0)
 800558e:	2c00      	cmp	r4, #0
 8005590:	d155      	bne.n	800563e <printToBufferUART1D+0xfa>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif

	}

	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 8005592:	1c51      	adds	r1, r2, #1
 8005594:	b289      	uxth	r1, r1
 8005596:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 800559a:	210a      	movs	r1, #10
 800559c:	441a      	add	r2, r3
 800559e:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80055a2:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80055a6:	b292      	uxth	r2, r2
 80055a8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80055ac:	bf08      	it	eq
 80055ae:	f8a3 4454 	strheq.w	r4, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80055b2:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80055b6:	3201      	adds	r2, #1
 80055b8:	b292      	uxth	r2, r2
 80055ba:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80055be:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 80055c2:	f8b3 1458 	ldrh.w	r1, [r3, #1112]	; 0x458
 80055c6:	4291      	cmp	r1, r2
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80055c8:	bf82      	ittt	hi
 80055ca:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
 80055ce:	b292      	uxthhi	r2, r2
 80055d0:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART1); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 80055d4:	4a2c      	ldr	r2, [pc, #176]	; (8005688 <printToBufferUART1D+0x144>)
 80055d6:	68d3      	ldr	r3, [r2, #12]
 80055d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055dc:	60d3      	str	r3, [r2, #12]
}
 80055de:	b002      	add	sp, #8
 80055e0:	bd70      	pop	{r4, r5, r6, pc}
		str1 = itoa_koma(value,koma);
 80055e2:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80055e6:	f7fb ff03 	bl	80013f0 <itoa_koma>
 80055ea:	e7b7      	b.n	800555c <printToBufferUART1D+0x18>
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80055ec:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80055f0:	1c61      	adds	r1, r4, #1
 80055f2:	b292      	uxth	r2, r2
 80055f4:	1c56      	adds	r6, r2, #1
 80055f6:	b2b6      	uxth	r6, r6
 80055f8:	f8a3 6454 	strh.w	r6, [r3, #1108]	; 0x454
 80055fc:	7824      	ldrb	r4, [r4, #0]
 80055fe:	441a      	add	r2, r3
 8005600:	b2e4      	uxtb	r4, r4
 8005602:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005606:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800560a:	b292      	uxth	r2, r2
 800560c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005610:	bf08      	it	eq
 8005612:	f8a3 5454 	strheq.w	r5, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8005616:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800561a:	3201      	adds	r2, #1
 800561c:	b292      	uxth	r2, r2
 800561e:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8005622:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 8005626:	f8b3 4458 	ldrh.w	r4, [r3, #1112]	; 0x458
 800562a:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800562c:	bf88      	it	hi
 800562e:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
{
 8005632:	460c      	mov	r4, r1
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005634:	bf84      	itt	hi
 8005636:	b292      	uxthhi	r2, r2
 8005638:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 800563c:	e79c      	b.n	8005578 <printToBufferUART1D+0x34>
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 800563e:	1c54      	adds	r4, r2, #1
 8005640:	b2a4      	uxth	r4, r4
 8005642:	f8a3 4454 	strh.w	r4, [r3, #1108]	; 0x454
 8005646:	7804      	ldrb	r4, [r0, #0]
 8005648:	441a      	add	r2, r3
 800564a:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800564e:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005652:	b292      	uxth	r2, r2
 8005654:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005658:	bf08      	it	eq
 800565a:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 800565e:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005662:	3201      	adds	r2, #1
 8005664:	b292      	uxth	r2, r2
 8005666:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 800566a:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 800566e:	f8b3 4458 	ldrh.w	r4, [r3, #1112]	; 0x458
 8005672:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005674:	bf82      	ittt	hi
 8005676:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
 800567a:	b292      	uxthhi	r2, r2
 800567c:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 8005680:	e780      	b.n	8005584 <printToBufferUART1D+0x40>
 8005682:	bf00      	nop
 8005684:	200002b8 	.word	0x200002b8
 8005688:	40013800 	.word	0x40013800

0800568c <Reset_Handler>:
 800568c:	2100      	movs	r1, #0
 800568e:	e003      	b.n	8005698 <LoopCopyDataInit>

08005690 <CopyDataInit>:
 8005690:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <LoopFillZerobss+0x14>)
 8005692:	585b      	ldr	r3, [r3, r1]
 8005694:	5043      	str	r3, [r0, r1]
 8005696:	3104      	adds	r1, #4

08005698 <LoopCopyDataInit>:
 8005698:	480a      	ldr	r0, [pc, #40]	; (80056c4 <LoopFillZerobss+0x18>)
 800569a:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <LoopFillZerobss+0x1c>)
 800569c:	1842      	adds	r2, r0, r1
 800569e:	429a      	cmp	r2, r3
 80056a0:	d3f6      	bcc.n	8005690 <CopyDataInit>
 80056a2:	4a0a      	ldr	r2, [pc, #40]	; (80056cc <LoopFillZerobss+0x20>)
 80056a4:	e002      	b.n	80056ac <LoopFillZerobss>

080056a6 <FillZerobss>:
 80056a6:	2300      	movs	r3, #0
 80056a8:	f842 3b04 	str.w	r3, [r2], #4

080056ac <LoopFillZerobss>:
 80056ac:	4b08      	ldr	r3, [pc, #32]	; (80056d0 <LoopFillZerobss+0x24>)
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d3f9      	bcc.n	80056a6 <FillZerobss>
 80056b2:	f7ff fe67 	bl	8005384 <SystemInit>
 80056b6:	f000 f9a1 	bl	80059fc <__libc_init_array>
 80056ba:	f7ff fa0f 	bl	8004adc <main>
 80056be:	4770      	bx	lr
 80056c0:	08007014 	.word	0x08007014
 80056c4:	20000000 	.word	0x20000000
 80056c8:	20000290 	.word	0x20000290
 80056cc:	20000290 	.word	0x20000290
 80056d0:	20000a20 	.word	0x20000a20

080056d4 <ADC1_IRQHandler>:
 80056d4:	e7fe      	b.n	80056d4 <ADC1_IRQHandler>

080056d6 <LL_ADC_Init>:
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80056d6:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80056d8:	b510      	push	{r4, lr}
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80056da:	f013 0301 	ands.w	r3, r3, #1
 80056de:	d10d      	bne.n	80056fc <LL_ADC_Init+0x26>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80056e0:	6842      	ldr	r2, [r0, #4]
 80056e2:	684c      	ldr	r4, [r1, #4]
 80056e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056e8:	4322      	orrs	r2, r4
 80056ea:	6042      	str	r2, [r0, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80056ec:	6882      	ldr	r2, [r0, #8]
 80056ee:	6809      	ldr	r1, [r1, #0]
 80056f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056f4:	430a      	orrs	r2, r1
 80056f6:	6082      	str	r2, [r0, #8]
  ErrorStatus status = SUCCESS;
 80056f8:	4618      	mov	r0, r3
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 80056fa:	bd10      	pop	{r4, pc}
    status = ERROR;
 80056fc:	2001      	movs	r0, #1
 80056fe:	e7fc      	b.n	80056fa <LL_ADC_Init+0x24>

08005700 <LL_ADC_REG_Init>:
 8005700:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8005702:	b510      	push	{r4, lr}
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8005704:	07db      	lsls	r3, r3, #31
 8005706:	d41b      	bmi.n	8005740 <LL_ADC_REG_Init+0x40>
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
    {
      MODIFY_REG(ADCx->CR1,
 8005708:	6843      	ldr	r3, [r0, #4]
  if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800570a:	684a      	ldr	r2, [r1, #4]
      MODIFY_REG(ADCx->CR1,
 800570c:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8005710:	b112      	cbz	r2, 8005718 <LL_ADC_REG_Init+0x18>
      MODIFY_REG(ADCx->CR1,
 8005712:	688c      	ldr	r4, [r1, #8]
 8005714:	4313      	orrs	r3, r2
 8005716:	4323      	orrs	r3, r4
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8005718:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800571a:	6883      	ldr	r3, [r0, #8]
 800571c:	680c      	ldr	r4, [r1, #0]
 800571e:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8005722:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005726:	4323      	orrs	r3, r4
 8005728:	68cc      	ldr	r4, [r1, #12]
 800572a:	6909      	ldr	r1, [r1, #16]
 800572c:	4323      	orrs	r3, r4
 800572e:	430b      	orrs	r3, r1
 8005730:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005732:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005734:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005738:	4313      	orrs	r3, r2
 800573a:	62c3      	str	r3, [r0, #44]	; 0x2c
  ErrorStatus status = SUCCESS;
 800573c:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 800573e:	bd10      	pop	{r4, pc}
    status = ERROR;
 8005740:	2001      	movs	r0, #1
 8005742:	e7fc      	b.n	800573e <LL_ADC_REG_Init+0x3e>

08005744 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8005748:	680c      	ldr	r4, [r1, #0]
 800574a:	f3c4 240f 	ubfx	r4, r4, #8, #16
 800574e:	fa94 f2a4 	rbit	r2, r4
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8005752:	f04f 0a0f 	mov.w	sl, #15
  pinpos = POSITION_VAL(pinmask);
 8005756:	fab2 f282 	clz	r2, r2
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800575a:	f04f 0903 	mov.w	r9, #3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800575e:	2704      	movs	r7, #4
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8005760:	f04f 1c01 	mov.w	ip, #65537	; 0x10001
        currentpin = (0x00000101uL << pinpos);
 8005764:	f240 1e01 	movw	lr, #257	; 0x101
  while ((pinmask  >> pinpos) != 0u)
 8005768:	fa34 f302 	lsrs.w	r3, r4, r2
 800576c:	d102      	bne.n	8005774 <LL_GPIO_Init+0x30>
      }
    }
    pinpos++;
  }
  return (SUCCESS);
}
 800576e:	4618      	mov	r0, r3
 8005770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pinmask & (1u << pinpos)) != 0u)
 8005774:	2301      	movs	r3, #1
 8005776:	4093      	lsls	r3, r2
 8005778:	4223      	tst	r3, r4
 800577a:	d05e      	beq.n	800583a <LL_GPIO_Init+0xf6>
      if (pinpos < GPIO_PIN_MASK_POS)
 800577c:	2a07      	cmp	r2, #7
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800577e:	bf85      	ittet	hi
 8005780:	f1a2 0308 	subhi.w	r3, r2, #8
 8005784:	fa0c f303 	lslhi.w	r3, ip, r3
        currentpin = (0x00000101uL << pinpos);
 8005788:	fa0e f302 	lslls.w	r3, lr, r2
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800578c:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8005790:	68c5      	ldr	r5, [r0, #12]
 8005792:	0a1e      	lsrs	r6, r3, #8
 8005794:	fa96 f8a6 	rbit	r8, r6
 8005798:	fab8 f888 	clz	r8, r8
 800579c:	ea25 0606 	bic.w	r6, r5, r6
 80057a0:	690d      	ldr	r5, [r1, #16]
 80057a2:	fa05 f508 	lsl.w	r5, r5, r8
 80057a6:	4335      	orrs	r5, r6
 80057a8:	60c5      	str	r5, [r0, #12]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80057aa:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80057ae:	fa93 f6a3 	rbit	r6, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80057b2:	fab6 f686 	clz	r6, r6
 80057b6:	fa93 fba3 	rbit	fp, r3
 80057ba:	fabb fb8b 	clz	fp, fp
 80057be:	00b6      	lsls	r6, r6, #2
 80057c0:	fa0a f506 	lsl.w	r5, sl, r6
 80057c4:	f850 6008 	ldr.w	r6, [r0, r8]
 80057c8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80057cc:	ea26 0605 	bic.w	r6, r6, r5
 80057d0:	684d      	ldr	r5, [r1, #4]
 80057d2:	fa05 fb0b 	lsl.w	fp, r5, fp
 80057d6:	ea46 060b 	orr.w	r6, r6, fp
 80057da:	f840 6008 	str.w	r6, [r0, r8]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80057de:	684d      	ldr	r5, [r1, #4]
 80057e0:	f025 0508 	bic.w	r5, r5, #8
 80057e4:	2d01      	cmp	r5, #1
 80057e6:	d128      	bne.n	800583a <LL_GPIO_Init+0xf6>
 80057e8:	fa93 f5a3 	rbit	r5, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80057ec:	fab5 f585 	clz	r5, r5
 80057f0:	fa93 fba3 	rbit	fp, r3
 80057f4:	fabb fb8b 	clz	fp, fp
 80057f8:	00ad      	lsls	r5, r5, #2
 80057fa:	fa09 f505 	lsl.w	r5, r9, r5
 80057fe:	ea26 0605 	bic.w	r6, r6, r5
 8005802:	688d      	ldr	r5, [r1, #8]
 8005804:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005808:	fa05 fb0b 	lsl.w	fp, r5, fp
 800580c:	ea46 060b 	orr.w	r6, r6, fp
 8005810:	f840 6008 	str.w	r6, [r0, r8]
 8005814:	fa93 f5a3 	rbit	r5, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8005818:	fab5 f585 	clz	r5, r5
 800581c:	fa93 f3a3 	rbit	r3, r3
 8005820:	fab3 f383 	clz	r3, r3
 8005824:	00ad      	lsls	r5, r5, #2
 8005826:	fa07 f505 	lsl.w	r5, r7, r5
 800582a:	ea26 0505 	bic.w	r5, r6, r5
 800582e:	68ce      	ldr	r6, [r1, #12]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	409e      	lsls	r6, r3
 8005834:	432e      	orrs	r6, r5
 8005836:	f840 6008 	str.w	r6, [r0, r8]
    pinpos++;
 800583a:	3201      	adds	r2, #1
 800583c:	e794      	b.n	8005768 <LL_GPIO_Init+0x24>
	...

08005840 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005840:	4b03      	ldr	r3, [pc, #12]	; (8005850 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005842:	4a04      	ldr	r2, [pc, #16]	; (8005854 <RCC_GetHCLKClockFreq+0x14>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800584a:	5cd3      	ldrb	r3, [r2, r3]
}
 800584c:	40d8      	lsrs	r0, r3
 800584e:	4770      	bx	lr
 8005850:	40021000 	.word	0x40021000
 8005854:	08006ff2 	.word	0x08006ff2

08005858 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005858:	4b03      	ldr	r3, [pc, #12]	; (8005868 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800585a:	4a04      	ldr	r2, [pc, #16]	; (800586c <RCC_GetPCLK1ClockFreq+0x14>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005862:	5cd3      	ldrb	r3, [r2, r3]
}
 8005864:	40d8      	lsrs	r0, r3
 8005866:	4770      	bx	lr
 8005868:	40021000 	.word	0x40021000
 800586c:	08007002 	.word	0x08007002

08005870 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005870:	4b03      	ldr	r3, [pc, #12]	; (8005880 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005872:	4a04      	ldr	r2, [pc, #16]	; (8005884 <RCC_GetPCLK2ClockFreq+0x14>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800587a:	5cd3      	ldrb	r3, [r2, r3]
}
 800587c:	40d8      	lsrs	r0, r3
 800587e:	4770      	bx	lr
 8005880:	40021000 	.word	0x40021000
 8005884:	08007002 	.word	0x08007002

08005888 <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8005888:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <RCC_PLL_GetFreqDomain_SYS+0x28>)
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8005890:	b162      	cbz	r2, 80058ac <RCC_PLL_GetFreqDomain_SYS+0x24>
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 8005892:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8005894:	4a07      	ldr	r2, [pc, #28]	; (80058b4 <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 8005896:	f000 000f 	and.w	r0, r0, #15
 800589a:	3001      	adds	r0, #1
 800589c:	fbb2 f0f0 	udiv	r0, r2, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80058a0:	685b      	ldr	r3, [r3, #4]

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80058a2:	f3c3 4383 	ubfx	r3, r3, #18, #4
 80058a6:	3302      	adds	r3, #2
}
 80058a8:	4358      	muls	r0, r3
 80058aa:	4770      	bx	lr
      pllinputfreq = HSI_VALUE / 2U;
 80058ac:	4802      	ldr	r0, [pc, #8]	; (80058b8 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 80058ae:	e7f7      	b.n	80058a0 <RCC_PLL_GetFreqDomain_SYS+0x18>
 80058b0:	40021000 	.word	0x40021000
 80058b4:	007a1200 	.word	0x007a1200
 80058b8:	003d0900 	.word	0x003d0900

080058bc <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80058bc:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <RCC_GetSystemClockFreq+0x14>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d101      	bne.n	80058cc <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80058c8:	f7ff bfde 	b.w	8005888 <RCC_PLL_GetFreqDomain_SYS>
}
 80058cc:	4801      	ldr	r0, [pc, #4]	; (80058d4 <RCC_GetSystemClockFreq+0x18>)
 80058ce:	4770      	bx	lr
 80058d0:	40021000 	.word	0x40021000
 80058d4:	007a1200 	.word	0x007a1200

080058d8 <LL_RCC_GetSystemClocksFreq>:
{
 80058d8:	b508      	push	{r3, lr}
 80058da:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80058dc:	f7ff ffee 	bl	80058bc <RCC_GetSystemClockFreq>
 80058e0:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80058e2:	f7ff ffad 	bl	8005840 <RCC_GetHCLKClockFreq>
 80058e6:	6048      	str	r0, [r1, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80058e8:	f7ff ffb6 	bl	8005858 <RCC_GetPCLK1ClockFreq>
 80058ec:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80058ee:	6848      	ldr	r0, [r1, #4]
 80058f0:	f7ff ffbe 	bl	8005870 <RCC_GetPCLK2ClockFreq>
 80058f4:	60c8      	str	r0, [r1, #12]
}
 80058f6:	bd08      	pop	{r3, pc}

080058f8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80058f8:	b530      	push	{r4, r5, lr}
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80058fa:	68c3      	ldr	r3, [r0, #12]
 80058fc:	b085      	sub	sp, #20
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80058fe:	049b      	lsls	r3, r3, #18
{
 8005900:	4604      	mov	r4, r0
 8005902:	460d      	mov	r5, r1
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005904:	d502      	bpl.n	800590c <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 8005906:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8005908:	b005      	add	sp, #20
 800590a:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 800590c:	684b      	ldr	r3, [r1, #4]
 800590e:	68c9      	ldr	r1, [r1, #12]
 8005910:	68c2      	ldr	r2, [r0, #12]
 8005912:	430b      	orrs	r3, r1
 8005914:	6929      	ldr	r1, [r5, #16]
 8005916:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 800591a:	430b      	orrs	r3, r1
 800591c:	69a9      	ldr	r1, [r5, #24]
 800591e:	f022 020c 	bic.w	r2, r2, #12
 8005922:	430b      	orrs	r3, r1
 8005924:	4313      	orrs	r3, r2
 8005926:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005928:	6903      	ldr	r3, [r0, #16]
 800592a:	68aa      	ldr	r2, [r5, #8]
 800592c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005930:	4313      	orrs	r3, r2
 8005932:	6103      	str	r3, [r0, #16]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005934:	6943      	ldr	r3, [r0, #20]
 8005936:	696a      	ldr	r2, [r5, #20]
 8005938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800593c:	4313      	orrs	r3, r2
 800593e:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005940:	4668      	mov	r0, sp
 8005942:	f7ff ffc9 	bl	80058d8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005946:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <LL_USART_Init+0xd0>)
 8005948:	429c      	cmp	r4, r3
 800594a:	d125      	bne.n	8005998 <LL_USART_Init+0xa0>
      periphclk = rcc_clocks.PCLK2_Frequency;
 800594c:	9903      	ldr	r1, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800594e:	2900      	cmp	r1, #0
 8005950:	d0d9      	beq.n	8005906 <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 8005952:	682a      	ldr	r2, [r5, #0]
 8005954:	2a00      	cmp	r2, #0
 8005956:	d0d6      	beq.n	8005906 <LL_USART_Init+0xe>
 8005958:	2319      	movs	r3, #25
 800595a:	434b      	muls	r3, r1
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800595c:	69a9      	ldr	r1, [r5, #24]
 800595e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005962:	f04f 0164 	mov.w	r1, #100	; 0x64
 8005966:	d120      	bne.n	80059aa <LL_USART_Init+0xb2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005968:	0052      	lsls	r2, r2, #1
 800596a:	fbb3 f3f2 	udiv	r3, r3, r2
 800596e:	fbb3 f0f1 	udiv	r0, r3, r1
 8005972:	fb01 3310 	mls	r3, r1, r0, r3
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	3332      	adds	r3, #50	; 0x32
 800597a:	fbb3 f3f1 	udiv	r3, r3, r1
 800597e:	b29b      	uxth	r3, r3
 8005980:	f003 0207 	and.w	r2, r3, #7
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800598a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800598e:	4413      	add	r3, r2
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005990:	b29b      	uxth	r3, r3
 8005992:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8005994:	2000      	movs	r0, #0
 8005996:	e7b7      	b.n	8005908 <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 8005998:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <LL_USART_Init+0xd4>)
 800599a:	429c      	cmp	r4, r3
 800599c:	d101      	bne.n	80059a2 <LL_USART_Init+0xaa>
      periphclk = rcc_clocks.PCLK1_Frequency;
 800599e:	9902      	ldr	r1, [sp, #8]
 80059a0:	e7d5      	b.n	800594e <LL_USART_Init+0x56>
    else if (USARTx == USART3)
 80059a2:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <LL_USART_Init+0xd8>)
 80059a4:	429c      	cmp	r4, r3
 80059a6:	d1ae      	bne.n	8005906 <LL_USART_Init+0xe>
 80059a8:	e7f9      	b.n	800599e <LL_USART_Init+0xa6>
 80059aa:	0092      	lsls	r2, r2, #2
 80059ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80059b0:	fbb3 f2f1 	udiv	r2, r3, r1
 80059b4:	fb01 3312 	mls	r3, r1, r2, r3
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	3332      	adds	r3, #50	; 0x32
 80059bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80059c0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80059c4:	e7e4      	b.n	8005990 <LL_USART_Init+0x98>
 80059c6:	bf00      	nop
 80059c8:	40013800 	.word	0x40013800
 80059cc:	40004400 	.word	0x40004400
 80059d0:	40004800 	.word	0x40004800

080059d4 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80059d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059d8:	fbb0 f0f3 	udiv	r0, r0, r3
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80059dc:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80059de:	4b03      	ldr	r3, [pc, #12]	; (80059ec <LL_Init1msTick+0x18>)
 80059e0:	3801      	subs	r0, #1
 80059e2:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80059e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059e6:	2205      	movs	r2, #5
 80059e8:	601a      	str	r2, [r3, #0]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 80059ea:	4770      	bx	lr
 80059ec:	e000e010 	.word	0xe000e010

080059f0 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80059f0:	4b01      	ldr	r3, [pc, #4]	; (80059f8 <LL_SetSystemCoreClock+0x8>)
 80059f2:	6018      	str	r0, [r3, #0]
}
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	2000028c 	.word	0x2000028c

080059fc <__libc_init_array>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	2500      	movs	r5, #0
 8005a00:	4e0c      	ldr	r6, [pc, #48]	; (8005a34 <__libc_init_array+0x38>)
 8005a02:	4c0d      	ldr	r4, [pc, #52]	; (8005a38 <__libc_init_array+0x3c>)
 8005a04:	1ba4      	subs	r4, r4, r6
 8005a06:	10a4      	asrs	r4, r4, #2
 8005a08:	42a5      	cmp	r5, r4
 8005a0a:	d109      	bne.n	8005a20 <__libc_init_array+0x24>
 8005a0c:	f000 f82e 	bl	8005a6c <_init>
 8005a10:	2500      	movs	r5, #0
 8005a12:	4e0a      	ldr	r6, [pc, #40]	; (8005a3c <__libc_init_array+0x40>)
 8005a14:	4c0a      	ldr	r4, [pc, #40]	; (8005a40 <__libc_init_array+0x44>)
 8005a16:	1ba4      	subs	r4, r4, r6
 8005a18:	10a4      	asrs	r4, r4, #2
 8005a1a:	42a5      	cmp	r5, r4
 8005a1c:	d105      	bne.n	8005a2a <__libc_init_array+0x2e>
 8005a1e:	bd70      	pop	{r4, r5, r6, pc}
 8005a20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a24:	4798      	blx	r3
 8005a26:	3501      	adds	r5, #1
 8005a28:	e7ee      	b.n	8005a08 <__libc_init_array+0xc>
 8005a2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a2e:	4798      	blx	r3
 8005a30:	3501      	adds	r5, #1
 8005a32:	e7f2      	b.n	8005a1a <__libc_init_array+0x1e>
 8005a34:	0800700c 	.word	0x0800700c
 8005a38:	0800700c 	.word	0x0800700c
 8005a3c:	0800700c 	.word	0x0800700c
 8005a40:	08007010 	.word	0x08007010

08005a44 <memcpy>:
 8005a44:	b510      	push	{r4, lr}
 8005a46:	1e43      	subs	r3, r0, #1
 8005a48:	440a      	add	r2, r1
 8005a4a:	4291      	cmp	r1, r2
 8005a4c:	d100      	bne.n	8005a50 <memcpy+0xc>
 8005a4e:	bd10      	pop	{r4, pc}
 8005a50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a58:	e7f7      	b.n	8005a4a <memcpy+0x6>

08005a5a <memset>:
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	4402      	add	r2, r0
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d100      	bne.n	8005a64 <memset+0xa>
 8005a62:	4770      	bx	lr
 8005a64:	f803 1b01 	strb.w	r1, [r3], #1
 8005a68:	e7f9      	b.n	8005a5e <memset+0x4>
	...

08005a6c <_init>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	bf00      	nop
 8005a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a72:	bc08      	pop	{r3}
 8005a74:	469e      	mov	lr, r3
 8005a76:	4770      	bx	lr

08005a78 <_fini>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	bf00      	nop
 8005a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7e:	bc08      	pop	{r3}
 8005a80:	469e      	mov	lr, r3
 8005a82:	4770      	bx	lr
